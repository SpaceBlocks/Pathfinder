{"version":3,"sources":["view/navbar/TopBar.tsx","view/navbar/Buttons.tsx","view/navbar/DropDown.tsx","view/navbar/DropDownComponents.tsx","view/utility/DraggablePanel.tsx","view/grid/GridBackground.tsx","pathfinding/core/Components.ts","pathfinding/core/Grid.ts","view/grid/TileFg.tsx","view/grid/SolidFg.tsx","view/web-content/weight.svg","view/grid/WeightFg.tsx","view/grid/GridForeground.tsx","view/grid/StatsPanel.tsx","pathfinding/core/PlusNavigator.ts","pathfinding/core/Navigator.ts","pathfinding/algorithms/Heuristics.ts","pathfinding/structures/Hash.ts","pathfinding/structures/Heap.ts","pathfinding/algorithms/Pathfinder.ts","pathfinding/algorithms/Node.ts","pathfinding/algorithms/AStar.ts","pathfinding/algorithms/BFS.ts","pathfinding/structures/Stack.ts","pathfinding/algorithms/DFS.ts","pathfinding/algorithms/BidirectionalAStar.ts","pathfinding/algorithms/BidirectionalBFS.ts","pathfinding/algorithms/PathfinderBuilder.ts","view/utility/VirtualTimer.ts","pathfinding/algorithms/TerrainGenerator.ts","pathfinding/algorithms/TerrainRandomGenerator.ts","pathfinding/algorithms/TerrainMazeGenerator.ts","pathfinding/algorithms/TerrainGeneratorBuilder.ts","view/grid/PathfindingVisualizer.tsx","view/utility/Checkbox.tsx","view/utility/SteppedRangeSlider.tsx","view/utility/RadioButtonGroup.tsx","view/navbar/SettingPanels.tsx","view/SettingsManager.ts","view/PathfindingSettings.ts","view/web-content/react.png","view/PathfindingApp.tsx","App.tsx","index.tsx"],"names":["TopBar","bar","React","createRef","ref","this","style","width","window","screen","availWidth","className","props","children","Component","SYMBOL_COLOR","DIMENSION","VisualizeButton","height","rx","fill","points","x","active","onMouseDown","e","preventDefault","onClick","paused","onResume","onPause","xmlns","getResumeSymbol","getPauseSymbol","onStartStop","getStopSymbol","SettingsButton","DropDown","show","setState","up","display","hide","toggle","stopPropagation","isHidden","state","contentStyle","Clickable","tabIndex","onKeyPress","click","AlgorithmDropDown","onChange","key","algText","text","arrowClass","fade","nativeEvent","ClearDropDown","onClickPath","onClickTiles","onClickReset","MazeDropDown","onClickMaze","onClickMazeHorizontal","onClickMazeVertical","onClickRandomTerrain","TilesDropDown","cost","onClickTileType","DraggablePanel","draggable","draggableContainer","draggableContent","dragging","prevX","prevY","mouseDown","clientY","clientX","touchStart","touch","touches","changedTouches","mouseUp","mouseMove","drag","touchMove","container","current","top","offsetTop","left","offsetLeft","content","innerHeight","innerWidth","offsetHeight","offsetWidth","getPosition","visibleStyle","renderDraggable","draggableStyle","onTouchStart","title","onClickXButton","document","addEventListener","minHeight","ARROW_COLOR","GridBackground","clear","visualization","createEmptyBg","arrows","doGeneration","generation","point","tile","y","visualizeGeneration","prevState","map","arr","slice","visualizeGenerations","generations","doArrowGeneration","point1","point2","newArrow","from","to","i","length","a","index","indexOf","splice","push","addArrowGeneration","addArrowGenerations","renderArrows","tileWidth","offset","arrow","first","second","firstX","firstY","secondX","secondY","offsetX","offsetY","x1","y1","x2","y2","stroke","strokeWidth","markerEnd","renderTiles","tiles","row","renderTile","color","backgroundColor","tilesX","tilesY","id","markerWidth","markerHeight","refX","refY","orient","createTile","isSolid","pathCost","RectGrid","mutateDefault","solid","mutate","nodes","data","createEmptyGrid","console","str","log","JSON","stringify","grid","mutateTile","get","TileFg","nextProps","prevPoint","nextPoint","size","position","borderColor","SolidFg","doTileAnimation","tileSize","WeightFg","backgroundImage","Weight","opacity","weightOpacity","ARROW_PATH_COLOR","pointsEqual","isControlKey","button","GridForeground","svg","tilePointer","drawing","erasing","draggingInitial","draggingGoal","disable","changeTile","bounds","getBoundingRect","onPress","onDrag","onEndingEvent","xCoordinate","yCoordinate","calculatePoint","initial","goal","isEmpty","drawTile","eraseTile","moveInitial","moveGoal","drawGrid","clone","inBounds","clearTiles","canMoveEndPoint","onTilesDragged","drawPath","path","erasePath","Math","floor","resetPoints","end","calcEndPointInView","renderPath","lines","renderPathArrow","renderTilesTable","fontSize","paddingTop","textAlign","cursor","renderEndTile","round","topMargin","getBoundingClientRect","onContextMenu","onMouseUp","onMouseMove","onMouseLeave","onTouchMoveCapture","onTouchEnd","onTouchCancel","StatsPanel","textLog","scrollTop","scrollHeight","clientHeight","time","toFixed","algorithm","readOnly","value","unselectable","onDrop","PlusNavigator","getWidth","getHeight","b","manhattan","abs","euclidean","dx","dy","sqrt","octile","SQRT2","min","chebyshev","max","nullHeuristic","HashSet","undefined","HashTable","Heap","compare","elements","siftUp","val","peek","move","pop","siftDown","pos","parent","swap","right","child","reconstructPath","bottomLeaf","reconstructPathReversed","reverse","Pathfinder","navigator","recentSearch","node","Node","AStarNode","g","fScore","AStarPathfinder","func","heuristicFunc","p","getNavigator","getGrid","clearRecentSearch","openFrontier","f","closedSet","openSet","root","add","currentNode","currentPoint","currentKey","remove","addRecent","equals","neighbors","neighbor","neighborPoint","neighborKey","has","stepCost","heuristic","neighborNode","addChild","BFSPathfinder","frontier","visited","shift","next","Stack","DFSPathfinder","BiAStarPathfinder","startOpenFrontier","startOpenSet","endOpenFrontier","endOpenSet","initialRoot","goalRoot","startCurrentNode","startCurrentPointKey","concat","doAStarExpansion","endCurrentNode","endCurrentPointKey","structures","endPoint","BiBFSPathfinder","startVisited","endVisited","startFrontier","endFrontier","doBFSExpansion","CREATE_NAVIGATOR","CREATE_HEURISTIC","CREATE_PATHFINDER","PathfinderBuilder","toLowerCase","Error","createHeuristic","createNavigator","createPathfinder","VirtualTimer","callback","countDown","timeout","timeStarted","timeRemaining","finished","Date","now","setTimeout","clearTimeout","TerrainGenerator","ignore","shouldIgnore","TerrainRandomGenerator","tileData","topLeft","bottomRight","random","draw","getTerrain","divideWidthNoSkew","divideWidthHSkew","divideWidthVSkew","canDrawHole","getMidPoint","range","mid","getRand","TerrainMazeGenerator","slant","divideWidth","getSolid","divide","chamber","widthOf","heightOf","randX","toDraw","edgeBlocked","randY","drawArr","leftChamber","rightChamber","topChamber","bottomChamber","TerrainGeneratorBuilder","type","calcLength","len","calcCost","PathfindingVisualizer","background","foreground","stats","visualized","visualizing","visualTimeouts","mazeTile","canShowArrows","settings","showArrows","canShowFrontier","visualizeAlg","pausePathfinding","pause","resumePathfinding","resume","doPathfinding","clearPath","pathfinder","getPathfinder","findPath","getRecentGenerations","doDelayedPathfinding","clearVisualization","toggleDisable","onChangeVisualizing","promises","baseIncrement","delayInc","delay","expandVisualization","expandArrows","forEach","promise","Promise","resolve","all","then","algorithmKey","bidirectional","hasBidirectional","makeBidirectional","setAlgorithm","setHeuristic","heuristicKey","setNavigator","navigatorKey","build","t0","performance","t2","getRecentNodes","getAlgorithmName","unshift","createTerrain","mazeType","newState","prevGrid","generator","setDimensions","setGeneratorType","setIgnorePoints","setTileData","generateTerrain","xEnd","yEnd","xFloor","yFloor","yDecimal","ceil","clearTilesChecked","clearVisualizationChecked","w","outerWidth","h","availHeight","outerHeight","nextState","Checkbox","checked","defaultChecked","disabled","boxStyle","defaultProps","SteppedRangeSlider","Number","currentTarget","default","list","step","sliderStyle","onInput","RadioButtonGroup","Children","toArray","radioButtons","VisualSettings","onChangeViz","onChangeShowArrows","onChangeWOpacity","SpeedSettings","onChangeSpeed","speed","speedText","String","initialSpeed","options","AlgorithmSettings","onChangeBidirectional","HeuristicSettings","enable","onClickManhattan","onClickEuclidean","onClickChebyshev","onClickOctile","SettingsManager","changeAlgo","algo","changeVisualize","changeShowArrows","changeBidirectional","changeSpeed","changeManhattan","changeEuclidean","changeChebyshev","changeOctile","PathfindingApp","visualizer","algDropDown","clrDropDown","mazeDropDown","tilesDropDown","settingsManager","onClickAlgDrop","onClickClrDrop","onClickMazeDrop","onClickTilesDrop","changeVButtonColor","toggleSettings","panelShow","hideSettings","heuristicDisabled","usesHeuristic","bidirectionalDisabled","arrowsDisabled","resetBoard","createMaze","createMazeVSkew","createMazeHSkew","createRandomTerrain","useIcon","mobile","test","userAgent","href","alt","src","Icon","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9769f049.chunk.js","sourcesContent":["import React, {RefObject} from 'react';\r\nimport './Navbar.css'\r\n\r\nclass TopBar extends React.Component\r\n{\r\n    private bar: RefObject<HTMLDivElement> = React.createRef();\r\n\r\n    render() {\r\n        return (\r\n            <div ref={this.bar} style={{\r\n                width: window.screen.availWidth\r\n            }} className='top-navbar'>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TopBar;","import React from 'react';\r\nimport './Navbar.css'\r\n\r\ninterface VProps {\r\n    active: boolean,\r\n    paused: boolean,\r\n    onStartStop: ()  => void,\r\n    onPause: ()  => void,\r\n    onResume: ()  => void,\r\n}\r\n\r\ninterface ButtonProps {\r\n    onClick: ()  => void\r\n}\r\n\r\nconst SYMBOL_COLOR = 'rgb(230,230,230)';\r\nconst OFFSET = 14;\r\nconst DIMENSION = 47 - 2 * OFFSET;\r\n\r\nexport class VisualizeButton extends React.Component<VProps>\r\n{\r\n    getStopSymbol() {\r\n        return (\r\n            <rect width={DIMENSION}\r\n                  height={DIMENSION}\r\n                  rx={4}\r\n                  fill={SYMBOL_COLOR}\r\n            />\r\n        );\r\n    }\r\n\r\n    getResumeSymbol() {\r\n        const midY = DIMENSION / 2;\r\n        return (\r\n            <polygon\r\n                  points={`${0},${0} ${0},${DIMENSION} ${DIMENSION},${midY}`}\r\n                  className={'track round'}\r\n                  fill={SYMBOL_COLOR}\r\n            />\r\n        );\r\n    }\r\n\r\n    getPauseSymbol() {\r\n        return (\r\n            <svg>\r\n                <rect width={DIMENSION/2.5}\r\n                      height={DIMENSION}\r\n                      rx={3}\r\n                      fill={SYMBOL_COLOR}\r\n                />\r\n                <rect width={DIMENSION/2.5}\r\n                      height={DIMENSION}\r\n                      x={0.2*DIMENSION + DIMENSION/2.5}\r\n                      rx={3}\r\n                      fill={SYMBOL_COLOR}\r\n                />\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        if(this.props.active) {\r\n            return (\r\n                <div className={'half-button-wrapper'}>\r\n                    <button onMouseDown={e => e.preventDefault()}\r\n                            className={'center half-button-left red-button half-viz-button'}\r\n                            onClick={this.props.paused ? this.props.onResume : this.props.onPause}\r\n                    >\r\n                        <svg xmlns='http://www.w3.org/2000/svg'\r\n                             className='svg-icon'\r\n                             width={DIMENSION}\r\n                             height={DIMENSION}\r\n                        >\r\n                            {this.props.paused ? this.getResumeSymbol() : this.getPauseSymbol()}\r\n                        </svg>\r\n                    </button>\r\n                    <button onMouseDown={e => e.preventDefault()}\r\n                            className={'center half-button-right red-button half-viz-button'}\r\n                            onClick={this.props.onStartStop}\r\n                    >\r\n                        <svg xmlns='http://www.w3.org/2000/svg'\r\n                             className='svg-icon'\r\n                             width={DIMENSION}\r\n                             height={DIMENSION}\r\n                        >\r\n                            {this.getStopSymbol()}\r\n                        </svg>\r\n                    </button>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <button onMouseDown={e => e.preventDefault()}\r\n                        className={'button green-button viz-button'}\r\n                        onClick={this.props.onStartStop}\r\n                >\r\n                    Visualize!\r\n                </button>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport class SettingsButton extends React.Component<ButtonProps>\r\n{\r\n    render() {\r\n        return (\r\n            <button onMouseDown={e => e.preventDefault()}\r\n                    className='button settings-button'\r\n                    onClick={this.props.onClick}>\r\n                Settings\r\n            </button>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport interface DropDownProps {\r\n    onClick: () => void,\r\n}\r\n\r\nexport interface DropDownState {\r\n    up: boolean,\r\n    display: string,\r\n    fade: string\r\n}\r\n\r\nabstract class DropDown<IProps extends DropDownProps, IState extends DropDownState>\r\n    extends React.Component<IProps, IState>\r\n{\r\n    protected constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    show = () => {\r\n        this.setState({\r\n            up: false,\r\n            display: 'block',\r\n        });\r\n    }\r\n\r\n    hide = () => {\r\n        this.setState({\r\n            display: 'none',\r\n            up: true,\r\n        });\r\n    }\r\n\r\n    toggle = (e: Event) => {\r\n        e.stopPropagation();\r\n        this.props.onClick();\r\n        if(this.isHidden()) {\r\n            this.show();\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    isHidden = () => {\r\n        return this.state.display === 'none';\r\n    }\r\n\r\n    contentStyle = () => {\r\n        return {\r\n            display: this.state.display\r\n        }\r\n    }\r\n}\r\n\r\nexport default DropDown;","import React from 'react';\r\nimport './Navbar.css'\r\nimport DropDown, {DropDownProps, DropDownState} from './DropDown';\r\n\r\ninterface AlgProps extends DropDownProps {\r\n    onChange: (alg: string) => void\r\n}\r\n\r\ninterface DropDownTextState extends DropDownState {\r\n    text: string,\r\n}\r\n\r\ninterface ClrProps extends DropDownProps {\r\n    onClickPath: () => void,\r\n    onClickTiles: () => void,\r\n    onClickReset: () => void;\r\n}\r\n\r\ninterface MazeProps extends DropDownProps {\r\n    onClickMaze: () => void,\r\n    onClickMazeHorizontal: () => void,\r\n    onClickMazeVertical: () => void,\r\n    onClickRandomTerrain: () => void\r\n}\r\n\r\ninterface TileProps extends DropDownProps {\r\n    onClickTileType: (cost: number) => void\r\n}\r\n\r\ninterface ClickableProps {\r\n    click: () => void;\r\n}\r\n\r\nclass Clickable extends React.Component<ClickableProps>\r\n{\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} onKeyPress={this.props.click} onClick={this.props.click}>{this.props.children}</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport class AlgorithmDropDown extends DropDown<AlgProps, DropDownTextState>\r\n{\r\n    constructor(props: AlgProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            text: 'A* Search',\r\n            fade: 'fade-in'\r\n        };\r\n    }\r\n\r\n    onChange = (key: string, algText: string) => {\r\n        this.props.onChange(key);\r\n        this.setState({\r\n            text: algText\r\n        });\r\n    }\r\n\r\n    arrowClass = () => {\r\n        return this.state.up ? 'arrowUp' : 'arrowDown';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} className='alg-drop-down drop-down'\r\n                 onMouseDown={e => e.preventDefault()}\r\n                 onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                 onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='alg-drop-down-button drop-down-button'>\r\n                    <span className='alg-drop-down-text drop-down-text'>{this.state.text}</span>\r\n                    <span className={'alg-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div style={this.contentStyle()}\r\n                     className={this.state.fade + ' alg-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={() => this.onChange('a*', 'A* Search')}>A* Search</Clickable>\r\n                    <Clickable click={() => this.onChange('dijkstra', 'Dijkstra')}>Dijkstra's Algorithm</Clickable>\r\n                    <Clickable click={() => this.onChange('best-first', 'Best First')}>Best First Search</Clickable>\r\n                    <Clickable click={() => this.onChange('bfs', 'Breadth First')}>Breadth First Search</Clickable>\r\n                    <Clickable click={() => this.onChange('dfs', 'Depth First')}>Depth First Search</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class ClearDropDown extends DropDown<ClrProps, DropDownState>\r\n{\r\n    constructor(props: ClrProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            fade: 'fade-in'\r\n        };\r\n    }\r\n\r\n    arrowClass = () => {\r\n        return this.state.up ? 'arrowUpW' : 'arrowDownW';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} className='clr-drop-down drop-down'\r\n                 onMouseDown={e => e.preventDefault()}\r\n                 onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                 onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='clr-drop-down-button drop-down-button'>\r\n                    <span className='clr-drop-down-text drop-down-text'>Reset</span>\r\n                    <span className={'clr-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div style={this.contentStyle()}\r\n                     className={this.state.fade + ' clr-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={this.props.onClickPath}>Clear Path</Clickable>\r\n                    <Clickable click={this.props.onClickTiles}>Clear Tiles</Clickable>\r\n                    <Clickable click={this.props.onClickReset}>Reset Grid</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class MazeDropDown extends DropDown<MazeProps, DropDownState>\r\n{\r\n    constructor(props: MazeProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            fade: 'fade-in'\r\n        };\r\n    }\r\n\r\n    arrowClass = () => {\r\n        return this.state.up ? 'arrowUpW' : 'arrowDownW';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} className='maze-drop-down drop-down'\r\n                 onMouseDown={e => e.preventDefault()}\r\n                 onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                 onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='maze-drop-down-button drop-down-button'>\r\n                    <span className='maze-drop-down-text drop-down-text'>Terrain</span>\r\n                    <span className={'clr-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div style={this.contentStyle()}\r\n                     className={this.state.fade + ' maze-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={this.props.onClickMaze}>Recursive Maze Division</Clickable>\r\n                    <Clickable click={this.props.onClickMazeHorizontal}>Horizontal Skewed Maze</Clickable>\r\n                    <Clickable click={this.props.onClickMazeVertical}>Vertical Skewed Maze</Clickable>\r\n                    <Clickable click={this.props.onClickRandomTerrain}>Random Terrain</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class TilesDropDown extends DropDown<TileProps, DropDownTextState>\r\n{\r\n    constructor(props: TileProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            fade: 'fade-in',\r\n            text: 'Wall [∞]'\r\n        };\r\n    }\r\n\r\n    arrowClass = () => {\r\n        return this.state.up ? 'arrowUpW' : 'arrowDownW';\r\n    }\r\n\r\n    onChange = (cost: number, text: string) => {\r\n        this.props.onClickTileType(cost);\r\n        this.setState({\r\n            text: text\r\n        }, () => this.props.onClickTileType(cost));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} className='tiles-drop-down drop-down'\r\n                 onMouseDown={e => e.preventDefault()}\r\n                 onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                 onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='tiles-drop-down-button drop-down-button'>\r\n                    <span className='tiles-drop-down-text drop-down-text'>{this.state.text}</span>\r\n                    <span className={'clr-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div style={this.contentStyle()}\r\n                     className={this.state.fade + ' tiles-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={() => this.onChange(-1, 'Wall [∞]')}>Wall [∞]</Clickable>\r\n                    <Clickable click={() => this.onChange(2, 'Weight [2]')}>Weight [2]</Clickable>\r\n                    <Clickable click={() => this.onChange(3, 'Weight [3]')}>Weight [3]</Clickable>\r\n                    <Clickable click={() => this.onChange(5, 'Weight [5]')}>Weight [5]</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {RefObject} from 'react';\r\nimport './DraggablePanel.css'\r\n\r\ninterface IProps {\r\n    title: string,\r\n    show: boolean,\r\n    onClickXButton: () => void,\r\n    width: number,\r\n    height: number\r\n}\r\n\r\ninterface IState {\r\n    top: number,\r\n    left: number\r\n}\r\n\r\nclass DraggablePanel extends React.Component<IProps, IState>\r\n{\r\n    //refs are used to access native DOM\r\n    private draggable: RefObject<HTMLDivElement> = React.createRef();\r\n    private draggableContainer: RefObject<HTMLDivElement> = React.createRef();\r\n    private draggableContent: RefObject<HTMLDivElement> = React.createRef();\r\n\r\n    //stores previous mouse location and drag\r\n    private dragging = false;\r\n    private prevX = 0;\r\n    private prevY = 0;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            top: -1,\r\n            left: -1\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        //mouse\r\n        document.addEventListener('mouseup', e => {\r\n            this.mouseUp(e);\r\n        });\r\n        document.addEventListener('mousemove', e => {\r\n            this.mouseMove(e);\r\n        });\r\n        window.addEventListener('mouseleave', e => {\r\n            this.mouseUp(e);\r\n        });\r\n        //touch\r\n        document.addEventListener('touchend', () => {\r\n            this.dragging = false;\r\n        });\r\n        document.addEventListener('touchmove', e => {\r\n            this.touchMove(e);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Start drag and init prev mouse location when mouse is clicked on draggable\r\n     * @param e\r\n     */\r\n    private mouseDown = (e: MouseEvent) => {\r\n        e.preventDefault();\r\n        this.prevY = e.clientY;\r\n        this.prevX = e.clientX;\r\n        this.dragging = true;\r\n    }\r\n\r\n    /**\r\n     * Start drag and init prev touch location when finger is clicked on draggable\r\n     * @param e\r\n     */\r\n    private touchStart = (e: TouchEvent) => {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        this.prevY = touch.clientY;\r\n        this.prevX = touch.clientX;\r\n        this.dragging = true;\r\n    }\r\n\r\n    /**\r\n     * Called when mouse is risen on document stop drag\r\n     * @param e\r\n     */\r\n    private mouseUp = (e: Event) => {\r\n        e.preventDefault();\r\n        this.dragging = false;\r\n    }\r\n\r\n    /**\r\n     * Called when the mouse is moved over the document to calculate the new position of\r\n     * the draggable canvas\r\n     * @param e\r\n     */\r\n    private mouseMove = (e: MouseEvent) => {\r\n        this.drag(e.clientX, e.clientY);\r\n    }\r\n\r\n    /**\r\n     * Called when the touch is moved over the document to calculate the new position of\r\n     * the draggable canvas\r\n     * @param e\r\n     */\r\n    private touchMove = (e: TouchEvent) => {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        this.drag(touch.clientX, touch.clientY);\r\n    }\r\n\r\n    /**\r\n     * Called when user drags over the document to move the panel\r\n     * @param clientX\r\n     * @param clientY\r\n     */\r\n    private drag = (clientX: number, clientY: number) => {\r\n        if(this.dragging) {\r\n            const container = this.draggableContainer.current!;\r\n            let top = (container.offsetTop - (this.prevY - clientY))\r\n            let left = (container.offsetLeft - (this.prevX - clientX));\r\n            const content = this.draggableContent.current!;\r\n            const draggable = this.draggable.current!;\r\n            //stop drag if mouse goes out of bounds\r\n            if(clientY < 0 || clientY > window.innerHeight\r\n                || clientX < 0 || clientX > window.innerWidth) {\r\n                this.dragging = false;\r\n            }\r\n            //check if position is out of bounds and prevent the panel from being dragged there\r\n            if(top < 0) {\r\n                top = 0;\r\n            } else if (top > window.innerHeight - draggable.offsetHeight) {\r\n                top = window.innerHeight - draggable.offsetHeight;\r\n            }\r\n            if(left < -content.offsetWidth/2) {\r\n                left = -content.offsetWidth/2;\r\n            } else if(left > window.innerWidth - content.offsetWidth/2) {\r\n                left = window.innerWidth - content.offsetWidth/2;\r\n            }\r\n            //set new position\r\n            this.setState({\r\n                top: top\r\n            });\r\n            this.setState({\r\n                left: left\r\n            });\r\n            //update previous pos\r\n            this.prevY = clientY;\r\n            this.prevX = clientX;\r\n        }\r\n    }\r\n\r\n    getPosition = () => {\r\n        const left = this.state.left;\r\n        const top = this.state.top;\r\n        if(left === -1 || top === -1) {\r\n            return {};\r\n        }\r\n        return {\r\n            left: left + 'px',\r\n            top: top + 'px',\r\n        };\r\n    }\r\n\r\n    visibleStyle = () => {\r\n        return this.props.show ? 'block' : 'none';\r\n    }\r\n\r\n    draggableStyle() {\r\n        return {\r\n            width: this.props.width,\r\n            display: this.visibleStyle()\r\n        }\r\n    }\r\n\r\n    contentStyle() {\r\n        return {\r\n            width: this.props.width,\r\n            minHeight: this.props.height,\r\n            display: this.visibleStyle()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={this.draggableContainer} className='draggable-container' style={this.getPosition()}>\r\n                {this.renderDraggable()}\r\n                <div ref={this.draggableContent} style={this.contentStyle()} className='draggable-content'>\r\n                    <div className='settings-general'>\r\n                        {this.props.children}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderDraggable = () => {\r\n        return (\r\n            <div style={this.draggableStyle()} className='draggable'\r\n                 ref={this.draggable}\r\n                 onMouseDown={e => this.mouseDown(e.nativeEvent)}\r\n                 onTouchStart={e => this.touchStart(e.nativeEvent)}\r\n            >\r\n                <div className='draggable-title'>{this.props.title}</div>\r\n                <div className='x-button' tabIndex={0}\r\n                     onKeyPress={this.props.onClickXButton}\r\n                     onClick={this.props.onClickXButton}\r\n                     onMouseDown={e => {\r\n                         e.stopPropagation();\r\n                         e.preventDefault();\r\n                     }}\r\n                >\r\n                    <div className='x-text'>\r\n                        X\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DraggablePanel;","import React from 'react';\r\nimport './Grid.css';\r\nimport {Node} from '../../pathfinding/algorithms/Node';\r\nimport {Point} from '../../pathfinding/core/Components';\r\n\r\ninterface Arrow {\r\n    to: Point,\r\n    from: Point\r\n}\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    tilesX: number,\r\n    tilesY: number\r\n}\r\n\r\ninterface IState {\r\n    visualization: string[][],\r\n    arrows: Arrow[]\r\n}\r\n\r\nconst CLOSED_NODE = 'rgb(198, 237, 238)';\r\nconst OPEN_NODE = 'rgb(191, 248, 159)';\r\nconst EMPTY_NODE = 'white';\r\nconst ARROW_COLOR = 'rgb(153,153,153)';\r\n\r\nconst BASE_WIDTH = 27;\r\n\r\nclass GridBackground extends React.Component<IProps,IState>\r\n{\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    /**\r\n     * Constructs a GridBackground with immutable height and width\r\n     * @param props\r\n     */\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.width = this.props.tilesX;\r\n        this.height = this.props.tilesY;\r\n        this.state = {\r\n            visualization: this.createEmptyBg(),\r\n            arrows: []\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a new empty visualization canvas\r\n     */\r\n    createEmptyBg() {\r\n        const visualization = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            const row: string[] = [];\r\n            for(let x = 0; x < this.width; x++) {\r\n                row.push(EMPTY_NODE);\r\n            }\r\n            visualization.push(row);\r\n        }\r\n        return visualization;\r\n    }\r\n\r\n    /**\r\n     * Clear the visualization canvas and update UI\r\n     */\r\n    clear = () => {\r\n        this.setState({\r\n            visualization: this.createEmptyBg(),\r\n            arrows: []\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Perform a generation on a visualization array\r\n     * @param generation\r\n     * @param visualization\r\n     */\r\n    private doGeneration = (generation: Node, visualization: string[][]) => {\r\n        for(const node of generation.children) {\r\n            const point = node.tile.point;\r\n            visualization[point.y][point.x] = OPEN_NODE;\r\n        }\r\n        const point = generation.tile.point;\r\n        visualization[point.y][point.x] = CLOSED_NODE;\r\n        return visualization;\r\n    }\r\n\r\n    /**\r\n     * Visualize generation without updating UI\r\n     * @param generation\r\n     */\r\n    visualizeGeneration = (generation: Node) => {\r\n        this.setState(prevState => ({\r\n            visualization: this.doGeneration(\r\n                generation,\r\n                prevState.visualization.map(\r\n                    (arr) => arr.slice()\r\n                )\r\n            )\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Visualize generation array and update UI\r\n     * @param generations\r\n     */\r\n    visualizeGenerations = (generations: Node[]) => {\r\n        const visualization = this.createEmptyBg();\r\n        for(const generation of generations) {\r\n            this.doGeneration(generation, visualization);\r\n        }\r\n        this.setState({\r\n            visualization: visualization\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Perform an arrow generation on an arrow array\r\n     * @param generation\r\n     * @param arrows\r\n     */\r\n    private doArrowGeneration = (generation: Node, arrows: Arrow[]) => {\r\n        const point = generation.tile.point;\r\n        for(const node of generation.children) {\r\n            const childPoint = node.tile.point;\r\n            const newArrow = {\r\n                from: point,\r\n                to: childPoint,\r\n            };\r\n            //remove a duplicate arrow to indicate replacement\r\n            //in A* for example, we could have re-discovered a better path to a tile\r\n            for(let i = 0; i < arrows.length; i++) {\r\n                const a = arrows[i];\r\n                if(pointsEqual(a.to, newArrow.to)) {\r\n                    const index = arrows.indexOf(a);\r\n                    arrows.splice(index, 1);\r\n                    i--;\r\n                }\r\n            }\r\n            arrows.push(newArrow);\r\n        }\r\n        return arrows;\r\n    }\r\n\r\n    /**\r\n     * Add arrow generation without updating UI\r\n     * @param generation\r\n     */\r\n    addArrowGeneration = (generation: Node) => {\r\n        this.setState(prevState => ({\r\n            arrows: this.doArrowGeneration(\r\n                generation,\r\n                prevState.arrows.slice()\r\n            )\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Add arrow generations and update UI\r\n     * @param generations\r\n     */\r\n    addArrowGenerations = (generations: Node[]) => {\r\n        const arrows: Arrow[] = [];\r\n        for(const generation of generations) {\r\n            this.doArrowGeneration(generation, arrows)\r\n        }\r\n        this.setState({\r\n            arrows: arrows\r\n        });\r\n    }\r\n\r\n    render() {\r\n        // console.timeEnd('time');\r\n        // console.time('time');\r\n        return (\r\n            <div>\r\n                <div className='bg'>\r\n                    {this.renderTiles()}\r\n                </div>\r\n                <svg xmlns='http://www.w3.org/2000/svg' className='bg-grid'>\r\n                    <defs>\r\n                        <marker id='arrowhead' markerWidth='3' markerHeight='3'\r\n                                refX='0' refY='1.5' orient='auto'\r\n                                fill={ARROW_COLOR}\r\n                        >\r\n                            <polygon points='0 0, 3 1.5, 0 3'/>\r\n                        </marker>\r\n                    </defs>\r\n                    {this.renderArrows()}\r\n                </svg>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderArrows = () => {\r\n        const width = this.props.tileWidth;\r\n        const offset = width/2;\r\n        const arrows: JSX.Element[] = [];\r\n        for(let i = 0; i < this.state.arrows.length; i++) {\r\n            //calculate arrow position and dimensions\r\n            const arrow = this.state.arrows[i];\r\n            const first = arrow.from;\r\n            const second = arrow.to;\r\n            const firstX = first.x * width;\r\n            const firstY = first.y * width;\r\n            const secondX = second.x * width;\r\n            const secondY = second.y * width;\r\n            const offsetX = (secondX - firstX)/4;\r\n            const offsetY = (secondY - firstY)/4;\r\n            arrows.push(<line key={'arrow ' + i}\r\n                              x1={firstX + offset + offsetX}\r\n                              y1={firstY + offset + offsetY}\r\n                              x2={secondX + offset - offsetX}\r\n                              y2={secondY + offset - offsetY}\r\n                              stroke={ARROW_COLOR}\r\n                              strokeWidth={2 * this.props.tileWidth/BASE_WIDTH}\r\n                              className='line-arrow'\r\n                              markerEnd='url(#arrowhead)' />);\r\n        }\r\n        return arrows;\r\n    }\r\n\r\n    private renderTiles = () => {\r\n        const tiles: JSX.Element[][] = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            const row: JSX.Element[] = [];\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                };\r\n                row.push(\r\n                    this.renderTile(point, this.state.visualization[point.y][point.x])\r\n                );\r\n            }\r\n            tiles.push(row);\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    private renderTile = (point: Point, color: string) => {\r\n        const width = this.props.tileWidth;\r\n        const top = point.y * this.props.tileWidth;\r\n        const left = point.x * this.props.tileWidth;\r\n        const style = {\r\n            backgroundColor: color,\r\n            width: width + 'px',\r\n            height: width + 'px',\r\n            top: top,\r\n            left: left\r\n        };\r\n        return (\r\n            <div key={point.x + ',' + point.y} style={style} className='tile'/>\r\n        );\r\n    }\r\n}\r\n\r\nfunction pointsEqual(point1: Point, point2: Point) {\r\n    return point1.x === point2.x && point1.y === point2.y;\r\n}\r\n\r\nexport default GridBackground;","/**\r\n * Represents a point in 2d space\r\n * Immutable\r\n */\r\nexport interface Point\r\n{\r\n    readonly x: number;\r\n    readonly y: number;\r\n}\r\n\r\n/**\r\n * Represents the data inside a tile\r\n * Solid tiles cannot be passed while non solid ones can\r\n * pathCost stores how expensive it is to travel to the tile if it isn't solid\r\n * Immutable\r\n */\r\nexport interface TileData\r\n{\r\n    readonly pathCost: number;\r\n    readonly isSolid: boolean;\r\n}\r\n\r\n/**\r\n * Represents a tile on the Grid\r\n */\r\nexport interface Tile\r\n{\r\n    data: TileData;\r\n    readonly point: Point;\r\n}\r\n\r\n/**\r\n * Simple function to create a solid tile with path cost of 1\r\n * @param isSolid\r\n */\r\nexport function createTile(isSolid: boolean) {\r\n    return {\r\n        pathCost: 1,\r\n        isSolid: isSolid\r\n    }\r\n}\r\n\r\n","import {createTile, Point, Tile, TileData} from './Components';\r\n\r\nexport interface Grid\r\n{\r\n    getWidth(): number;\r\n    getHeight(): number;\r\n    inBounds(point: Point): boolean;\r\n    get(point: Point): Tile;\r\n    isSolid(point: Point): boolean;\r\n    mutate(point: Point, data: TileData): void;\r\n    mutateTile(tile: Tile): void;\r\n    mutateDefault(point: Point, solid: boolean): void;\r\n    output(console: Console): void;\r\n    getJson(): string;\r\n    walkable(point: Point): boolean;\r\n    isEmpty(point: Point): boolean;\r\n    clone(): Grid;\r\n}\r\n\r\n/**\r\n * A square grid system that stores nodes in a matrix\r\n * Uses an x,y system where x corresponds to column of the matrix,\r\n * and y corresponds to the row of the matrix\r\n * TileData.ts should be treated like graph nodes\r\n */\r\nclass RectGrid implements Grid\r\n{\r\n    private readonly tiles: Tile[][];\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    /**\r\n     * Constructs a grid either with empty or predefined tiles\r\n     * @param width of the grid\r\n     * @param height of grid\r\n     * will perform a defensive copy to the grid\r\n     */\r\n    constructor(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.tiles = createEmptyGrid(width, height);\r\n    }\r\n\r\n    getWidth() {\r\n        return this.width;\r\n    }\r\n\r\n    getHeight() {\r\n        return this.height;\r\n    }\r\n\r\n    /**\r\n     * Checks if a given point is in bounds\r\n     * Other functions assume arguments are in bounds, this should be used\r\n     * if there is reasonable doubt about whether a point is in bounds\r\n     * @param point, to check\r\n     */\r\n    inBounds(point: Point) {\r\n        return point.x >= 0 && point.x < this.width && point.y >= 0 && point.y < this.height;\r\n    }\r\n\r\n    /**\r\n     * Retrieves a defensive tile for a position\r\n     * Defensive copy prevents this object from being mutated without calling\r\n     * a mutate function\r\n     * @param point, point to get\r\n     */\r\n    get(point: Point): Tile {\r\n        return {\r\n            point: this.tiles[point.y][point.x].point,\r\n            data: this.tiles[point.y][point.x].data\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Mutates a position's tile to solid or non solid\r\n     * @param point, point to mutate\r\n     * @param data to mutate to\r\n     */\r\n    mutate(point: Point, data: TileData) {\r\n        this.tiles[point.y][point.x].data = data;\r\n    }\r\n\r\n    /**\r\n     * Mutates a a tile by point\r\n     * @param tile to mutate\r\n     */\r\n    mutateTile(tile: Tile) {\r\n        this.tiles[tile.point.y][tile.point.x].data = tile.data;\r\n    }\r\n\r\n    /**\r\n     * Mutate tile at point\r\n     * @param point to mutate at\r\n     * @param solid to determine what default tile to create\r\n     */\r\n    mutateDefault = (point: Point, solid: boolean) => {\r\n        this.mutate(\r\n            point, createTile(solid)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Outputs the grid to a console\r\n     * @param console\r\n     */\r\n    output(console: Console) {\r\n        for(let y = 0; y < this.height; y++) {\r\n            let str = '';\r\n            for(let x = 0; x < this.width; x++) {\r\n                str += this.tiles[y][x].data.isSolid + ', ';\r\n            }\r\n            console.log(str);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns json of tiles\r\n     */\r\n    getJson() {\r\n        return JSON.stringify(this.tiles);\r\n    }\r\n\r\n    /**\r\n     * Determines if a tile can be walked on\r\n     * @param point\r\n     */\r\n    walkable(point: Point) {\r\n        return !this.tiles[point.y][point.x].data.isSolid;\r\n    }\r\n\r\n    /**\r\n     * Determines if a tile isSolid\r\n     * @param point\r\n     */\r\n    isSolid(point: Point) {\r\n        return this.tiles[point.y][point.x].data.isSolid;\r\n    }\r\n\r\n    /**\r\n     * Determines if a tile is \"empty\"\r\n     *  Meaning it isn't solid and it has a pathCost of 1\r\n     * @param point\r\n     */\r\n    isEmpty(point: Point): boolean {\r\n        const data = this.tiles[point.y][point.x].data;\r\n        return data.pathCost === 1 && !data.isSolid\r\n    }\r\n\r\n    clone(): Grid {\r\n        const grid = new RectGrid(this.width, this.height);\r\n        for(let y = 0; y < grid.height; y++) {\r\n            for(let x = 0; x < grid.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                }\r\n                grid.mutateTile(this.get(point));\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a 2d matrix of empty nodes\r\n */\r\nfunction createEmptyGrid(width: number, height: number) {\r\n    const nodes: Tile[][] = [];\r\n    for(let y = 0; y < height; y++) {\r\n        const row: Tile[] = [];\r\n        for(let x = 0; x < width; x++) {\r\n            row.push({\r\n                point: {\r\n                    x: x, y: y\r\n                },\r\n                data: createTile(false)\r\n            });\r\n        }\r\n        nodes.push(row);\r\n    }\r\n    return nodes;\r\n}\r\n\r\nexport default RectGrid;","import React from 'react';\r\nimport './Grid.css';\r\nimport {Point} from '../../pathfinding/core/Components';\r\n\r\ninterface TileProps {\r\n    tileWidth: number,\r\n    point: Point,\r\n    color: string,\r\n}\r\n\r\nclass TileFg extends React.Component<TileProps>\r\n{\r\n    shouldComponentUpdate(nextProps: Readonly<TileProps>) {\r\n        const prevPoint = this.props.point;\r\n        const nextPoint = nextProps.point;\r\n        return prevPoint.y !== nextPoint.y ||\r\n            prevPoint.x !== nextPoint.x;\r\n    }\r\n\r\n    render() {\r\n        const size = this.props.tileWidth\r\n        const top = this.props.point.y * this.props.tileWidth;\r\n        const left = this.props.point.x * this.props.tileWidth;\r\n        return (\r\n            <div style={{\r\n                position: 'absolute',\r\n                width: size,\r\n                height: size,\r\n                top: top,\r\n                left: left,\r\n                backgroundColor: this.props.color,\r\n                display: 'block',\r\n                borderColor: this.props.color\r\n            }} className={'svg-tile tile-fg'}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TileFg;","import {Point} from '../../pathfinding/core/Components';\r\nimport React from 'react';\r\n\r\ninterface SolidProps {\r\n    tileSize: number,\r\n    point: Point,\r\n    doTileAnimation: boolean\r\n}\r\n\r\nclass SolidFg extends React.Component<SolidProps>\r\n{\r\n    private readonly doTileAnimation: boolean;\r\n\r\n    constructor(props: SolidProps) {\r\n        super(props)\r\n        this.doTileAnimation = this.props.doTileAnimation;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                style={{\r\n                    position: 'absolute',\r\n                    left: this.props.point.x * this.props.tileSize,\r\n                    top: this.props.point.y * this.props.tileSize,\r\n                    width: this.props.tileSize,\r\n                    height: this.props.tileSize\r\n                }}\r\n                className={this.doTileAnimation ? 'solid-animation' : 'solid'}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default SolidFg;","export default __webpack_public_path__ + \"static/media/weight.cae5804e.svg\";","import {Point} from '../../pathfinding/core/Components';\r\nimport React from 'react';\r\nimport Weight from '../web-content/weight.svg';\r\n\r\ninterface WeightProps {\r\n    tileSize: number,\r\n    point: Point,\r\n    doTileAnimation: boolean,\r\n    weightOpacity: number\r\n}\r\n\r\nclass WeightFg extends React.Component<WeightProps>\r\n{\r\n    private readonly doTileAnimation: boolean;\r\n\r\n    constructor(props: WeightProps) {\r\n        super(props)\r\n        this.doTileAnimation = this.props.doTileAnimation;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{\r\n                left: this.props.point.x * this.props.tileSize,\r\n                top: this.props.point.y * this.props.tileSize,\r\n                width: this.props.tileSize,\r\n                height: this.props.tileSize,\r\n                backgroundImage: `url(${Weight})`,\r\n                opacity: this.props.weightOpacity,\r\n                position: 'absolute'\r\n            }}\r\n                 className={this.doTileAnimation ? 'weight-animation' : 'weight'}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeightFg;","import React, {RefObject} from 'react';\r\nimport './Grid.css';\r\nimport {createTile, Point, Tile, TileData} from '../../pathfinding/core/Components';\r\nimport RectGrid, {Grid} from '../../pathfinding/core/Grid';\r\nimport TileFg from './TileFg';\r\nimport SolidFg from './SolidFg';\r\nimport WeightFg from './WeightFg';\r\n\r\ninterface IProps {\r\n    tileSize: number,\r\n    tilesX: number,\r\n    tilesY: number,\r\n    onTilesDragged: () => void,\r\n    topMargin: number,\r\n    weightOpacity: number\r\n}\r\n\r\ninterface IState {\r\n    grid: Grid,\r\n    initial: Point,\r\n    goal: Point,\r\n    path: Tile[]\r\n}\r\n\r\nconst INITIAL_COLOR = 'rgb(131, 217, 52)';\r\nconst GOAL_COLOR = 'rgb(203, 75, 14)';\r\nconst ARROW_PATH_COLOR = 'rgb(73, 79, 250)';\r\n\r\nconst BASE_WIDTH = 27;\r\n\r\nclass GridForeground extends React.Component<IProps,IState>\r\n{\r\n    private svg: RefObject<SVGSVGElement> = React.createRef();\r\n\r\n    private tilePointer: TileData;\r\n\r\n    private drawing: boolean = false;\r\n    private erasing: boolean = false;\r\n    private draggingInitial: boolean = false;\r\n    private draggingGoal: boolean = false;\r\n    private disable: boolean = false;\r\n\r\n    private doTileAnimation: boolean = true;\r\n\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    /**\r\n     * Constructs a GridForeground with immutable height and width\r\n     * @param props\r\n     */\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.width = this.props.tilesX;\r\n        this.height = this.props.tilesY;\r\n        const end = this.calcEndPointInView();\r\n        this.tilePointer = createTile(true);\r\n        this.state = {\r\n            grid: new RectGrid(this.width, this.height),\r\n            path: [],\r\n            initial: {\r\n                x: ((end.x)/3) >> 0,\r\n                y: ((end.y)/3) >> 0\r\n            },\r\n            goal: {\r\n                x: ((2*(end.x)/3) >> 0) - 1,\r\n                y: ((2*(end.y)/3) >> 0) - 1\r\n            }\r\n        }\r\n    }\r\n\r\n    changeTile = (data: TileData) => {\r\n        this.tilePointer = data;\r\n    }\r\n\r\n    calcEndPointInView() {\r\n        const xEnd = Math.round(window.innerWidth / this.props.tileSize);\r\n        const yEnd = Math.round((window.innerHeight - this.props.topMargin - 30) / this.props.tileSize);\r\n        return {\r\n            x: xEnd, y: yEnd\r\n        }\r\n    }\r\n\r\n    toggleDisable() {\r\n        this.disable = !this.disable;\r\n    }\r\n\r\n    getBoundingRect() {\r\n        return this.svg.current!.getBoundingClientRect();\r\n    }\r\n\r\n    private mouseDown = (e: MouseEvent) => {\r\n        e.preventDefault();\r\n        const bounds = this.getBoundingRect();\r\n        this.onPress(e.clientX - bounds.left, e.clientY - bounds.top, e.button);\r\n    }\r\n\r\n    private mouseUp = (e: MouseEvent) => {\r\n        e.preventDefault();\r\n        if(isControlKey(e.button)) {\r\n            this.draggingGoal = false;\r\n            this.draggingInitial = false;\r\n            this.drawing = false;\r\n            this.erasing = false;\r\n        }\r\n    }\r\n\r\n    private mouseMove = (e: MouseEvent) => {\r\n        const bounds = this.getBoundingRect();\r\n        this.onDrag(e.clientX - bounds.left, e.clientY - bounds.top);\r\n    }\r\n\r\n    private touchStart = (e: TouchEvent) => {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        const bounds = this.getBoundingRect();\r\n        this.onPress(touch.clientX - bounds.left, touch.clientY - bounds.top, 0);\r\n    }\r\n\r\n    private touchMove = (e: TouchEvent) => {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        const bounds = this.getBoundingRect();\r\n        this.onDrag(touch.clientX - bounds.left, touch.clientY - bounds.top);\r\n    }\r\n\r\n    private onEndingEvent = (e: Event) => {\r\n        e.preventDefault();\r\n        this.draggingGoal = false;\r\n        this.draggingInitial = false;\r\n        this.drawing = false;\r\n        this.erasing = false;\r\n    }\r\n\r\n    /**\r\n     * Responds to the event thrown at screen coordinates on press\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     * @param button\r\n     */\r\n    private onPress = (xCoordinate: number, yCoordinate: number, button: number) => {\r\n        const point = this.calculatePoint(xCoordinate,yCoordinate);\r\n        if(isControlKey(button)) {\r\n            if(pointsEqual(point, this.state.initial)) {\r\n                this.draggingInitial = true;\r\n            } else if(pointsEqual(point, this.state.goal)) {\r\n                this.draggingGoal = true;\r\n            } else if(!this.disable) {\r\n                if(this.state.grid.isEmpty(point)) {\r\n                    this.drawing = true;\r\n                    this.drawTile(point);\r\n                } else {\r\n                    this.erasing = true;\r\n                    this.eraseTile(point);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Responds to the event thrown at screen coordinates on drag/move\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     */\r\n    private onDrag = (xCoordinate: number, yCoordinate: number) => {\r\n        const point = this.calculatePoint(xCoordinate,yCoordinate);\r\n        if(this.draggingInitial) {\r\n            this.moveInitial(point);\r\n        } else if(this.draggingGoal) {\r\n            this.moveGoal(point);\r\n        } else if(!pointsEqual(point, this.state.initial)\r\n            && !pointsEqual(point, this.state.goal) && !this.disable)\r\n        {\r\n            if(this.drawing) {\r\n                this.drawTile(point);\r\n            } else if(this.erasing) {\r\n                this.eraseTile(point);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw an entire new grid on the foreground with disabled animations\r\n     * @param grid\r\n     */\r\n    drawGrid = (grid: Grid) => {\r\n        this.doTileAnimation = false;\r\n        this.setState({\r\n            grid: grid\r\n        }, () => this.doTileAnimation = true)\r\n    }\r\n\r\n    /**\r\n     * Draw tile at point\r\n     * @param point\r\n     */\r\n    drawTile = (point: Point) => {\r\n        const grid = this.state.grid.clone();\r\n        if(grid.inBounds(point)) {\r\n            grid.mutateTile({\r\n                point: point,\r\n                data: this.tilePointer\r\n            });\r\n        }\r\n        this.setState({\r\n            grid: grid\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if a node is visualized, then changes the tile to empty if it isn't\r\n     * @param point\r\n     */\r\n    eraseTile = (point: Point) => {\r\n        const grid = this.state.grid.clone();\r\n        if(grid.inBounds(point)) {\r\n            grid.mutateDefault(point, false);\r\n        }\r\n        this.setState({\r\n            grid: grid\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clear grid in state\r\n     */\r\n    clearTiles = () => {\r\n        const grid = this.state.grid.clone();\r\n        for(let y = 0; y < this.height; y++) {\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                }\r\n                grid.mutateDefault(point, false);\r\n            }\r\n        }\r\n        this.setState({\r\n            grid: grid\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Moves initial to a new point\r\n     * @param point\r\n     */\r\n    moveInitial = (point: Point) => {\r\n        if(this.canMoveEndPoint(point)) {\r\n            this.setState({\r\n                initial: point\r\n            }, () => this.props.onTilesDragged());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves goal to a new point\r\n     * @param point\r\n     */\r\n    moveGoal = (point: Point) => {\r\n        if(this.canMoveEndPoint(point)) {\r\n            this.setState({\r\n                goal: point\r\n            }, () => this.props.onTilesDragged());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if we can move any of the end points (goal or initial) to that point\r\n     * @param point\r\n     */\r\n    canMoveEndPoint = (point: Point) => {\r\n        return this.state.grid.inBounds(point)\r\n            && !this.state.grid.isSolid(point)\r\n            && !pointsEqual(this.state.initial, point)\r\n            && !pointsEqual(this.state.goal, point)\r\n            && !this.disable;\r\n    }\r\n\r\n    /**\r\n     * Draw a path onto the grid\r\n     * @param path\r\n     */\r\n    drawPath = (path: Tile[]) => {\r\n        this.setState({\r\n            path: path.slice()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Erase path from the grid\r\n     */\r\n    erasePath = () => {\r\n        this.setState({\r\n            path: []\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Converts real screen x,y coordinates into\r\n     * a 2d point position on the grid\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     */\r\n    calculatePoint = (xCoordinate: number, yCoordinate: number) => {\r\n        return {\r\n            x: Math.floor(xCoordinate/this.props.tileSize),\r\n            y: Math.floor(yCoordinate/this.props.tileSize)\r\n        }\r\n    }\r\n\r\n    resetPoints = () => {\r\n        const end = this.calcEndPointInView();\r\n        this.setState({\r\n            initial: {\r\n                x: ((end.x)/3) >> 0,\r\n                y: ((end.y)/3) >> 0\r\n            },\r\n            goal: {\r\n                x: ((2*(end.x)/3) >> 0) - 1,\r\n                y: ((2*(end.y)/3) >> 0) - 1\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        // console.timeEnd('time');\r\n        // console.time('time');\r\n        return (\r\n            <div>\r\n                <div className='endpoint-tiles-table'>\r\n                    {this.renderEndTile(this.state.initial, INITIAL_COLOR,'initial')}\r\n                    {this.renderEndTile(this.state.goal, GOAL_COLOR,'goal')}\r\n                </div>\r\n                <svg ref={this.svg} xmlns='http://www.w3.org/2000/svg' className='arrow-grid'>\r\n                    <defs>\r\n                        <marker id='arrowhead-path' markerWidth='3' markerHeight='3'\r\n                                refX='0' refY='1.5' orient='auto'\r\n                                fill={ARROW_PATH_COLOR}\r\n                        >\r\n                            <polygon points='0 0, 3 1.5, 0 3'/>\r\n                        </marker>\r\n                    </defs>\r\n                    {this.renderPath()}\r\n                </svg>\r\n                <div className='tiles-table'\r\n                     onContextMenu={e => e.preventDefault()}\r\n                     onMouseDown={e => this.mouseDown(e.nativeEvent)}\r\n                     onMouseUp={e => this.mouseUp(e.nativeEvent)}\r\n                     onMouseMove={e => this.mouseMove(e.nativeEvent)}\r\n                     onMouseLeave={e => this.onEndingEvent(e.nativeEvent)}\r\n                     onTouchStart={e => this.touchStart(e.nativeEvent)}\r\n                     onTouchMoveCapture={e => this.touchMove(e.nativeEvent)}\r\n                     onTouchEnd={e => this.onEndingEvent(e.nativeEvent)}\r\n                     onTouchCancel={e => this.onEndingEvent(e.nativeEvent)}\r\n                >\r\n                    {this.renderTilesTable()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderPath = () => {\r\n        const lines: JSX.Element[] = [];\r\n        for(let i = 0; i < this.state.path.length-1; i++) {\r\n            const first = this.state.path[i].point;\r\n            const second = this.state.path[i+1].point;\r\n            lines.push(this.renderPathArrow(i, first, second));\r\n        }\r\n        return lines;\r\n    }\r\n\r\n    private renderPathArrow = (index: number, first: Point, second: Point) => {\r\n        const width = this.props.tileSize;\r\n        const offset = width/2;\r\n        const firstX = first.x * width;\r\n        const firstY = first.y * width;\r\n        const secondX = second.x * width;\r\n        const secondY = second.y * width;\r\n        const offsetX = (secondX - firstX)/4;\r\n        const offsetY = (secondY - firstY)/4;\r\n        return (\r\n            <line key={'path ' + index}\r\n                  x1={firstX + offset + offsetX}\r\n                  y1={firstY + offset + offsetY}\r\n                  x2={secondX + offset - offsetX}\r\n                  y2={secondY + offset - offsetY}\r\n                  stroke={ARROW_PATH_COLOR}\r\n                  strokeWidth={2 * this.props.tileSize/BASE_WIDTH}\r\n                  className='line'\r\n                  markerEnd='url(#arrowhead-path)' />\r\n        );\r\n    }\r\n\r\n    private renderTilesTable = () => {\r\n        const tiles: JSX.Element[] = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                }\r\n                const cost = this.state.grid.get(point).data.pathCost;\r\n                if(this.state.grid.isSolid(point)) {\r\n                    //render a solid tile div\r\n                    tiles.push(\r\n                        <SolidFg key={x + ',' + y}\r\n                                  point={point}\r\n                                  tileSize={this.props.tileSize}\r\n                                  doTileAnimation={this.doTileAnimation}\r\n                        />\r\n                    );\r\n                } else if(cost > 1) {\r\n                    //render a weight svg\r\n                    tiles.push(\r\n                        <WeightFg key={x + ',' + y}\r\n                                  point={point}\r\n                                  tileSize={this.props.tileSize}\r\n                                  doTileAnimation={this.doTileAnimation}\r\n                                  weightOpacity={this.props.weightOpacity}\r\n                        />\r\n                    );\r\n                    //render a div containing the cost as text\r\n                    tiles.push(\r\n                        <div key={x + ',' + y + ' text'}\r\n                             style={{\r\n                                 left: x * this.props.tileSize,\r\n                                 top: y * this.props.tileSize,\r\n                                 width: this.props.tileSize,\r\n                                 height: this.props.tileSize,\r\n                                 position: 'absolute',\r\n                                 color: 'white',\r\n                                 fontSize: 13,\r\n                                 paddingTop: this.props.tileSize / 3.80,\r\n                                 textAlign: 'center',\r\n                                 cursor: 'default',\r\n                                 opacity: this.props.weightOpacity + 0.4\r\n                             }}\r\n                        >\r\n                            {cost}\r\n                        </div>\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    private renderEndTile = (point: Point, color: string, key: string) => {\r\n        return <TileFg key={key} point={point}\r\n                       tileWidth={this.props.tileSize}\r\n                       color={color}/>\r\n    }\r\n}\r\n\r\nfunction pointsEqual(point1: Point, point2: Point) {\r\n    return point1.x === point2.x && point1.y === point2.y;\r\n}\r\n\r\nfunction isControlKey(button: number) {\r\n    //right or left mouse\r\n    return button === 0 || button === 2;\r\n}\r\n\r\nexport default GridForeground;","import React, {RefObject} from 'react';\r\nimport './Grid.css';\r\n\r\ninterface IProps {\r\n    algorithm: string,\r\n    length: number,\r\n    cost: number,\r\n    time: number,\r\n    nodes: number\r\n}\r\n\r\nclass StatsPanel extends React.Component<IProps>\r\n{\r\n    private readonly textLog: RefObject<HTMLTextAreaElement> = React.createRef();\r\n\r\n    componentDidUpdate() {\r\n        this.textLog.current!.scrollTop = this.textLog.current!.scrollHeight;\r\n    }\r\n\r\n    getHeight() {\r\n        //top border: 1\r\n        return this.textLog.current!.clientHeight + 1;\r\n    }\r\n\r\n    render() {\r\n        const time = precise(this.props.time);\r\n        const text = this.props.algorithm === '' ? '' :\r\n            this.props.algorithm +\r\n            ' visited ' +\r\n            this.props.nodes +\r\n            ' nodes in ' +\r\n            time +\r\n            ' ms. Path length = ' +\r\n            this.props.length +\r\n            '. Path cost = ' +\r\n            this.props.cost +\r\n            '. ';\r\n        return(\r\n            <textarea tabIndex={-1} ref={this.textLog} readOnly={true}\r\n                      className='stats-text-area no-select'\r\n                      value={text} unselectable={'on'} onDrop={() => false}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction precise(x: number) {\r\n    return x.toFixed(2);\r\n}\r\n\r\nexport default StatsPanel;","import {Point, Tile} from './Components';\r\nimport Navigator, {UNIT} from './Navigator';\r\n\r\n/**\r\n * Concretion of a Plus Navigator for a grid\r\n * Allows movement akin to a 'plus' symbol\r\n */\r\nclass PlusNavigator extends Navigator\r\n{\r\n    /**\r\n     * Adds the neighbors of a point to the left, right, top and down\r\n     * @param point\r\n     */\r\n    neighbors(point: Point): Tile[] {\r\n        const tiles: Tile[] = [];\r\n        if(point.x + UNIT < this.grid.getWidth()) {\r\n            const tile = this.grid.get({\r\n                x: point.x + UNIT,\r\n                y: point.y\r\n            })\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.y + UNIT < this.grid.getHeight()) {\r\n            const tile = this.grid.get({\r\n                x: point.x,\r\n                y: point.y + UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.x - UNIT >= 0) {\r\n            const tile = this.grid.get({\r\n                x: point.x - UNIT,\r\n                y: point.y\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.y - UNIT >= 0) {\r\n            const tile = this.grid.get({\r\n                x: point.x,\r\n                y: point.y - UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    /**\r\n     * Step cost function that works by getting the pathCost stored in the grid\r\n     * from one point a to b\r\n     * @param a\r\n     * @param b to point to travel to\r\n     */\r\n    cost(a: Point, b: Point) {\r\n        return this.grid.get(b).data.pathCost;\r\n    }\r\n\r\n    getType() {\r\n        return 'plus';\r\n    }\r\n}\r\n\r\nexport default PlusNavigator;","import {Grid} from './Grid';\r\nimport {Point, Tile} from './Components';\r\n\r\nexport const UNIT = 1; //number of tiles we can move at once\r\n\r\n/**\r\n * Describes an abstract navigator for a grid\r\n * Provides graph-like traversal for the grid\r\n * Determines where we can travel to from a certain point,\r\n * whether we have reached a destination, and the cost to\r\n * travel to a certain point\r\n */\r\nabstract class Navigator\r\n{\r\n    protected readonly grid: Grid;\r\n\r\n    constructor(grid: Grid) {\r\n        this.grid = grid;\r\n    }\r\n\r\n    getGrid() {\r\n        return this.grid;\r\n    }\r\n\r\n    /**\r\n     * Goal check function: Checks if two points are equal\r\n     * @param a\r\n     * @param b\r\n     */\r\n    equals(a: Point, b: Point) {\r\n        return a.x === b.x && a.y === b.y;\r\n    }\r\n\r\n    /**\r\n     * Step cost function from a to b\r\n     * @param a\r\n     * @param b to point to travel to\r\n     */\r\n    abstract cost(a: Point, b: Point): number;\r\n\r\n    /**\r\n     * Neighbors function: Gets the available neighbors for a point in a grid we can make\r\n     * in a given move\r\n     * @param point\r\n     */\r\n    abstract neighbors(point: Point): Tile[];\r\n\r\n    abstract getType(): string;\r\n}\r\n\r\nexport default Navigator;","import {Point} from '../core/Components';\r\n\r\nexport type HeuristicFunc = (a: Point, b: Point) => number;\r\n\r\nexport function manhattan(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x) ;\r\n    const dy = Math.abs(a.y - b.y);\r\n    return dx + dy;\r\n}\r\n\r\nexport function euclidean(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n}\r\n\r\nexport function octile(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.SQRT2 * Math.min(dx, dy) + Math.abs(dx - dy);\r\n}\r\n\r\nexport function chebyshev(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.max(dx, dy);\r\n}\r\n\r\nexport function nullHeuristic(): number {\r\n    return 0;\r\n}","import {Point} from '../core/Components';\r\n\r\n/**\r\n * A simple data structure that keeps track of whether keys have been added to it\r\n */\r\nexport class HashSet\r\n{\r\n    private map: {[key: string]: boolean | undefined} = {};\r\n\r\n    add(key: string) {\r\n        this.map[key] = true;\r\n    }\r\n\r\n    remove(key: string) {\r\n        this.map[key] = undefined;\r\n    }\r\n\r\n    has(key: string) {\r\n        return this.map[key] !== undefined;\r\n    }\r\n\r\n    clear() {\r\n        this.map = {};\r\n    }\r\n}\r\n\r\n/**\r\n * A simple data structure that stores a type at a key\r\n */\r\nexport class HashTable<Value>\r\n{\r\n    private map: {[key: string]: Value | undefined} = {};\r\n\r\n    add(key: string, data: Value) {\r\n        this.map[key] = data;\r\n    }\r\n\r\n    remove(key: string) {\r\n        this.map[key] = undefined;\r\n    }\r\n\r\n    get(key: string) {\r\n        return this.map[key];\r\n    }\r\n\r\n    has(key: string) {\r\n        return this.map[key] !== undefined;\r\n    }\r\n\r\n    clear() {\r\n        this.map = {};\r\n    }\r\n}\r\n\r\n/**\r\n * Serialize point into a unique string\r\n * @param point\r\n */\r\nexport function stringify(point: Point) {\r\n    return 'x' + point.x + 'y' + point.y;\r\n}","/**\r\n * A compare function to determine if a is 'better' (deserves a higher position) than b\r\n */\r\nexport type Comparator<E> = (a: E, b: E) => boolean\r\n\r\n/**\r\n * Minimalist Implementation of the heap data structure as an array\r\n */\r\nclass Heap<E>\r\n{\r\n    private elements: E[] = [];\r\n    readonly compare: Comparator<E>;\r\n\r\n    constructor(compare: Comparator<E>) {\r\n        this.compare = compare;\r\n    }\r\n\r\n    /**\r\n     * Returns the size of the heap\r\n     */\r\n    getSize() {\r\n        return this.elements.length;\r\n    }\r\n\r\n    /**\r\n     * Checks if heap is empty\r\n     */\r\n    isEmpty() {\r\n        return this.elements.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Add a new element to the heap\r\n     * @param e\r\n     */\r\n    push(e: E) {\r\n        this.elements.push(e);\r\n        this.siftUp(this.elements.length-1); //last element\r\n    }\r\n\r\n    /**\r\n     * Returns the top of the heap without removing it\r\n     * Fails if heap is empty\r\n     */\r\n    peek() {\r\n        return this.elements[0];\r\n    }\r\n\r\n    /**\r\n     * Returns the top of the heap and removes it\r\n     * Fails if heap is empty\r\n     */\r\n    pop() {\r\n        const val = this.peek();\r\n        this.move(this.elements.length - 1, 0);\r\n        this.elements.pop();\r\n        this.siftDown(0);\r\n        return val;\r\n    }\r\n\r\n    /**\r\n     * Clear the heap\r\n     */\r\n    clear() {\r\n        this.elements = [];\r\n    }\r\n\r\n    /**\r\n     * Sifts a new element that is out of order up to the right position\r\n     * @param pos of new element\r\n     */\r\n    private siftUp(pos: number) {\r\n        let parent = ((pos - 1) / 2) >> 0; //integer division\r\n        while(parent >= 0) {\r\n            //if the current position is better than parent\r\n            if(this.compare(this.elements[pos], this.elements[parent])) {\r\n                //then current position with parent and move to next\r\n                this.swap(pos, parent);\r\n                pos = parent;\r\n                parent = ((pos - 1) / 2) >> 0;\r\n            } else {\r\n                //otherwise stop\r\n                parent = -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sifts a new element that is out of order down to the right position\r\n     * @param pos of new element\r\n     */\r\n    private siftDown(pos: number) {\r\n        const left = 2 * pos + 1;\r\n        const right = 2 * pos + 2;\r\n        //stop if the children are out of bounds\r\n        if(left >= this.elements.length) {\r\n            return;\r\n        }\r\n        //find the better child\r\n        const child = (right >= this.elements.length || this.compare(this.elements[left], this.elements[right]))\r\n            ? left : right;\r\n        //continues to sift down if the child is better than the current position\r\n        if(this.compare(this.elements[child], this.elements[pos])) {\r\n            this.swap(child, pos);\r\n            this.siftDown(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Internal move function\r\n     * @param from\r\n     * @param to\r\n     */\r\n    private move(from: number, to: number) {\r\n        this.elements[to] = this.elements[from];\r\n    }\r\n\r\n    /**\r\n     * Internal swap function\r\n     * @param a\r\n     * @param b\r\n     */\r\n    private swap(a: number, b: number) {\r\n        let val = this.elements[a];\r\n        this.elements[a] = this.elements[b];\r\n        this.elements[b] = val;\r\n    }\r\n}\r\n\r\nexport default Heap;","import {Point, Tile} from '../core/Components';\r\nimport Navigator from '../core/Navigator';\r\nimport {Node} from './Node';\r\n\r\n/**\r\n * Pathfinder performs algorithms operations on the grid\r\n * Uses the navigator rank and expand nodes\r\n */\r\nabstract class Pathfinder\r\n{\r\n    protected recentSearch: Node[] = [];\r\n    protected navigator: Navigator;\r\n\r\n    constructor(navigator: Navigator) {\r\n        this.navigator = navigator;\r\n    }\r\n\r\n    setNavigator(navigator: Navigator) {\r\n        this.navigator = navigator;\r\n    }\r\n\r\n    getNavigator() {\r\n        return this.navigator;\r\n    }\r\n\r\n    getRecentNodes() {\r\n        return this.recentSearch.length;\r\n    }\r\n\r\n    clearRecentSearch() {\r\n        this.recentSearch = [];\r\n    }\r\n\r\n    getRecentGenerations() {\r\n        return this.recentSearch.slice();\r\n    }\r\n\r\n    protected addRecent(node: Node) {\r\n        this.recentSearch.push(node);\r\n    }\r\n\r\n    abstract getAlgorithmName(): string;\r\n\r\n    /**\r\n     * Finds the best path between initial and goal on the grid\r\n     * and returns it in an array\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    abstract findPath(initial: Point, goal: Point): Tile[];\r\n}\r\n\r\n/**\r\n * Reconstructs the path from a tree, given the bottomLeaf, and\r\n * returns the shortest path in an array\r\n * @param bottomLeaf bottom of the tree to start from\r\n */\r\nexport function reconstructPath(bottomLeaf: Node): Tile[] {\r\n    return reconstructPathReversed(bottomLeaf).reverse();\r\n}\r\n\r\n/**\r\n * Reconstructs the path from a tree, given the bottomLeaf, and\r\n * returns the shortest path in an array\r\n * @param bottomLeaf bottom of the tree to start from\r\n */\r\nexport function reconstructPathReversed(bottomLeaf: Node): Tile[] {\r\n    const path: Tile[] = [];\r\n    while(bottomLeaf.parent !== null) {\r\n        path.push(bottomLeaf.tile);\r\n        bottomLeaf = bottomLeaf.parent;\r\n    }\r\n    return path;\r\n}\r\n\r\nexport default Pathfinder;","import {Tile} from '../core/Components';\r\n\r\n/**\r\n * Represents a search Tree Node\r\n */\r\nexport class Node\r\n{\r\n    parent: Node | null = null; //parent node\r\n    readonly children: Node[] = [];\r\n    readonly tile: Tile; //stores a graph node\r\n\r\n    constructor(tile: Tile) {\r\n        this.tile = tile;\r\n    }\r\n\r\n    addChild(child: Node) {\r\n        child.parent = this;\r\n        this.children.push(child);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents an heuristic weighted aStar search tree node\r\n */\r\nexport class AStarNode extends Node\r\n{\r\n    readonly g: number; //path cost\r\n    readonly fScore: number; //heuristic\r\n\r\n    constructor(tile: Tile, g: number, fScore: number) {\r\n        super(tile);\r\n        this.g = g;\r\n        this.fScore = fScore;\r\n    }\r\n\r\n    f() {\r\n        return this.fScore;\r\n    }\r\n}\r\n","import {HashSet, HashTable, stringify} from '../structures/Hash';\r\nimport Heap from '../structures/Heap';\r\nimport Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {AStarNode} from './Node';\r\nimport Navigator from '../core/Navigator';\r\nimport {euclidean, HeuristicFunc} from './Heuristics';\r\n\r\nclass AStarPathfinder extends Pathfinder\r\n{\r\n    private readonly heuristicFunc: HeuristicFunc = (a: Point, b: Point) => euclidean(a,b);\r\n    private readonly p: number; //tie breaker\r\n\r\n    constructor(navigator: Navigator, func?: HeuristicFunc) {\r\n        super(navigator);\r\n        const grid = this.getNavigator().getGrid();\r\n        //minimum cost of taking one step / expected maximum path length\r\n        this.p = 1/(grid.getWidth() * grid.getHeight());\r\n        if(func !== undefined) {\r\n            this.heuristicFunc = func;\r\n        }\r\n    }\r\n\r\n    getAlgorithmName(): string {\r\n        return 'A*';\r\n    }\r\n\r\n    /**\r\n     * Performs aStar algorithm on the grid given an initial and goal point\r\n     * Always returns the shortest path, and performs well on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const openFrontier = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const closedSet = new HashSet();\r\n        const openSet = new HashTable<number>();\r\n        const root = new AStarNode(\r\n            grid.get(initial), 0, 0\r\n        );\r\n        openFrontier.push(root);\r\n        openSet.add(stringify(initial), root.g);\r\n        while (!openFrontier.isEmpty()) {\r\n            const currentNode = openFrontier.pop();\r\n            const currentPoint = currentNode.tile.point;\r\n            const currentKey = stringify(currentPoint);\r\n            openSet.remove(currentKey);\r\n            closedSet.add(currentKey);\r\n            this.addRecent(currentNode);\r\n            if (this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            for (const neighbor of this.navigator.neighbors(currentPoint)) {\r\n                const neighborPoint = neighbor.point;\r\n                const neighborKey = stringify(neighborPoint);\r\n                if(closedSet.has(neighborKey)) {\r\n                    continue;\r\n                }\r\n                const g = currentNode.g + this.stepCost(currentPoint, neighborPoint);\r\n                const f = g + this.heuristic(neighborPoint, goal);\r\n                if (!openSet.has(neighborKey) || g < openSet.get(neighborKey)!) {\r\n                    const neighborNode = new AStarNode(\r\n                        neighbor, g, f\r\n                    );\r\n                    currentNode.addChild(neighborNode);\r\n                    openFrontier.push(neighborNode);\r\n                    openSet.add(neighborKey, neighborNode.g);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Heuristic function used to estimate distance between points a and b\r\n     * Includes tie breaker to prevent exploring lots of identical paths\r\n     * @param a\r\n     * @param b\r\n     */\r\n    heuristic(a: Point, b: Point) {\r\n        return this.heuristicFunc(a, b) * (1 + this.p);\r\n    }\r\n\r\n    /**\r\n     * The step-cost function to be used, calculating the cost from\r\n     * currentPoint to neighborPoint. Uses the stepCost function provided by the\r\n     * navigator by default but can be overridden\r\n     * @param currentPoint\r\n     * @param neighborPoint\r\n     */\r\n    stepCost(currentPoint: Point, neighborPoint: Point) {\r\n        return this.navigator.cost(currentPoint, neighborPoint);\r\n    }\r\n}\r\n\r\nexport default AStarPathfinder;","import Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {HashSet, stringify} from '../structures/Hash';\r\nimport {Node} from './Node';\r\n\r\nclass BFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName(): string {\r\n        return 'Breadth First Search';\r\n    }\r\n\r\n    /**\r\n     * Implementation of BFS to find the shortest path from initial to point\r\n     * Doesn't always return the shortest path, and performs poorly on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const frontier: Node[] = []; //fifo, stores nodes on the frontier\r\n        const visited = new HashSet();\r\n        const root = new Node(grid.get(initial));\r\n        frontier.push(root); //enqueue\r\n        visited.add(stringify(initial));\r\n        while(frontier.length !== 0) { //not empty\r\n            const currentNode = frontier.shift()!; //dequeue\r\n            const currentPoint = currentNode.tile.point;\r\n            this.addRecent(currentNode);\r\n            if(this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            for(const neighbor of this.navigator.neighbors(currentPoint)) {\r\n                const neighborKey = stringify(neighbor.point);\r\n                if(!visited.has(neighborKey)) {\r\n                    const neighborNode = new Node(neighbor);\r\n                    currentNode.addChild(neighborNode);\r\n                    frontier.push(neighborNode); //enqueue\r\n                    visited.add(neighborKey);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default BFSPathfinder;","/**\r\n * Stack node\r\n */\r\nclass Node<E>\r\n{\r\n    next: Node<E> | null = null;\r\n    data: E;\r\n\r\n    constructor(data: E) {\r\n        this.data = data;\r\n    }\r\n}\r\n\r\n/**\r\n * Minimalist Implementation of the stack data structure\r\n */\r\nclass Stack<E>\r\n{\r\n    private top: Node<E> | null = null;\r\n    private size: number = 0;\r\n\r\n    peek() {\r\n        return this.top != null ? this.top.data : undefined;\r\n    }\r\n\r\n    push(e: E) {\r\n        const node = new Node(e);\r\n        node.next = this.top;\r\n        this.top = node;\r\n        this.size++;\r\n    }\r\n\r\n    pop() {\r\n        const top = this.peek();\r\n        if(this.top != null) {\r\n            this.top = this.top.next;\r\n            this.size--;\r\n        }\r\n        return top;\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.size === 0;\r\n    }\r\n\r\n    getSize() {\r\n        return this.size;\r\n    }\r\n}\r\n\r\nexport default Stack;","import Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {HashSet, stringify} from '../structures/Hash';\r\nimport {Node} from './Node';\r\nimport Stack from '../structures/Stack';\r\n\r\nclass DFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName(): string {\r\n        return 'Depth First Search';\r\n    }\r\n\r\n    /**\r\n     * Calls DFS between a start and goal point, will typically not find the 'Best' path,\r\n     * and will instead find the best path capable for the algorithm\r\n     * As this algorithm is non optimal it should only be used for educational purposes\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const root = new Node(grid.get(initial));\r\n        const frontier = new Stack<Node>();\r\n        frontier.push(root);\r\n        const visited = new HashSet();\r\n        while(!frontier.isEmpty()) {\r\n            const currentNode = frontier.pop()!;\r\n            const currentPoint = currentNode.tile.point;\r\n            visited.add(stringify(currentPoint));\r\n            this.addRecent(currentNode);\r\n            if(this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            const neighbors = this.navigator.neighbors(currentPoint).reverse();\r\n            for(const neighbor of neighbors){\r\n                const neighborKey = stringify(neighbor.point);\r\n                if(!visited.has(neighborKey)) {\r\n                    const neighborNode = new Node(neighbor);\r\n                    currentNode.addChild(neighborNode);\r\n                    frontier.push(neighborNode);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default DFSPathfinder;\r\n","import {HashSet, HashTable, stringify} from '../structures/Hash';\r\nimport Heap from '../structures/Heap';\r\nimport Pathfinder, {reconstructPath, reconstructPathReversed} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {AStarNode} from './Node';\r\nimport Navigator from '../core/Navigator';\r\nimport {euclidean, HeuristicFunc} from './Heuristics';\r\n\r\ninterface ControlStructures {\r\n    openSet: HashTable<AStarNode>,\r\n    closedSet: HashSet,\r\n    openFrontier: Heap<AStarNode>\r\n}\r\n\r\nclass BiAStarPathfinder extends Pathfinder\r\n{\r\n    private readonly heuristic: HeuristicFunc = (a: Point, b: Point) => euclidean(a,b);\r\n\r\n    constructor(navigator: Navigator, func?: HeuristicFunc) {\r\n        super(navigator);\r\n        if(func !== undefined) {\r\n            this.heuristic = func;\r\n        }\r\n    }\r\n\r\n    getAlgorithmName(): string {\r\n        return 'Bidirectional A*';\r\n    }\r\n\r\n    /**\r\n     * Performs aStar algorithm on the grid given an initial and goal point\r\n     * Doesn't always returns the shortest path, but performs well on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const closedSet = new HashSet();\r\n        const startOpenFrontier = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const startOpenSet = new HashTable<AStarNode>();\r\n        const endOpenFrontier = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const endOpenSet = new HashTable<AStarNode>();\r\n        const initialRoot = new AStarNode(\r\n            grid.get(initial), 0, 0\r\n        );\r\n        startOpenFrontier.push(initialRoot);\r\n        startOpenSet.add(stringify(initial), initialRoot);\r\n        const goalRoot = new AStarNode(\r\n            grid.get(goal), 0, 0\r\n        );\r\n        endOpenFrontier.push(goalRoot);\r\n        endOpenSet.add(stringify(goal), goalRoot);\r\n        while (!startOpenFrontier.isEmpty() && !endOpenFrontier.isEmpty()) {\r\n            //expand startOpenFrontier\r\n            const startCurrentNode = startOpenFrontier.pop();\r\n            const startCurrentPoint = startCurrentNode.tile.point;\r\n            const startCurrentPointKey = stringify(startCurrentPoint);\r\n            startOpenSet.remove(startCurrentPointKey);\r\n            closedSet.add(startCurrentPointKey);\r\n            this.addRecent(startCurrentNode);\r\n            if(endOpenSet.has(startCurrentPointKey)) {\r\n                if(startCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startCurrentNode.parent\r\n                    ).concat(reconstructPathReversed(\r\n                        endOpenSet.get(startCurrentPointKey)!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            this.doAStarExpansion({\r\n                openFrontier: startOpenFrontier,\r\n                openSet: startOpenSet,\r\n                closedSet: closedSet\r\n            }, startCurrentNode, goal);\r\n            //expand endOpenFrontier\r\n            const endCurrentNode = endOpenFrontier.pop();\r\n            const endCurrentPoint = endCurrentNode.tile.point;\r\n            const endCurrentPointKey = stringify(endCurrentPoint);\r\n            endOpenSet.remove(endCurrentPointKey);\r\n            closedSet.add(endCurrentPointKey);\r\n            this.addRecent(endCurrentNode);\r\n            if(startOpenSet.has(endCurrentPointKey)) {\r\n                if(endCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startOpenSet.get(endCurrentPointKey)!\r\n                    ).concat(reconstructPathReversed(\r\n                        endCurrentNode.parent!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            this.doAStarExpansion({\r\n                openFrontier: endOpenFrontier,\r\n                openSet: endOpenSet,\r\n                closedSet: closedSet\r\n            }, endCurrentNode, initial);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    private doAStarExpansion(structures: ControlStructures, currentNode: AStarNode, endPoint: Point) {\r\n        const currentPoint = currentNode.tile.point;\r\n        for (const neighbor of this.navigator.neighbors(currentPoint)) {\r\n            const neighborPoint = neighbor.point;\r\n            const neighborKey = stringify(neighborPoint);\r\n            if(structures.closedSet.has(neighborKey)) {\r\n                continue;\r\n            }\r\n            const g = currentNode.g + this.stepCost(currentPoint, neighborPoint);\r\n            const f = g + this.heuristic(neighborPoint, endPoint);\r\n            if (!structures.openSet.has(neighborKey) || g < structures.openSet.get(neighborKey)!.g) {\r\n                const neighborNode = new AStarNode(\r\n                    neighbor, g, f\r\n                );\r\n                currentNode.addChild(neighborNode);\r\n                structures.openFrontier.push(neighborNode);\r\n                structures.openSet.add(neighborKey, neighborNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The step-cost function to be used, calculating the cost from\r\n     * currentPoint to neighborPoint. Uses the stepCost function provided by the\r\n     * navigator by default but can be overridden\r\n     * @param currentPoint\r\n     * @param neighborPoint\r\n     */\r\n    stepCost(currentPoint: Point, neighborPoint: Point) {\r\n        return this.navigator.cost(currentPoint, neighborPoint);\r\n    }\r\n}\r\n\r\nexport default BiAStarPathfinder;","import Pathfinder, {reconstructPath, reconstructPathReversed} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {HashTable, stringify} from '../structures/Hash';\r\nimport {Node} from './Node';\r\n\r\ninterface ControlStructures {\r\n    frontier: Node[],\r\n    visited: HashTable<Node>\r\n}\r\n\r\nclass BiBFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName(): string {\r\n        return 'Bidirectional Breadth First Search';\r\n    }\r\n\r\n    /**\r\n     * Implementation of BFS to find the shortest path from initial to point\r\n     * Doesn't always return the shortest path, and performs poorly on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const startVisited = new HashTable<Node>();\r\n        const endVisited = new HashTable<Node>();\r\n        const startFrontier: Node[] = [];\r\n        const endFrontier: Node[] = [];\r\n        const initialRoot = new Node(grid.get(initial));\r\n        startFrontier.push(initialRoot);\r\n        startVisited.add(stringify(initial), initialRoot);\r\n        const goalRoot = new Node(grid.get(goal));\r\n        endFrontier.push(goalRoot);\r\n        endVisited.add(stringify(goal), goalRoot);\r\n        while(startFrontier.length !== 0 && endFrontier.length !== 0) {\r\n            //expand startQueue\r\n            const startCurrentNode = startFrontier.shift()!;\r\n            const startCurrentPoint = startCurrentNode.tile.point;\r\n            const startCurrentPointKey = stringify(startCurrentPoint);\r\n            this.addRecent(startCurrentNode);\r\n            if(endVisited.has(startCurrentPointKey)) {\r\n                if(startCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startCurrentNode.parent\r\n                    ).concat(reconstructPathReversed(\r\n                        endVisited.get(startCurrentPointKey)!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            this.doBFSExpansion({\r\n                frontier: startFrontier,\r\n                visited: startVisited\r\n            }, startCurrentNode);\r\n            //expand endQueue\r\n            const endCurrentNode = endFrontier.shift()!;\r\n            const endCurrentPoint = endCurrentNode.tile.point;\r\n            const endCurrentPointKey = stringify(endCurrentPoint);\r\n            this.addRecent(endCurrentNode);\r\n            if(startVisited.has(endCurrentPointKey)) {\r\n                if(endCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startVisited.get(endCurrentPointKey)!\r\n                    ).concat(reconstructPathReversed(\r\n                        endCurrentNode.parent\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            this.doBFSExpansion({\r\n                frontier: endFrontier,\r\n                visited: endVisited\r\n            }, endCurrentNode);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    private doBFSExpansion(structures: ControlStructures, currentNode: Node) {\r\n        const currentPoint = currentNode.tile.point;\r\n        for(const neighbor of this.navigator.neighbors(currentPoint)) {\r\n            const neighborKey = stringify(neighbor.point);\r\n            if(!structures.visited.has(neighborKey)) {\r\n                const neighborNode = new Node(neighbor);\r\n                currentNode.addChild(neighborNode);\r\n                structures.frontier.push(neighborNode);\r\n                structures.visited.add(neighborKey, neighborNode);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default BiBFSPathfinder;","import Navigator from '../core/Navigator';\r\nimport PlusNavigator from '../core/PlusNavigator';\r\nimport {Point} from '../core/Components';\r\nimport {Grid} from '../core/Grid';\r\nimport {chebyshev, euclidean, HeuristicFunc, manhattan, nullHeuristic, octile} from './Heuristics';\r\nimport Pathfinder from './Pathfinder';\r\nimport AStarPathfinder from './AStar';\r\nimport BFSPathfinder from './BFS';\r\nimport DFSPathfinder from './DFS';\r\nimport BiAStarPathfinder from './BidirectionalAStar';\r\nimport BiBFSPathfinder from \"./BidirectionalBFS\";\r\n\r\nconst CREATE_NAVIGATOR: {[key: string]: ((grid: Grid) => Navigator)} = {\r\n    'plus': (grid: Grid) => new PlusNavigator(grid),\r\n}\r\n\r\nconst CREATE_HEURISTIC: {[key: string]: (() => HeuristicFunc)} = {\r\n    'manhattan': () => manhattan,\r\n    'euclidean': () => euclidean,\r\n    'chebyshev': () => chebyshev,\r\n    'octile': () => octile,\r\n    'null': () => nullHeuristic\r\n}\r\n\r\nconst CREATE_PATHFINDER: {[key: string]: ((navigator: Navigator, heuristic: HeuristicFunc) => Pathfinder)} = {\r\n    'dijkstra': (navigator) => {\r\n        return new (class DijkstraPathfinder extends AStarPathfinder {\r\n            getAlgorithmName(): string {\r\n                return 'Dijkstra';\r\n            }\r\n        })(navigator, nullHeuristic);\r\n    },\r\n    'best-first': (navigator, heuristic) => {\r\n        return new (class BestFirstPathfinder extends AStarPathfinder {\r\n            stepCost(currentPoint: Point, neighborPoint: Point) {\r\n                return 0;\r\n            }\r\n            getAlgorithmName(): string {\r\n                return 'Best-First Search';\r\n            }\r\n        })(navigator, heuristic);\r\n    },\r\n    'a*': (navigator, heuristic) => {\r\n        return new AStarPathfinder(navigator, heuristic);\r\n    },\r\n    'bfs': (navigator) => {\r\n        return new BFSPathfinder(navigator);\r\n    },\r\n    'dfs': (navigator) => {\r\n        return new DFSPathfinder(navigator);\r\n    },\r\n    'bi-a*': (navigator, heuristic) => {\r\n        return new BiAStarPathfinder(navigator, heuristic);\r\n    },\r\n    'bi-dijkstra': (navigator) => {\r\n        return new (class BiDijkstraPathfinder extends BiAStarPathfinder {\r\n            getAlgorithmName(): string {\r\n                return 'Bidirectional Dijkstra';\r\n            }\r\n        })(navigator, nullHeuristic);\r\n    },\r\n    'bi-bfs': (navigator) => {\r\n        return new BiBFSPathfinder(navigator);\r\n    }\r\n}\r\n\r\nclass PathfinderBuilder\r\n{\r\n    private navigator: string = 'plus';\r\n    private algorithm: string = 'a*';\r\n    private heuristic: string = 'null';\r\n    private readonly grid: Readonly<Grid>;\r\n\r\n    constructor(grid: Readonly<Grid>) {\r\n        this.grid = grid;\r\n    }\r\n\r\n    setNavigator(navigator: string) {\r\n        navigator = navigator.toLowerCase();\r\n        if(CREATE_NAVIGATOR[navigator] == null) {\r\n            throw new Error('No such navigator pattern exists')\r\n        } else {\r\n            this.navigator = navigator;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setAlgorithm(algorithm: string) {\r\n        algorithm = algorithm.toLowerCase();\r\n        if(CREATE_PATHFINDER[algorithm] == null) {\r\n            throw new Error('No such pathfinding algorithm exists')\r\n        } else {\r\n            this.algorithm = algorithm;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setHeuristic(heuristic: string) {\r\n        heuristic = heuristic.toLowerCase();\r\n        if(CREATE_HEURISTIC[heuristic] == null) {\r\n            throw new Error('No such heuristic function exists')\r\n        } else {\r\n            this.heuristic = heuristic;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Builds a pathfinder with a navigator with the set algorithm, heuristic, and navigator\r\n     */\r\n    build() {\r\n        const createHeuristic = CREATE_HEURISTIC[this.heuristic];\r\n        const createNavigator = CREATE_NAVIGATOR[this.navigator];\r\n        const createPathfinder = CREATE_PATHFINDER[this.algorithm];\r\n        return createPathfinder(createNavigator(this.grid), createHeuristic());\r\n    }\r\n\r\n    static usesHeuristic(algorithm: string) {\r\n        return algorithm === 'a*' || algorithm === 'bi-a*' ||\r\n            algorithm === 'best-first';\r\n    }\r\n\r\n    static hasBidirectional(algorithm: string) {\r\n        return CREATE_PATHFINDER['bi-' + algorithm] != null;\r\n    }\r\n\r\n    static makeBidirectional(algorithm: string) {\r\n        return 'bi-' + algorithm;\r\n    }\r\n}\r\n\r\nexport default PathfinderBuilder;\r\n\r\n","class VirtualTimer\r\n{\r\n    private timeout: NodeJS.Timeout;\r\n    private readonly callback: () => void\r\n    private timeStarted: number;\r\n    private timeRemaining: number;\r\n    private finished: boolean;\r\n\r\n    constructor(callback: () => void, countDown: number) {\r\n        this.callback = callback;\r\n        this.finished = false;\r\n        this.timeStarted = Date.now();\r\n        this.timeRemaining = countDown;\r\n        this.timeout = setTimeout(() => {\r\n            callback();\r\n            this.finished = true;\r\n        }, this.timeRemaining);\r\n    }\r\n\r\n    clear() {\r\n        clearTimeout(this.timeout);\r\n        this.finished = true;\r\n    }\r\n\r\n    pause() {\r\n        if(!this.finished) {\r\n            clearTimeout(this.timeout);\r\n            this.timeRemaining -= Date.now() - this.timeStarted;\r\n        }\r\n    }\r\n\r\n    resume() {\r\n        if(!this.finished) {\r\n            this.timeStarted = Date.now();\r\n            this.timeout = setTimeout(() => {\r\n                this.callback();\r\n                this.finished = true;\r\n            }, this.timeRemaining);\r\n        }\r\n    }\r\n\r\n    isFinished() {\r\n        return this.finished;\r\n    }\r\n\r\n    getNativeTimeout() {\r\n        return this.timeout;\r\n    }\r\n}\r\n\r\nexport default VirtualTimer;","import {createTile, Point, Tile, TileData} from '../core/Components';\r\nimport {Grid} from '../core/Grid';\r\nimport {HashSet, stringify} from '../structures/Hash';\r\n\r\nabstract class TerrainGenerator\r\n{\r\n    protected readonly width: number;\r\n    protected readonly height: number;\r\n    protected readonly ignore: HashSet;\r\n    protected readonly data: TileData;\r\n\r\n    protected constructor(width: number, height: number, data?: TileData, ignore?: Point[]) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.ignore = new HashSet();\r\n        if(data !== undefined) {\r\n            this.data = data;\r\n        } else {\r\n            this.data = createTile(true);\r\n        }\r\n        if(ignore !== undefined) {\r\n            for(const i of ignore) {\r\n                this.ignore.add(stringify(i));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws a tile to the grid\r\n     * @param grid\r\n     * @param tile\r\n     */\r\n    protected draw(grid: Grid, tile: Tile) {\r\n        if(!this.shouldIgnore(tile.point)) {\r\n            grid.mutateTile(tile);\r\n        }\r\n    }\r\n\r\n    protected getTerrain() {\r\n        return this.data;\r\n    }\r\n\r\n    protected getSolid() {\r\n        return {\r\n            pathCost: 1,\r\n            isSolid: true\r\n        }\r\n    }\r\n\r\n    protected shouldIgnore(point: Point) {\r\n        return this.ignore.has(stringify(point));\r\n    }\r\n\r\n    abstract generateTerrain(topLeft?: Point, bottomRight?: Point): Grid;\r\n}\r\n\r\nexport default TerrainGenerator;","import TerrainGenerator from './TerrainGenerator';\r\nimport {Point, TileData} from '../core/Components';\r\nimport RectGrid, {Grid} from '../core/Grid';\r\n\r\nclass TerrainRandomGenerator extends TerrainGenerator\r\n{\r\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\r\n    constructor(width: number, height: number, tileData?: TileData, ignore?: Point[]) {\r\n        super(width, height, tileData, ignore);\r\n    }\r\n\r\n    /**\r\n     * Performs a random terrain generation algorithm where each tile has a 1/4\r\n     * chance of being solid\r\n     * @param topLeft optional parameter to specify what point the terrain should start from\r\n     *  This should not be further up/left than (1,1)\r\n     * @param bottomRight optional parameter to specify how far down and right the terrain will go\r\n     *  This should not be further right/down than (width-2,height-2)\r\n     */\r\n    generateTerrain(topLeft?: Point, bottomRight?: Point): Grid {\r\n        const grid = new RectGrid(this.width, this.height);\r\n        if(topLeft === undefined) {\r\n            topLeft = {\r\n                x: 1, y: 1\r\n            }\r\n        }\r\n        if(bottomRight === undefined) {\r\n            bottomRight = {\r\n                x: grid.getWidth()-2,\r\n                y: grid.getHeight()-2\r\n            }\r\n        }\r\n        for(let x = topLeft.x - 1; x <= bottomRight.x + 1; x++) {\r\n            for(let y = topLeft.y - 1; y <= bottomRight.y + 1; y++) {\r\n                if(getRand(0, 3) === 0) {\r\n                    this.draw(grid,{\r\n                        point: {\r\n                            x: x, y: y\r\n                        },\r\n                        data: this.getTerrain()\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n}\r\n\r\n/**\r\n * Generate a random number between min and max, inclusive for min and max\r\n * @param min\r\n * @param max\r\n */\r\nfunction getRand(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max+1-min) + min);\r\n}\r\n\r\nexport default TerrainRandomGenerator;","import RectGrid, {Grid} from '../core/Grid';\r\nimport {Point, Tile, createTile, TileData} from '../core/Components';\r\nimport TerrainGenerator from './TerrainGenerator';\r\n\r\nconst LIMIT = 2;\r\n\r\nexport const NO_SKEW = 0;\r\nexport const VERTICAL_SKEW = 1;\r\nexport const HORIZONTAL_SKEW = 2;\r\n\r\ninterface Chamber {\r\n    topLeft: Point; //min\r\n    bottomRight: Point; //max\r\n}\r\n\r\nclass TerrainMazeGenerator extends TerrainGenerator\r\n{\r\n    private readonly divideWidth: (width: number, height: number) => boolean;\r\n\r\n    constructor(width: number, height: number, tileData?: TileData, ignore?: Point[], slant?: number) {\r\n        super(width, height, tileData, ignore);\r\n        if(slant === undefined || slant === NO_SKEW) {\r\n            this.divideWidth = divideWidthNoSkew;\r\n        } else if(slant === VERTICAL_SKEW) {\r\n            this.divideWidth = divideWidthVSkew;\r\n        } else if(slant === HORIZONTAL_SKEW) {\r\n            this.divideWidth = divideWidthHSkew;\r\n        } else {\r\n            throw new Error(\"Invalid recursive maze division skew type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs the recursive division maze generation algorithm on a new empty grid\r\n     * by bisecting parts until the maze can no longer be bisected\r\n     * Params must be within bounds and create a chamber\r\n     * @param topLeft optional parameter to specify what point the maze should start from\r\n     *  This should not be further up/left than (1,1)\r\n     * @param bottomRight optional parameter to specify how far down and right the maze will go\r\n     *  This should not be further right/down than (width-2,height-2)\r\n     */\r\n    generateTerrain(topLeft?: Point, bottomRight?: Point) {\r\n        const grid = new RectGrid(this.width, this.height);\r\n        if(topLeft === undefined) {\r\n            topLeft = {\r\n                x: 1, y: 1\r\n            }\r\n        }\r\n        if(bottomRight === undefined) {\r\n            bottomRight = {\r\n                x: grid.getWidth()-2,\r\n                y: grid.getHeight()-2\r\n            }\r\n        }\r\n        for(let x = topLeft.x - 1; x <= bottomRight.x + 1; x++) {\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: x, y: topLeft.y - 1\r\n                },\r\n                data: this.getSolid()\r\n            });\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: x, y: bottomRight.y + 1\r\n                },\r\n                data: this.getSolid()\r\n            });\r\n        }\r\n        for(let y = topLeft.y - 1; y <= bottomRight.y + 1; y++) {\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: topLeft.x - 1, y: y\r\n                },\r\n                data: this.getSolid()\r\n            });\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: bottomRight.x + 1, y: y\r\n                },\r\n                data: this.getSolid()\r\n            });\r\n        }\r\n        this.divide(grid,{\r\n            topLeft: topLeft,\r\n            bottomRight: bottomRight,\r\n        });\r\n        return grid;\r\n    }\r\n\r\n    /**\r\n     * Draws a list of tiles to the grid\r\n     * @param grid\r\n     * @param tiles\r\n     */\r\n    private drawArr(grid: Grid, tiles: Tile[]) {\r\n        for(const tile of tiles) {\r\n            this.draw(grid, tile);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a line between a region, with an open hole, in a chamber,\r\n     * and call bisection algorithm on it, and call division algorithms on\r\n     * its split chambers until no chambers can be bisected\r\n     * @param grid\r\n     * @param chamber\r\n     */\r\n    divide(grid: Grid, chamber: Chamber) {\r\n        const width = widthOf(chamber);\r\n        const height = heightOf(chamber);\r\n        const min = chamber.topLeft;\r\n        const max = chamber.bottomRight;\r\n        if(this.divideWidth(width,height)) {\r\n            if(width > LIMIT) {\r\n                //calculate axis\r\n                const randX = getMidPoint(\r\n                    min.x, max.x\r\n                );\r\n                //create axis wall\r\n                const toDraw: Tile[] = [];\r\n                for(let y = min.y; y <= max.y; y++) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: y\r\n                        },\r\n                        data: this.getTerrain()\r\n                    });\r\n                }\r\n                //create holes in axis wall\r\n                let edgeBlocked = false;\r\n                if(canDrawHole(grid.get({\r\n                    x: randX, y: min.y-1\r\n                }))) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: min.y\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(canDrawHole(grid.get({\r\n                    x: randX, y: max.y+1\r\n                }))) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: max.y\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(!edgeBlocked) {\r\n                    const randY = getRand(\r\n                        min.y, max.y,\r\n                    );\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                }\r\n                this.drawArr(grid, toDraw);\r\n                //create children chambers and recurse\r\n                const leftChamber = {\r\n                    topLeft: chamber.topLeft,\r\n                    bottomRight: {\r\n                        x: randX-1,\r\n                        y: chamber.bottomRight.y\r\n                    },\r\n                };\r\n                const rightChamber = {\r\n                    topLeft: {\r\n                        x: randX+1,\r\n                        y: chamber.topLeft.y\r\n                    },\r\n                    bottomRight: chamber.bottomRight,\r\n                };\r\n                this.divide(grid, leftChamber);\r\n                this.divide(grid, rightChamber);\r\n            }\r\n        } else {\r\n            if(height > LIMIT) {\r\n                //calculate axis\r\n                const randY = getMidPoint(\r\n                    min.y, max.y\r\n                );\r\n                //draw axis wall\r\n                const toDraw: Tile[] = [];\r\n                for(let x = min.x; x <= max.x; x++) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: x, y: randY\r\n                        },\r\n                        data: this.getTerrain()\r\n                    });\r\n                }\r\n                //create holes in axis wall\r\n                let edgeBlocked = false;\r\n                if(canDrawHole(grid.get({\r\n                    x: min.x-1, y: randY\r\n                }))) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: min.x, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(canDrawHole(grid.get({\r\n                    x: max.x+1, y: randY\r\n                }))) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: max.x, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(!edgeBlocked) {\r\n                    const randX = getRand(\r\n                        min.x, max.x,\r\n                    );\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                }\r\n                this.drawArr(grid, toDraw);\r\n                //create children chambers and recurse\r\n                const topChamber = {\r\n                    topLeft: chamber.topLeft,\r\n                    bottomRight: {\r\n                        x: chamber.bottomRight.x,\r\n                        y: randY-1\r\n                    },\r\n                };\r\n                const bottomChamber = {\r\n                    topLeft: {\r\n                        x: chamber.topLeft.x,\r\n                        y: randY+1\r\n                    },\r\n                    bottomRight: chamber.bottomRight,\r\n                };\r\n                this.divide(grid, topChamber);\r\n                this.divide(grid, bottomChamber);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction divideWidthNoSkew(width: number, height: number) {\r\n    return width >= height;\r\n}\r\n\r\nfunction divideWidthHSkew(width: number, height: number) {\r\n    return width >= height * 2;\r\n}\r\n\r\nfunction divideWidthVSkew(width: number, height: number) {\r\n    return width * 2 >= height;\r\n}\r\n\r\nfunction widthOf(chamber: Chamber) {\r\n    return chamber.bottomRight.x - chamber.topLeft.x + 1;\r\n}\r\n\r\nfunction heightOf(chamber: Chamber) {\r\n    return chamber.bottomRight.y - chamber.topLeft.y + 1;\r\n}\r\n\r\nfunction canDrawHole(tile: Tile) {\r\n    return tile.data.pathCost === 1 && !tile.data.isSolid;\r\n}\r\n\r\n/**\r\n * Returns the 'midpoint' to be used\r\n * @param min\r\n * @param max\r\n */\r\nfunction getMidPoint(min: number, max: number) {\r\n    const range = max - min;\r\n    if(range >= 20) {\r\n        return ((min+max)/2) >> 0;\r\n    } else if(range > 5) {\r\n        const mid = ((min+max)/2) >> 0;\r\n        const points = [mid, mid+1];\r\n        return points[getRand(0,points.length-1)];\r\n    } else {\r\n        return getRand(min+1,max-1);\r\n    }\r\n}\r\n\r\n/**\r\n * Generate a random number between min and max, inclusive for min and max\r\n * @param min\r\n * @param max\r\n */\r\nfunction getRand(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max+1-min) + min);\r\n}\r\n\r\nexport default TerrainMazeGenerator;","import TerrainRandomGenerator from './TerrainRandomGenerator';\r\nimport TerrainMazeGenerator from './TerrainMazeGenerator';\r\nimport {createTile, Point, TileData} from '../core/Components';\r\n\r\nexport const MAZE = 0;\r\nexport const MAZE_VERTICAL_SKEW = 1;\r\nexport const MAZE_HORIZONTAL_SKEW = 2;\r\nexport const RANDOM_TERRAIN = 3;\r\n\r\nclass TerrainGeneratorBuilder\r\n{\r\n    private width: number = 0;\r\n    private height: number = 0;\r\n    private type: number = MAZE;\r\n    private ignore: Point[] = [];\r\n    private data: TileData = createTile(true);\r\n\r\n    setDimensions(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n\r\n    setGeneratorType(type: number) {\r\n        this.type = type;\r\n        return this;\r\n    }\r\n\r\n    setIgnorePoints(ignore: Point[]) {\r\n        this.ignore = ignore.slice();\r\n        return this;\r\n    }\r\n\r\n    setTileData(data: TileData) {\r\n        this.data = data;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Builds a terrain generator with the specified type\r\n     */\r\n    build() {\r\n       if(this.type >= RANDOM_TERRAIN) {\r\n           return new TerrainRandomGenerator(this.width, this.height, this.data, this.ignore);\r\n       } else {\r\n           return new TerrainMazeGenerator(this.width, this.height, this.data, this.ignore, this.type);\r\n       }\r\n    }\r\n}\r\n\r\nexport default TerrainGeneratorBuilder;","import React, {RefObject} from 'react';\r\nimport './Grid.css';\r\nimport GridBackground from './GridBackground';\r\nimport GridForeground from './GridForeground';\r\nimport StatsPanel from './StatsPanel';\r\nimport {Node} from '../../pathfinding/algorithms/Node';\r\nimport PathfindingSettings from '../PathfindingSettings';\r\nimport PathfinderBuilder from '../../pathfinding/algorithms/PathfinderBuilder';\r\nimport Pathfinder from '../../pathfinding/algorithms/Pathfinder';\r\nimport {createTile, Point, Tile, TileData} from '../../pathfinding/core/Components';\r\nimport {euclidean} from '../../pathfinding/algorithms/Heuristics';\r\nimport VirtualTimer from '../utility/VirtualTimer';\r\nimport TerrainGeneratorBuilder, {RANDOM_TERRAIN} from '../../pathfinding/algorithms/TerrainGeneratorBuilder';\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    settings: Readonly<PathfindingSettings>,\r\n    onChangeVisualizing: (visualizing: boolean) => void;\r\n}\r\n\r\ninterface IState {\r\n    time: number,\r\n    length: number,\r\n    cost: number,\r\n    nodes: number,\r\n    algorithm: string,\r\n    weightOpacity: number\r\n}\r\n\r\nclass PathfindingVisualizer extends React.Component<IProps,IState>\r\n{\r\n    //references to expose background and foreground grids to parent\r\n    private background: RefObject<GridBackground> = React.createRef();\r\n    private foreground: RefObject<GridForeground> = React.createRef();\r\n    private stats: RefObject<StatsPanel> = React.createRef();\r\n\r\n    private visualized = false;\r\n    private visualizing = false;\r\n    private visualTimeouts: VirtualTimer[]  = [];\r\n    private generations: Node[] = [];\r\n\r\n    private mazeTile: TileData = createTile(true);\r\n\r\n    private readonly tilesX: number;\r\n    private readonly tilesY: number;\r\n    private readonly tileWidth: number\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const w = window.screen.availWidth - (window.outerWidth - window.innerWidth);\r\n        const h = window.screen.availHeight - (window.outerHeight - window.innerHeight);\r\n        this.tileWidth = this.props.tileWidth;\r\n        this.tilesX = Math.floor(w / this.tileWidth) + 1;\r\n        this.tilesY = Math.floor((h - 75 - 30) / this.tileWidth) + 1;\r\n        this.state = {\r\n            time: -1,\r\n            length: -1,\r\n            cost: -1,\r\n            nodes: -1,\r\n            algorithm: '',\r\n            weightOpacity: 1\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps: Readonly<IProps>, nextState: Readonly<IState>) {\r\n        const prevState = this.state;\r\n        return prevState.time !== nextState.time ||\r\n            prevState.length !== nextState.length ||\r\n            prevState.cost !== nextState.cost ||\r\n            prevState.nodes !== nextState.nodes ||\r\n            prevState.algorithm !== nextState.algorithm ||\r\n            prevState.weightOpacity !== nextState.weightOpacity;\r\n    }\r\n\r\n    changeTile = (data: TileData) => {\r\n        this.mazeTile = data; //enables weighted mazes\r\n        this.foreground.current!.changeTile(data);\r\n    }\r\n\r\n    canShowArrows = () => {\r\n        const settings = this.props.settings;\r\n        return settings.showArrows && settings.algorithm !== 'dfs';\r\n    }\r\n\r\n    canShowFrontier = () => {\r\n        const settings = this.props.settings;\r\n        return settings.visualizeAlg;\r\n    }\r\n\r\n    /**\r\n     * Pause the delayed pathfinding algorithm being performed\r\n     */\r\n    pausePathfinding = () => {\r\n        for(const timeout of this.visualTimeouts) {\r\n            timeout.pause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resume the delayed pathfinding algorithm being performed\r\n     * Will reset the timeouts to the last time the timeout was paused/started\r\n     * if not properly called while the timeout is paused\r\n     */\r\n    resumePathfinding = () => {\r\n        for(const timeout of this.visualTimeouts) {\r\n            timeout.resume();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs the pathfinding algorithm on the grid and visualizes it\r\n     */\r\n    doPathfinding = () => {\r\n        this.clearPath();\r\n        const settings = this.props.settings;\r\n        const pathfinder = this.getPathfinder(settings);\r\n        const path = this.findPath(pathfinder);\r\n        this.generations = pathfinder.getRecentGenerations();\r\n        if(this.canShowArrows()) {\r\n            this.addArrowGenerations(this.generations);\r\n        }\r\n        if(this.canShowFrontier()) {\r\n            this.visualizeGenerations(this.generations);\r\n        }\r\n        this.drawPath(path);\r\n    }\r\n\r\n    /**\r\n     * Performs the pathfinding algorithm on the grid and visualizes it with delays between successive\r\n     * node generations\r\n     * If the visualizer is currently visualizing, the visualization stops instead\r\n     */\r\n    doDelayedPathfinding = () => {\r\n        this.clearVisualization();\r\n        this.clearPath();\r\n        const settings = this.props.settings;\r\n        this.visualized = false;\r\n        const foreground = this.foreground.current!;\r\n        foreground.toggleDisable();\r\n        if(!this.visualizing) { //start visualization if not visualizing\r\n            this.visualizing = true;\r\n            this.props.onChangeVisualizing(this.visualizing);\r\n            const pathfinder = this.getPathfinder(settings);\r\n            const path = this.findPath(pathfinder);\r\n            const promises: Promise<VirtualTimer>[] = []; //to call function when timeouts finish\r\n            this.visualTimeouts = [];\r\n            const baseIncrement = settings.delayInc;\r\n            let delay = 0;\r\n            const visualizeAlg = this.canShowFrontier();\r\n            const showArrows = this.canShowArrows();\r\n            if(showArrows || visualizeAlg) {\r\n                const expandVisualization = visualizeAlg ? this.visualizeGeneration : () => {};\r\n                const expandArrows = showArrows ? this.addArrowGeneration : () => {};\r\n                this.generations = pathfinder.getRecentGenerations();\r\n                this.generations.forEach((generation) => {\r\n                    const promise = new Promise<VirtualTimer>((resolve) => {\r\n                        //each generation gets a higher timeout\r\n                        const timeout = new VirtualTimer(() => {\r\n                            expandArrows(generation);\r\n                            expandVisualization(generation);\r\n                            resolve(timeout);\r\n                        }, delay);\r\n                        this.visualTimeouts.push(timeout);\r\n                    });\r\n                    promises.push(promise);\r\n                    delay += baseIncrement;\r\n                });\r\n            }\r\n            //call functions when timeouts finish\r\n            Promise.all(promises).then(() => {\r\n                this.drawPath(path);\r\n                foreground.toggleDisable();\r\n                this.visualizing = false;\r\n                this.visualized = true;\r\n                this.props.onChangeVisualizing(this.visualizing);\r\n            });\r\n        } else { //stop visualizing if visualizing\r\n            for (const timeout of this.visualTimeouts) {\r\n                timeout.clear();\r\n            }\r\n            this.visualizing = false;\r\n            this.props.onChangeVisualizing(this.visualizing);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the pathfinder for the settings\r\n     * @param settings\r\n     */\r\n    private getPathfinder = (settings: PathfindingSettings) => {\r\n        const algorithmKey = settings.algorithm;\r\n        const algorithm = settings.bidirectional && PathfinderBuilder.hasBidirectional(algorithmKey) ?\r\n            PathfinderBuilder.makeBidirectional(algorithmKey) : algorithmKey;\r\n        return new PathfinderBuilder(this.foreground.current!.state.grid)\r\n            .setAlgorithm(algorithm)\r\n            .setHeuristic(settings.heuristicKey)\r\n            .setNavigator(settings.navigatorKey)\r\n            .build();\r\n    }\r\n\r\n    /**\r\n     * Find path with a given pathfinder, includes benchmarking\r\n     * @param pathfinder\r\n     */\r\n    private findPath = (pathfinder: Pathfinder) => {\r\n        const foreground = this.foreground.current!;\r\n        const t0 = performance.now();\r\n        const path = pathfinder.findPath(foreground.state.initial, foreground.state.goal);\r\n        const t1 = performance.now();\r\n        const t2 = (t1 - t0);\r\n        this.setState({\r\n            time: t2,\r\n            nodes: pathfinder.getRecentNodes(),\r\n            length: calcLength(foreground.state.initial, path),\r\n            cost: calcCost(foreground.state.grid.get(foreground.state.initial), path),\r\n            algorithm: pathfinder.getAlgorithmName()\r\n        });\r\n        return path;\r\n    }\r\n\r\n    /**\r\n     * Draw path on the grid and change length on ui\r\n     * @param path\r\n     */\r\n    private drawPath = (path: Tile[]) => {\r\n        const foreground = this.foreground.current!\r\n        path.unshift(this.foreground.current!.state.grid.get(foreground.state.initial));\r\n        this.foreground.current!.drawPath(path);\r\n    }\r\n\r\n    /**\r\n     * Called when child foreground moves a tile\r\n     */\r\n    private onTilesDragged = () => {\r\n        if(this.visualized) {\r\n            this.clearVisualization();\r\n            this.doPathfinding();\r\n            this.visualized = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create terrain on the grid foreground\r\n     */\r\n    createTerrain = (mazeType: number) => {\r\n        if(this.visualizing) {\r\n            return;\r\n        }\r\n        this.clearTiles();\r\n        this.clearPath();\r\n        this.clearVisualization();\r\n        const foreground = this.foreground.current!;\r\n        const end = this.calcEndPointInView();\r\n        const newState = (mazeType !== RANDOM_TERRAIN) ? {\r\n            initial: {\r\n                x: 1, y: 1\r\n            },\r\n            goal: {\r\n                x: end.x-2, y: end.y-2\r\n            }\r\n        } : {\r\n            initial: {\r\n                x: 1, y: ((end.y-1) / 2) >> 0\r\n            },\r\n            goal: {\r\n                x: end.x-2, y: ((end.y-1) / 2) >> 0\r\n            }\r\n        };\r\n        foreground.setState(newState,() => {\r\n            const prevGrid = foreground.state.grid;\r\n            const generator = new TerrainGeneratorBuilder()\r\n                .setDimensions(\r\n                    prevGrid.getWidth(),\r\n                    prevGrid.getHeight()\r\n                )\r\n                .setGeneratorType(mazeType)\r\n                .setIgnorePoints([foreground.state.initial, foreground.state.goal])\r\n                .setTileData(this.mazeTile)\r\n                .build();\r\n            const topLeft = {\r\n                x: 1, y: 1\r\n            };\r\n            const bottomRight = {\r\n                x: end.x-2, y: end.y-2\r\n            };\r\n            const grid = generator.generateTerrain(topLeft, bottomRight);\r\n            foreground.drawGrid(grid);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Calculate the end/goal point in view of the screen\r\n     */\r\n    calcEndPointInView = () => {\r\n        const xEnd = window.innerWidth / this.tileWidth;\r\n        const yEnd = (window.innerHeight - 75 - this.stats.current!.getHeight()) / this.tileWidth;\r\n        const xFloor = Math.floor(xEnd);\r\n        const yFloor = Math.floor(yEnd);\r\n        const xDecimal = xEnd - xFloor;\r\n        const yDecimal = yEnd - yFloor;\r\n        let x = xDecimal > 0.05 ? Math.ceil(xEnd) : xFloor;\r\n        let y = yDecimal > 0.05 ? Math.ceil(yEnd) : yFloor;\r\n        if(x > this.tilesX) {\r\n            x = this.tilesX\r\n        }\r\n        if(y > this.tilesY) {\r\n            y = this.tilesY\r\n        }\r\n        return {\r\n            x: x, y: y\r\n        }\r\n    }\r\n\r\n    resetPoints = () => {\r\n        if(!this.visualizing) {\r\n            this.foreground.current!.resetPoints();\r\n        }\r\n    }\r\n\r\n    clearPath = () => {\r\n        this.foreground.current!.erasePath();\r\n    }\r\n\r\n    clearTiles = () => {\r\n        this.foreground.current!.clearTiles();\r\n    }\r\n\r\n    clearTilesChecked = () => {\r\n        if(!this.visualizing) {\r\n            this.foreground.current!.clearTiles();\r\n        }\r\n    }\r\n\r\n    clearVisualization = () => {\r\n        this.visualized = false;\r\n        this.background.current!.clear();\r\n    }\r\n\r\n    clearVisualizationChecked = () => {\r\n        if(!this.visualizing) {\r\n            this.visualized = false;\r\n            this.background.current!.clear();\r\n        }\r\n    }\r\n\r\n    private visualizeGenerations = (generations: Node[]) => {\r\n        this.background.current!.visualizeGenerations(generations);\r\n        this.visualized = true;\r\n    }\r\n\r\n    private visualizeGeneration = (generation: Node) => {\r\n        this.background.current!.visualizeGeneration(generation);\r\n    }\r\n\r\n    private addArrowGenerations = (generations: Node[]) => {\r\n        this.background.current!.addArrowGenerations(generations);\r\n    }\r\n\r\n    private addArrowGeneration = (generation: Node) => {\r\n        this.background.current!.addArrowGeneration(generation);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <StatsPanel ref={this.stats} algorithm={this.state.algorithm}\r\n                            length={this.state.length} cost={this.state.cost}\r\n                            time={this.state.time} nodes={this.state.nodes}\r\n                />\r\n                <div>\r\n                    <GridBackground ref={this.background} tileWidth={this.tileWidth}\r\n                                    tilesX={this.tilesX} tilesY={this.tilesY}\r\n                    />\r\n                    <GridForeground ref={this.foreground} topMargin={75}\r\n                                    onTilesDragged={this.onTilesDragged} tileSize={this.tileWidth}\r\n                                    tilesX={this.tilesX} tilesY={this.tilesY}\r\n                                    weightOpacity={this.state.weightOpacity}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction calcLength(initial: Point, path: Tile[]) {\r\n    if(path.length === 0) {\r\n        return 0;\r\n    }\r\n    let len = euclidean(initial, path[0].point);\r\n    for (let i = 0; i < path.length - 1; i++) {\r\n        len += euclidean(path[i].point, path[i + 1].point);\r\n    }\r\n    return +(len).toFixed(3);\r\n}\r\n\r\nfunction calcCost(initial: Tile, path: Tile[]) {\r\n    if(path.length === 0) {\r\n        return 0;\r\n    }\r\n    let len = euclidean(initial.point, path[0].point) * path[0].data.pathCost;\r\n    for (let i = 0; i < path.length - 1; i++) {\r\n        len += euclidean(path[i].point, path[i + 1].point) * path[i + 1].data.pathCost;\r\n    }\r\n    return +(len).toFixed(3);\r\n}\r\n\r\nexport default PathfindingVisualizer;","import React from 'react';\r\n\r\ninterface IProps {\r\n    boxStyle: string,\r\n    defaultChecked: boolean,\r\n    disabled?: boolean,\r\n    onChange: (checked: boolean) => void\r\n}\r\n\r\ninterface IState {\r\n    checked: boolean\r\n}\r\n\r\nclass Checkbox extends React.Component<IProps,IState>\r\n{\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            checked: this.props.defaultChecked\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger callback and change checkbox state\r\n     */\r\n    onChange = () => {\r\n        this.setState(prevState => ({\r\n            checked: !prevState.checked\r\n        }), () => this.props.onChange(this.state.checked));\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <input checked={this.state.checked} type='checkbox' disabled={this.props.disabled}\r\n                       className={this.props.boxStyle} onKeyPress={this.onChange} onChange={this.onChange}\r\n                >\r\n                </input>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Checkbox;","import React from 'react';\r\n\r\ninterface IProps {\r\n    min: number,\r\n    max: number,\r\n    default: number,\r\n    step: number,\r\n    sliderStyle: string,\r\n    onChange: (val: number) => void\r\n}\r\n\r\ninterface IState {\r\n    value: number\r\n}\r\n\r\nclass SteppedRangeSlider extends React.Component<IProps, IState>\r\n{\r\n    private mouseUp = true;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            value: this.props.default\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger callback when slider value is changed\r\n     * @param e\r\n     */\r\n    onChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n        if(!this.mouseUp) { //to prevent firefox from resetting on release\r\n            const val = Number(e.currentTarget.value);\r\n            this.setState({\r\n                value: val\r\n            }, () => this.props.onChange(val));\r\n        }\r\n    }\r\n\r\n    onMouseUp = () => {\r\n        this.mouseUp = true;\r\n    }\r\n\r\n    onMouseDown = () => {\r\n        this.mouseUp = false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <input type='range' list='step-list'\r\n                   value={this.state.value}\r\n                   min={this.props.min} max={this.props.max}\r\n                   step={this.props.step} className={this.props.sliderStyle}\r\n                   onInput={this.onChange}\r\n                   onMouseUp={this.onMouseUp}\r\n                   onMouseDown={this.onMouseDown}\r\n                   onTouchEnd={this.onMouseUp}\r\n                   onTouchStart={this.onMouseDown}\r\n            >\r\n            </input>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SteppedRangeSlider;","import React from 'react';\r\n\r\ninterface IProps {\r\n    boxStyle: string,\r\n    defaultChecked: number,\r\n    disabled: boolean,\r\n    onChange: (() => void)[]\r\n}\r\n\r\ninterface IState {\r\n    checked: boolean[];\r\n}\r\n\r\nclass RadioButtonGroup extends React.Component<IProps, IState>\r\n{\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const checked: boolean[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            checked.push(i === this.props.defaultChecked);\r\n        }\r\n        this.state = {\r\n            checked: checked\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set all radio buttons to checked aside from the index\r\n     * of the one that was changed\r\n     * Trigger callback\r\n     * @param index\r\n     */\r\n    private onChange = (index: number) => {\r\n        const checked: boolean[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            checked.push(i === index);\r\n        }\r\n        this.setState({\r\n            checked: checked\r\n        }, () => this.props.onChange[index]());\r\n    }\r\n\r\n    render() {\r\n        const children = React.Children.toArray(this.props.children);\r\n        const radioButtons: JSX.Element[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            radioButtons.push(\r\n                <div key={i}>\r\n                    <input checked={this.state.checked[i]} type='radio' disabled={this.props.disabled}\r\n                           className={this.props.boxStyle}\r\n                           onChange={() => this.onChange(i)}\r\n                    >\r\n                    </input>\r\n                    {children[i]}\r\n                </div>\r\n            );\r\n        }\r\n        return radioButtons;\r\n    };\r\n}\r\n\r\nexport default RadioButtonGroup;","import React from 'react';\r\nimport './Navbar.css'\r\nimport Checkbox from '../utility/Checkbox';\r\nimport SteppedRangeSlider from '../utility/SteppedRangeSlider';\r\nimport RadioButtonGroup from '../utility/RadioButtonGroup';\r\n\r\ninterface VisualProps {\r\n    onChangeViz: () => void,\r\n    onChangeShowArrows: () => void,\r\n    onChangeWOpacity: () => void,\r\n    disabled: boolean\r\n}\r\n\r\ninterface SpeedProps {\r\n    onChange: (value: number) => void,\r\n    initialSpeed: number\r\n}\r\n\r\ninterface SpeedState {\r\n    speedText: string\r\n}\r\n\r\ninterface AlgorithmProps {\r\n    onChangeBidirectional: (checked: boolean) => void,\r\n    disabled: boolean\r\n}\r\n\r\ninterface HeuristicProps {\r\n    onClickManhattan: () => void,\r\n    onClickEuclidean: () => void,\r\n    onClickChebyshev: () => void,\r\n    onClickOctile: () => void,\r\n    disabled: boolean\r\n}\r\n\r\nconst SPEED_STEP = 2;\r\nconst SPEED_INITIAL = 4;\r\nconst MAX = 18;\r\n\r\nexport class VisualSettings extends React.Component<VisualProps>\r\n{\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Visualization</div>\r\n                <Checkbox defaultChecked={true} boxStyle='box'\r\n                          onChange={this.props.onChangeViz}>\r\n                    Show Frontier\r\n                </Checkbox>\r\n                <Checkbox defaultChecked={true} boxStyle='box'\r\n                          onChange={this.props.onChangeShowArrows}\r\n                          disabled={this.props.disabled}>\r\n                    Show Tree\r\n                </Checkbox>\r\n                <Checkbox defaultChecked={false} boxStyle='box'\r\n                          onChange={this.props.onChangeWOpacity}>\r\n                    Translucent Weights\r\n                </Checkbox>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class SpeedSettings extends React.Component<SpeedProps, SpeedState>\r\n{\r\n    constructor(props: SpeedProps) {\r\n        super(props);\r\n        this.state = {\r\n            speedText: String(this.props.initialSpeed)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback function to be called when slider is changed\r\n     * Call another callback and change text\r\n     * @param value\r\n     */\r\n    onChangeSpeed = (value: number) => {\r\n        const speed = SPEED_INITIAL + SPEED_STEP * value;\r\n        this.setState({\r\n            speedText: String(speed)\r\n        })\r\n        this.props.onChange(speed);\r\n    }\r\n\r\n    render() {\r\n        const options: JSX.Element[] = [];\r\n        for(let i = 1; i <= MAX; i++) {\r\n            options.push(<option key={'option ' + i}>{i}</option>);\r\n        }\r\n        return (\r\n            <div className='slider-container'>\r\n                <div className='slider-text'>\r\n                    Speed: <div className='speed-text'> {this.state.speedText} </div>\r\n                </div>\r\n                    <SteppedRangeSlider min={1} max={MAX} step={1}\r\n                                        default={(this.props.initialSpeed - SPEED_INITIAL) / SPEED_STEP}\r\n                                        sliderStyle='slider speed-slider'\r\n                                        onChange={this.onChangeSpeed}\r\n                />\r\n                <datalist id='step-list'>\r\n                    {options}\r\n                </datalist>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class AlgorithmSettings extends React.Component<AlgorithmProps>\r\n{\r\n    constructor(props: AlgorithmProps) {\r\n        super(props);\r\n        this.state = {\r\n            disabled: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Algorithm</div>\r\n                <Checkbox defaultChecked={false} boxStyle='box'\r\n                          disabled={this.props.disabled}\r\n                          onChange={this.props.onChangeBidirectional}>\r\n                    Bidirectional\r\n                </Checkbox>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class HeuristicSettings extends React.Component<HeuristicProps>\r\n{\r\n    constructor(props: HeuristicProps) {\r\n        super(props);\r\n        this.state = {\r\n            disabled: false\r\n        }\r\n    }\r\n\r\n    disable = () => {\r\n        this.setState({\r\n            disabled: true\r\n        })\r\n    }\r\n\r\n    enable = () => {\r\n        this.setState({\r\n            disabled: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Heuristic</div>\r\n                <RadioButtonGroup boxStyle='box'\r\n                                  defaultChecked={0}\r\n                                  disabled={this.props.disabled}\r\n                                  onChange={[\r\n                                      this.props.onClickManhattan, this.props.onClickEuclidean,\r\n                                      this.props.onClickChebyshev, this.props.onClickOctile\r\n                                  ]}\r\n                >\r\n                    {[<span key='Manhattan'>Manhattan</span>, <span key='Euclidean'>Euclidean</span>,\r\n                        <span key='Chebyshev'>Chebyshev</span>, <span key='Octile<'>Octile</span>]}\r\n                </RadioButtonGroup>\r\n            </div>\r\n        )\r\n    }\r\n}","import PathfindingSettings, {getDefaultSettings} from './PathfindingSettings';\r\n\r\nclass SettingsManager\r\n{\r\n    settings: PathfindingSettings = getDefaultSettings();\r\n\r\n    changeAlgo = (algo: string) => {\r\n        this.settings.algorithm = algo;\r\n    }\r\n\r\n    changeVisualize = () => {\r\n        this.settings.visualizeAlg = !this.settings.visualizeAlg;\r\n    }\r\n\r\n    changeShowArrows = () => {\r\n        this.settings.showArrows = !this.settings.showArrows;\r\n    }\r\n\r\n    changeBidirectional = () => {\r\n        this.settings.bidirectional = !this.settings.bidirectional;\r\n    }\r\n\r\n    changeSpeed = (value: number) => {\r\n        this.settings.delayInc = value;\r\n    }\r\n\r\n    changeManhattan = () => {\r\n        this.settings.heuristicKey = 'manhattan';\r\n    }\r\n\r\n    changeEuclidean = () => {\r\n        this.settings.heuristicKey = 'euclidean';\r\n    }\r\n\r\n    changeChebyshev = () => {\r\n        this.settings.heuristicKey = 'chebyshev';\r\n    }\r\n\r\n    changeOctile = () => {\r\n        this.settings.heuristicKey = 'octile';\r\n    }\r\n}\r\n\r\nexport default SettingsManager;","interface PathfindingSettings\r\n{\r\n    visualizeAlg: boolean,\r\n    showArrows: boolean,\r\n    delayInc: number,\r\n    algorithm: string,\r\n    heuristicKey: string,\r\n    navigatorKey: string,\r\n    bidirectional: boolean,\r\n}\r\n\r\nexport function getDefaultSettings(): PathfindingSettings {\r\n    return {\r\n        visualizeAlg: true,\r\n        showArrows: true,\r\n        delayInc: 8,\r\n        algorithm: 'a*',\r\n        heuristicKey: 'manhattan',\r\n        navigatorKey: 'plus',\r\n        bidirectional: false,\r\n    }\r\n}\r\n\r\nexport default PathfindingSettings;","export default __webpack_public_path__ + \"static/media/react.93a4bdf1.png\";","import React, {RefObject} from 'react';\r\nimport TopBar from './navbar/TopBar';\r\nimport {VisualizeButton, SettingsButton} from './navbar/Buttons';\r\nimport {AlgorithmDropDown, ClearDropDown, MazeDropDown, TilesDropDown} from './navbar/DropDownComponents';\r\nimport DraggablePanel from './utility/DraggablePanel';\r\nimport PathfindingVisualizer from './grid/PathfindingVisualizer';\r\nimport {VisualSettings, SpeedSettings, AlgorithmSettings, HeuristicSettings} from './navbar/SettingPanels';\r\nimport SettingsManager from './SettingsManager';\r\nimport PathfinderBuilder from '../pathfinding/algorithms/PathfinderBuilder';\r\nimport {MAZE, MAZE_HORIZONTAL_SKEW, MAZE_VERTICAL_SKEW, RANDOM_TERRAIN} from '../pathfinding/algorithms/TerrainGeneratorBuilder';\r\nimport Icon from './web-content/react.png';\r\n\r\ninterface IProps {}\r\n\r\ninterface IState {\r\n    heuristicDisabled: boolean,\r\n    bidirectionalDisabled: boolean,\r\n    arrowsDisabled: boolean,\r\n\r\n    panelShow: boolean,\r\n\r\n    visualizing: boolean,\r\n    paused: boolean\r\n}\r\n\r\nclass PathfindingApp extends React.Component<IProps, IState>\r\n{\r\n    //expose visualizer to parent to connect to button siblings\r\n    private visualizer: RefObject<PathfindingVisualizer> = React.createRef();\r\n\r\n    //drop down refs needed to invoke behavior between dropdowns\r\n    private algDropDown: RefObject<AlgorithmDropDown> = React.createRef();\r\n    private clrDropDown: RefObject<ClearDropDown> = React.createRef();\r\n    private mazeDropDown: RefObject<MazeDropDown> = React.createRef();\r\n    private tilesDropDown: RefObject<TilesDropDown> = React.createRef();\r\n\r\n    private settingsManager: SettingsManager = new SettingsManager();\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            heuristicDisabled: false,\r\n            bidirectionalDisabled: false,\r\n            arrowsDisabled: false,\r\n            panelShow: false,\r\n            visualizing: false,\r\n            paused: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('click', () => {\r\n            this.algDropDown.current!.hide();\r\n            this.clrDropDown.current!.hide();\r\n            this.mazeDropDown.current!.hide();\r\n            this.tilesDropDown.current!.hide();\r\n        });\r\n    }\r\n\r\n    onClickAlgDrop = () => {\r\n        this.clrDropDown.current!.hide();\r\n        this.mazeDropDown.current!.hide();\r\n        this.tilesDropDown.current!.hide();\r\n    }\r\n\r\n    onClickClrDrop = () => {\r\n        this.algDropDown.current!.hide();\r\n        this.mazeDropDown.current!.hide();\r\n        this.tilesDropDown.current!.hide();\r\n    }\r\n\r\n    onClickMazeDrop = () => {\r\n        this.clrDropDown.current!.hide();\r\n        this.algDropDown.current!.hide();\r\n        this.tilesDropDown.current!.hide();\r\n    }\r\n\r\n    onClickTilesDrop = () => {\r\n        this.clrDropDown.current!.hide();\r\n        this.algDropDown.current!.hide();\r\n        this.mazeDropDown.current!.hide();\r\n    }\r\n\r\n    changeVButtonColor = (visualizing: boolean) => {\r\n        this.setState({\r\n            visualizing: visualizing\r\n        })\r\n    }\r\n\r\n    toggleSettings = () => {\r\n        this.setState(prevState => ({\r\n            panelShow: !prevState.panelShow\r\n        }));\r\n    }\r\n\r\n    hideSettings = () => {\r\n        this.setState({\r\n            panelShow: false\r\n        });\r\n    }\r\n\r\n    changeAlgo = (algorithm: string) => {\r\n        this.setState({\r\n            heuristicDisabled: !PathfinderBuilder.usesHeuristic(algorithm),\r\n            bidirectionalDisabled: !PathfinderBuilder.hasBidirectional(algorithm),\r\n            arrowsDisabled: algorithm === 'dfs'\r\n        });\r\n        this.settingsManager.changeAlgo(algorithm);\r\n    }\r\n\r\n    doPathfinding = () => {\r\n        this.setState({\r\n            paused: false\r\n        });\r\n        this.visualizer.current!.doDelayedPathfinding();\r\n    }\r\n\r\n    pausePathfinding = () => {\r\n        this.setState({\r\n            paused: true\r\n        });\r\n        this.visualizer.current!.pausePathfinding();\r\n    }\r\n\r\n    resumePathfinding = () => {\r\n        this.setState({\r\n            paused: false\r\n        });\r\n        this.visualizer.current!.resumePathfinding();\r\n    }\r\n\r\n    clearPath = () => {\r\n        this.visualizer.current!.clearPath();\r\n        this.visualizer.current!.clearVisualizationChecked();\r\n    }\r\n\r\n    clearTiles = () => {\r\n        this.clearPath();\r\n        this.visualizer.current!.clearTilesChecked();\r\n    }\r\n\r\n    resetBoard = () => {\r\n        this.clearPath();\r\n        this.clearTiles();\r\n        this.visualizer.current!.resetPoints();\r\n    }\r\n\r\n    createMaze = () => {\r\n        this.visualizer.current!.createTerrain(MAZE);\r\n    }\r\n\r\n    createMazeVSkew = () => {\r\n        this.visualizer.current!.createTerrain(MAZE_VERTICAL_SKEW);\r\n    }\r\n\r\n    createMazeHSkew = () => {\r\n        this.visualizer.current!.createTerrain(MAZE_HORIZONTAL_SKEW);\r\n    }\r\n\r\n    createRandomTerrain = () => {\r\n        this.visualizer.current!.createTerrain(RANDOM_TERRAIN);\r\n    }\r\n\r\n    changeTile = (cost: number) => {\r\n        this.visualizer.current!.changeTile({\r\n            isSolid: cost === -1,\r\n            pathCost: cost\r\n        });\r\n    }\r\n\r\n    onChangeWOpacity = () => {\r\n        this.visualizer.current!.setState(prevState => ({\r\n            weightOpacity: prevState.weightOpacity === 1 ? 0.2 : 1\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        const useIcon = window.innerWidth <= 830;\r\n        const title = 'Pathfinding Visualizer';\r\n        const mobile = isMobile();\r\n        const tileWidth =  mobile ? 47 : Math.round(window.screen.availWidth / 57);\r\n        if(mobile) {\r\n            this.settingsManager.changeSpeed(20);\r\n        } else if(window.screen.availWidth > 2500) {\r\n            this.settingsManager.changeSpeed(12);\r\n        }\r\n        return (\r\n            <div>\r\n                <DraggablePanel title='Grid Settings'\r\n                                show={this.state.panelShow}\r\n                                onClickXButton={this.hideSettings}\r\n                                width={350}\r\n                                height={425}\r\n                >\r\n                    <VisualSettings disabled={this.state.arrowsDisabled}\r\n                                    onChangeViz={this.settingsManager.changeVisualize}\r\n                                    onChangeShowArrows={this.settingsManager.changeShowArrows}\r\n                                    onChangeWOpacity={this.onChangeWOpacity}\r\n                    />\r\n                    <SpeedSettings onChange={this.settingsManager.changeSpeed}\r\n                                   initialSpeed={this.settingsManager.settings.delayInc}\r\n                    />\r\n                    <AlgorithmSettings disabled={this.state.bidirectionalDisabled}\r\n                                       onChangeBidirectional={this.settingsManager.changeBidirectional}\r\n                    />\r\n                    <HeuristicSettings disabled={this.state.heuristicDisabled}\r\n                                       onClickManhattan={this.settingsManager.changeManhattan}\r\n                                       onClickEuclidean={this.settingsManager.changeEuclidean}\r\n                                       onClickChebyshev={this.settingsManager.changeChebyshev}\r\n                                       onClickOctile={this.settingsManager.changeOctile}\r\n                    />\r\n                </DraggablePanel>\r\n                <TopBar>\r\n                    <a href='https://github.com/JosephPrichard/PathfinderReact' className='title'\r\n                       style={{\r\n                           width: useIcon ? '70px' : 'auto',\r\n                           height: useIcon ? '52px' : '100%'\r\n\r\n                       }}\r\n                    >\r\n                        {\r\n                            useIcon ?\r\n                                <img width={'100%'} height={'100%'}\r\n                                     className='icon'\r\n                                     alt={title} src={Icon}/> :\r\n                                title\r\n                        }\r\n                    </a>\r\n                    <div className='top-container'>\r\n                        <AlgorithmDropDown ref={this.algDropDown}\r\n                                           onClick={this.onClickAlgDrop}\r\n                                           onChange={this.changeAlgo}\r\n                        />\r\n                        <VisualizeButton active={this.state.visualizing}\r\n                                         paused={this.state.paused}\r\n                                         onPause={this.pausePathfinding}\r\n                                         onResume={this.resumePathfinding}\r\n                                         onStartStop={this.doPathfinding}\r\n                        />\r\n                        <ClearDropDown ref={this.clrDropDown}\r\n                                       onClick={this.onClickClrDrop}\r\n                                       onClickTiles={this.clearTiles}\r\n                                       onClickPath={this.clearPath}\r\n                                       onClickReset={this.resetBoard}\r\n                        />\r\n                        <TilesDropDown ref={this.tilesDropDown}\r\n                                       onClick={this.onClickTilesDrop}\r\n                                       onClickTileType={this.changeTile}\r\n                        />\r\n                        <MazeDropDown ref={this.mazeDropDown}\r\n                                      onClick={this.onClickMazeDrop}\r\n                                      onClickMaze={this.createMaze}\r\n                                      onClickMazeHorizontal={this.createMazeHSkew}\r\n                                      onClickMazeVertical={this.createMazeVSkew}\r\n                                      onClickRandomTerrain={this.createRandomTerrain}\r\n                        />\r\n                        <SettingsButton onClick={this.toggleSettings}/>\r\n                    </div>\r\n                </TopBar>\r\n                <PathfindingVisualizer ref={this.visualizer}\r\n                                       onChangeVisualizing={this.changeVButtonColor}\r\n                                       settings={this.settingsManager.settings}\r\n                                       tileWidth={tileWidth}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction isMobile() {\r\n    return /Android|webOS|iPhone|iPad|Mac|Macintosh|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n}\r\n\r\nexport default PathfindingApp;","import React from 'react';\nimport './App.css';\nimport PathfindingApp from './view/PathfindingApp';\n\nclass App extends React.Component\n{\n    render() {\n        return (\n            <PathfindingApp/>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n//reportWebVitals();\n"],"sourceRoot":""}