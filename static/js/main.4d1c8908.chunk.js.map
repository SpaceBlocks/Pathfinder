{"version":3,"sources":["view/navbar/TopBar.tsx","view/navbar/Buttons.tsx","view/navbar/DropDown.tsx","view/utility/DraggablePanel.tsx","view/grid/GridBackground.tsx","pathfinding/core/Components.ts","pathfinding/core/Grid.ts","view/grid/TileFg.tsx","view/grid/GridForeground.tsx","view/grid/StatsPanel.tsx","pathfinding/core/Navigator.ts","pathfinding/core/PlusNavigator.ts","pathfinding/algorithms/Heuristics.ts","pathfinding/core/AsteriskNavigator.ts","pathfinding/structures/Hash.ts","pathfinding/structures/Heap.ts","pathfinding/algorithms/Pathfinder.ts","pathfinding/algorithms/Node.ts","pathfinding/algorithms/AStar.ts","pathfinding/algorithms/BFS.ts","pathfinding/structures/Stack.ts","pathfinding/algorithms/DFS.ts","pathfinding/algorithms/BidirectionalAStar.ts","pathfinding/algorithms/BidirectionalBFS.ts","pathfinding/algorithms/PathfinderBuilder.ts","pathfinding/algorithms/MazeGenerator.ts","view/utility/VirtualTimer.ts","view/grid/PathfindingVisualizer.tsx","view/utility/Checkbox.tsx","view/utility/SteppedRangeSlider.tsx","view/utility/RadioButtonGroup.tsx","view/navbar/SettingPanels.tsx","view/SettingsManager.ts","view/PathfindingSettings.ts","view/PathfindingApp.tsx","App.tsx","index.tsx"],"names":["TopBar","bar","React","createRef","window","addEventListener","props","onChangeHeight","current","offsetHeight","this","ref","className","children","Component","SYMBOL_COLOR","DIMENSION","VisualizeButton","width","height","rx","fill","points","x","active","onMouseDown","e","preventDefault","onClick","paused","onResume","onPause","xmlns","getResumeSymbol","getPauseSymbol","onStartStop","getStopSymbol","SettingsButton","AlgorithmDropDown","show","setState","up","display","hide","toggle","stopPropagation","isHidden","state","contentStyle","onChange","key","algText","arrowClass","fade","tabIndex","onKeyPress","nativeEvent","style","click","ClearDropDown","onClickPath","onClickTiles","MazeDropDown","onClickMaze","onClickMazeVertical","onClickMazeHorizontal","Clickable","DraggablePanel","draggable","draggableContainer","draggableContent","dragging","prevX","prevY","mouseDown","clientY","clientX","mouseUp","mouseMove","container","top","offsetTop","left","offsetLeft","content","innerHeight","innerWidth","offsetWidth","getPosition","visibleStyle","renderDraggable","draggableStyle","title","onClickXButton","document","minHeight","ARROW_COLOR","GridBackground","visualization","arrows","clear","createEmptyBg","forceUpdate","doGeneration","generation","point","tile","y","visualizeGeneration","visualizeGenerations","generations","doArrowGeneration","point1","point2","newArrow","from","to","i","length","a","index","indexOf","splice","push","addArrowGeneration","addArrowGenerations","doUpdate","renderArrows","tileWidth","offset","arrow","first","second","firstX","firstY","secondX","secondY","offsetX","offsetY","x1","y1","x2","y2","stroke","strokeWidth","markerEnd","renderTiles","tiles","row","renderTile","color","backgroundColor","tilesX","tilesY","id","markerWidth","markerHeight","refX","refY","orient","createTile","isSolid","pathCost","GridGraph","grid","mutateDefault","solid","mutate","undefined","nodes","data","createEmptyGrid","inBounds","get","console","str","log","JSON","stringify","TileFg","applyExpandAnimation","original","tileSize","setTimeout","applyShrinkAnimation","size","doAnimation","shapeRendering","ARROW_PATH_COLOR","pointsEqual","GridForeground","svg","mouseDown0","mouseDown2","draggingInitial","draggingGoal","disable","doTileAnimation","bounds","getBoundingRect","onPress","button","onDrag","touchStart","touch","touches","changedTouches","onTouch","touchMove","onEndingEvent","xCoordinate","yCoordinate","calculatePoint","initial","goal","drawTile","eraseTile","moveInitial","moveGoal","drawGrid","clearTiles","onTilesDragged","drawPath","path","slice","erasePath","Math","floor","renderPath","lines","renderPathArrow","renderEndTile","end","calcEndPointInView","round","topMargin","getBoundingClientRect","onContextMenu","onMouseUp","onMouseMove","onMouseLeave","onTouchStart","onTouchMoveCapture","onTouchEnd","onTouchCancel","StatsPanel","textLog","scrollTop","scrollHeight","clientHeight","time","toFixed","text","algorithm","readOnly","value","unselectable","onDrop","Navigator","b","PlusNavigator","getWidth","getHeight","manhattan","abs","euclidean","dx","dy","sqrt","octile","SQRT2","min","chebyshev","max","nullHeuristic","AsteriskNavigator","walkBottomRight","walkTopRight","walkBottomLeft","walkTopLeft","HashSet","map","HashTable","Heap","compare","elements","siftUp","val","peek","move","pop","siftDown","pos","parent","swap","right","child","reconstructPath","bottomLeaf","reconstructPathReversed","reverse","Pathfinder","navigator","recentSearch","node","Node","AStarNode","g","fScore","AStarPathfinder","func","canRediscover","heuristic","isNewScoreBetter","newScore","oldScore","clearRecentSearch","getGrid","openFrontier","f","closedSet","openSet","root","add","isEmpty","currentNode","currentPoint","currentKey","remove","addRecent","equals","neighbors","neighbor","neighborPoint","neighborKey","has","stepCost","neighborNode","addChild","cost","BFSPathfinder","frontier","visited","shift","next","Stack","DFSPathfinder","BiAStarPathfinder","startOpenFrontier","startOpenSet","endOpenFrontier","endOpenSet","initialRoot","goalRoot","startCurrentNode","startCurrentPoint","startCurrentPointKey","concat","endCurrentNode","endCurrentPoint","endCurrentPointKey","BiBFSPathfinder","startVisited","endVisited","startFrontier","endFrontier","CREATE_NAVIGATOR","CREATE_HEURISTIC","CREATE_PATHFINDER","getType","PathfinderBuilder","toLowerCase","Error","createHeuristic","createNavigator","createPathfinder","divideWidthNoSkew","divideWidthHSkew","divideWidthVSkew","getMidPoint","range","mid","getRand","random","MazeGenerator","slant","divideWidth","topLeft","bottomRight","draw","divide","chamber","widthOf","heightOf","randY","randX","toDraw","edgeBlocked","drawArr","leftChamber","rightChamber","topChamber","bottomChamber","mutateTile","VirtualTimer","callback","countDown","timeout","timeStarted","timeRemaining","finished","Date","now","clearTimeout","calcLength","len","PathfindingVisualizer","background","foreground","stats","visualized","visualizing","visualTimeouts","canShowArrows","settings","showArrows","canShowFrontier","visualizeAlg","pausePathfinding","pause","resumePathfinding","resume","jumpToGeneration","clearPath","doPathfinding","pathfinder","getPathfinder","findPath","getRecentGenerations","doDelayedPathfinding","clearVisualization","toggleDisable","onChangeVisualizing","increment","delayInc","promises","delay","expandVisualization","expandArrows","forEach","promise","Promise","resolve","all","then","algorithmKey","bidirectional","hasBidirectional","makeBidirectional","setAlgorithm","setHeuristic","heuristicKey","setNavigator","navigatorKey","build","t0","performance","t2","getRecentNodes","getAlgorithmName","unshift","createMaze","prevGrid","generator","generateMaze","setPositions","xEnd","yEnd","xFloor","yFloor","yDecimal","ceil","endPoint","clearTilesChecked","clearVisualizationChecked","w","screen","availWidth","h","availHeight","Checkbox","prevState","checked","defaultChecked","type","disabled","boxStyle","defaultProps","SteppedRangeSlider","Number","currentTarget","default","list","step","sliderStyle","onInput","RadioButtonGroup","Children","toArray","radioButtons","VisualSettings","onChangeViz","onChangeShowArrows","SpeedSettings","onChangeSpeed","speedTexts","speedText","String","AlgorithmSettings","onChangeDiagonals","onChangeBidirectional","HeuristicSettings","enable","onClickManhattan","onClickEuclidean","onClickChebyshev","onClickOctile","SettingsManager","changeAlgo","algo","changeVisualize","changeShowArrows","changeBidirectional","changeDiagonals","changeSpeed","changeManhattan","changeEuclidean","changeChebyshev","changeOctile","PathfindingApp","algDropDown","clrDropDown","mazeDropDown","settingsManager","onClickAlgDrop","onClickClrDrop","onClickMazeDrop","changeVButtonColor","toggleSettings","panelShow","hideSettings","heuristicDisabled","usesHeuristic","bidirectionalDisabled","arrowsDisabled","createMazeVSkew","createMazeHSkew","test","userAgent","href","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4d1c8908.chunk.js","sourcesContent":["import React, {RefObject} from 'react';\r\n\r\ninterface IProps {\r\n    onChangeHeight: (height: number) => void\r\n}\r\n\r\nclass TopBar extends React.Component<IProps>\r\n{\r\n    private bar: RefObject<HTMLDivElement> = React.createRef();\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('resize', () => this.props.onChangeHeight(this.bar.current!.offsetHeight));\r\n        this.props.onChangeHeight(this.bar.current!.offsetHeight);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={this.bar} className='top-navbar navbar-expand-sm top-navbar'>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TopBar;","import React from 'react';\r\n\r\ninterface VProps {\r\n    active: boolean,\r\n    paused: boolean,\r\n    onStartStop: ()  => void,\r\n    onPause: ()  => void,\r\n    onResume: ()  => void,\r\n}\r\n\r\ninterface SProps {\r\n    onClick: ()  => void\r\n}\r\n\r\nconst SYMBOL_COLOR = 'rgb(230,230,230)';\r\nconst OFFSET = 14;\r\nconst DIMENSION = 47 - 2 * OFFSET;\r\n\r\nexport class VisualizeButton extends React.Component<VProps>\r\n{\r\n    getStopSymbol() {\r\n        return (\r\n            <rect width={DIMENSION}\r\n                  height={DIMENSION}\r\n                  rx={4}\r\n                  fill={SYMBOL_COLOR}\r\n            />\r\n        );\r\n    }\r\n\r\n    getResumeSymbol() {\r\n        const midY = DIMENSION / 2;\r\n        return (\r\n            <polygon\r\n                  points={`${0},${0} ${0},${DIMENSION} ${DIMENSION},${midY}`}\r\n                  className={'track round'}\r\n                  fill={SYMBOL_COLOR}\r\n            />\r\n        );\r\n    }\r\n\r\n    getPauseSymbol() {\r\n        return (\r\n            <svg>\r\n                <rect width={DIMENSION/2.5}\r\n                      height={DIMENSION}\r\n                      rx={3}\r\n                      fill={SYMBOL_COLOR}\r\n                />\r\n                <rect width={DIMENSION/2.5}\r\n                      height={DIMENSION}\r\n                      x={0.2*DIMENSION + DIMENSION/2.5}\r\n                      rx={3}\r\n                      fill={SYMBOL_COLOR}\r\n                />\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        if(this.props.active) {\r\n            return (\r\n                <div className={'half-button-wrapper'}>\r\n                    <button onMouseDown={e => e.preventDefault()}\r\n                            className={'center half-button-left red-button half-viz-button'}\r\n                            onClick={this.props.paused ? this.props.onResume : this.props.onPause}\r\n                    >\r\n                        <svg xmlns='http://www.w3.org/2000/svg'\r\n                             className='svg-icon'\r\n                             width={DIMENSION}\r\n                             height={DIMENSION}\r\n                        >\r\n                            {this.props.paused ? this.getResumeSymbol() : this.getPauseSymbol()}\r\n                        </svg>\r\n                    </button>\r\n                    <button onMouseDown={e => e.preventDefault()}\r\n                            className={'center half-button-right red-button half-viz-button'}\r\n                            onClick={this.props.onStartStop}\r\n                    >\r\n                        <svg xmlns='http://www.w3.org/2000/svg'\r\n                             className='svg-icon'\r\n                             width={DIMENSION}\r\n                             height={DIMENSION}\r\n                        >\r\n                            {this.getStopSymbol()}\r\n                        </svg>\r\n                    </button>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <button onMouseDown={e => e.preventDefault()}\r\n                        className={'button green-button viz-button'}\r\n                        onClick={this.props.onStartStop}\r\n                >\r\n                    Visualize!\r\n                </button>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport class SettingsButton extends React.Component<SProps>\r\n{\r\n    render() {\r\n        return (\r\n            <button onMouseDown={e => e.preventDefault()}\r\n                    className='button settings-button'\r\n                    onClick={this.props.onClick}>\r\n                Settings\r\n            </button>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\ninterface AlgProps {\r\n    onClick: () => void,\r\n    onChange: (alg: string) => void\r\n}\r\n\r\ninterface AlgState {\r\n    up: boolean,\r\n    display: string,\r\n    algText: string,\r\n    fade: string\r\n}\r\n\r\ninterface ClrProps {\r\n    onClick: () => void,\r\n    onClickPath: () => void,\r\n    onClickTiles: () => void\r\n}\r\n\r\ninterface DState {\r\n    up: boolean,\r\n    display: string,\r\n    fade: string\r\n}\r\n\r\ninterface MazeProps {\r\n    onClick: () => void,\r\n    onClickMaze: () => void,\r\n    onClickMazeHorizontal: () => void,\r\n    onClickMazeVertical: () => void\r\n}\r\n\r\nexport class AlgorithmDropDown extends React.Component<AlgProps, AlgState>\r\n{\r\n    constructor(props: AlgProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            algText: 'A* Search',\r\n            fade: 'fade-in'\r\n        };\r\n    }\r\n\r\n    show = () => {\r\n        this.setState({\r\n            up: false,\r\n            display: 'block',\r\n        });\r\n    }\r\n\r\n    hide = () => {\r\n        this.setState({\r\n            display: 'none',\r\n            up: true,\r\n        });\r\n    }\r\n\r\n    toggle = (e: Event) => {\r\n        e.stopPropagation();\r\n        this.props.onClick();\r\n        if(this.isHidden()) {\r\n            this.show();\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    isHidden = () => {\r\n        return this.state.display === 'none';\r\n    }\r\n\r\n    contentStyle = () => {\r\n        return {\r\n            display: this.state.display\r\n        }\r\n    }\r\n\r\n    onChange = (key: string, algText: string) => {\r\n        this.props.onChange(key);\r\n        this.setState({\r\n            algText: algText\r\n        });\r\n    }\r\n\r\n    arrowClass = () => {\r\n        return this.state.up ? 'arrowUp' : 'arrowDown';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} className='alg-drop-down drop-down'\r\n                 onMouseDown={e => e.preventDefault()}\r\n                 onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                 onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='alg-drop-down-button drop-down-button'>\r\n                    <span className='alg-drop-down-text drop-down-text'>{this.state.algText}</span>\r\n                    <span className={'alg-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div style={this.contentStyle()}\r\n                     className={this.state.fade + ' alg-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={() => this.onChange('a*', 'A* Search')}>A* Search</Clickable>\r\n                    <Clickable click={() => this.onChange('dijkstra', 'Dijkstra')}>Dijkstra's Algorithm</Clickable>\r\n                    <Clickable click={() => this.onChange('best-first', 'Best First')}>Best First Search</Clickable>\r\n                    <Clickable click={() => this.onChange('bfs', 'Breadth First')}>Breadth First Search</Clickable>\r\n                    <Clickable click={() => this.onChange('dfs', 'Depth First')}>Depth First Search</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class ClearDropDown extends React.Component<ClrProps, DState>\r\n{\r\n    constructor(props: ClrProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            fade: 'fade-in'\r\n        };\r\n    }\r\n\r\n    show = () => {\r\n        this.setState({\r\n            up: false,\r\n            display: 'block',\r\n        });\r\n    }\r\n\r\n    hide = () => {\r\n        this.setState({\r\n            display: 'none',\r\n            up: true,\r\n        });\r\n    }\r\n\r\n    toggle = (e: Event) => {\r\n        e.stopPropagation();\r\n        this.props.onClick();\r\n        if(this.isHidden()) {\r\n            this.show();\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    isHidden = () => {\r\n        return this.state.display === 'none';\r\n    }\r\n\r\n    contentStyle = () => {\r\n        return {\r\n            display: this.state.display\r\n        }\r\n    }\r\n\r\n    arrowClass = () => {\r\n        return this.state.up ? 'arrowUpW' : 'arrowDownW';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} className='clr-drop-down drop-down'\r\n                 onMouseDown={e => e.preventDefault()}\r\n                 onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                 onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='clr-drop-down-button drop-down-button'>\r\n                    <span className='clr-drop-down-text drop-down-text'>Clear Grid</span>\r\n                    <span className={'clr-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div style={this.contentStyle()}\r\n                     className={this.state.fade + ' clr-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={this.props.onClickPath}>Clear Path</Clickable>\r\n                    <Clickable click={this.props.onClickTiles}>Clear Tiles</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class MazeDropDown extends React.Component<MazeProps, DState>\r\n{\r\n    constructor(props: MazeProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            fade: 'fade-in'\r\n        };\r\n    }\r\n\r\n    show = () => {\r\n        this.setState({\r\n            up: false,\r\n            display: 'block',\r\n        });\r\n    }\r\n\r\n    hide = () => {\r\n        this.setState({\r\n            display: 'none',\r\n            up: true,\r\n        });\r\n    }\r\n\r\n    toggle = (e: Event) => {\r\n        e.stopPropagation();\r\n        this.props.onClick();\r\n        if(this.isHidden()) {\r\n            this.show();\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    isHidden = () => {\r\n        return this.state.display === 'none';\r\n    }\r\n\r\n    contentStyle = () => {\r\n        return {\r\n            display: this.state.display\r\n        }\r\n    }\r\n\r\n    arrowClass = () => {\r\n        return this.state.up ? 'arrowUpW' : 'arrowDownW';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} className='maze-drop-down drop-down'\r\n                 onMouseDown={e => e.preventDefault()}\r\n                 onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                 onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='maze-drop-down-button drop-down-button'>\r\n                    <span className='maze-drop-down-text drop-down-text'>Mazes</span>\r\n                    <span className={'clr-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div style={this.contentStyle()}\r\n                     className={this.state.fade + ' maze-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={this.props.onClickMaze}>Recursive Maze Division</Clickable>\r\n                    <Clickable click={this.props.onClickMazeVertical}>Maze (vertical skew)</Clickable>\r\n                    <Clickable click={this.props.onClickMazeHorizontal}>Maze (horizontal skew)</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface ClickableProps {\r\n    click: () => void;\r\n}\r\n\r\nclass Clickable extends React.Component<ClickableProps>\r\n{\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} onKeyPress={this.props.click} onClick={this.props.click}>{this.props.children}</div>\r\n        )\r\n    }\r\n}","import React, {RefObject} from 'react';\r\n\r\ninterface IProps {\r\n    title: string,\r\n    show: boolean,\r\n    onClickXButton: () => void,\r\n    width: number,\r\n    height: number\r\n}\r\n\r\ninterface IState {\r\n    top: number,\r\n    left: number,\r\n}\r\n\r\nclass DraggablePanel extends React.Component<IProps, IState>\r\n{\r\n    //refs are used to access native DOM\r\n    private draggable: RefObject<HTMLDivElement> = React.createRef();\r\n    private draggableContainer: RefObject<HTMLDivElement> = React.createRef();\r\n    private draggableContent: RefObject<HTMLDivElement> = React.createRef();\r\n\r\n    //stores previous mouse location and drag\r\n    private dragging = false;\r\n    private prevX = 0;\r\n    private prevY = 0;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            top: -1,\r\n            left: -1,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('mouseup', e => {\r\n            this.mouseUp(e);\r\n        });\r\n        document.addEventListener('mousemove', e => {\r\n            this.mouseMove(e);\r\n        });\r\n        window.addEventListener('mouseleave', e => {\r\n            this.mouseUp(e);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Start drag and init prev mouse location when mouse is clicked on draggable\r\n     * @param e\r\n     */\r\n    private mouseDown = (e: MouseEvent) => {\r\n        e.preventDefault();\r\n        this.prevY = e.clientY;\r\n        this.prevX = e.clientX;\r\n        this.dragging = true;\r\n    }\r\n\r\n    /**\r\n     * Called when mouse is risen on document stop drag\r\n     * @param e\r\n     */\r\n    private mouseUp = (e: MouseEvent) => {\r\n        e.preventDefault();\r\n        this.dragging = false;\r\n    }\r\n\r\n    /**\r\n     * Called when the mouse is moved over the document to calculate the new position of\r\n     * the draggable canvas\r\n     * @param e\r\n     */\r\n    private mouseMove = (e: MouseEvent) => {\r\n        if(this.dragging) {\r\n            const container = this.draggableContainer.current!;\r\n            let top = (container.offsetTop - (this.prevY - e.clientY))\r\n            let left = (container.offsetLeft - (this.prevX - e.clientX));\r\n            const content = this.draggableContent.current!;\r\n            const draggable = this.draggable.current!;\r\n            //stop drag if mouse goes out of bounds\r\n            if(e.clientY < 0 || e.clientY > window.innerHeight\r\n                    || e.clientX < 0 || e.clientX > window.innerWidth) {\r\n                this.dragging = false;\r\n            }\r\n            //check if position is out of bounds and prevent the panel from being dragged there\r\n            if(top < 0) {\r\n                top = 0;\r\n            } else if (top > window.innerHeight - draggable.offsetHeight) {\r\n                top = window.innerHeight - draggable.offsetHeight;\r\n            }\r\n            if(left < -content.offsetWidth/2) {\r\n                left = -content.offsetWidth/2;\r\n            } else if(left > window.innerWidth - content.offsetWidth/2) {\r\n                left = window.innerWidth - content.offsetWidth/2;\r\n            }\r\n            //set new position\r\n            this.setState({\r\n                top: top\r\n            });\r\n            this.setState({\r\n                left: left\r\n            });\r\n            //update previous pos\r\n            this.prevY = e.clientY;\r\n            this.prevX = e.clientX;\r\n        }\r\n    }\r\n\r\n    getPosition = () => {\r\n        const left = this.state.left;\r\n        const top = this.state.top;\r\n        if(left === -1 || top === -1) {\r\n            return {};\r\n        }\r\n        return {\r\n            left: left + 'px',\r\n            top: top + 'px',\r\n        };\r\n    }\r\n\r\n    visibleStyle = () => {\r\n        return this.props.show ? 'block' : 'none';\r\n    }\r\n\r\n    draggableStyle() {\r\n        return {\r\n            width: this.props.width,\r\n            display: this.visibleStyle()\r\n        }\r\n    }\r\n\r\n    contentStyle() {\r\n        return {\r\n            width: this.props.width,\r\n            minHeight: this.props.height,\r\n            display: this.visibleStyle()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={this.draggableContainer} className='draggable-container' style={this.getPosition()}>\r\n                {this.renderDraggable()}\r\n                <div ref={this.draggableContent} style={this.contentStyle()} className='draggable-content'>\r\n                    <div className='settings-general'>\r\n                        {this.props.children}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderDraggable = () => {\r\n        return (\r\n            <div style={this.draggableStyle()} className='draggable'\r\n                 ref={this.draggable}\r\n                 onMouseDown={e => this.mouseDown(e.nativeEvent)}\r\n            >\r\n                <div className='draggable-title'>{this.props.title}</div>\r\n                <div className='x-button' onClick={this.props.onClickXButton}>X</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DraggablePanel;","import React from 'react';\r\nimport {Node} from '../../pathfinding/algorithms/Node';\r\nimport {Point} from '../../pathfinding/core/Components';\r\n\r\ninterface Arrow {\r\n    to: Point,\r\n    from: Point\r\n}\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    tilesX: number,\r\n    tilesY: number\r\n}\r\n\r\nconst CLOSED_NODE = 'rgb(198, 237, 238)';\r\nconst OPEN_NODE = 'rgb(191, 248, 159)';\r\nconst EMPTY_NODE = 'white';\r\nconst ARROW_COLOR = 'rgb(153,153,153)';\r\n\r\nconst BASE_WIDTH = 27;\r\n\r\nclass GridBackground extends React.Component<IProps>\r\n{\r\n    /**\r\n     * Represents the state of the component\r\n     * Stored outside of State to prevent copies, allowing\r\n     * updates with forceUpdate to improve App performance\r\n     */\r\n    private visualization: string[][];\r\n    private arrows: Arrow[];\r\n\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    /**\r\n     * Constructs a GridBackground with immutable height and width\r\n     * @param props\r\n     */\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.width = this.props.tilesX;\r\n        this.height = this.props.tilesY;\r\n        this.visualization = this.createEmptyBg();\r\n        this.arrows = []\r\n    }\r\n\r\n    /**\r\n     * Create a new empty visualization canvas\r\n     */\r\n    createEmptyBg() {\r\n        const visualization = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            const row: string[] = [];\r\n            for(let x = 0; x < this.width; x++) {\r\n                row.push(EMPTY_NODE);\r\n            }\r\n            visualization.push(row);\r\n        }\r\n        return visualization;\r\n    }\r\n\r\n    /**\r\n     * Clear the visualization canvas and update UI\r\n     */\r\n    clear = () => {\r\n        this.visualization = this.createEmptyBg();\r\n        this.arrows = [];\r\n        this.forceUpdate();\r\n    }\r\n\r\n    /**\r\n     * Perform a generation on a visualization array\r\n     * @param generation\r\n     * @param visualization\r\n     */\r\n    private doGeneration = (generation: Node, visualization: string[][]) => {\r\n        //modify state directly to improve performance\r\n        for(const node of generation.children) {\r\n            const point = node.tile.point;\r\n            visualization[point.y][point.x] = OPEN_NODE;\r\n        }\r\n        const point = generation.tile.point;\r\n        visualization[point.y][point.x] = CLOSED_NODE;\r\n        return visualization;\r\n    }\r\n\r\n    /**\r\n     * Visualize generation without updating UI\r\n     * @param generation\r\n     */\r\n    visualizeGeneration = (generation: Node) => {\r\n        this.doGeneration(generation, this.visualization);\r\n    }\r\n\r\n    /**\r\n     * Visualize generation array and update UI\r\n     * @param generations\r\n     */\r\n    visualizeGenerations = (generations: Node[]) => {\r\n        const visualization = this.createEmptyBg();\r\n        for(const generation of generations) {\r\n            this.doGeneration(generation, visualization);\r\n        }\r\n        this.visualization = visualization;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    /**\r\n     * Perform an arrow generation\r\n     * @param generation\r\n     */\r\n    private doArrowGeneration = (generation: Node) => {\r\n        //modify state directly to improve performance\r\n        const point = generation.tile.point;\r\n        for(const node of generation.children) {\r\n            const childPoint = node.tile.point;\r\n            const newArrow = {\r\n                from: point,\r\n                to: childPoint,\r\n            };\r\n            //remove a duplicate arrow to indicate replacement\r\n            //in A* for example, we could have re-discovered a better path to a tile\r\n            for(let i = 0; i < this.arrows.length; i++) {\r\n                const a = this.arrows[i];\r\n                if(pointsEqual(a.to, newArrow.to)) {\r\n                    const index = this.arrows.indexOf(a);\r\n                    this.arrows.splice(index, 1);\r\n                    i--;\r\n                }\r\n            }\r\n            this.arrows.push(newArrow);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add arrow generation without updating UI\r\n     * @param generation\r\n     */\r\n    addArrowGeneration = (generation: Node) => {\r\n        this.doArrowGeneration(generation);\r\n    }\r\n\r\n    /**\r\n     * Add arrow generations and update UI\r\n     * @param generations\r\n     */\r\n    addArrowGenerations = (generations: Node[]) => {\r\n        this.arrows = [];\r\n        for(const generation of generations) {\r\n            this.doArrowGeneration(generation)\r\n        }\r\n        this.forceUpdate();\r\n    }\r\n\r\n    /**\r\n     * Should be called to update render and state when enough generations\r\n     * have been added\r\n     */\r\n    doUpdate = () => {\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='bg'>\r\n                    {this.renderTiles()}\r\n                </div>\r\n                <svg xmlns='http://www.w3.org/2000/svg' className='grid'>\r\n                    <defs>\r\n                        <marker id='arrowhead' markerWidth='3' markerHeight='3'\r\n                                refX='0' refY='1.5' orient='auto'\r\n                                fill={ARROW_COLOR}\r\n                        >\r\n                            <polygon points='0 0, 3 1.5, 0 3'/>\r\n                        </marker>\r\n                    </defs>\r\n                    {this.renderArrows()}\r\n                </svg>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderArrows = () => {\r\n        const width = this.props.tileWidth;\r\n        const offset = width/2;\r\n        const arrows: JSX.Element[] = [];\r\n        for(let i = 0; i < this.arrows.length; i++) {\r\n            //calculate arrow position and dimensions\r\n            const arrow = this.arrows[i];\r\n            const first = arrow.from;\r\n            const second = arrow.to;\r\n            const firstX = first.x * width;\r\n            const firstY = first.y * width;\r\n            const secondX = second.x * width;\r\n            const secondY = second.y * width;\r\n            const offsetX = (secondX - firstX)/4;\r\n            const offsetY = (secondY - firstY)/4;\r\n            arrows.push(<line key={'arrow ' + i}\r\n                              x1={firstX + offset + offsetX}\r\n                              y1={firstY + offset + offsetY}\r\n                              x2={secondX + offset - offsetX}\r\n                              y2={secondY + offset - offsetY}\r\n                              stroke={ARROW_COLOR}\r\n                              strokeWidth={2 * this.props.tileWidth/BASE_WIDTH}\r\n                              className='line-arrow'\r\n                              markerEnd='url(#arrowhead)' />);\r\n        }\r\n        return arrows;\r\n    }\r\n\r\n    private renderTiles = () => {\r\n        const tiles: JSX.Element[][] = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            const row: JSX.Element[] = [];\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                };\r\n                row.push(\r\n                    this.renderTile(point, this.visualization[point.y][point.x])\r\n                );\r\n            }\r\n            tiles.push(row);\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    private renderTile = (point: Point, color: string) => {\r\n        const width = this.props.tileWidth;\r\n        const top = point.y * this.props.tileWidth;\r\n        const left = point.x * this.props.tileWidth;\r\n        const style = {\r\n            backgroundColor: color,\r\n            width: width + 'px',\r\n            height: width + 'px',\r\n            top: top,\r\n            left: left\r\n        };\r\n        return (\r\n            <div key={point.x + ',' + point.y} style={style} className='tile'/>\r\n        );\r\n    }\r\n}\r\n\r\nfunction pointsEqual(point1: Point, point2: Point) {\r\n    return point1.x === point2.x && point1.y === point2.y;\r\n}\r\n\r\nexport default GridBackground;","/**\r\n * Represents a point in 2d space\r\n */\r\nexport interface Point\r\n{\r\n    readonly x: number;\r\n    readonly y: number;\r\n}\r\n\r\n/**\r\n * Represents the data inside a tile\r\n * Solid tiles cannot be passed while non solid ones can\r\n * pathCost stores how expensive it is to travel to the tile if it isn't solid\r\n */\r\nexport interface TileData\r\n{\r\n    readonly pathCost: number;\r\n    readonly isSolid: boolean;\r\n}\r\n\r\n/**\r\n * Represents a tile on the Grid\r\n */\r\nexport interface Tile\r\n{\r\n    data: TileData;\r\n    readonly point: Point;\r\n}\r\n\r\n/**\r\n * Simple function to create a solid tile with path cost of 1\r\n * @param isSolid\r\n */\r\nexport function createTile(isSolid: boolean) {\r\n    return {\r\n        pathCost: 1,\r\n        isSolid: isSolid\r\n    }\r\n}\r\n\r\n","import {createTile, Point, Tile, TileData} from './Components';\r\n\r\nexport interface Grid\r\n{\r\n    getWidth(): number;\r\n    getHeight(): number;\r\n    inBounds(point: Point): boolean;\r\n    get(point: Point): Tile;\r\n    isSolid(point: Point): boolean;\r\n    mutate(point: Point, data: TileData): void;\r\n    mutateTile(tile: Tile): void;\r\n    mutateDefault(point: Point, solid: boolean): void;\r\n    output(console: Console): void;\r\n    getJson(): string;\r\n    walkable(point: Point): boolean;\r\n    clone(): Grid;\r\n}\r\n\r\n/**\r\n * A square grid system that stores nodes in a matrix\r\n * Uses an x,y system where x corresponds to column of the matrix,\r\n * and y corresponds to the row of the matrix\r\n * TileData.ts should be treated like graph nodes\r\n */\r\nclass GridGraph implements Grid\r\n{\r\n    private readonly tiles: Tile[][];\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    /**\r\n     * Constructs a grid either with empty or predefined tiles\r\n     * @param width of the grid\r\n     * @param height of grid\r\n     * will perform a defensive copy to the grid\r\n     * @param grid, optional parameter to copy tiles from that grid to\r\n     * this grid\r\n     */\r\n    constructor(width: number, height: number, grid?: Grid) {\r\n        this.width = width;\r\n        this.height = height;\r\n        if(grid === undefined) {\r\n            this.tiles = createEmptyGrid(width, height);\r\n        } else {\r\n            this.tiles = [];\r\n            for(let y = 0; y < height; y++) {\r\n                const row: Tile[] = [];\r\n                for(let x = 0; x < width; x++) {\r\n                    const point = {\r\n                        x: x, y: y\r\n                    }\r\n                    const inBounds = grid.inBounds(point);\r\n                    row.push({\r\n                        data: {\r\n                            pathCost: inBounds ? grid.get(point).data.pathCost : 1,\r\n                            isSolid: inBounds ? grid.get(point).data.isSolid : false\r\n                        },\r\n                        point: {\r\n                            x: x, y: y\r\n                        }\r\n                    });\r\n                }\r\n               this.tiles.push(row);\r\n            }\r\n        }\r\n    }\r\n\r\n    getWidth() {\r\n        return this.width;\r\n    }\r\n\r\n    getHeight() {\r\n        return this.height;\r\n    }\r\n\r\n    /**\r\n     * Checks if a given point is in bounds\r\n     * Other functions assume arguments are in bounds, this should be used\r\n     * if there is reasonable doubt about whether a point is in bounds\r\n     * @param point, to check\r\n     */\r\n    inBounds(point: Point) {\r\n        return point.x >= 0 && point.x < this.width && point.y >= 0 && point.y < this.height;\r\n    }\r\n\r\n    /**\r\n     * Retrieves a defensive tile for a position\r\n     * Defensive copy prevents this object from being mutated without calling\r\n     * a mutate function\r\n     * @param point, point to get\r\n     */\r\n    get(point: Point) {\r\n        return {\r\n            point: this.tiles[point.y][point.x].point,\r\n            data: this.tiles[point.y][point.x].data\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Mutates a position's tile to solid or non solid\r\n     * @param point, point to mutate\r\n     * @param data to mutate to\r\n     */\r\n    mutate(point: Point, data: TileData) {\r\n        this.tiles[point.y][point.x].data = data;\r\n    }\r\n\r\n    /**\r\n     * Mutates a a tile by point\r\n     * @param tile to mutate\r\n     */\r\n    mutateTile(tile: Tile) {\r\n        this.tiles[tile.point.y][tile.point.x].data = tile.data;\r\n    }\r\n\r\n    /**\r\n     * Mutate tile at point\r\n     * @param point to mutate at\r\n     * @param solid to determine what default tile to create\r\n     */\r\n    mutateDefault = (point: Point, solid: boolean) => {\r\n        this.mutate(\r\n            point, createTile(solid)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Outputs the grid to a console\r\n     * @param console\r\n     */\r\n    output(console: Console) {\r\n        for(let y = 0; y < this.height; y++) {\r\n            let str = '';\r\n            for(let x = 0; x < this.width; x++) {\r\n                str += this.tiles[y][x].data.isSolid + ', ';\r\n            }\r\n            console.log(str);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns json of tiles\r\n     */\r\n    getJson() {\r\n        return JSON.stringify(this.tiles);\r\n    }\r\n\r\n    /**\r\n     * Determines if a tile can be walked on\r\n     * @param point\r\n     */\r\n    walkable(point: Point) {\r\n        return !this.get(point).data.isSolid;\r\n    }\r\n\r\n    isSolid(point: Point): boolean {\r\n        return this.get(point).data.isSolid;\r\n    }\r\n\r\n    clone(): Grid {\r\n        return new GridGraph(this.width, this.height, this);\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a 2d matrix of empty nodes\r\n */\r\nfunction createEmptyGrid(width: number, height: number) {\r\n    const nodes: Tile[][] = [];\r\n    for(let y = 0; y < height; y++) {\r\n        const row: Tile[] = [];\r\n        for(let x = 0; x < width; x++) {\r\n            row.push({\r\n                point: {\r\n                    x: x, y: y\r\n                },\r\n                data: createTile(false)\r\n            });\r\n        }\r\n        nodes.push(row);\r\n    }\r\n    return nodes;\r\n}\r\n\r\nexport default GridGraph;","import React from 'react';\r\nimport {Point} from '../../pathfinding/core/Components';\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    point: Point,\r\n    color: string,\r\n    doAnimation: boolean\r\n}\r\n\r\ninterface IState {\r\n    tileSize: number\r\n}\r\n\r\nclass TileFg extends React.Component<IProps, IState>\r\n{\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const size = this.props.doAnimation ?  0 : this.props.tileWidth;\r\n        this.state = {\r\n            tileSize: size,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.props.doAnimation) {\r\n            this.applyExpandAnimation();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Animation to expand element from half size to full size over a few milliseconds\r\n     * Can be slow to execute so animations should be enabled with caution\r\n     */\r\n    applyExpandAnimation = () => {\r\n        const total = 5\r\n        const original = this.state.tileSize;\r\n        for(let i = 1; i <= total; i++) {\r\n            const expand = () => this.setState({\r\n                tileSize: original + i * (this.props.tileWidth/(total))\r\n            });\r\n            setTimeout(expand, i*10);\r\n        }\r\n    }\r\n\r\n    applyShrinkAnimation = () => {\r\n        const total = 5\r\n        const original = this.state.tileSize;\r\n        for(let i = 1; i <= total; i++) {\r\n            const expand = () => this.setState({\r\n                tileSize: original - i * (this.props.tileWidth/(total))\r\n            });\r\n            setTimeout(expand, i*10);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const width = this.state.tileSize;\r\n        const top = this.props.point.y * this.props.tileWidth + (this.props.tileWidth - width)/2;\r\n        const left = this.props.point.x * this.props.tileWidth + (this.props.tileWidth - width)/2;\r\n        const style = {\r\n            fill: this.props.color,\r\n            stroke: 'none',\r\n            display: 'block'\r\n        };\r\n        return (\r\n            <rect x={left} y={top}\r\n                  shapeRendering='crispEdges'\r\n                  width={width} height={width}\r\n                  style={style} className={'tile svg-tile'}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default TileFg;","import React, {RefObject} from 'react';\r\nimport {Point, Tile} from '../../pathfinding/core/Components';\r\nimport GridGraph, {Grid} from '../../pathfinding/core/Grid';\r\nimport TileFg from './TileFg';\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    tilesX: number,\r\n    tilesY: number,\r\n    onTilesDragged: () => void,\r\n    topMargin: number,\r\n}\r\n\r\ninterface IState {\r\n    grid: Grid,\r\n    initial: Point,\r\n    goal: Point,\r\n    path: Tile[]\r\n}\r\n\r\nconst SOLID_COLOR = 'rgb(45, 48, 54)';\r\nconst INITIAL_COLOR = 'rgb(131, 217, 52)';\r\nconst GOAL_COLOR = 'rgb(203, 75, 14)';\r\nconst ARROW_PATH_COLOR = 'rgb(73, 79, 250)';\r\n\r\nconst BASE_WIDTH = 27;\r\n\r\nclass GridForeground extends React.Component<IProps,IState>\r\n{\r\n    private svg: RefObject<SVGSVGElement> = React.createRef();\r\n\r\n    private mouseDown0: boolean = false;\r\n    private mouseDown2: boolean = false;\r\n    private draggingInitial: boolean = false;\r\n    private draggingGoal: boolean = false;\r\n    private disable: boolean = false;\r\n\r\n    private doTileAnimation: boolean = true;\r\n\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    /**\r\n     * Constructs a GridForeground with immutable height and width\r\n     * @param props\r\n     */\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.width = this.props.tilesX;\r\n        this.height = this.props.tilesY;\r\n        const end = this.calcEndPointInView();\r\n        this.state = {\r\n            grid: new GridGraph(this.width, this.height),\r\n            path: [],\r\n            initial: {\r\n                x: ((end.x)/3) >> 0,\r\n                y: ((end.y)/3) >> 0\r\n            },\r\n            goal: {\r\n                x: ((2*(end.x)/3) >> 0) - 1,\r\n                y: ((2*(end.y)/3) >> 0) - 1\r\n            }\r\n        }\r\n    }\r\n\r\n    calcEndPointInView() {\r\n        const xEnd = Math.round(window.innerWidth / this.props.tileWidth);\r\n        const yEnd = Math.round((window.innerHeight - this.props.topMargin - 30) / this.props.tileWidth);\r\n        return {\r\n            x: xEnd, y: yEnd\r\n        }\r\n    }\r\n\r\n    toggleDisable() {\r\n        this.disable = !this.disable;\r\n    }\r\n\r\n    getBoundingRect() {\r\n        return this.svg.current!.getBoundingClientRect();\r\n    }\r\n\r\n    private mouseDown = (e: MouseEvent) => {\r\n        e.preventDefault();\r\n        const bounds = this.getBoundingRect();\r\n        this.onPress(e.clientX - bounds.left, e.clientY - bounds.top, e.button);\r\n    }\r\n\r\n    private mouseUp = (e: MouseEvent) => {\r\n        e.preventDefault();\r\n        if(e.button === 0) {\r\n            this.draggingGoal = false;\r\n            this.draggingInitial = false;\r\n            this.mouseDown0 = false;\r\n        } else if(e.button === 2) {\r\n            this.mouseDown2 = false;\r\n        }\r\n    }\r\n\r\n    private mouseMove = (e: MouseEvent) => {\r\n        const bounds = this.getBoundingRect();\r\n        this.onDrag(e.clientX - bounds.left, e.clientY - bounds.top);\r\n    }\r\n\r\n    private touchStart = (e: TouchEvent) => {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        const bounds = this.getBoundingRect();\r\n        this.onTouch(touch.clientX - bounds.left, touch.clientY - bounds.top);\r\n    }\r\n\r\n    private touchMove = (e: TouchEvent) => {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        const bounds = this.getBoundingRect();\r\n        this.onDrag(touch.clientX - bounds.left, touch.clientY - bounds.top);\r\n    }\r\n\r\n    private onEndingEvent = (e: Event) => {\r\n        e.preventDefault();\r\n        this.draggingGoal = false;\r\n        this.draggingInitial = false;\r\n        this.mouseDown0 = false;\r\n        this.mouseDown2 = false;\r\n    }\r\n\r\n    /**\r\n     * Responds to the event thrown at screen coordinates on press\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     * @param button\r\n     */\r\n    private onPress = (xCoordinate: number, yCoordinate: number, button: number) => {\r\n        const point = this.calculatePoint(xCoordinate,yCoordinate);\r\n        if(button === 0) {\r\n            this.mouseDown0 = true;\r\n            if(pointsEqual(point, this.state.initial)) {\r\n                this.draggingInitial = true;\r\n            } else if(pointsEqual(point, this.state.goal)) {\r\n                this.draggingGoal = true;\r\n            } else if(!this.disable) {\r\n                this.drawTile(point);\r\n            }\r\n        } else if(button === 2) {\r\n            this.mouseDown2 = true;\r\n            if(!pointsEqual(point,this.state.initial) && !pointsEqual(point, this.state.goal) && !this.disable) {\r\n                this.eraseTile(point);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Responds to the event thrown at screen coordinates on touch\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     */\r\n    private onTouch = (xCoordinate: number, yCoordinate: number) => {\r\n        const point = this.calculatePoint(xCoordinate,yCoordinate);\r\n        if(pointsEqual(point, this.state.initial)) {\r\n            this.mouseDown0 = true;\r\n            this.draggingInitial = true;\r\n        } else if(pointsEqual(point, this.state.goal)) {\r\n            this.mouseDown0 = true;\r\n            this.draggingGoal = true;\r\n        } else if(!this.state.grid.isSolid(point)) {\r\n            this.mouseDown0 = true;\r\n            if(!this.disable) {\r\n                this.drawTile(point);\r\n            }\r\n        } else {\r\n            this.mouseDown2 = true;\r\n            if(!pointsEqual(point, this.state.initial) && !pointsEqual(point, this.state.goal) && !this.disable) {\r\n                this.eraseTile(point);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Responds to the event thrown at screen coordinates on drag/move\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     */\r\n    private onDrag = (xCoordinate: number, yCoordinate: number) => {\r\n        const point = this.calculatePoint(xCoordinate,yCoordinate);\r\n        if(this.mouseDown0) {\r\n            if(this.draggingInitial) {\r\n                this.moveInitial(point);\r\n            } else if(this.draggingGoal) {\r\n                this.moveGoal(point);\r\n            } else if(!pointsEqual(point,this.state.initial) && !pointsEqual(point, this.state.goal) && !this.disable) {\r\n                this.drawTile(point);\r\n            }\r\n        } else if(this.mouseDown2) {\r\n            if(!pointsEqual(point, this.state.initial) && !pointsEqual(point, this.state.goal) && !this.disable) {\r\n                this.eraseTile(point);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw an entire new grid on the foreground with disabled animations\r\n     * @param grid\r\n     */\r\n    drawGrid = (grid: Grid) => {\r\n        this.doTileAnimation = false;\r\n        this.setState({\r\n            grid: grid\r\n        }, () => this.doTileAnimation = true)\r\n    }\r\n\r\n    /**\r\n     * Draw tile at point\r\n     * @param point\r\n     */\r\n    drawTile = (point: Point) => {\r\n        const grid = this.state.grid;\r\n        if(grid.inBounds(point)) {\r\n            grid.mutateDefault(point, true);\r\n        }\r\n        this.forceUpdate();\r\n    }\r\n\r\n    /**\r\n     * Checks if a node is visualized, then changes the tile to empty if it isn't\r\n     * @param point\r\n     */\r\n    eraseTile = (point: Point) => {\r\n        const grid = this.state.grid;\r\n        if(grid.inBounds(point)) {\r\n            grid.mutateDefault(point, false);\r\n        }\r\n        this.forceUpdate();\r\n    }\r\n\r\n    /**\r\n     * Clear grid in state\r\n     */\r\n    clearTiles = () => {\r\n        const grid = this.state.grid;\r\n        for(let y = 0; y < this.height; y++) {\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                }\r\n                grid.mutateDefault(point, false);\r\n            }\r\n        }\r\n        this.forceUpdate();\r\n    }\r\n\r\n    /**\r\n     * Moves initial to a new point\r\n     * @param point\r\n     */\r\n    moveInitial = (point: Point) => {\r\n        if(this.state.grid.inBounds(point)\r\n            && !this.state.grid.isSolid(point)\r\n            && !pointsEqual(this.state.goal, point)\r\n            && !pointsEqual(this.state.initial, point)\r\n            && !this.disable)\r\n        {\r\n            this.setState({\r\n                initial: point\r\n            }, () => this.props.onTilesDragged());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves goal to a new point\r\n     * @param point\r\n     */\r\n    moveGoal = (point: Point) => {\r\n        if(this.state.grid.inBounds(point)\r\n            && !this.state.grid.isSolid(point)\r\n            && !pointsEqual(this.state.initial, point)\r\n            && !pointsEqual(this.state.goal, point)\r\n            && !this.disable)\r\n        {\r\n            this.setState({\r\n                goal: point\r\n            }, () => this.props.onTilesDragged());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw a path onto the grid\r\n     * @param path\r\n     */\r\n    drawPath = (path: Tile[]) => {\r\n        this.setState({\r\n            path: path.slice()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Erase path from the grid\r\n     */\r\n    erasePath = () => {\r\n        this.setState({\r\n            path: []\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Converts real screen x,y coordinates into\r\n     * a 2d point position on the grid\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     */\r\n    calculatePoint = (xCoordinate: number, yCoordinate: number) => {\r\n        return {\r\n            x: Math.floor(xCoordinate/this.props.tileWidth),\r\n            y: Math.floor(yCoordinate/this.props.tileWidth)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <svg ref={this.svg} xmlns='http://www.w3.org/2000/svg' className='grid'\r\n                 onContextMenu={e => e.preventDefault()}\r\n                 onMouseDown={e => this.mouseDown(e.nativeEvent)}\r\n                 onMouseUp={e => this.mouseUp(e.nativeEvent)}\r\n                 onMouseMove={e => this.mouseMove(e.nativeEvent)}\r\n                 onMouseLeave={e => this.onEndingEvent(e.nativeEvent)}\r\n                 onTouchStart={e => this.touchStart(e.nativeEvent)}\r\n                 onTouchMoveCapture={e => this.touchMove(e.nativeEvent)}\r\n                 onTouchEnd={e => this.onEndingEvent(e.nativeEvent)}\r\n                 onTouchCancel={e => this.onEndingEvent(e.nativeEvent)}\r\n            >\r\n                <defs>\r\n                    <marker id='arrowhead-path' markerWidth='3' markerHeight='3'\r\n                            refX='0' refY='1.5' orient='auto'\r\n                            fill={ARROW_PATH_COLOR}\r\n                    >\r\n                        <polygon points='0 0, 3 1.5, 0 3'/>\r\n                    </marker>\r\n                </defs>\r\n                {this.renderEndTile(this.state.initial, INITIAL_COLOR,'initial')}\r\n                {this.renderEndTile(this.state.goal, GOAL_COLOR,'goal')}\r\n                {this.renderPath()}\r\n                {this.renderTiles()}\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    private renderPath = () => {\r\n        const lines: JSX.Element[] = [];\r\n        for(let i = 0; i < this.state.path.length-1; i++) {\r\n            const first = this.state.path[i].point;\r\n            const second = this.state.path[i+1].point;\r\n            lines.push(this.renderPathArrow(i, first, second));\r\n        }\r\n        return lines;\r\n    }\r\n\r\n    private renderPathArrow = (index: number, first: Point, second: Point) => {\r\n        const width = this.props.tileWidth;\r\n        const offset = width/2;\r\n        const firstX = first.x * width;\r\n        const firstY = first.y * width;\r\n        const secondX = second.x * width;\r\n        const secondY = second.y * width;\r\n        const offsetX = (secondX - firstX)/4;\r\n        const offsetY = (secondY - firstY)/4;\r\n        return (\r\n            <line key={'path ' + index}\r\n                  x1={firstX + offset + offsetX}\r\n                  y1={firstY + offset + offsetY}\r\n                  x2={secondX + offset - offsetX}\r\n                  y2={secondY + offset - offsetY}\r\n                  stroke={ARROW_PATH_COLOR}\r\n                  strokeWidth={2 * this.props.tileWidth/BASE_WIDTH}\r\n                  className='line-path-arrow'\r\n                  markerEnd='url(#arrowhead-path)' />\r\n        );\r\n    }\r\n\r\n    private renderTiles = () => {\r\n        const tiles: JSX.Element[] = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                }\r\n                if(this.state.grid.isSolid(point)) {\r\n                    tiles.push(\r\n                        <TileFg key={point.x + ',' + point.y} point={point}\r\n                                doAnimation={this.doTileAnimation}\r\n                                tileWidth={this.props.tileWidth}\r\n                                color={SOLID_COLOR}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    private renderEndTile = (point: Point, color: string, key: string) => {\r\n        return <TileFg key={key} point={point} doAnimation={false}\r\n                       tileWidth={this.props.tileWidth}\r\n                       color={color}/>\r\n    }\r\n}\r\n\r\nfunction pointsEqual(point1: Point, point2: Point) {\r\n    return point1.x === point2.x && point1.y === point2.y;\r\n}\r\n\r\nexport default GridForeground;","import React, {RefObject} from 'react';\r\n\r\ninterface IProps {\r\n    algorithm: string,\r\n    length: number,\r\n    time: number,\r\n    nodes: number,\r\n}\r\n\r\nclass StatsPanel extends React.Component<IProps>\r\n{\r\n    private readonly textLog: RefObject<HTMLTextAreaElement> = React.createRef();\r\n\r\n    componentDidUpdate() {\r\n        this.textLog.current!.scrollTop = this.textLog.current!.scrollHeight;\r\n    }\r\n\r\n    getHeight() {\r\n        return this.textLog.current!.clientHeight;\r\n    }\r\n\r\n    render() {\r\n        const time = precise(this.props.time);\r\n        const text = this.props.algorithm === '' ? '' :\r\n            this.props.algorithm + ' visited ' + this.props.nodes + ' nodes in ' +\r\n            time + ' ms. Path length = ' + this.props.length + '. ';\r\n        return(\r\n            <div>\r\n                <textarea tabIndex={-1} ref={this.textLog} readOnly={true}\r\n                          className='stats-text-area no-select'\r\n                          value={text} unselectable={'on'} onDrop={() => false}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction precise(x: number) {\r\n    return x.toFixed(2);\r\n}\r\n\r\nexport default StatsPanel;","import {Grid} from './Grid';\r\nimport {Point, Tile} from './Components';\r\n\r\nexport const UNIT = 1; //number of tiles we can move at once\r\n\r\n/**\r\n * Describes an abstract navigator for a grid\r\n * Provides graph-like traversal for the grid\r\n * Determines where we can travel to from a certain point,\r\n * whether we have reached a destination, and the cost to\r\n * travel to a certain point\r\n */\r\nabstract class Navigator\r\n{\r\n    protected readonly grid: Grid;\r\n\r\n    constructor(grid: Grid) {\r\n        this.grid = grid;\r\n    }\r\n\r\n    getGrid() {\r\n        return this.grid;\r\n    }\r\n\r\n    /**\r\n     * Goal check function: Checks if two points are equal\r\n     * @param a\r\n     * @param b\r\n     */\r\n    equals(a: Point, b: Point) {\r\n        return a.x === b.x && a.y === b.y;\r\n    }\r\n\r\n    /**\r\n     * Step cost function from a to b\r\n     * @param a\r\n     * @param b to point to travel to\r\n     */\r\n    abstract cost(a: Point, b: Point): number;\r\n\r\n    /**\r\n     * Neighbors function: Gets the available neighbors for a point in a grid we can make\r\n     * in a given move\r\n     * @param point\r\n     */\r\n    abstract neighbors(point: Point): Tile[];\r\n\r\n    abstract getType(): string;\r\n}\r\n\r\nexport default Navigator;","import {Point, Tile} from './Components';\r\nimport Navigator, {UNIT} from './Navigator';\r\n\r\n/**\r\n * Concretion of a Plus Navigator for a grid\r\n * Allows movement akin to a 'plus' symbol\r\n */\r\nclass PlusNavigator extends Navigator\r\n{\r\n    /**\r\n     * Adds the neighbors of a point to the left, right, top and down\r\n     * @param point\r\n     */\r\n    neighbors(point: Point): Tile[] {\r\n        const tiles: Tile[] = [];\r\n        if(point.x + UNIT < this.grid.getWidth()) {\r\n            const tile = this.grid.get({\r\n                x: point.x + UNIT,\r\n                y: point.y\r\n            })\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.y + UNIT < this.grid.getHeight()) {\r\n            const tile = this.grid.get({\r\n                x: point.x,\r\n                y: point.y + UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.x - UNIT >= 0) {\r\n            const tile = this.grid.get({\r\n                x: point.x - UNIT,\r\n                y: point.y\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.y - UNIT >= 0) {\r\n            const tile = this.grid.get({\r\n                x: point.x,\r\n                y: point.y - UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    /**\r\n     * Step cost function that works by getting the pathCost stored in the grid\r\n     * from one point a to b\r\n     * @param a\r\n     * @param b to point to travel to\r\n     */\r\n    cost(a: Point, b: Point) {\r\n        return this.grid.get(b).data.pathCost;\r\n    }\r\n\r\n    getType() {\r\n        return 'plus';\r\n    }\r\n}\r\n\r\nexport default PlusNavigator;","import {Point} from '../core/Components';\r\n\r\nexport type HeuristicFunc = (a: Point, b: Point) => number;\r\n\r\nexport function manhattan(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x) ;\r\n    const dy = Math.abs(a.y - b.y);\r\n    return dx + dy;\r\n}\r\n\r\nexport function euclidean(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n}\r\n\r\nexport function octile(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.SQRT2 * Math.min(dx, dy) + Math.abs(dx - dy);\r\n}\r\n\r\nexport function chebyshev(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.max(dx, dy);\r\n}\r\n\r\nexport function nullHeuristic(a: Point, b: Point): number {\r\n    return 0;\r\n}","import {Point, Tile} from './Components';\r\nimport Navigator, {UNIT} from './Navigator';\r\nimport {euclidean} from '../algorithms/Heuristics';\r\n\r\n/**\r\n * Concretion of a Plus Navigator for a grid\r\n * Allows movement akin to a 'asterisk' symbol\r\n */\r\nclass AsteriskNavigator extends Navigator\r\n{\r\n    /**\r\n     * Adds the neighbors of a point to the left, right, top and down\r\n     * @param point\r\n     */\r\n    neighbors(point: Point): Tile[] {\r\n        //keep track of double squares that block diagonals\r\n        let walkBottomRight = false;\r\n        let walkTopRight = false;\r\n        let walkBottomLeft = false;\r\n        let walkTopLeft = false;\r\n        //plus\r\n        const tiles: Tile[] = [];\r\n        if(point.x + UNIT < this.grid.getWidth()) {\r\n            const tile = this.grid.get({\r\n                x: point.x + UNIT,\r\n                y: point.y\r\n            })\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n                walkBottomRight = true;\r\n                walkTopRight = true;\r\n            }\r\n        }\r\n        if(point.y + UNIT < this.grid.getHeight()) {\r\n            const tile = this.grid.get({\r\n                x: point.x,\r\n                y: point.y + UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n                walkBottomRight = true;\r\n                walkBottomLeft = true;\r\n            }\r\n        }\r\n        if(point.x - UNIT >= 0) {\r\n            const tile = this.grid.get({\r\n                x: point.x - UNIT,\r\n                y: point.y\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n                walkBottomLeft = true;\r\n                walkTopLeft = true;\r\n            }\r\n        }\r\n        if(point.y - UNIT >= 0) {\r\n            const tile = this.grid.get({\r\n                x: point.x,\r\n                y: point.y - UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n                walkTopRight = true;\r\n                walkTopLeft = true;\r\n            }\r\n        }\r\n        //diagonals\r\n        if(point.x + UNIT < this.grid.getWidth() &&\r\n            point.y + UNIT < this.grid.getHeight() &&\r\n            walkBottomRight) {\r\n            const tile = this.grid.get({\r\n                x: point.x + UNIT,\r\n                y: point.y + UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.x - UNIT >= 0 &&\r\n            point.y + UNIT < this.grid.getHeight() &&\r\n            walkBottomLeft) {\r\n            const tile = this.grid.get({\r\n                x: point.x - UNIT,\r\n                y: point.y + UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.x + UNIT < this.grid.getWidth() &&\r\n            point.y - UNIT >= 0 &&\r\n            walkTopRight) {\r\n            const tile =  this.grid.get({\r\n                x: point.x + UNIT,\r\n                y: point.y - UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.x - UNIT >= 0 &&\r\n            point.y - UNIT >= 0 &&\r\n            walkTopLeft) {\r\n            const tile =  this.grid.get({\r\n                x: point.x - UNIT,\r\n                y: point.y - UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    /**\r\n     * Step cost function that works by getting the pathCost stored in the grid\r\n     * from one point a to b\r\n     * Returns the exact distance multiplied by the cost to travel there\r\n     * @param a\r\n     * @param b to point to travel to\r\n     */\r\n    cost(a: Point, b: Point) {\r\n        return euclidean(a,b) * this.grid.get(b).data.pathCost;\r\n    }\r\n\r\n    getType() {\r\n        return 'asterisk';\r\n    }\r\n}\r\n\r\nexport default AsteriskNavigator;","import {Point} from '../core/Components';\r\n\r\n/**\r\n * A simple data structure that keeps track of whether keys have been added to it\r\n */\r\nexport class HashSet\r\n{\r\n    private map: {[key: string]: boolean} = {};\r\n\r\n    add(key: string) {\r\n        this.map[key] = true;\r\n    }\r\n\r\n    remove(key: string) {\r\n        this.map[key] = false;\r\n    }\r\n\r\n    has(key: string) {\r\n        return this.map[key];\r\n    }\r\n\r\n    clear() {\r\n        this.map = {};\r\n    }\r\n}\r\n\r\n/**\r\n * A simple data structure that stores a type at a key\r\n */\r\nexport class HashTable<Value>\r\n{\r\n    private map: {[key: string]: Value | undefined} = {};\r\n\r\n    add(key: string, data: Value) {\r\n        this.map[key] = data;\r\n    }\r\n\r\n    remove(key: string) {\r\n        this.map[key] = undefined;\r\n    }\r\n\r\n    get(key: string) {\r\n        return this.map[key];\r\n    }\r\n\r\n    has(key: string) {\r\n        return this.map[key] !== undefined;\r\n    }\r\n\r\n    clear() {\r\n        this.map = {};\r\n    }\r\n}\r\n\r\n/**\r\n * Serialize point into a unique string\r\n * @param point\r\n */\r\nexport function stringify(point: Point) {\r\n    return 'x' + point.x + 'y' + point.y;\r\n}","/**\r\n * A compare function to determine if a is 'better' (deserves a higher position) than b\r\n */\r\nexport type Comparator<E> = (a: E, b: E) => boolean\r\n\r\n/**\r\n * Minimalist Implementation of the heap data structure as an array\r\n */\r\nclass Heap<E>\r\n{\r\n    private elements: E[] = [];\r\n    readonly compare: Comparator<E>;\r\n\r\n    constructor(compare: Comparator<E>) {\r\n        this.compare = compare;\r\n    }\r\n\r\n    /**\r\n     * Returns the size of the heap\r\n     */\r\n    getSize() {\r\n        return this.elements.length;\r\n    }\r\n\r\n    /**\r\n     * Checks if heap is empty\r\n     */\r\n    isEmpty() {\r\n        return this.elements.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Add a new element to the heap\r\n     * @param e\r\n     */\r\n    push(e: E) {\r\n        this.elements.push(e);\r\n        this.siftUp(this.elements.length-1); //last element\r\n    }\r\n\r\n    /**\r\n     * Returns the top of the heap without removing it\r\n     * Fails if heap is empty\r\n     */\r\n    peek() {\r\n        return this.elements[0];\r\n    }\r\n\r\n    /**\r\n     * Returns the top of the heap and removes it\r\n     * Fails if heap is empty\r\n     */\r\n    pop() {\r\n        const val = this.peek();\r\n        this.move(this.elements.length - 1, 0);\r\n        this.elements.pop();\r\n        this.siftDown(0);\r\n        return val;\r\n    }\r\n\r\n    /**\r\n     * Clear the heap\r\n     */\r\n    clear() {\r\n        this.elements = [];\r\n    }\r\n\r\n    /**\r\n     * Sifts a new element that is out of order up to the right position\r\n     * @param pos of new element\r\n     */\r\n    private siftUp(pos: number) {\r\n        let parent = ((pos - 1) / 2) >> 0; //integer division\r\n        while(parent >= 0) {\r\n            //if the current position is better than parent\r\n            if(this.compare(this.elements[pos], this.elements[parent])) {\r\n                //then current position with parent and move to next\r\n                this.swap(pos, parent);\r\n                pos = parent;\r\n                parent = ((pos - 1) / 2) >> 0;\r\n            } else {\r\n                //otherwise stop\r\n                parent = -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sifts a new element that is out of order down to the right position\r\n     * @param pos of new element\r\n     */\r\n    private siftDown(pos: number) {\r\n        const left = 2 * pos + 1;\r\n        const right = 2 * pos + 2;\r\n        //stop if the children are out of bounds\r\n        if(left >= this.elements.length) {\r\n            return;\r\n        }\r\n        //find the better child\r\n        const child = (right >= this.elements.length || this.compare(this.elements[left], this.elements[right]))\r\n            ? left : right;\r\n        //continues to sift down if the child is better than the current position\r\n        if(this.compare(this.elements[child], this.elements[pos])) {\r\n            this.swap(child, pos);\r\n            this.siftDown(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Internal move function\r\n     * @param from\r\n     * @param to\r\n     */\r\n    private move(from: number, to: number) {\r\n        this.elements[to] = this.elements[from];\r\n    }\r\n\r\n    /**\r\n     * Internal swap function\r\n     * @param a\r\n     * @param b\r\n     */\r\n    private swap(a: number, b: number) {\r\n        let val = this.elements[a];\r\n        this.elements[a] = this.elements[b];\r\n        this.elements[b] = val;\r\n    }\r\n}\r\n\r\nexport default Heap;","import {Point, Tile} from '../core/Components';\r\nimport Navigator from '../core/Navigator';\r\nimport {Node} from './Node';\r\n\r\n/**\r\n * Pathfinder performs algorithms operations on the grid\r\n * Uses the navigator rank and expand nodes\r\n */\r\nabstract class Pathfinder\r\n{\r\n    protected recentSearch: Node[] = [];\r\n    protected navigator: Navigator;\r\n\r\n    constructor(navigator: Navigator) {\r\n        this.navigator = navigator;\r\n    }\r\n\r\n    setNavigator(navigator: Navigator) {\r\n        this.navigator = navigator;\r\n    }\r\n\r\n    getNavigator() {\r\n        return this.navigator;\r\n    }\r\n\r\n    getRecentNodes() {\r\n        return this.recentSearch.length;\r\n    }\r\n\r\n    clearRecentSearch() {\r\n        this.recentSearch = [];\r\n    }\r\n\r\n    getRecentGenerations() {\r\n        return this.recentSearch.slice();\r\n    }\r\n\r\n    protected addRecent(node: Node) {\r\n        this.recentSearch.push(node);\r\n    }\r\n\r\n    abstract getAlgorithmName(): string;\r\n\r\n    /**\r\n     * Finds the best path between initial and goal on the grid\r\n     * and returns it in an array\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    abstract findPath(initial: Point, goal: Point): Tile[];\r\n}\r\n\r\n/**\r\n * Reconstructs the path from a tree, given the bottomLeaf, and\r\n * returns the shortest path in an array\r\n * @param bottomLeaf bottom of the tree to start from\r\n */\r\nexport function reconstructPath(bottomLeaf: Node): Tile[] {\r\n    return reconstructPathReversed(bottomLeaf).reverse();\r\n}\r\n\r\n/**\r\n * Reconstructs the path from a tree, given the bottomLeaf, and\r\n * returns the shortest path in an array\r\n * @param bottomLeaf bottom of the tree to start from\r\n */\r\nexport function reconstructPathReversed(bottomLeaf: Node): Tile[] {\r\n    const path: Tile[] = [];\r\n    while(bottomLeaf.parent !== null) {\r\n        path.push(bottomLeaf.tile);\r\n        bottomLeaf = bottomLeaf.parent;\r\n    }\r\n    return path;\r\n}\r\n\r\nexport default Pathfinder;","import {Tile} from '../core/Components';\r\n\r\n/**\r\n * Represents a search Tree Node\r\n */\r\nexport class Node\r\n{\r\n    parent: Node | null = null; //parent node\r\n    readonly children: Node[] = [];\r\n    readonly tile: Tile; //stores a graph node\r\n\r\n    constructor(tile: Tile) {\r\n        this.tile = tile;\r\n    }\r\n\r\n    addChild(child: Node) {\r\n        child.parent = this;\r\n        this.children.push(child);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents an heuristic weighted aStar search tree node\r\n */\r\nexport class AStarNode extends Node\r\n{\r\n    readonly g: number; //path cost\r\n    readonly fScore: number; //heuristic\r\n\r\n    constructor(tile: Tile, g: number, fScore: number) {\r\n        super(tile);\r\n        this.g = g;\r\n        this.fScore = fScore;\r\n    }\r\n\r\n    f() {\r\n        return this.fScore;\r\n    }\r\n}\r\n","import {HashSet, HashTable, stringify} from '../structures/Hash';\r\nimport Heap from '../structures/Heap';\r\nimport Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {AStarNode} from './Node';\r\nimport Navigator from '../core/Navigator';\r\nimport {euclidean, HeuristicFunc} from './Heuristics';\r\n\r\nclass AStarPathfinder extends Pathfinder\r\n{\r\n    private readonly heuristic: HeuristicFunc = (a: Point, b: Point) => euclidean(a,b);\r\n    private readonly isNewScoreBetter: (newF: number, oldF: number) => boolean;\r\n\r\n    constructor(navigator: Navigator, func?: HeuristicFunc, canRediscover?: boolean) {\r\n        super(navigator);\r\n        if(func !== undefined) {\r\n            this.heuristic = func;\r\n        }\r\n        this.isNewScoreBetter = canRediscover === undefined || canRediscover ?\r\n            (newScore: number, oldScore: number) => newScore < oldScore :\r\n            () => false;\r\n    }\r\n\r\n    getAlgorithmName(): string {\r\n        return 'A*';\r\n    }\r\n\r\n    /**\r\n     * Performs aStar algorithm on the grid given an initial and goal point\r\n     * Always returns the shortest path, and performs well on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const openFrontier = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const closedSet = new HashSet();\r\n        const openSet = new HashTable<number>();\r\n        const root = new AStarNode(\r\n            grid.get(initial), 0, 0\r\n        );\r\n        openFrontier.push(root);\r\n        openSet.add(stringify(initial), root.g);\r\n        while (!openFrontier.isEmpty()) {\r\n            const currentNode = openFrontier.pop();\r\n            const currentPoint = currentNode.tile.point;\r\n            const currentKey = stringify(currentPoint);\r\n            openSet.remove(currentKey);\r\n            closedSet.add(currentKey);\r\n            this.addRecent(currentNode);\r\n            if (this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            for (const neighbor of this.navigator.neighbors(currentPoint)) {\r\n                const neighborPoint = neighbor.point;\r\n                const neighborKey = stringify(neighborPoint);\r\n                if(closedSet.has(neighborKey)) {\r\n                    continue;\r\n                }\r\n                const g = currentNode.g + this.stepCost(currentPoint, neighborPoint);\r\n                const f = g + this.heuristic(neighborPoint, goal);\r\n                if (!openSet.has(neighborKey) || this.isNewScoreBetter(g, openSet.get(neighborKey)!)) {\r\n                    const neighborNode = new AStarNode(\r\n                        neighbor, g, f\r\n                    );\r\n                    currentNode.addChild(neighborNode);\r\n                    openFrontier.push(neighborNode);\r\n                    openSet.add(neighborKey, neighborNode.g);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * The step-cost function to be used, calculating the cost from\r\n     * currentPoint to neighborPoint. Uses the stepCost function provided by the\r\n     * navigator by default but can be overridden\r\n     * @param currentPoint\r\n     * @param neighborPoint\r\n     */\r\n    stepCost(currentPoint: Point, neighborPoint: Point) {\r\n        return this.navigator.cost(currentPoint, neighborPoint);\r\n    }\r\n}\r\n\r\nexport default AStarPathfinder;","import Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {HashSet, stringify} from '../structures/Hash';\r\nimport {Node} from './Node';\r\n\r\nclass BFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName(): string {\r\n        return 'Breadth First Search';\r\n    }\r\n\r\n    /**\r\n     * Implementation of BFS to find the shortest path from initial to point\r\n     * Always returns the shortest path, but performs poorly on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const frontier: Node[] = []; //fifo, stores nodes on the frontier\r\n        const visited = new HashSet();\r\n        const root = new Node(grid.get(initial));\r\n        frontier.push(root); //enqueue\r\n        visited.add(stringify(initial));\r\n        while(frontier.length !== 0) { //not empty\r\n            const currentNode = frontier.shift()!; //dequeue\r\n            const currentPoint = currentNode.tile.point;\r\n            this.addRecent(currentNode);\r\n            if(this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            for(const neighbor of this.navigator.neighbors(currentPoint)) {\r\n                const neighborKey = stringify(neighbor.point);\r\n                if(!visited.has(neighborKey)) {\r\n                    const neighborNode = new Node(neighbor);\r\n                    currentNode.addChild(neighborNode);\r\n                    frontier.push(neighborNode); //enqueue\r\n                    visited.add(neighborKey);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default BFSPathfinder;","/**\r\n * Stack node\r\n */\r\nclass Node<E>\r\n{\r\n    next: Node<E> | null = null;\r\n    data: E;\r\n\r\n    constructor(data: E) {\r\n        this.data = data;\r\n    }\r\n}\r\n\r\n/**\r\n * Minimalist Implementation of the stack data structure\r\n */\r\nclass Stack<E>\r\n{\r\n    private top: Node<E> | null = null;\r\n    private size: number = 0;\r\n\r\n    peek() {\r\n        return this.top != null ? this.top.data : undefined;\r\n    }\r\n\r\n    push(e: E) {\r\n        const node = new Node(e);\r\n        node.next = this.top;\r\n        this.top = node;\r\n        this.size++;\r\n    }\r\n\r\n    pop() {\r\n        const top = this.peek();\r\n        if(this.top != null) {\r\n            this.top = this.top.next;\r\n            this.size--;\r\n        }\r\n        return top;\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.size === 0;\r\n    }\r\n\r\n    getSize() {\r\n        return this.size;\r\n    }\r\n}\r\n\r\nexport default Stack;","import Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {HashSet, stringify} from '../structures/Hash';\r\nimport {Node} from './Node';\r\nimport Stack from '../structures/Stack';\r\n\r\nclass DFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName(): string {\r\n        return 'Depth First Search';\r\n    }\r\n\r\n    /**\r\n     * Calls DFS between a start and goal point, will typically not find the 'Best' path,\r\n     * and will instead find the best path capable for the algorithm\r\n     * As this algorithm is non optimal it should only be used for educational purposes\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const root = new Node(grid.get(initial));\r\n        const frontier = new Stack<Node>();\r\n        frontier.push(root);\r\n        const visited = new HashSet();\r\n        visited.add(stringify(initial));\r\n        while(!frontier.isEmpty()) {\r\n            const currentNode = frontier.pop()!;\r\n            const currentPoint = currentNode.tile.point;\r\n            visited.add(stringify(currentPoint));\r\n            this.addRecent(currentNode);\r\n            if(this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            const neighbors = this.navigator.neighbors(currentPoint).reverse();\r\n            for(const neighbor of neighbors){\r\n                const neighborKey = stringify(neighbor.point);\r\n                if(!visited.has(neighborKey)) {\r\n                    const neighborNode = new Node(neighbor);\r\n                    currentNode.addChild(neighborNode);\r\n                    frontier.push(neighborNode);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default DFSPathfinder;\r\n","import {HashSet, HashTable, stringify} from '../structures/Hash';\r\nimport Heap from '../structures/Heap';\r\nimport Pathfinder, {reconstructPath, reconstructPathReversed} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {AStarNode} from './Node';\r\nimport Navigator from '../core/Navigator';\r\nimport {euclidean, HeuristicFunc} from './Heuristics';\r\n\r\nclass BiAStarPathfinder extends Pathfinder\r\n{\r\n    private readonly heuristic: HeuristicFunc = (a: Point, b: Point) => euclidean(a,b);\r\n    private readonly isNewScoreBetter: (newF: number, oldF: number) => boolean;\r\n\r\n    constructor(navigator: Navigator, func?: HeuristicFunc, canRediscover?: boolean) {\r\n        super(navigator);\r\n        if(func !== undefined) {\r\n            this.heuristic = func;\r\n        }\r\n        this.isNewScoreBetter = canRediscover === undefined || canRediscover ?\r\n            (newScore: number, oldScore: number) => newScore < oldScore :\r\n            () => false;\r\n    }\r\n\r\n    getAlgorithmName(): string {\r\n        return 'Bidirectional A*';\r\n    }\r\n\r\n    /**\r\n     * Performs aStar algorithm on the grid given an initial and goal point\r\n     * Always returns the shortest path, and performs well on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const closedSet = new HashSet();\r\n        const startOpenFrontier = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const startOpenSet = new HashTable<AStarNode>();\r\n        const endOpenFrontier = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const endOpenSet = new HashTable<AStarNode>();\r\n        const initialRoot = new AStarNode(\r\n            grid.get(initial), 0, 0\r\n        );\r\n        startOpenFrontier.push(initialRoot);\r\n        startOpenSet.add(stringify(initial), initialRoot);\r\n        const goalRoot = new AStarNode(\r\n            grid.get(goal), 0, 0\r\n        );\r\n        endOpenFrontier.push(goalRoot);\r\n        endOpenSet.add(stringify(goal), goalRoot);\r\n        while (!startOpenFrontier.isEmpty() && !endOpenFrontier.isEmpty()) {\r\n            //expand startOpenFrontier\r\n            const startCurrentNode = startOpenFrontier.pop();\r\n            const startCurrentPoint = startCurrentNode.tile.point;\r\n            const startCurrentPointKey = stringify(startCurrentPoint);\r\n            startOpenSet.remove(startCurrentPointKey);\r\n            closedSet.add(startCurrentPointKey);\r\n            this.addRecent(startCurrentNode);\r\n            if(endOpenSet.has(startCurrentPointKey)) {\r\n                if(startCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startCurrentNode.parent\r\n                    ).concat(reconstructPathReversed(\r\n                        endOpenSet.get(startCurrentPointKey)!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            for (const neighbor of this.navigator.neighbors(startCurrentPoint)) {\r\n                const neighborPoint = neighbor.point;\r\n                const neighborKey = stringify(neighborPoint);\r\n                if(closedSet.has(neighborKey)) {\r\n                    continue;\r\n                }\r\n                const g = startCurrentNode.g + this.stepCost(startCurrentPoint, neighborPoint);\r\n                const f = g + this.heuristic(neighborPoint, goal);\r\n                if (!startOpenSet.has(neighborKey) || this.isNewScoreBetter(g, startOpenSet.get(neighborKey)!.g)) {\r\n                    const neighborNode = new AStarNode(\r\n                        neighbor, g, f\r\n                    );\r\n                    startCurrentNode.addChild(neighborNode);\r\n                    startOpenFrontier.push(neighborNode);\r\n                    startOpenSet.add(neighborKey, neighborNode);\r\n                }\r\n            }\r\n            //expand endOpenFrontier\r\n            const endCurrentNode = endOpenFrontier.pop();\r\n            const endCurrentPoint = endCurrentNode.tile.point;\r\n            const endCurrentPointKey = stringify(endCurrentPoint);\r\n            endOpenSet.remove(endCurrentPointKey);\r\n            closedSet.add(endCurrentPointKey);\r\n            this.addRecent(endCurrentNode);\r\n            if(startOpenSet.has(endCurrentPointKey)) {\r\n                if(endCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startOpenSet.get(endCurrentPointKey)!\r\n                    ).concat(reconstructPathReversed(\r\n                        endCurrentNode.parent!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            for (const neighbor of this.navigator.neighbors(endCurrentPoint)) {\r\n                const neighborPoint = neighbor.point;\r\n                const neighborKey = stringify(neighborPoint);\r\n                if(closedSet.has(neighborKey)) {\r\n                    continue;\r\n                }\r\n                const g = endCurrentNode.g + this.stepCost(endCurrentPoint, neighborPoint);\r\n                const f = g + this.heuristic(neighborPoint, initial);\r\n                if (!endOpenSet.has(neighborKey) || this.isNewScoreBetter(g, endOpenSet.get(neighborKey)!.g)) {\r\n                    const neighborNode = new AStarNode(\r\n                        neighbor, g, f\r\n                    );\r\n                    endCurrentNode.addChild(neighborNode);\r\n                    endOpenFrontier.push(neighborNode);\r\n                    endOpenSet.add(neighborKey, neighborNode);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * The step-cost function to be used, calculating the cost from\r\n     * currentPoint to neighborPoint. Uses the stepCost function provided by the\r\n     * navigator by default but can be overridden\r\n     * @param currentPoint\r\n     * @param neighborPoint\r\n     */\r\n    stepCost(currentPoint: Point, neighborPoint: Point) {\r\n        return this.navigator.cost(currentPoint, neighborPoint);\r\n    }\r\n}\r\n\r\nexport default BiAStarPathfinder;","import Pathfinder, {reconstructPath, reconstructPathReversed} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {HashTable, stringify} from '../structures/Hash';\r\nimport {Node} from './Node';\r\n\r\nclass BiBFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName(): string {\r\n        return 'Bidirectional Breadth First Search';\r\n    }\r\n\r\n    /**\r\n     * Implementation of BFS to find the shortest path from initial to point\r\n     * Always returns the shortest path, but performs poorly on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const startVisited = new HashTable<Node>();\r\n        const endVisited = new HashTable<Node>();\r\n        const startFrontier: Node[] = [];\r\n        const endFrontier: Node[] = [];\r\n        const initialRoot = new Node(grid.get(initial));\r\n        startFrontier.push(initialRoot);\r\n        startVisited.add(stringify(initial), initialRoot);\r\n        const goalRoot = new Node(grid.get(goal));\r\n        endFrontier.push(goalRoot);\r\n        endVisited.add(stringify(goal), goalRoot);\r\n        while(startFrontier.length !== 0 && endFrontier.length !== 0) {\r\n            //expand startQueue\r\n            const startCurrentNode = startFrontier.shift()!;\r\n            const startCurrentPoint = startCurrentNode.tile.point;\r\n            const startCurrentPointKey = stringify(startCurrentPoint);\r\n            this.addRecent(startCurrentNode);\r\n            if(endVisited.has(startCurrentPointKey)) {\r\n                if(startCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startCurrentNode.parent\r\n                    ).concat(reconstructPathReversed(\r\n                        endVisited.get(startCurrentPointKey)!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            for(const neighbor of this.navigator.neighbors(startCurrentPoint)) {\r\n                const neighborKey = stringify(neighbor.point);\r\n                if(!startVisited.has(neighborKey)) {\r\n                    const neighborNode = new Node(neighbor);\r\n                    startCurrentNode.addChild(neighborNode);\r\n                    startFrontier.push(neighborNode);\r\n                    startVisited.add(neighborKey, neighborNode);\r\n                }\r\n            }\r\n            //expand endQueue\r\n            const endCurrentNode = endFrontier.shift()!;\r\n            const endCurrentPoint = endCurrentNode.tile.point;\r\n            const endCurrentPointKey = stringify(endCurrentPoint);\r\n            this.addRecent(endCurrentNode);\r\n            if(startVisited.has(endCurrentPointKey)) {\r\n                if(endCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startVisited.get(endCurrentPointKey)!\r\n                    ).concat(reconstructPathReversed(\r\n                        endCurrentNode.parent\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            for(const neighbor of this.navigator.neighbors(endCurrentPoint)) {\r\n                const neighborKey = stringify(neighbor.point);\r\n                if(!endVisited.has(neighborKey)) {\r\n                    const neighborNode = new Node(neighbor);\r\n                    endCurrentNode.addChild(neighborNode);\r\n                    endFrontier.push(neighborNode);\r\n                    endVisited.add(neighborKey, neighborNode);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default BiBFSPathfinder;","import Navigator from '../core/Navigator';\r\nimport PlusNavigator from '../core/PlusNavigator';\r\nimport AsteriskNavigator from '../core/AsteriskNavigator';\r\nimport {Point} from '../core/Components';\r\nimport {Grid} from '../core/Grid';\r\nimport {chebyshev, euclidean, HeuristicFunc, manhattan, nullHeuristic, octile} from './Heuristics';\r\nimport Pathfinder from './Pathfinder';\r\nimport AStarPathfinder from './AStar';\r\nimport BFSPathfinder from './BFS';\r\nimport DFSPathfinder from './DFS';\r\nimport BiAStarPathfinder from './BidirectionalAStar';\r\nimport BiBFSPathfinder from \"./BidirectionalBFS\";\r\n\r\nconst CREATE_NAVIGATOR: {[key: string]: ((grid: Grid) => Navigator)} = {\r\n    'plus': (grid: Grid) => new PlusNavigator(grid),\r\n    'asterisk': (grid: Grid) => new AsteriskNavigator(grid)\r\n}\r\n\r\nconst CREATE_HEURISTIC: {[key: string]: (() => HeuristicFunc)} = {\r\n    'manhattan': () => manhattan,\r\n    'euclidean': () => euclidean,\r\n    'chebyshev': () => chebyshev,\r\n    'octile': () => octile,\r\n    'null': () => nullHeuristic\r\n}\r\n\r\nconst CREATE_PATHFINDER: {[key: string]: ((navigator: Navigator, heuristic: HeuristicFunc) => Pathfinder)} = {\r\n    'dijkstra': (navigator) => {\r\n        return new (class DijkstraPathfinder extends AStarPathfinder {\r\n            getAlgorithmName(): string {\r\n                return 'Dijkstra';\r\n            }\r\n        })(navigator, nullHeuristic);\r\n    },\r\n    'best-first': (navigator, heuristic) => {\r\n        return new (class BestFirstPathfinder extends AStarPathfinder {\r\n            stepCost(currentPoint: Point, neighborPoint: Point) {\r\n                return 0;\r\n            }\r\n            getAlgorithmName(): string {\r\n                return 'Best-First Search';\r\n            }\r\n        })(navigator, heuristic);\r\n    },\r\n    'a*': (navigator, heuristic) => {\r\n        return new AStarPathfinder(navigator, heuristic,navigator.getType() !== 'plus');\r\n    },\r\n    'bfs': (navigator) => {\r\n        return new BFSPathfinder(navigator);\r\n    },\r\n    'dfs': (navigator) => {\r\n        return new DFSPathfinder(navigator);\r\n    },\r\n    'bi-a*': (navigator, heuristic) => {\r\n        return new BiAStarPathfinder(navigator, heuristic, navigator.getType() !== 'plus');\r\n    },\r\n    'bi-dijkstra': (navigator) => {\r\n        return new (class BiDijkstraPathfinder extends BiAStarPathfinder {\r\n            getAlgorithmName(): string {\r\n                return 'Bidirectional Dijkstra';\r\n            }\r\n        })(navigator, nullHeuristic);\r\n    },\r\n    'bi-bfs': (navigator) => {\r\n        return new BiBFSPathfinder(navigator);\r\n    }\r\n}\r\n\r\nclass PathfinderBuilder\r\n{\r\n    private navigator: string = 'plus';\r\n    private algorithm: string = 'a*';\r\n    private heuristic: string = 'null';\r\n    private readonly grid: Readonly<Grid>;\r\n\r\n    constructor(grid: Readonly<Grid>) {\r\n        this.grid = grid;\r\n    }\r\n\r\n    setNavigator(navigator: string) {\r\n        navigator = navigator.toLowerCase();\r\n        if(CREATE_NAVIGATOR[navigator] == null) {\r\n            throw new Error('No such navigator pattern exists')\r\n        } else {\r\n            this.navigator = navigator;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setAlgorithm(algorithm: string) {\r\n        algorithm = algorithm.toLowerCase();\r\n        if(CREATE_PATHFINDER[algorithm] == null) {\r\n            throw new Error('No such pathfinding algorithm exists')\r\n        } else {\r\n            this.algorithm = algorithm;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setHeuristic(heuristic: string) {\r\n        heuristic = heuristic.toLowerCase();\r\n        if(CREATE_HEURISTIC[heuristic] == null) {\r\n            throw new Error('No such heuristic function exists')\r\n        } else {\r\n            this.heuristic = heuristic;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Builds a pathfinder with a navigator with the set algorithm, heuristic, and navigator\r\n     */\r\n    build() {\r\n        const createHeuristic = CREATE_HEURISTIC[this.heuristic];\r\n        const createNavigator = CREATE_NAVIGATOR[this.navigator];\r\n        const createPathfinder = CREATE_PATHFINDER[this.algorithm];\r\n        return createPathfinder(createNavigator(this.grid), createHeuristic());\r\n    }\r\n\r\n    static usesHeuristic(algorithm: string) {\r\n        return algorithm === 'a*' || algorithm === 'bi-a*' ||\r\n            algorithm === 'best-first';\r\n    }\r\n\r\n    static hasBidirectional(algorithm: string) {\r\n        return CREATE_PATHFINDER['bi-' + algorithm] != null;\r\n    }\r\n\r\n    static makeBidirectional(algorithm: string) {\r\n        return 'bi-' + algorithm;\r\n    }\r\n}\r\n\r\nexport default PathfinderBuilder;\r\n\r\n","import GridGraph, {Grid} from '../core/Grid';\r\nimport {Point, Tile, createTile} from '../core/Components';\r\n\r\nconst LIMIT = 2;\r\n\r\nexport const NO_SKEW = 0;\r\nexport const VERTICAL_SKEW = 1;\r\nexport const HORIZONTAL_SKEW = 2;\r\n\r\ninterface Chamber\r\n{\r\n    topLeft: Point; //min\r\n    bottomRight: Point; //max\r\n}\r\n\r\nclass MazeGenerator\r\n{\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    private readonly divideWidth: (width: number, height: number) => boolean;\r\n\r\n    constructor(width: number, height: number, slant?: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        if(slant === undefined || slant === NO_SKEW) {\r\n            this.divideWidth = divideWidthNoSkew;\r\n        } else if(slant === VERTICAL_SKEW) {\r\n            this.divideWidth = divideWidthVSkew;\r\n        } else if(slant === HORIZONTAL_SKEW) {\r\n            this.divideWidth = divideWidthHSkew;\r\n        } else {\r\n            throw new Error(\"Invalid recursive maze division skew type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs the recursive division maze generation algorithm on a new empty grid\r\n     * by bisecting parts until the maze can no longer be bisected\r\n     * Params must be within bounds and create a chamber\r\n     * @param topLeft optional parameter to specify what point the maze should start from\r\n     *  This should not be further up/left than (1,1)\r\n     * @param bottomRight optional parameter to specify how far down and right the maze will go\r\n     *  This should not be further right/down than (width-2,height-2)\r\n     */\r\n    generateMaze(topLeft?: Point, bottomRight?: Point) {\r\n        const grid = new GridGraph(this.width, this.height);\r\n        if(topLeft === undefined) {\r\n            topLeft = {\r\n                x: 1, y: 1\r\n            }\r\n        }\r\n        if(bottomRight === undefined) {\r\n            bottomRight = {\r\n                x: grid.getWidth()-2,\r\n                y: grid.getHeight()-2\r\n            }\r\n        }\r\n        for(let x = topLeft.x - 1; x <= bottomRight.x + 1; x++) {\r\n            MazeGenerator.draw(grid,{\r\n                point: {\r\n                    x: x, y: topLeft.y - 1\r\n                },\r\n                data: createTile(true)\r\n            });\r\n            MazeGenerator.draw(grid,{\r\n                point: {\r\n                    x: x, y: bottomRight.y + 1\r\n                },\r\n                data: createTile(true)\r\n            });\r\n        }\r\n        for(let y = topLeft.y - 1; y <= bottomRight.y + 1; y++) {\r\n            MazeGenerator.draw(grid,{\r\n                point: {\r\n                    x: topLeft.x - 1, y: y\r\n                },\r\n                data: createTile(true)\r\n            });\r\n            MazeGenerator.draw(grid,{\r\n                point: {\r\n                    x: bottomRight.x + 1, y: y\r\n                },\r\n                data: createTile(true)\r\n            });\r\n        }\r\n        this.divide(grid,{\r\n            topLeft: topLeft,\r\n            bottomRight: bottomRight,\r\n        });\r\n        return grid;\r\n    }\r\n\r\n    /**\r\n     * Draws a list of tiles to the grid\r\n     * @param grid\r\n     * @param tiles\r\n     */\r\n    private static drawArr(grid: Grid, tiles: Tile[]) {\r\n        for(const tile of tiles) {\r\n            MazeGenerator.draw(grid, tile);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws a tile to the grid\r\n     * @param grid\r\n     * @param tile\r\n     */\r\n    private static draw(grid: Grid, tile: Tile) {\r\n        grid.mutateTile(tile);\r\n    }\r\n\r\n    /**\r\n     * Create a line between a region, with an open hole, in a chamber,\r\n     * and call bisection algorithm on it, and call division algorithms on\r\n     * its split chambers until no chambers can be bisected\r\n     * @param grid\r\n     * @param chamber\r\n     */\r\n    divide(grid: Grid, chamber: Chamber) {\r\n        const width = widthOf(chamber);\r\n        const height = heightOf(chamber);\r\n        const min = chamber.topLeft;\r\n        const max = chamber.bottomRight;\r\n        if(this.divideWidth(width,height)) {\r\n            if(width > LIMIT) {\r\n                //calculate axis\r\n                const randY = getRand(\r\n                    min.y, max.y,\r\n                );\r\n                const randX = getMidPoint(\r\n                    min.x, max.x\r\n                );\r\n                //create axis wall\r\n                const toDraw: Tile[] = [];\r\n                for(let y = min.y; y <= max.y; y++) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: y\r\n                        },\r\n                        data: createTile(true)\r\n                    });\r\n                }\r\n                //create holes in axis wall\r\n                let edgeBlocked = false;\r\n                if(!grid.get({\r\n                    x: randX, y: min.y-1\r\n                }).data.isSolid) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: min.y\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(!grid.get({\r\n                    x: randX, y: max.y+1\r\n                }).data.isSolid) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: max.y\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(!edgeBlocked) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                }\r\n                MazeGenerator.drawArr(grid, toDraw);\r\n                //create children chambers and recurse\r\n                const leftChamber = {\r\n                    topLeft: chamber.topLeft,\r\n                    bottomRight: {\r\n                        x: randX-1,\r\n                        y: chamber.bottomRight.y\r\n                    },\r\n                };\r\n                const rightChamber = {\r\n                    topLeft: {\r\n                        x: randX+1,\r\n                        y: chamber.topLeft.y\r\n                    },\r\n                    bottomRight: chamber.bottomRight,\r\n                };\r\n                this.divide(grid, leftChamber);\r\n                this.divide(grid, rightChamber);\r\n            }\r\n        } else {\r\n            if(height > LIMIT) {\r\n                //calculate axis\r\n                const randX = getRand(\r\n                    min.x, max.x,\r\n                );\r\n                const randY = getMidPoint(\r\n                    min.y, max.y\r\n                );\r\n                //draw axis wall\r\n                const toDraw: Tile[] = [];\r\n                for(let x = min.x; x <= max.x; x++) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: x, y: randY\r\n                        },\r\n                        data: createTile(true)\r\n                    });\r\n                }\r\n                //create holes in axis wall\r\n                let edgeBlocked = false;\r\n                if(!grid.get({\r\n                    x: min.x-1, y: randY\r\n                }).data.isSolid) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: min.x, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(!grid.get({\r\n                    x: max.x+1, y: randY\r\n                }).data.isSolid) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: max.x, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(!edgeBlocked) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                }\r\n                MazeGenerator.drawArr(grid, toDraw);\r\n                //create children chambers and recurse\r\n                const topChamber = {\r\n                    topLeft: chamber.topLeft,\r\n                    bottomRight: {\r\n                        x: chamber.bottomRight.x,\r\n                        y: randY-1\r\n                    },\r\n                };\r\n                const bottomChamber = {\r\n                    topLeft: {\r\n                        x: chamber.topLeft.x,\r\n                        y: randY+1\r\n                    },\r\n                    bottomRight: chamber.bottomRight,\r\n                };\r\n                this.divide(grid, topChamber);\r\n                this.divide(grid, bottomChamber);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction divideWidthNoSkew(width: number, height: number) {\r\n    return width >= height;\r\n}\r\n\r\nfunction divideWidthHSkew(width: number, height: number) {\r\n    return width >= height * 2;\r\n}\r\n\r\nfunction divideWidthVSkew(width: number, height: number) {\r\n    return width * 2 >= height;\r\n}\r\n\r\nfunction widthOf(chamber: Chamber) {\r\n    return chamber.bottomRight.x - chamber.topLeft.x + 1;\r\n}\r\n\r\nfunction heightOf(chamber: Chamber) {\r\n    return chamber.bottomRight.y - chamber.topLeft.y + 1;\r\n}\r\n\r\n/**\r\n * Returns the 'midpoint' to be used\r\n * @param min\r\n * @param max\r\n */\r\nfunction getMidPoint(min: number, max: number) {\r\n    const range = max - min;\r\n    if(range >= 20) {\r\n        return ((min+max)/2) >> 0;\r\n    } else if(range > 5) {\r\n        const mid = ((min+max)/2) >> 0;\r\n        const points = [mid, mid+1];\r\n        return points[getRand(0,points.length-1)];\r\n    } else {\r\n        return getRand(min+1,max-1);\r\n    }\r\n}\r\n\r\n/**\r\n * Generate a random number between min and max-1 then increment the number\r\n * if it is larger than or equal to excluded, inclusive for min and max\r\n * @param min\r\n * @param max\r\n * @param excluded\r\n */\r\nfunction getRandEx(min: number, max: number, excluded: number) {\r\n    let rand = getRand(min, max-1);\r\n    return rand >= excluded ? ++rand : rand;\r\n}\r\n\r\n/**\r\n * Generate a random number between min and max, inclusive for min and max\r\n * @param min\r\n * @param max\r\n */\r\nfunction getRand(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max+1-min) + min);\r\n}\r\n\r\nexport default MazeGenerator;","class VirtualTimer\r\n{\r\n    private timeout: NodeJS.Timeout;\r\n    private readonly callback: () => void\r\n    private timeStarted: number;\r\n    private timeRemaining: number;\r\n    private finished: boolean;\r\n\r\n    constructor(callback: () => void, countDown: number) {\r\n        this.callback = callback;\r\n        this.finished = false;\r\n        this.timeStarted = Date.now();\r\n        this.timeRemaining = countDown;\r\n        this.timeout = setTimeout(() => {\r\n            callback();\r\n            this.finished = true;\r\n        }, this.timeRemaining);\r\n    }\r\n\r\n    clear() {\r\n        clearTimeout(this.timeout);\r\n        this.finished = true;\r\n    }\r\n\r\n    pause() {\r\n        if(!this.finished) {\r\n            clearTimeout(this.timeout);\r\n            this.timeRemaining -= Date.now() - this.timeStarted;\r\n        }\r\n    }\r\n\r\n    resume() {\r\n        if(!this.finished) {\r\n            this.timeStarted = Date.now();\r\n            this.timeout = setTimeout(() => {\r\n                this.callback();\r\n                this.finished = true;\r\n            }, this.timeRemaining);\r\n        }\r\n    }\r\n\r\n    isFinished() {\r\n        return this.finished;\r\n    }\r\n\r\n    getNativeTimeout() {\r\n        return this.timeout;\r\n    }\r\n}\r\n\r\nexport default VirtualTimer;","import React, {RefObject} from 'react';\r\nimport GridBackground from './GridBackground';\r\nimport GridForeground from './GridForeground';\r\nimport StatsPanel from './StatsPanel';\r\nimport {Node} from '../../pathfinding/algorithms/Node';\r\nimport PathfindingSettings from '../PathfindingSettings';\r\nimport PathfinderBuilder from '../../pathfinding/algorithms/PathfinderBuilder';\r\nimport Pathfinder from '../../pathfinding/algorithms/Pathfinder';\r\nimport MazeGenerator from '../../pathfinding/algorithms/MazeGenerator';\r\nimport {Point, Tile} from '../../pathfinding/core/Components';\r\nimport {euclidean} from '../../pathfinding/algorithms/Heuristics';\r\nimport VirtualTimer from '../utility/VirtualTimer';\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    settings: Readonly<PathfindingSettings>,\r\n    topMargin: number,\r\n    onChangeVisualizing: (visualizing: boolean) => void;\r\n}\r\n\r\ninterface IState {\r\n    tilesX: number,\r\n    tilesY: number,\r\n    time: number,\r\n    length: number,\r\n    nodes: number,\r\n    algorithm: string\r\n}\r\n\r\nclass PathfindingVisualizer extends React.Component<IProps,IState>\r\n{\r\n    //references to expose background and foreground grids to parent\r\n    private background: RefObject<GridBackground> = React.createRef();\r\n    private foreground: RefObject<GridForeground> = React.createRef();\r\n    private stats: RefObject<StatsPanel> = React.createRef();\r\n\r\n    private visualized = false;\r\n    private visualizing = false;\r\n    private visualTimeouts: VirtualTimer[]  = [];\r\n    private generations: Node[] = [];\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const w = window.screen.availWidth;\r\n        const h = window.screen.availHeight;\r\n        const tilesX = Math.floor(w / this.props.tileWidth) + 1;\r\n        const tilesY = Math.floor((h - this.props.topMargin - 30) / this.props.tileWidth) + 1;\r\n        this.state = {\r\n            tilesX: tilesX,\r\n            tilesY: tilesY,\r\n            time: -1,\r\n            length: -1,\r\n            nodes: -1,\r\n            algorithm: ''\r\n        }\r\n    }\r\n\r\n    canShowArrows = () => {\r\n        const settings = this.props.settings;\r\n        return settings.showArrows && settings.algorithm !== 'dfs';\r\n    }\r\n\r\n    canShowFrontier = () => {\r\n        const settings = this.props.settings;\r\n        return settings.visualizeAlg;\r\n    }\r\n\r\n    /**\r\n     * Pause the delayed pathfinding algorithm being performed\r\n     */\r\n    pausePathfinding = () => {\r\n        for(const timeout of this.visualTimeouts) {\r\n            timeout.pause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resume the delayed pathfinding algorithm being performed\r\n     * Will reset the timeouts to the last time the timeout was paused/started\r\n     * if not properly called while the timeout is paused\r\n     */\r\n    resumePathfinding = () => {\r\n        for(const timeout of this.visualTimeouts) {\r\n            timeout.resume();\r\n        }\r\n    }\r\n\r\n    jumpToGeneration = (generation: number) => {\r\n        this.clearPath();\r\n        const generations = this.generations.slice(generation);\r\n        if(this.canShowArrows()) {\r\n            this.addArrowGenerations(generations);\r\n        }\r\n        if(this.canShowFrontier()) {\r\n            this.visualizeGenerations(generations);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs the pathfinding algorithm on the grid and visualizes it\r\n     */\r\n    doPathfinding = () => {\r\n        this.clearPath();\r\n        const settings = this.props.settings;\r\n        const pathfinder = this.getPathfinder(settings);\r\n        const path = this.findPath(pathfinder);\r\n        this.generations = pathfinder.getRecentGenerations();\r\n        if(this.canShowArrows()) {\r\n            this.addArrowGenerations(this.generations);\r\n        }\r\n        if(this.canShowFrontier()) {\r\n            this.visualizeGenerations(this.generations);\r\n        }\r\n        this.drawPath(path);\r\n    }\r\n\r\n    /**\r\n     * Performs the pathfinding algorithm on the grid and visualizes it with delays between successive\r\n     * node generations\r\n     * If the visualizer is currently visualizing, the visualization stops instead\r\n     */\r\n    doDelayedPathfinding = () => {\r\n        this.clearVisualization();\r\n        this.clearPath();\r\n        const settings = this.props.settings;\r\n        this.visualized = false;\r\n        const foreground = this.foreground.current!;\r\n        foreground.toggleDisable();\r\n        if(!this.visualizing) { //start visualization if not visualizing\r\n            this.visualizing = true;\r\n            this.props.onChangeVisualizing(this.visualizing);\r\n            const pathfinder = this.getPathfinder(settings);\r\n            const path = this.findPath(pathfinder);\r\n            const increment = settings.delayInc;\r\n            const promises: Promise<VirtualTimer>[] = []; //to call function when timeouts finish\r\n            this.visualTimeouts = [];\r\n            let delay = 0;\r\n            const visualizeAlg = this.canShowFrontier();\r\n            const showArrows = this.canShowArrows();\r\n            if(showArrows || visualizeAlg) {\r\n                const expandVisualization = visualizeAlg ? this.visualizeGeneration : () => {};\r\n                const expandArrows = showArrows ? this.addArrowGeneration : () => {};\r\n                this.generations = pathfinder.getRecentGenerations();\r\n                this.generations.forEach((generation) => {\r\n                    const promise = new Promise<VirtualTimer>((resolve) => {\r\n                        //each generation gets a higher timeout\r\n                        const timeout = new VirtualTimer(() => {\r\n                            expandArrows(generation);\r\n                            expandVisualization(generation);\r\n                            this.background.current!.doUpdate();\r\n                            resolve(timeout);\r\n                        }, delay);\r\n                        this.visualTimeouts.push(timeout);\r\n                    });\r\n                    delay += increment;\r\n                    promises.push(promise);\r\n                });\r\n            }\r\n            //call functions when timeouts finish\r\n            Promise.all(promises).then(() => {\r\n                this.drawPath(path);\r\n                foreground.toggleDisable();\r\n                this.visualizing = false;\r\n                this.visualized = true;\r\n                this.props.onChangeVisualizing(this.visualizing);\r\n            });\r\n        } else { //stop visualizing if visualizing\r\n            for (const timeout of this.visualTimeouts) {\r\n                timeout.clear();\r\n            }\r\n            this.visualizing = false;\r\n            this.props.onChangeVisualizing(this.visualizing);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the pathfinder for the settings\r\n     * @param settings\r\n     */\r\n    private getPathfinder = (settings: PathfindingSettings) => {\r\n        const algorithmKey = settings.algorithm;\r\n        const algorithm = settings.bidirectional && PathfinderBuilder.hasBidirectional(algorithmKey) ?\r\n            PathfinderBuilder.makeBidirectional(algorithmKey) : algorithmKey;\r\n        return new PathfinderBuilder(this.foreground.current!.state.grid)\r\n            .setAlgorithm(algorithm)\r\n            .setHeuristic(settings.heuristicKey)\r\n            .setNavigator(settings.navigatorKey)\r\n            .build();\r\n    }\r\n\r\n    /**\r\n     * Find path with a given pathfinder, includes benchmarking\r\n     * @param pathfinder\r\n     */\r\n    private findPath = (pathfinder: Pathfinder) => {\r\n        const foreground = this.foreground.current!;\r\n        const t0 = performance.now();\r\n        const path = pathfinder.findPath(foreground.state.initial, foreground.state.goal);\r\n        const t1 = performance.now();\r\n        const t2 = (t1 - t0);\r\n        this.setState({\r\n            time: t2,\r\n            nodes: pathfinder.getRecentNodes(),\r\n            length: calcLength(foreground.state.initial, path),\r\n            algorithm: pathfinder.getAlgorithmName()\r\n        });\r\n        return path;\r\n    }\r\n\r\n    /**\r\n     * Draw path on the grid and change length on ui\r\n     * @param path\r\n     */\r\n    private drawPath = (path: Tile[]) => {\r\n        const foreground = this.foreground.current!\r\n        path.unshift(this.foreground.current!.state.grid.get(foreground.state.initial));\r\n        this.foreground.current!.drawPath(path);\r\n    }\r\n\r\n    /**\r\n     * Called when child foreground moves a tile\r\n     */\r\n    private onTilesDragged = () => {\r\n        if(this.visualized) {\r\n            this.clearVisualization();\r\n            this.doPathfinding();\r\n            this.visualized = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a maze on the grid foreground\r\n     */\r\n    createMaze = (slant: number) => {\r\n        if(this.visualizing) {\r\n            return;\r\n        }\r\n        this.clearTiles();\r\n        this.clearPath();\r\n        this.clearVisualization();\r\n        const prevGrid = this.foreground.current!.state.grid;\r\n        const generator = new MazeGenerator(prevGrid.getWidth(), prevGrid.getHeight(), slant);\r\n        const end = this.calcEndPointInView();\r\n        const topLeft = {\r\n            x: 1, y: 1\r\n        };\r\n        const bottomRight = {\r\n            x: end.x-2, y: end.y-2\r\n        };\r\n        const grid = generator.generateMaze(topLeft, bottomRight);\r\n        this.foreground.current!.drawGrid(grid);\r\n        this.setPositions({\r\n            x: end.x-2,\r\n            y: end.y-2\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Calculate the end/goal point in view of the screen\r\n     */\r\n    calcEndPointInView = () => {\r\n        const xEnd = window.innerWidth / this.props.tileWidth;\r\n        const yEnd = (window.innerHeight - this.props.topMargin\r\n            - this.stats.current!.getHeight()) / this.props.tileWidth;\r\n        const xFloor = Math.floor(xEnd);\r\n        const yFloor = Math.floor(yEnd);\r\n        const xDecimal = xEnd - xFloor;\r\n        const yDecimal = yEnd - yFloor;\r\n        return {\r\n            x: xDecimal > 0.05 ? Math.ceil(xEnd) : xFloor,\r\n            y: yDecimal > 0.05 ? Math.ceil(yEnd) : yFloor\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the positions in the grid foreground\r\n     */\r\n    private setPositions = (endPoint: Point) => {\r\n        this.foreground.current!.moveInitial({\r\n            x: 1, y:1\r\n        });\r\n        this.foreground.current!.moveGoal(endPoint);\r\n    }\r\n\r\n    clearPath = () => {\r\n        this.foreground.current!.erasePath();\r\n    }\r\n\r\n    clearTiles = () => {\r\n        this.foreground.current!.clearTiles();\r\n    }\r\n\r\n    clearTilesChecked = () => {\r\n        if(!this.visualizing) {\r\n            this.foreground.current!.clearTiles();\r\n        }\r\n    }\r\n\r\n    clearVisualization = () => {\r\n        this.visualized = false;\r\n        this.background.current!.clear();\r\n    }\r\n\r\n    clearVisualizationChecked = () => {\r\n        if(!this.visualizing) {\r\n            this.visualized = false;\r\n            this.background.current!.clear();\r\n        }\r\n    }\r\n\r\n    private visualizeGenerations = (generations: Node[]) => {\r\n        this.background.current!.visualizeGenerations(generations);\r\n        this.visualized = true;\r\n    }\r\n\r\n    private visualizeGeneration = (generation: Node) => {\r\n        this.background.current!.visualizeGeneration(generation);\r\n    }\r\n\r\n    private addArrowGenerations = (generations: Node[]) => {\r\n        this.background.current!.addArrowGenerations(generations);\r\n    }\r\n\r\n    private addArrowGeneration = (generation: Node) => {\r\n        this.background.current!.addArrowGeneration(generation);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <StatsPanel ref={this.stats} algorithm={this.state.algorithm} length={this.state.length}\r\n                            time={this.state.time} nodes={this.state.nodes}/>\r\n                <GridBackground ref={this.background} tileWidth={this.props.tileWidth}\r\n                                tilesX={this.state.tilesX} tilesY={this.state.tilesY}/>\r\n                <GridForeground ref={this.foreground} topMargin={this.props.topMargin}\r\n                                onTilesDragged={this.onTilesDragged} tileWidth={this.props.tileWidth}\r\n                                tilesX={this.state.tilesX} tilesY={this.state.tilesY}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction calcLength(initial: Point, path: Tile[]) {\r\n    if(path.length === 0) {\r\n        return 0;\r\n    }\r\n    let len = euclidean(initial, path[0].point);\r\n    for (let i = 0; i < path.length - 1; i++) {\r\n        len += euclidean(path[i].point, path[i + 1].point);\r\n    }\r\n    return +(len).toFixed(3);\r\n}\r\n\r\nexport default PathfindingVisualizer;","import React from 'react';\r\n\r\ninterface IProps {\r\n    boxStyle: string,\r\n    defaultChecked: boolean,\r\n    disabled?: boolean,\r\n    onChange: (checked: boolean) => void\r\n}\r\n\r\ninterface IState {\r\n    checked: boolean\r\n}\r\n\r\nclass Checkbox extends React.Component<IProps,IState>\r\n{\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            checked: this.props.defaultChecked\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger callback and change checkbox state\r\n     */\r\n    onChange = () => {\r\n        this.setState(prevState => ({\r\n            checked: !prevState.checked\r\n        }), () => this.props.onChange(this.state.checked));\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <input checked={this.state.checked} type='checkbox' disabled={this.props.disabled}\r\n                       className={this.props.boxStyle} onKeyPress={this.onChange} onChange={this.onChange}\r\n                >\r\n                </input>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Checkbox;","import React from 'react';\r\n\r\ninterface IProps {\r\n    min: number,\r\n    max: number,\r\n    default: number,\r\n    step: number,\r\n    sliderStyle: string,\r\n    onChange: (val: number) => void\r\n}\r\n\r\ninterface IState {\r\n    value: number\r\n}\r\n\r\nclass SteppedRangeSlider extends React.Component<IProps, IState>\r\n{\r\n    private mouseUp = true;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            value: this.props.default\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger callback when slider value is changed\r\n     * @param e\r\n     */\r\n    onChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n        if(!this.mouseUp) { //to prevent firefox from resetting on release\r\n            const val = Number(e.currentTarget.value);\r\n            this.setState({\r\n                value: val\r\n            }, () => this.props.onChange(val));\r\n        }\r\n    }\r\n\r\n    onMouseUp = () => {\r\n        this.mouseUp = true;\r\n    }\r\n\r\n    onMouseDown = () => {\r\n        this.mouseUp = false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <input type='range' list='step-list'\r\n                   value={this.state.value}\r\n                   min={this.props.min} max={this.props.max}\r\n                   step={this.props.step} className={this.props.sliderStyle}\r\n                   onInput={this.onChange}\r\n                   onMouseUp={this.onMouseUp}\r\n                   onMouseDown={this.onMouseDown}\r\n            >\r\n            </input>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SteppedRangeSlider;","import React from 'react';\r\n\r\ninterface IProps {\r\n    boxStyle: string,\r\n    defaultChecked: number,\r\n    disabled: boolean,\r\n    onChange: (() => void)[]\r\n}\r\n\r\ninterface IState {\r\n    checked: boolean[];\r\n}\r\n\r\nclass RadioButtonGroup extends React.Component<IProps, IState>\r\n{\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const checked: boolean[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            checked.push(i === this.props.defaultChecked);\r\n        }\r\n        this.state = {\r\n            checked: checked\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set all radio buttons to checked aside from the index\r\n     * of the one that was changed\r\n     * Trigger callback\r\n     * @param index\r\n     */\r\n    private onChange = (index: number) => {\r\n        const checked: boolean[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            checked.push(i === index);\r\n        }\r\n        this.setState({\r\n            checked: checked\r\n        }, () => this.props.onChange[index]());\r\n    }\r\n\r\n    render() {\r\n        const children = React.Children.toArray(this.props.children);\r\n        const radioButtons: JSX.Element[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            radioButtons.push(\r\n                <div key={i}>\r\n                    <input checked={this.state.checked[i]} type='radio' disabled={this.props.disabled}\r\n                           className={this.props.boxStyle}\r\n                           onChange={() => this.onChange(i)}\r\n                    >\r\n                    </input>\r\n                    {children[i]}\r\n                </div>\r\n            );\r\n        }\r\n        return radioButtons;\r\n    };\r\n}\r\n\r\nexport default RadioButtonGroup;","import React from 'react';\r\nimport Checkbox from '../utility/Checkbox';\r\nimport SteppedRangeSlider from '../utility/SteppedRangeSlider';\r\nimport RadioButtonGroup from '../utility/RadioButtonGroup';\r\n\r\ninterface VisualProps {\r\n    onChangeViz: () => void,\r\n    onChangeShowArrows: () => void,\r\n    disabled: boolean\r\n}\r\n\r\ninterface SpeedProps {\r\n    onChange: (value: number) => void\r\n}\r\n\r\ninterface SpeedState {\r\n    speedText: string\r\n}\r\n\r\ninterface AlgorithmProps {\r\n    onChangeDiagonals: (checked: boolean) => void,\r\n    onChangeBidirectional: (checked: boolean) => void\r\n    disabled: boolean\r\n}\r\n\r\ninterface HeuristicProps {\r\n    onClickManhattan: () => void,\r\n    onClickEuclidean: () => void,\r\n    onClickChebyshev: () => void,\r\n    onClickOctile: () => void,\r\n    disabled: boolean\r\n}\r\n\r\nexport class VisualSettings extends React.Component<VisualProps>\r\n{\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Visualization</div>\r\n                <Checkbox defaultChecked={true} boxStyle='box'\r\n                          onChange={this.props.onChangeViz}>\r\n                    Show Frontier\r\n                </Checkbox>\r\n                <Checkbox defaultChecked={true} boxStyle='box'\r\n                          onChange={this.props.onChangeShowArrows}\r\n                          disabled={this.props.disabled}>\r\n                    Show Tree\r\n                </Checkbox>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class SpeedSettings extends React.Component<SpeedProps, SpeedState>\r\n{\r\n    constructor(props: SpeedProps) {\r\n        super(props);\r\n        this.state = {\r\n            speedText: '10'\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback function to be called when slider is changed\r\n     * Call another callback and change text\r\n     * @param value\r\n     */\r\n    onChangeSpeed = (value: number) => {\r\n        const speedTexts = value*5;\r\n        this.setState({\r\n            speedText: String(speedTexts)\r\n        })\r\n        this.props.onChange(value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='slider-container'>\r\n                <div className='slider-text'>\r\n                    Speed: <div className='speed-text'> {this.state.speedText} </div>\r\n                </div>\r\n                <SteppedRangeSlider min={1} max={10} step={1} default={2}\r\n                                    sliderStyle='slider speed-slider'\r\n                                    onChange={this.onChangeSpeed}\r\n                />\r\n                <datalist id='step-list'>\r\n                    <option>1</option>\r\n                    <option>2</option>\r\n                    <option>3</option>\r\n                    <option>4</option>\r\n                    <option>5</option>\r\n                    <option>6</option>\r\n                    <option>7</option>\r\n                    <option>8</option>\r\n                    <option>9</option>\r\n                    <option>10</option>\r\n                </datalist>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class AlgorithmSettings extends React.Component<AlgorithmProps>\r\n{\r\n    constructor(props: AlgorithmProps) {\r\n        super(props);\r\n        this.state = {\r\n            disabled: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Algorithm</div>\r\n                <Checkbox defaultChecked={true} boxStyle='box'\r\n                          onChange={this.props.onChangeDiagonals}>\r\n                    Allow Diagonals\r\n                </Checkbox>\r\n                <Checkbox defaultChecked={false} boxStyle='box'\r\n                          disabled={this.props.disabled}\r\n                          onChange={this.props.onChangeBidirectional}>\r\n                    Bidirectional\r\n                </Checkbox>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class HeuristicSettings extends React.Component<HeuristicProps>\r\n{\r\n    constructor(props: HeuristicProps) {\r\n        super(props);\r\n        this.state = {\r\n            disabled: false\r\n        }\r\n    }\r\n\r\n    disable = () => {\r\n        this.setState({\r\n            disabled: true\r\n        })\r\n    }\r\n\r\n    enable = () => {\r\n        this.setState({\r\n            disabled: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Heuristic</div>\r\n                <RadioButtonGroup boxStyle='box'\r\n                                  defaultChecked={1}\r\n                                  disabled={this.props.disabled}\r\n                                  onChange={[\r\n                                      this.props.onClickManhattan, this.props.onClickEuclidean,\r\n                                      this.props.onClickChebyshev, this.props.onClickOctile\r\n                                  ]}\r\n                >\r\n                    {[<span key='Manhattan'>Manhattan</span>, <span key='Euclidean'>Euclidean</span>,\r\n                        <span key='Chebyshev'>Chebyshev</span>, <span key='Octile<'>Octile</span>]}\r\n                </RadioButtonGroup>\r\n            </div>\r\n        )\r\n    }\r\n}","import PathfindingSettings, {getDefaultSettings} from './PathfindingSettings';\r\n\r\nclass SettingsManager\r\n{\r\n    settings: PathfindingSettings = getDefaultSettings();\r\n\r\n    changeAlgo = (algo: string) => {\r\n        this.settings.algorithm = algo;\r\n    }\r\n\r\n    changeVisualize = () => {\r\n        this.settings.visualizeAlg = !this.settings.visualizeAlg;\r\n    }\r\n\r\n    changeShowArrows = () => {\r\n        this.settings.showArrows = !this.settings.showArrows;\r\n    }\r\n\r\n    changeBidirectional = () => {\r\n        this.settings.bidirectional = !this.settings.bidirectional;\r\n    }\r\n\r\n    changeDiagonals = (checked: boolean) => {\r\n        this.settings.navigatorKey = checked ? 'asterisk' : 'plus';\r\n    }\r\n\r\n    changeSpeed = (value: number) => {\r\n        this.settings.delayInc = value*5;\r\n    }\r\n\r\n    changeManhattan = () => {\r\n        this.settings.heuristicKey = 'manhattan';\r\n    }\r\n\r\n    changeEuclidean = () => {\r\n        this.settings.heuristicKey = 'euclidean';\r\n    }\r\n\r\n    changeChebyshev = () => {\r\n        this.settings.heuristicKey = 'chebyshev';\r\n    }\r\n\r\n    changeOctile = () => {\r\n        this.settings.heuristicKey = 'octile';\r\n    }\r\n}\r\n\r\nexport default SettingsManager;","interface PathfindingSettings\r\n{\r\n    visualizeAlg: boolean,\r\n    showArrows: boolean,\r\n    delayInc: number,\r\n    algorithm: string,\r\n    heuristicKey: string,\r\n    navigatorKey: string,\r\n    bidirectional: boolean\r\n}\r\n\r\nexport function getDefaultSettings(): PathfindingSettings {\r\n    return {\r\n        visualizeAlg: true,\r\n        showArrows: true,\r\n        delayInc: 8,\r\n        algorithm: 'a*',\r\n        heuristicKey: 'euclidean',\r\n        navigatorKey: 'asterisk',\r\n        bidirectional: false\r\n    }\r\n}\r\n\r\nexport default PathfindingSettings;","import React, {RefObject} from 'react';\r\nimport '../App.css';\r\nimport TopBar from './navbar/TopBar';\r\nimport {VisualizeButton, SettingsButton} from './navbar/Buttons';\r\nimport {AlgorithmDropDown, ClearDropDown, MazeDropDown} from './navbar/DropDown';\r\nimport DraggablePanel from './utility/DraggablePanel';\r\nimport PathfindingVisualizer from './grid/PathfindingVisualizer';\r\nimport {VisualSettings, SpeedSettings, AlgorithmSettings, HeuristicSettings} from './navbar/SettingPanels';\r\nimport SettingsManager from './SettingsManager';\r\nimport PathfinderBuilder from '../pathfinding/algorithms/PathfinderBuilder';\r\nimport {HORIZONTAL_SKEW, NO_SKEW, VERTICAL_SKEW} from '../pathfinding/algorithms/MazeGenerator';\r\n\r\ninterface IProps {}\r\n\r\ninterface IState {\r\n    heuristicDisabled: boolean,\r\n    bidirectionalDisabled: boolean,\r\n    arrowsDisabled: boolean,\r\n\r\n    panelShow: boolean,\r\n\r\n    topMargin: number,\r\n\r\n    visualizing: boolean,\r\n    paused: boolean\r\n}\r\n\r\nclass PathfindingApp extends React.Component<IProps, IState>\r\n{\r\n    //expose grid to parent to connect to button siblings\r\n    private grid: RefObject<PathfindingVisualizer> = React.createRef();\r\n\r\n    private algDropDown: RefObject<AlgorithmDropDown> = React.createRef();\r\n    private clrDropDown: RefObject<ClearDropDown> = React.createRef();\r\n    private mazeDropDown: RefObject<MazeDropDown> = React.createRef();\r\n\r\n    private settingsManager: SettingsManager = new SettingsManager();\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            heuristicDisabled: false,\r\n            bidirectionalDisabled: false,\r\n            arrowsDisabled: false,\r\n            panelShow: false,\r\n            topMargin: 75,\r\n            visualizing: false,\r\n            paused: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('click', e => {\r\n            this.algDropDown.current!.hide();\r\n            this.clrDropDown.current!.hide();\r\n            this.mazeDropDown.current!.hide();\r\n        });\r\n    }\r\n\r\n    onClickAlgDrop = () => {\r\n        this.clrDropDown.current!.hide();\r\n        this.mazeDropDown.current!.hide();\r\n    }\r\n\r\n    onClickClrDrop = () => {\r\n        this.algDropDown.current!.hide();\r\n        this.mazeDropDown.current!.hide();\r\n    }\r\n\r\n    onClickMazeDrop = () => {\r\n        this.clrDropDown.current!.hide();\r\n        this.algDropDown.current!.hide();\r\n    }\r\n\r\n    changeVButtonColor = (visualizing: boolean) => {\r\n        this.setState({\r\n            visualizing: visualizing\r\n        })\r\n    }\r\n\r\n    toggleSettings = () => {\r\n        this.setState(prevState => ({\r\n            panelShow: !prevState.panelShow\r\n        }));\r\n    }\r\n\r\n    hideSettings = () => {\r\n        this.setState({\r\n            panelShow: false\r\n        });\r\n    }\r\n\r\n    changeAlgo = (algorithm: string) => {\r\n        this.setState({\r\n            heuristicDisabled: !PathfinderBuilder.usesHeuristic(algorithm),\r\n            bidirectionalDisabled: !PathfinderBuilder.hasBidirectional(algorithm),\r\n            arrowsDisabled: algorithm === 'dfs'\r\n        });\r\n        this.settingsManager.changeAlgo(algorithm);\r\n    }\r\n\r\n    doPathfinding = () => {\r\n        this.setState({\r\n            paused: false\r\n        });\r\n        this.grid.current!.doDelayedPathfinding();\r\n    }\r\n\r\n    pausePathfinding = () => {\r\n        this.setState({\r\n            paused: true\r\n        });\r\n        this.grid.current!.pausePathfinding();\r\n    }\r\n\r\n    resumePathfinding = () => {\r\n        this.setState({\r\n            paused: false\r\n        });\r\n        this.grid.current!.resumePathfinding();\r\n    }\r\n\r\n    clearPath = () => {\r\n        this.grid.current!.clearPath();\r\n        this.grid.current!.clearVisualizationChecked();\r\n    }\r\n\r\n    clearTiles = () => {\r\n        this.clearPath();\r\n        this.grid.current!.clearTilesChecked();\r\n    }\r\n\r\n    createMaze = () => {\r\n        this.grid.current!.createMaze(NO_SKEW);\r\n    }\r\n\r\n    createMazeVSkew = () => {\r\n        this.grid.current!.createMaze(VERTICAL_SKEW);\r\n    }\r\n\r\n    createMazeHSkew = () => {\r\n        this.grid.current!.createMaze(HORIZONTAL_SKEW);\r\n    }\r\n\r\n    onChangeHeight = (height: number) => {\r\n        this.setState({\r\n            topMargin: height\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const tileWidth =  isMobile() ? 47 : Math.round(window.screen.availWidth / 57);\r\n        return (\r\n            <div>\r\n                <DraggablePanel title='Grid Settings'\r\n                                show={this.state.panelShow}\r\n                                onClickXButton={this.hideSettings}\r\n                                width={350}\r\n                                height={420}\r\n                >\r\n                    <VisualSettings disabled={this.state.arrowsDisabled}\r\n                                    onChangeViz={this.settingsManager.changeVisualize}\r\n                                    onChangeShowArrows={this.settingsManager.changeShowArrows}\r\n                    />\r\n                    <SpeedSettings onChange={this.settingsManager.changeSpeed}/>\r\n                    <AlgorithmSettings disabled={this.state.bidirectionalDisabled}\r\n                                       onChangeBidirectional={this.settingsManager.changeBidirectional}\r\n                                       onChangeDiagonals={this.settingsManager.changeDiagonals}\r\n                    />\r\n                    <HeuristicSettings disabled={this.state.heuristicDisabled}\r\n                                       onClickManhattan={this.settingsManager.changeManhattan}\r\n                                       onClickEuclidean={this.settingsManager.changeEuclidean}\r\n                                       onClickChebyshev={this.settingsManager.changeChebyshev}\r\n                                       onClickOctile={this.settingsManager.changeOctile}\r\n                    />\r\n                </DraggablePanel>\r\n                <TopBar onChangeHeight={this.onChangeHeight}>\r\n                    <a href='https://github.com/JosephPrichard/PathfinderReact' className='title'>\r\n                        Pathfinding Visualizer\r\n                    </a>\r\n                    <div className='top-container'>\r\n                        <AlgorithmDropDown ref={this.algDropDown}\r\n                                           onClick={this.onClickAlgDrop}\r\n                                           onChange={this.changeAlgo}\r\n                        />\r\n                        <VisualizeButton active={this.state.visualizing}\r\n                                         paused={this.state.paused}\r\n                                         onPause={this.pausePathfinding}\r\n                                         onResume={this.resumePathfinding}\r\n                                         onStartStop={this.doPathfinding}\r\n                        />\r\n                        <ClearDropDown ref={this.clrDropDown}\r\n                                       onClick={this.onClickClrDrop}\r\n                                       onClickTiles={this.clearTiles}\r\n                                       onClickPath={this.clearPath}\r\n                        />\r\n                        <MazeDropDown ref={this.mazeDropDown}\r\n                                      onClick={this.onClickMazeDrop}\r\n                                      onClickMaze={this.createMaze}\r\n                                      onClickMazeHorizontal={this.createMazeHSkew}\r\n                                      onClickMazeVertical={this.createMazeVSkew}\r\n                        />\r\n                        <SettingsButton onClick={this.toggleSettings}/>\r\n                    </div>\r\n                </TopBar>\r\n                <PathfindingVisualizer ref={this.grid}\r\n                                       onChangeVisualizing={this.changeVButtonColor}\r\n                                       topMargin={this.state.topMargin}\r\n                                       settings={this.settingsManager.settings}\r\n                                       tileWidth={tileWidth}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction isMobile() {\r\n    return /Android|webOS|iPhone|iPad|Mac|Macintosh|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n}\r\n\r\nexport default PathfindingApp;","import React from 'react';\nimport PathfindingApp from './view/PathfindingApp';\n\nclass App extends React.Component\n{\n    render() {\n        return (\n            <PathfindingApp/>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n//reportWebVitals();\n"],"sourceRoot":""}