{"version":3,"sources":["view/navbar/TopBar.tsx","view/navbar/Buttons.tsx","view/navbar/DropDown.tsx","view/utility/DraggablePanel.tsx","view/grid/GridBackground.tsx","pathfinding/core/Components.ts","pathfinding/core/Grid.ts","view/grid/TileFg.tsx","view/grid/GridForeground.tsx","view/grid/StatsPanel.tsx","pathfinding/core/Navigator.ts","pathfinding/core/PlusNavigator.ts","pathfinding/algorithms/Heuristics.ts","pathfinding/core/AsteriskNavigator.ts","pathfinding/structures/Hash.ts","pathfinding/structures/Heap.ts","pathfinding/algorithms/Pathfinder.ts","pathfinding/algorithms/Node.ts","pathfinding/algorithms/AStar.ts","pathfinding/algorithms/BFS.ts","pathfinding/structures/Stack.ts","pathfinding/algorithms/DFS.ts","pathfinding/algorithms/BidirectionalAStar.ts","pathfinding/algorithms/BidirectionalBFS.ts","pathfinding/algorithms/PathfinderBuilder.ts","view/utility/VirtualTimer.ts","pathfinding/algorithms/TerrainGenerator.ts","pathfinding/algorithms/RandomTerrainGenerator.ts","pathfinding/algorithms/MazeGenerator.ts","pathfinding/algorithms/TerrainGeneratorBuilder.ts","view/grid/PathfindingVisualizer.tsx","view/utility/Checkbox.tsx","view/utility/SteppedRangeSlider.tsx","view/utility/RadioButtonGroup.tsx","view/navbar/SettingPanels.tsx","view/SettingsManager.ts","view/PathfindingSettings.ts","view/PathfindingApp.tsx","App.tsx","index.tsx"],"names":["TopBar","bar","React","createRef","window","addEventListener","props","onChangeHeight","current","offsetHeight","this","ref","className","children","Component","SYMBOL_COLOR","DIMENSION","VisualizeButton","width","height","rx","fill","points","x","active","onMouseDown","e","preventDefault","onClick","paused","onResume","onPause","xmlns","getResumeSymbol","getPauseSymbol","onStartStop","getStopSymbol","SettingsButton","AlgorithmDropDown","show","setState","up","display","hide","toggle","stopPropagation","isHidden","state","contentStyle","onChange","key","algText","arrowClass","fade","tabIndex","onKeyPress","nativeEvent","style","click","ClearDropDown","onClickPath","onClickTiles","onClickReset","MazeDropDown","onClickMaze","onClickMazeHorizontal","onClickMazeVertical","onClickRandomTerrain","Clickable","DraggablePanel","draggable","draggableContainer","draggableContent","dragging","prevX","prevY","mouseDown","clientY","clientX","touchStart","touch","touches","changedTouches","mouseUp","mouseMove","drag","touchMove","container","top","offsetTop","left","offsetLeft","content","innerHeight","innerWidth","offsetWidth","getPosition","visibleStyle","renderDraggable","draggableStyle","onTouchStart","title","onClickXButton","document","minHeight","ARROW_COLOR","GridBackground","clear","visualization","createEmptyBg","arrows","doGeneration","generation","point","tile","y","visualizeGeneration","prevState","map","arr","slice","visualizeGenerations","generations","doArrowGeneration","point1","point2","newArrow","from","to","i","length","a","index","indexOf","splice","push","addArrowGeneration","addArrowGenerations","renderArrows","tileWidth","offset","arrow","first","second","firstX","firstY","secondX","secondY","offsetX","offsetY","x1","y1","x2","y2","stroke","strokeWidth","markerEnd","renderTiles","tiles","row","renderTile","color","backgroundColor","tilesX","tilesY","id","markerWidth","markerHeight","refX","refY","orient","createTile","isSolid","pathCost","RectGrid","mutateDefault","solid","mutate","nodes","data","createEmptyGrid","console","str","log","JSON","stringify","grid","mutateTile","get","TileFg","applyExpandAnimation","expansions","original","tileSize","setTimeout","expansionDuration","time","size","doAnimation","shapeRendering","ARROW_PATH_COLOR","pointsEqual","GridForeground","svg","mouseDown0","mouseDown2","draggingInitial","draggingGoal","disable","doTileAnimation","bounds","getBoundingRect","onPress","button","onDrag","onTouch","onEndingEvent","xCoordinate","yCoordinate","calculatePoint","initial","goal","drawTile","eraseTile","moveInitial","moveGoal","drawGrid","clone","inBounds","clearTiles","onTilesDragged","drawPath","path","erasePath","Math","floor","resetPoints","end","calcEndPointInView","renderPath","lines","renderPathArrow","renderEndTile","round","topMargin","getBoundingClientRect","onContextMenu","onMouseUp","onMouseMove","onMouseLeave","onTouchMoveCapture","onTouchEnd","onTouchCancel","StatsPanel","textLog","scrollTop","scrollHeight","clientHeight","toFixed","text","algorithm","readOnly","value","unselectable","onDrop","Navigator","b","PlusNavigator","getWidth","getHeight","manhattan","abs","euclidean","dx","dy","sqrt","octile","SQRT2","min","chebyshev","max","nullHeuristic","AsteriskNavigator","walkBottomRight","walkTopRight","walkBottomLeft","walkTopLeft","HashSet","HashTable","undefined","Heap","compare","elements","siftUp","val","peek","move","pop","siftDown","pos","parent","swap","right","child","reconstructPath","bottomLeaf","reconstructPathReversed","reverse","Pathfinder","navigator","recentSearch","node","Node","AStarNode","g","fScore","AStarPathfinder","func","canRediscover","heuristic","isNewScoreBetter","newScore","oldScore","clearRecentSearch","getGrid","openFrontier","f","closedSet","openSet","root","add","isEmpty","currentNode","currentPoint","currentKey","remove","addRecent","equals","neighbors","neighbor","neighborPoint","neighborKey","has","stepCost","neighborNode","addChild","cost","BFSPathfinder","frontier","visited","shift","next","Stack","DFSPathfinder","BiAStarPathfinder","startOpenFrontier","startOpenSet","endOpenFrontier","endOpenSet","initialRoot","goalRoot","startCurrentNode","startCurrentPoint","startCurrentPointKey","concat","endCurrentNode","endCurrentPoint","endCurrentPointKey","BiBFSPathfinder","startVisited","endVisited","startFrontier","endFrontier","CREATE_NAVIGATOR","CREATE_HEURISTIC","CREATE_PATHFINDER","getType","PathfinderBuilder","toLowerCase","Error","createHeuristic","createNavigator","createPathfinder","VirtualTimer","callback","countDown","timeout","timeStarted","timeRemaining","finished","Date","now","clearTimeout","TerrainGenerator","ignore","shouldIgnore","RandomTerrainGenerator","topLeft","bottomRight","random","draw","divideWidthNoSkew","divideWidthHSkew","divideWidthVSkew","getMidPoint","range","mid","getRand","MazeGenerator","slant","divideWidth","divide","chamber","widthOf","heightOf","randX","toDraw","edgeBlocked","randY","drawArr","leftChamber","rightChamber","topChamber","bottomChamber","TerrainGeneratorBuilder","type","calcLength","len","PathfindingVisualizer","background","foreground","stats","visualized","visualizing","visualTimeouts","canShowArrows","settings","showArrows","canShowFrontier","visualizeAlg","pausePathfinding","pause","resumePathfinding","resume","jumpToGeneration","clearPath","doPathfinding","pathfinder","getPathfinder","findPath","getRecentGenerations","doDelayedPathfinding","clearVisualization","toggleDisable","onChangeVisualizing","promises","baseIncrement","delayInc","delay","expandVisualization","expandArrows","forEach","promise","Promise","resolve","all","then","algorithmKey","bidirectional","hasBidirectional","makeBidirectional","setAlgorithm","setHeuristic","heuristicKey","setNavigator","navigatorKey","build","t0","performance","t2","getRecentNodes","getAlgorithmName","unshift","createTerrain","mazeType","prevGrid","generator","setDimensions","setGeneratorType","setIgnorePoints","generateTerrain","xEnd","yEnd","xFloor","yFloor","yDecimal","ceil","clearTilesChecked","clearVisualizationChecked","w","screen","availWidth","h","availHeight","Checkbox","checked","defaultChecked","disabled","boxStyle","defaultProps","SteppedRangeSlider","Number","currentTarget","default","list","step","sliderStyle","onInput","RadioButtonGroup","Children","toArray","radioButtons","VisualSettings","onChangeViz","onChangeShowArrows","SpeedSettings","onChangeSpeed","speed","speedText","String","initialSpeed","options","AlgorithmSettings","onChangeDiagonals","onChangeBidirectional","HeuristicSettings","enable","onClickManhattan","onClickEuclidean","onClickChebyshev","onClickOctile","SettingsManager","changeAlgo","algo","changeVisualize","changeShowArrows","changeBidirectional","changeDiagonals","changeSpeed","changeManhattan","changeEuclidean","changeChebyshev","changeOctile","PathfindingApp","algDropDown","clrDropDown","mazeDropDown","settingsManager","onClickAlgDrop","onClickClrDrop","onClickMazeDrop","changeVButtonColor","toggleSettings","panelShow","hideSettings","heuristicDisabled","usesHeuristic","bidirectionalDisabled","arrowsDisabled","resetBoard","createMaze","createMazeVSkew","createMazeHSkew","createRandomTerrain","mobile","test","userAgent","href","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6409b5c3.chunk.js","sourcesContent":["import React, {RefObject} from 'react';\r\nimport './Navbar.css'\r\n\r\ninterface IProps {\r\n    onChangeHeight: (height: number) => void\r\n}\r\n\r\nclass TopBar extends React.Component<IProps>\r\n{\r\n    private bar: RefObject<HTMLDivElement> = React.createRef();\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('resize', () => this.props.onChangeHeight(this.bar.current!.offsetHeight));\r\n        this.props.onChangeHeight(this.bar.current!.offsetHeight);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={this.bar} className='top-navbar navbar-expand-sm top-navbar'>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TopBar;","import React from 'react';\r\nimport './Navbar.css'\r\n\r\ninterface VProps {\r\n    active: boolean,\r\n    paused: boolean,\r\n    onStartStop: ()  => void,\r\n    onPause: ()  => void,\r\n    onResume: ()  => void,\r\n}\r\n\r\ninterface SProps {\r\n    onClick: ()  => void\r\n}\r\n\r\nconst SYMBOL_COLOR = 'rgb(230,230,230)';\r\nconst OFFSET = 14;\r\nconst DIMENSION = 47 - 2 * OFFSET;\r\n\r\nexport class VisualizeButton extends React.Component<VProps>\r\n{\r\n    getStopSymbol() {\r\n        return (\r\n            <rect width={DIMENSION}\r\n                  height={DIMENSION}\r\n                  rx={4}\r\n                  fill={SYMBOL_COLOR}\r\n            />\r\n        );\r\n    }\r\n\r\n    getResumeSymbol() {\r\n        const midY = DIMENSION / 2;\r\n        return (\r\n            <polygon\r\n                  points={`${0},${0} ${0},${DIMENSION} ${DIMENSION},${midY}`}\r\n                  className={'track round'}\r\n                  fill={SYMBOL_COLOR}\r\n            />\r\n        );\r\n    }\r\n\r\n    getPauseSymbol() {\r\n        return (\r\n            <svg>\r\n                <rect width={DIMENSION/2.5}\r\n                      height={DIMENSION}\r\n                      rx={3}\r\n                      fill={SYMBOL_COLOR}\r\n                />\r\n                <rect width={DIMENSION/2.5}\r\n                      height={DIMENSION}\r\n                      x={0.2*DIMENSION + DIMENSION/2.5}\r\n                      rx={3}\r\n                      fill={SYMBOL_COLOR}\r\n                />\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        if(this.props.active) {\r\n            return (\r\n                <div className={'half-button-wrapper'}>\r\n                    <button onMouseDown={e => e.preventDefault()}\r\n                            className={'center half-button-left red-button half-viz-button'}\r\n                            onClick={this.props.paused ? this.props.onResume : this.props.onPause}\r\n                    >\r\n                        <svg xmlns='http://www.w3.org/2000/svg'\r\n                             className='svg-icon'\r\n                             width={DIMENSION}\r\n                             height={DIMENSION}\r\n                        >\r\n                            {this.props.paused ? this.getResumeSymbol() : this.getPauseSymbol()}\r\n                        </svg>\r\n                    </button>\r\n                    <button onMouseDown={e => e.preventDefault()}\r\n                            className={'center half-button-right red-button half-viz-button'}\r\n                            onClick={this.props.onStartStop}\r\n                    >\r\n                        <svg xmlns='http://www.w3.org/2000/svg'\r\n                             className='svg-icon'\r\n                             width={DIMENSION}\r\n                             height={DIMENSION}\r\n                        >\r\n                            {this.getStopSymbol()}\r\n                        </svg>\r\n                    </button>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <button onMouseDown={e => e.preventDefault()}\r\n                        className={'button green-button viz-button'}\r\n                        onClick={this.props.onStartStop}\r\n                >\r\n                    Visualize!\r\n                </button>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport class SettingsButton extends React.Component<SProps>\r\n{\r\n\r\n    render() {\r\n        return (\r\n            <button onMouseDown={e => e.preventDefault()}\r\n                    className='button settings-button'\r\n                    onClick={this.props.onClick}>\r\n                Settings\r\n            </button>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './Navbar.css'\r\n\r\ninterface AlgProps {\r\n    onClick: () => void,\r\n    onChange: (alg: string) => void\r\n}\r\n\r\ninterface AlgState {\r\n    up: boolean,\r\n    display: string,\r\n    algText: string,\r\n    fade: string\r\n}\r\n\r\ninterface ClrProps {\r\n    onClick: () => void,\r\n    onClickPath: () => void,\r\n    onClickTiles: () => void,\r\n    onClickReset: () => void;\r\n}\r\n\r\ninterface DState {\r\n    up: boolean,\r\n    display: string,\r\n    fade: string\r\n}\r\n\r\ninterface MazeProps {\r\n    onClick: () => void,\r\n    onClickMaze: () => void,\r\n    onClickMazeHorizontal: () => void,\r\n    onClickMazeVertical: () => void,\r\n    onClickRandomTerrain: () => void\r\n}\r\n\r\nexport class AlgorithmDropDown extends React.Component<AlgProps, AlgState>\r\n{\r\n    constructor(props: AlgProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            algText: 'A* Search',\r\n            fade: 'fade-in'\r\n        };\r\n    }\r\n\r\n    show = () => {\r\n        this.setState({\r\n            up: false,\r\n            display: 'block',\r\n        });\r\n    }\r\n\r\n    hide = () => {\r\n        this.setState({\r\n            display: 'none',\r\n            up: true,\r\n        });\r\n    }\r\n\r\n    toggle = (e: Event) => {\r\n        e.stopPropagation();\r\n        this.props.onClick();\r\n        if(this.isHidden()) {\r\n            this.show();\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    isHidden = () => {\r\n        return this.state.display === 'none';\r\n    }\r\n\r\n    contentStyle = () => {\r\n        return {\r\n            display: this.state.display\r\n        }\r\n    }\r\n\r\n    onChange = (key: string, algText: string) => {\r\n        this.props.onChange(key);\r\n        this.setState({\r\n            algText: algText\r\n        });\r\n    }\r\n\r\n    arrowClass = () => {\r\n        return this.state.up ? 'arrowUp' : 'arrowDown';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} className='alg-drop-down drop-down'\r\n                 onMouseDown={e => e.preventDefault()}\r\n                 onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                 onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='alg-drop-down-button drop-down-button'>\r\n                    <span className='alg-drop-down-text drop-down-text'>{this.state.algText}</span>\r\n                    <span className={'alg-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div style={this.contentStyle()}\r\n                     className={this.state.fade + ' alg-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={() => this.onChange('a*', 'A* Search')}>A* Search</Clickable>\r\n                    <Clickable click={() => this.onChange('dijkstra', 'Dijkstra')}>Dijkstra's Algorithm</Clickable>\r\n                    <Clickable click={() => this.onChange('best-first', 'Best First')}>Best First Search</Clickable>\r\n                    <Clickable click={() => this.onChange('bfs', 'Breadth First')}>Breadth First Search</Clickable>\r\n                    <Clickable click={() => this.onChange('dfs', 'Depth First')}>Depth First Search</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class ClearDropDown extends React.Component<ClrProps, DState>\r\n{\r\n    constructor(props: ClrProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            fade: 'fade-in'\r\n        };\r\n    }\r\n\r\n    show = () => {\r\n        this.setState({\r\n            up: false,\r\n            display: 'block',\r\n        });\r\n    }\r\n\r\n    hide = () => {\r\n        this.setState({\r\n            display: 'none',\r\n            up: true,\r\n        });\r\n    }\r\n\r\n    toggle = (e: Event) => {\r\n        e.stopPropagation();\r\n        this.props.onClick();\r\n        if(this.isHidden()) {\r\n            this.show();\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    isHidden = () => {\r\n        return this.state.display === 'none';\r\n    }\r\n\r\n    contentStyle = () => {\r\n        return {\r\n            display: this.state.display\r\n        }\r\n    }\r\n\r\n    arrowClass = () => {\r\n        return this.state.up ? 'arrowUpW' : 'arrowDownW';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} className='clr-drop-down drop-down'\r\n                 onMouseDown={e => e.preventDefault()}\r\n                 onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                 onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='clr-drop-down-button drop-down-button'>\r\n                    <span className='clr-drop-down-text drop-down-text'>Reset</span>\r\n                    <span className={'clr-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div style={this.contentStyle()}\r\n                     className={this.state.fade + ' clr-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={this.props.onClickPath}>Clear Path</Clickable>\r\n                    <Clickable click={this.props.onClickTiles}>Clear Tiles</Clickable>\r\n                    <Clickable click={this.props.onClickReset}>Reset Grid</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class MazeDropDown extends React.Component<MazeProps, DState>\r\n{\r\n    constructor(props: MazeProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            fade: 'fade-in'\r\n        };\r\n    }\r\n\r\n    show = () => {\r\n        this.setState({\r\n            up: false,\r\n            display: 'block',\r\n        });\r\n    }\r\n\r\n    hide = () => {\r\n        this.setState({\r\n            display: 'none',\r\n            up: true,\r\n        });\r\n    }\r\n\r\n    toggle = (e: Event) => {\r\n        e.stopPropagation();\r\n        this.props.onClick();\r\n        if(this.isHidden()) {\r\n            this.show();\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    isHidden = () => {\r\n        return this.state.display === 'none';\r\n    }\r\n\r\n    contentStyle = () => {\r\n        return {\r\n            display: this.state.display\r\n        }\r\n    }\r\n\r\n    arrowClass = () => {\r\n        return this.state.up ? 'arrowUpW' : 'arrowDownW';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} className='maze-drop-down drop-down'\r\n                 onMouseDown={e => e.preventDefault()}\r\n                 onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                 onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='maze-drop-down-button drop-down-button'>\r\n                    <span className='maze-drop-down-text drop-down-text'>Terrain</span>\r\n                    <span className={'clr-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div style={this.contentStyle()}\r\n                     className={this.state.fade + ' maze-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={this.props.onClickMaze}>Recursive Maze Division</Clickable>\r\n                    <Clickable click={this.props.onClickMazeHorizontal}>Horizontal Skewed Maze</Clickable>\r\n                    <Clickable click={this.props.onClickMazeVertical}>Vertical Skewed Maze</Clickable>\r\n                    <Clickable click={this.props.onClickRandomTerrain}>Random Terrain</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface ClickableProps {\r\n    click: () => void;\r\n}\r\n\r\nclass Clickable extends React.Component<ClickableProps>\r\n{\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} onKeyPress={this.props.click} onClick={this.props.click}>{this.props.children}</div>\r\n        )\r\n    }\r\n}","import React, {RefObject} from 'react';\r\nimport './DraggablePanel.css'\r\n\r\ninterface IProps {\r\n    title: string,\r\n    show: boolean,\r\n    onClickXButton: () => void,\r\n    width: number,\r\n    height: number\r\n}\r\n\r\ninterface IState {\r\n    top: number,\r\n    left: number\r\n}\r\n\r\nclass DraggablePanel extends React.Component<IProps, IState>\r\n{\r\n    //refs are used to access native DOM\r\n    private draggable: RefObject<HTMLDivElement> = React.createRef();\r\n    private draggableContainer: RefObject<HTMLDivElement> = React.createRef();\r\n    private draggableContent: RefObject<HTMLDivElement> = React.createRef();\r\n\r\n    //stores previous mouse location and drag\r\n    private dragging = false;\r\n    private prevX = 0;\r\n    private prevY = 0;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            top: -1,\r\n            left: -1\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        //mouse\r\n        document.addEventListener('mouseup', e => {\r\n            this.mouseUp(e);\r\n        });\r\n        document.addEventListener('mousemove', e => {\r\n            this.mouseMove(e);\r\n        });\r\n        window.addEventListener('mouseleave', e => {\r\n            this.mouseUp(e);\r\n        });\r\n        //touch\r\n        document.addEventListener('touchend', e => {\r\n            this.dragging = false;\r\n        });\r\n        document.addEventListener('touchmove', e => {\r\n            this.touchMove(e);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Start drag and init prev mouse location when mouse is clicked on draggable\r\n     * @param e\r\n     */\r\n    private mouseDown = (e: MouseEvent) => {\r\n        e.preventDefault();\r\n        this.prevY = e.clientY;\r\n        this.prevX = e.clientX;\r\n        this.dragging = true;\r\n    }\r\n\r\n    /**\r\n     * Start drag and init prev touch location when finger is clicked on draggable\r\n     * @param e\r\n     */\r\n    private touchStart = (e: TouchEvent) => {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        this.prevY = touch.clientY;\r\n        this.prevX = touch.clientX;\r\n        this.dragging = true;\r\n    }\r\n\r\n    /**\r\n     * Called when mouse is risen on document stop drag\r\n     * @param e\r\n     */\r\n    private mouseUp = (e: Event) => {\r\n        e.preventDefault();\r\n        this.dragging = false;\r\n    }\r\n\r\n    /**\r\n     * Called when the mouse is moved over the document to calculate the new position of\r\n     * the draggable canvas\r\n     * @param e\r\n     */\r\n    private mouseMove = (e: MouseEvent) => {\r\n        this.drag(e.clientX, e.clientY);\r\n    }\r\n\r\n    /**\r\n     * Called when the touch is moved over the document to calculate the new position of\r\n     * the draggable canvas\r\n     * @param e\r\n     */\r\n    private touchMove = (e: TouchEvent) => {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        this.drag(touch.clientX, touch.clientY);\r\n    }\r\n\r\n    /**\r\n     * Called when user drags over the document to move the panel\r\n     * @param clientX\r\n     * @param clientY\r\n     */\r\n    private drag = (clientX: number, clientY: number) => {\r\n        if(this.dragging) {\r\n            const container = this.draggableContainer.current!;\r\n            let top = (container.offsetTop - (this.prevY - clientY))\r\n            let left = (container.offsetLeft - (this.prevX - clientX));\r\n            const content = this.draggableContent.current!;\r\n            const draggable = this.draggable.current!;\r\n            //stop drag if mouse goes out of bounds\r\n            if(clientY < 0 || clientY > window.innerHeight\r\n                || clientX < 0 || clientX > window.innerWidth) {\r\n                this.dragging = false;\r\n            }\r\n            //check if position is out of bounds and prevent the panel from being dragged there\r\n            if(top < 0) {\r\n                top = 0;\r\n            } else if (top > window.innerHeight - draggable.offsetHeight) {\r\n                top = window.innerHeight - draggable.offsetHeight;\r\n            }\r\n            if(left < -content.offsetWidth/2) {\r\n                left = -content.offsetWidth/2;\r\n            } else if(left > window.innerWidth - content.offsetWidth/2) {\r\n                left = window.innerWidth - content.offsetWidth/2;\r\n            }\r\n            //set new position\r\n            this.setState({\r\n                top: top\r\n            });\r\n            this.setState({\r\n                left: left\r\n            });\r\n            //update previous pos\r\n            this.prevY = clientY;\r\n            this.prevX = clientX;\r\n        }\r\n    }\r\n\r\n    getPosition = () => {\r\n        const left = this.state.left;\r\n        const top = this.state.top;\r\n        if(left === -1 || top === -1) {\r\n            return {};\r\n        }\r\n        return {\r\n            left: left + 'px',\r\n            top: top + 'px',\r\n        };\r\n    }\r\n\r\n    visibleStyle = () => {\r\n        return this.props.show ? 'block' : 'none';\r\n    }\r\n\r\n    draggableStyle() {\r\n        return {\r\n            width: this.props.width,\r\n            display: this.visibleStyle()\r\n        }\r\n    }\r\n\r\n    contentStyle() {\r\n        return {\r\n            width: this.props.width,\r\n            minHeight: this.props.height,\r\n            display: this.visibleStyle()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={this.draggableContainer} className='draggable-container' style={this.getPosition()}>\r\n                {this.renderDraggable()}\r\n                <div ref={this.draggableContent} style={this.contentStyle()} className='draggable-content'>\r\n                    <div className='settings-general'>\r\n                        {this.props.children}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderDraggable = () => {\r\n        return (\r\n            <div style={this.draggableStyle()} className='draggable'\r\n                 ref={this.draggable}\r\n                 onMouseDown={e => this.mouseDown(e.nativeEvent)}\r\n                 onTouchStart={e => this.touchStart(e.nativeEvent)}\r\n            >\r\n                <div className='draggable-title'>{this.props.title}</div>\r\n                <div className='x-button' onClick={this.props.onClickXButton}>X</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DraggablePanel;","import React from 'react';\r\nimport './Grid.css';\r\nimport {Node} from '../../pathfinding/algorithms/Node';\r\nimport {Point} from '../../pathfinding/core/Components';\r\n\r\ninterface Arrow {\r\n    to: Point,\r\n    from: Point\r\n}\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    tilesX: number,\r\n    tilesY: number\r\n}\r\n\r\ninterface IState {\r\n    visualization: string[][],\r\n    arrows: Arrow[]\r\n}\r\n\r\nconst CLOSED_NODE = 'rgb(198, 237, 238)';\r\nconst OPEN_NODE = 'rgb(191, 248, 159)';\r\nconst EMPTY_NODE = 'white';\r\nconst ARROW_COLOR = 'rgb(153,153,153)';\r\n\r\nconst BASE_WIDTH = 27;\r\n\r\nclass GridBackground extends React.Component<IProps,IState>\r\n{\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    /**\r\n     * Constructs a GridBackground with immutable height and width\r\n     * @param props\r\n     */\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.width = this.props.tilesX;\r\n        this.height = this.props.tilesY;\r\n        this.state = {\r\n            visualization: this.createEmptyBg(),\r\n            arrows: []\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a new empty visualization canvas\r\n     */\r\n    createEmptyBg() {\r\n        const visualization = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            const row: string[] = [];\r\n            for(let x = 0; x < this.width; x++) {\r\n                row.push(EMPTY_NODE);\r\n            }\r\n            visualization.push(row);\r\n        }\r\n        return visualization;\r\n    }\r\n\r\n    /**\r\n     * Clear the visualization canvas and update UI\r\n     */\r\n    clear = () => {\r\n        this.setState({\r\n            visualization: this.createEmptyBg(),\r\n            arrows: []\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Perform a generation on a visualization array\r\n     * @param generation\r\n     * @param visualization\r\n     */\r\n    private doGeneration = (generation: Node, visualization: string[][]) => {\r\n        for(const node of generation.children) {\r\n            const point = node.tile.point;\r\n            visualization[point.y][point.x] = OPEN_NODE;\r\n        }\r\n        const point = generation.tile.point;\r\n        visualization[point.y][point.x] = CLOSED_NODE;\r\n        return visualization;\r\n    }\r\n\r\n    /**\r\n     * Visualize generation without updating UI\r\n     * @param generation\r\n     */\r\n    visualizeGeneration = (generation: Node) => {\r\n        this.setState(prevState => ({\r\n            visualization: this.doGeneration(\r\n                generation,\r\n                prevState.visualization.map(\r\n                    (arr) => arr.slice()\r\n                )\r\n            )\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Visualize generation array and update UI\r\n     * @param generations\r\n     */\r\n    visualizeGenerations = (generations: Node[]) => {\r\n        const visualization = this.createEmptyBg();\r\n        for(const generation of generations) {\r\n            this.doGeneration(generation, visualization);\r\n        }\r\n        this.setState({\r\n            visualization: visualization\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Perform an arrow generation on an arrow array\r\n     * @param generation\r\n     * @param arrows\r\n     */\r\n    private doArrowGeneration = (generation: Node, arrows: Arrow[]) => {\r\n        const point = generation.tile.point;\r\n        for(const node of generation.children) {\r\n            const childPoint = node.tile.point;\r\n            const newArrow = {\r\n                from: point,\r\n                to: childPoint,\r\n            };\r\n            //remove a duplicate arrow to indicate replacement\r\n            //in A* for example, we could have re-discovered a better path to a tile\r\n            for(let i = 0; i < arrows.length; i++) {\r\n                const a = arrows[i];\r\n                if(pointsEqual(a.to, newArrow.to)) {\r\n                    const index = arrows.indexOf(a);\r\n                    arrows.splice(index, 1);\r\n                    i--;\r\n                }\r\n            }\r\n            arrows.push(newArrow);\r\n        }\r\n        return arrows;\r\n    }\r\n\r\n    /**\r\n     * Add arrow generation without updating UI\r\n     * @param generation\r\n     */\r\n    addArrowGeneration = (generation: Node) => {\r\n        this.setState(prevState => ({\r\n            arrows: this.doArrowGeneration(\r\n                generation,\r\n                prevState.arrows.slice()\r\n            )\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Add arrow generations and update UI\r\n     * @param generations\r\n     */\r\n    addArrowGenerations = (generations: Node[]) => {\r\n        const arrows: Arrow[] = [];\r\n        for(const generation of generations) {\r\n            this.doArrowGeneration(generation, arrows)\r\n        }\r\n        this.setState({\r\n            arrows: arrows\r\n        });\r\n    }\r\n\r\n    render() {\r\n        // console.timeEnd('time');\r\n        // console.time('time');\r\n        return (\r\n            <div>\r\n                <div className='bg'>\r\n                    {this.renderTiles()}\r\n                </div>\r\n                <svg xmlns='http://www.w3.org/2000/svg' className='grid'>\r\n                    <defs>\r\n                        <marker id='arrowhead' markerWidth='3' markerHeight='3'\r\n                                refX='0' refY='1.5' orient='auto'\r\n                                fill={ARROW_COLOR}\r\n                        >\r\n                            <polygon points='0 0, 3 1.5, 0 3'/>\r\n                        </marker>\r\n                    </defs>\r\n                    {this.renderArrows()}\r\n                </svg>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderArrows = () => {\r\n        const width = this.props.tileWidth;\r\n        const offset = width/2;\r\n        const arrows: JSX.Element[] = [];\r\n        for(let i = 0; i < this.state.arrows.length; i++) {\r\n            //calculate arrow position and dimensions\r\n            const arrow = this.state.arrows[i];\r\n            const first = arrow.from;\r\n            const second = arrow.to;\r\n            const firstX = first.x * width;\r\n            const firstY = first.y * width;\r\n            const secondX = second.x * width;\r\n            const secondY = second.y * width;\r\n            const offsetX = (secondX - firstX)/4;\r\n            const offsetY = (secondY - firstY)/4;\r\n            arrows.push(<line key={'arrow ' + i}\r\n                              x1={firstX + offset + offsetX}\r\n                              y1={firstY + offset + offsetY}\r\n                              x2={secondX + offset - offsetX}\r\n                              y2={secondY + offset - offsetY}\r\n                              stroke={ARROW_COLOR}\r\n                              strokeWidth={2 * this.props.tileWidth/BASE_WIDTH}\r\n                              className='line-arrow'\r\n                              markerEnd='url(#arrowhead)' />);\r\n        }\r\n        return arrows;\r\n    }\r\n\r\n    private renderTiles = () => {\r\n        const tiles: JSX.Element[][] = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            const row: JSX.Element[] = [];\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                };\r\n                row.push(\r\n                    this.renderTile(point, this.state.visualization[point.y][point.x])\r\n                );\r\n            }\r\n            tiles.push(row);\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    private renderTile = (point: Point, color: string) => {\r\n        const width = this.props.tileWidth;\r\n        const top = point.y * this.props.tileWidth;\r\n        const left = point.x * this.props.tileWidth;\r\n        const style = {\r\n            backgroundColor: color,\r\n            width: width + 'px',\r\n            height: width + 'px',\r\n            top: top,\r\n            left: left\r\n        };\r\n        return (\r\n            <div key={point.x + ',' + point.y} style={style} className='tile'/>\r\n        );\r\n    }\r\n}\r\n\r\nfunction pointsEqual(point1: Point, point2: Point) {\r\n    return point1.x === point2.x && point1.y === point2.y;\r\n}\r\n\r\nexport default GridBackground;","/**\r\n * Represents a point in 2d space\r\n * Immutable\r\n */\r\nexport interface Point\r\n{\r\n    readonly x: number;\r\n    readonly y: number;\r\n}\r\n\r\n/**\r\n * Represents the data inside a tile\r\n * Solid tiles cannot be passed while non solid ones can\r\n * pathCost stores how expensive it is to travel to the tile if it isn't solid\r\n * Immutable\r\n */\r\nexport interface TileData\r\n{\r\n    readonly pathCost: number;\r\n    readonly isSolid: boolean;\r\n}\r\n\r\n/**\r\n * Represents a tile on the Grid\r\n */\r\nexport interface Tile\r\n{\r\n    data: TileData;\r\n    readonly point: Point;\r\n}\r\n\r\n/**\r\n * Simple function to create a solid tile with path cost of 1\r\n * @param isSolid\r\n */\r\nexport function createTile(isSolid: boolean) {\r\n    return {\r\n        pathCost: 1,\r\n        isSolid: isSolid\r\n    }\r\n}\r\n\r\n","import {createTile, Point, Tile, TileData} from './Components';\r\n\r\nexport interface Grid\r\n{\r\n    getWidth(): number;\r\n    getHeight(): number;\r\n    inBounds(point: Point): boolean;\r\n    get(point: Point): Tile;\r\n    isSolid(point: Point): boolean;\r\n    mutate(point: Point, data: TileData): void;\r\n    mutateTile(tile: Tile): void;\r\n    mutateDefault(point: Point, solid: boolean): void;\r\n    output(console: Console): void;\r\n    getJson(): string;\r\n    walkable(point: Point): boolean;\r\n    clone(): Grid;\r\n}\r\n\r\n/**\r\n * A square grid system that stores nodes in a matrix\r\n * Uses an x,y system where x corresponds to column of the matrix,\r\n * and y corresponds to the row of the matrix\r\n * TileData.ts should be treated like graph nodes\r\n */\r\nclass RectGrid implements Grid\r\n{\r\n    private readonly tiles: Tile[][];\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    /**\r\n     * Constructs a grid either with empty or predefined tiles\r\n     * @param width of the grid\r\n     * @param height of grid\r\n     * will perform a defensive copy to the grid\r\n     */\r\n    constructor(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.tiles = createEmptyGrid(width, height);\r\n    }\r\n\r\n    getWidth() {\r\n        return this.width;\r\n    }\r\n\r\n    getHeight() {\r\n        return this.height;\r\n    }\r\n\r\n    /**\r\n     * Checks if a given point is in bounds\r\n     * Other functions assume arguments are in bounds, this should be used\r\n     * if there is reasonable doubt about whether a point is in bounds\r\n     * @param point, to check\r\n     */\r\n    inBounds(point: Point) {\r\n        return point.x >= 0 && point.x < this.width && point.y >= 0 && point.y < this.height;\r\n    }\r\n\r\n    /**\r\n     * Retrieves a defensive tile for a position\r\n     * Defensive copy prevents this object from being mutated without calling\r\n     * a mutate function\r\n     * @param point, point to get\r\n     */\r\n    get(point: Point): Tile {\r\n        return {\r\n            point: this.tiles[point.y][point.x].point,\r\n            data: this.tiles[point.y][point.x].data\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Mutates a position's tile to solid or non solid\r\n     * @param point, point to mutate\r\n     * @param data to mutate to\r\n     */\r\n    mutate(point: Point, data: TileData) {\r\n        this.tiles[point.y][point.x].data = data;\r\n    }\r\n\r\n    /**\r\n     * Mutates a a tile by point\r\n     * @param tile to mutate\r\n     */\r\n    mutateTile(tile: Tile) {\r\n        this.tiles[tile.point.y][tile.point.x].data = tile.data;\r\n    }\r\n\r\n    /**\r\n     * Mutate tile at point\r\n     * @param point to mutate at\r\n     * @param solid to determine what default tile to create\r\n     */\r\n    mutateDefault = (point: Point, solid: boolean) => {\r\n        this.mutate(\r\n            point, createTile(solid)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Outputs the grid to a console\r\n     * @param console\r\n     */\r\n    output(console: Console) {\r\n        for(let y = 0; y < this.height; y++) {\r\n            let str = '';\r\n            for(let x = 0; x < this.width; x++) {\r\n                str += this.tiles[y][x].data.isSolid + ', ';\r\n            }\r\n            console.log(str);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns json of tiles\r\n     */\r\n    getJson() {\r\n        return JSON.stringify(this.tiles);\r\n    }\r\n\r\n    /**\r\n     * Determines if a tile can be walked on\r\n     * @param point\r\n     */\r\n    walkable(point: Point) {\r\n        return !this.tiles[point.y][point.x].data.isSolid;\r\n    }\r\n\r\n    isSolid(point: Point) {\r\n        return this.tiles[point.y][point.x].data.isSolid;\r\n    }\r\n\r\n    clone(): Grid {\r\n        const grid = new RectGrid(this.width, this.height);\r\n        for(let y = 0; y < grid.height; y++) {\r\n            for(let x = 0; x < grid.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                }\r\n                grid.mutateTile(this.get(point));\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a 2d matrix of empty nodes\r\n */\r\nfunction createEmptyGrid(width: number, height: number) {\r\n    const nodes: Tile[][] = [];\r\n    for(let y = 0; y < height; y++) {\r\n        const row: Tile[] = [];\r\n        for(let x = 0; x < width; x++) {\r\n            row.push({\r\n                point: {\r\n                    x: x, y: y\r\n                },\r\n                data: createTile(false)\r\n            });\r\n        }\r\n        nodes.push(row);\r\n    }\r\n    return nodes;\r\n}\r\n\r\nexport default RectGrid;","import React from 'react';\r\nimport './Grid.css';\r\nimport {Point} from '../../pathfinding/core/Components';\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    point: Point,\r\n    color: string,\r\n    doAnimation: boolean\r\n}\r\n\r\ninterface IState {\r\n    tileSize: number\r\n}\r\n\r\nclass TileFg extends React.Component<IProps, IState>\r\n{\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const size = this.props.doAnimation ?  0 : this.props.tileWidth;\r\n        this.state = {\r\n            tileSize: size,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.props.doAnimation) {\r\n            this.applyExpandAnimation();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Animation to expand element from half size to full size over a few milliseconds\r\n     * Can be slow to execute so animations should be enabled with caution\r\n     */\r\n    applyExpandAnimation = () => {\r\n        const expansionDuration = 100;\r\n        const expansions = 10;\r\n        const expansionStep = expansionDuration/expansions;\r\n        const overStep = 2;\r\n        const original = this.state.tileSize;\r\n        for(let i = 1; i <= expansions + overStep; i++) {\r\n            const expand = () => this.setState({\r\n                tileSize: original + i * (this.props.tileWidth/(expansions))\r\n            });\r\n            setTimeout(expand, i * expansionStep);\r\n        }\r\n        let time = expansions + overStep + 1;\r\n        for(let i = expansions + overStep - 0.5; i >= expansions; i -= 0.5) {\r\n            console.log(time * expansionStep);\r\n            const shrink = () => this.setState({\r\n                tileSize: original + i * (this.props.tileWidth/(expansions))\r\n            });\r\n            setTimeout(shrink, time * expansionStep);\r\n            time += 6;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const width = this.state.tileSize;\r\n        const top = this.props.point.y * this.props.tileWidth + (this.props.tileWidth - width)/2;\r\n        const left = this.props.point.x * this.props.tileWidth + (this.props.tileWidth - width)/2;\r\n        const style = {\r\n            fill: this.props.color,\r\n            stroke: 'none',\r\n            display: 'block'\r\n        };\r\n        return (\r\n            <rect x={left} y={top}\r\n                  shapeRendering='crispEdges'\r\n                  width={width} height={width}\r\n                  style={style} className={'tile svg-tile'}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default TileFg;","import React, {RefObject} from 'react';\r\nimport './Grid.css';\r\nimport {Point, Tile} from '../../pathfinding/core/Components';\r\nimport RectGrid, {Grid} from '../../pathfinding/core/Grid';\r\nimport TileFg from './TileFg';\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    tilesX: number,\r\n    tilesY: number,\r\n    onTilesDragged: () => void,\r\n    topMargin: number,\r\n}\r\n\r\ninterface IState {\r\n    grid: Grid,\r\n    initial: Point,\r\n    goal: Point,\r\n    path: Tile[]\r\n}\r\n\r\nconst SOLID_COLOR = 'rgb(45, 48, 54)';\r\nconst INITIAL_COLOR = 'rgb(131, 217, 52)';\r\nconst GOAL_COLOR = 'rgb(203, 75, 14)';\r\nconst ARROW_PATH_COLOR = 'rgb(73, 79, 250)';\r\n\r\nconst BASE_WIDTH = 27;\r\n\r\nclass GridForeground extends React.Component<IProps,IState>\r\n{\r\n    private svg: RefObject<SVGSVGElement> = React.createRef();\r\n\r\n    private mouseDown0: boolean = false;\r\n    private mouseDown2: boolean = false;\r\n    private draggingInitial: boolean = false;\r\n    private draggingGoal: boolean = false;\r\n    private disable: boolean = false;\r\n\r\n    private doTileAnimation: boolean = true;\r\n\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    /**\r\n     * Constructs a GridForeground with immutable height and width\r\n     * @param props\r\n     */\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.width = this.props.tilesX;\r\n        this.height = this.props.tilesY;\r\n        const end = this.calcEndPointInView();\r\n        this.state = {\r\n            grid: new RectGrid(this.width, this.height),\r\n            path: [],\r\n            initial: {\r\n                x: ((end.x)/3) >> 0,\r\n                y: ((end.y)/3) >> 0\r\n            },\r\n            goal: {\r\n                x: ((2*(end.x)/3) >> 0) - 1,\r\n                y: ((2*(end.y)/3) >> 0) - 1\r\n            }\r\n        }\r\n    }\r\n\r\n    calcEndPointInView() {\r\n        const xEnd = Math.round(window.innerWidth / this.props.tileWidth);\r\n        const yEnd = Math.round((window.innerHeight - this.props.topMargin - 30) / this.props.tileWidth);\r\n        return {\r\n            x: xEnd, y: yEnd\r\n        }\r\n    }\r\n\r\n    toggleDisable() {\r\n        this.disable = !this.disable;\r\n    }\r\n\r\n    getBoundingRect() {\r\n        return this.svg.current!.getBoundingClientRect();\r\n    }\r\n\r\n    private mouseDown = (e: MouseEvent) => {\r\n        e.preventDefault();\r\n        const bounds = this.getBoundingRect();\r\n        this.onPress(e.clientX - bounds.left, e.clientY - bounds.top, e.button);\r\n    }\r\n\r\n    private mouseUp = (e: MouseEvent) => {\r\n        e.preventDefault();\r\n        if(e.button === 0) {\r\n            this.draggingGoal = false;\r\n            this.draggingInitial = false;\r\n            this.mouseDown0 = false;\r\n        } else if(e.button === 2) {\r\n            this.mouseDown2 = false;\r\n        }\r\n    }\r\n\r\n    private mouseMove = (e: MouseEvent) => {\r\n        const bounds = this.getBoundingRect();\r\n        this.onDrag(e.clientX - bounds.left, e.clientY - bounds.top);\r\n    }\r\n\r\n    private touchStart = (e: TouchEvent) => {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        const bounds = this.getBoundingRect();\r\n        this.onTouch(touch.clientX - bounds.left, touch.clientY - bounds.top);\r\n    }\r\n\r\n    private touchMove = (e: TouchEvent) => {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        const bounds = this.getBoundingRect();\r\n        this.onDrag(touch.clientX - bounds.left, touch.clientY - bounds.top);\r\n    }\r\n\r\n    private onEndingEvent = (e: Event) => {\r\n        e.preventDefault();\r\n        this.draggingGoal = false;\r\n        this.draggingInitial = false;\r\n        this.mouseDown0 = false;\r\n        this.mouseDown2 = false;\r\n    }\r\n\r\n    /**\r\n     * Responds to the event thrown at screen coordinates on press\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     * @param button\r\n     */\r\n    private onPress = (xCoordinate: number, yCoordinate: number, button: number) => {\r\n        const point = this.calculatePoint(xCoordinate,yCoordinate);\r\n        if(button === 0) {\r\n            this.mouseDown0 = true;\r\n            if(pointsEqual(point, this.state.initial)) {\r\n                this.draggingInitial = true;\r\n            } else if(pointsEqual(point, this.state.goal)) {\r\n                this.draggingGoal = true;\r\n            } else if(!this.disable) {\r\n                this.drawTile(point);\r\n            }\r\n        } else if(button === 2) {\r\n            this.mouseDown2 = true;\r\n            if(!pointsEqual(point,this.state.initial) && !pointsEqual(point, this.state.goal) && !this.disable) {\r\n                this.eraseTile(point);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Responds to the event thrown at screen coordinates on touch\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     */\r\n    private onTouch = (xCoordinate: number, yCoordinate: number) => {\r\n        const point = this.calculatePoint(xCoordinate,yCoordinate);\r\n        if(pointsEqual(point, this.state.initial)) {\r\n            this.mouseDown0 = true;\r\n            this.draggingInitial = true;\r\n        } else if(pointsEqual(point, this.state.goal)) {\r\n            this.mouseDown0 = true;\r\n            this.draggingGoal = true;\r\n        } else if(!this.state.grid.isSolid(point)) {\r\n            this.mouseDown0 = true;\r\n            if(!this.disable) {\r\n                this.drawTile(point);\r\n            }\r\n        } else {\r\n            this.mouseDown2 = true;\r\n            if(!pointsEqual(point, this.state.initial) && !pointsEqual(point, this.state.goal) && !this.disable) {\r\n                this.eraseTile(point);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Responds to the event thrown at screen coordinates on drag/move\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     */\r\n    private onDrag = (xCoordinate: number, yCoordinate: number) => {\r\n        const point = this.calculatePoint(xCoordinate,yCoordinate);\r\n        if(this.mouseDown0) {\r\n            if(this.draggingInitial) {\r\n                this.moveInitial(point);\r\n            } else if(this.draggingGoal) {\r\n                this.moveGoal(point);\r\n            } else if(!pointsEqual(point,this.state.initial) && !pointsEqual(point, this.state.goal) && !this.disable) {\r\n                this.drawTile(point);\r\n            }\r\n        } else if(this.mouseDown2) {\r\n            if(!pointsEqual(point, this.state.initial) && !pointsEqual(point, this.state.goal) && !this.disable) {\r\n                this.eraseTile(point);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw an entire new grid on the foreground with disabled animations\r\n     * @param grid\r\n     */\r\n    drawGrid = (grid: Grid) => {\r\n        this.doTileAnimation = false;\r\n        this.setState({\r\n            grid: grid\r\n        }, () => this.doTileAnimation = true)\r\n    }\r\n\r\n    /**\r\n     * Draw tile at point\r\n     * @param point\r\n     */\r\n    drawTile = (point: Point) => {\r\n        const grid = this.state.grid.clone();\r\n        if(grid.inBounds(point)) {\r\n            grid.mutateDefault(point, true);\r\n        }\r\n        this.setState({\r\n            grid: grid\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if a node is visualized, then changes the tile to empty if it isn't\r\n     * @param point\r\n     */\r\n    eraseTile = (point: Point) => {\r\n        const grid = this.state.grid.clone();\r\n        if(grid.inBounds(point)) {\r\n            grid.mutateDefault(point, false);\r\n        }\r\n        this.setState({\r\n            grid: grid\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clear grid in state\r\n     */\r\n    clearTiles = () => {\r\n        const grid = this.state.grid.clone();\r\n        for(let y = 0; y < this.height; y++) {\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                }\r\n                grid.mutateDefault(point, false);\r\n            }\r\n        }\r\n        this.setState({\r\n            grid: grid\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Moves initial to a new point\r\n     * @param point\r\n     */\r\n    moveInitial = (point: Point) => {\r\n        if(this.state.grid.inBounds(point)\r\n            && !this.state.grid.isSolid(point)\r\n            && !pointsEqual(this.state.goal, point)\r\n            && !pointsEqual(this.state.initial, point)\r\n            && !this.disable)\r\n        {\r\n            this.setState({\r\n                initial: point\r\n            }, () => this.props.onTilesDragged());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves goal to a new point\r\n     * @param point\r\n     */\r\n    moveGoal = (point: Point) => {\r\n        if(this.state.grid.inBounds(point)\r\n            && !this.state.grid.isSolid(point)\r\n            && !pointsEqual(this.state.initial, point)\r\n            && !pointsEqual(this.state.goal, point)\r\n            && !this.disable)\r\n        {\r\n            this.setState({\r\n                goal: point\r\n            }, () => this.props.onTilesDragged());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw a path onto the grid\r\n     * @param path\r\n     */\r\n    drawPath = (path: Tile[]) => {\r\n        this.setState({\r\n            path: path.slice()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Erase path from the grid\r\n     */\r\n    erasePath = () => {\r\n        this.setState({\r\n            path: []\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Converts real screen x,y coordinates into\r\n     * a 2d point position on the grid\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     */\r\n    calculatePoint = (xCoordinate: number, yCoordinate: number) => {\r\n        return {\r\n            x: Math.floor(xCoordinate/this.props.tileWidth),\r\n            y: Math.floor(yCoordinate/this.props.tileWidth)\r\n        }\r\n    }\r\n\r\n    resetPoints = () => {\r\n        const end = this.calcEndPointInView();\r\n        this.setState({\r\n            initial: {\r\n                x: ((end.x)/3) >> 0,\r\n                y: ((end.y)/3) >> 0\r\n            },\r\n            goal: {\r\n                x: ((2*(end.x)/3) >> 0) - 1,\r\n                y: ((2*(end.y)/3) >> 0) - 1\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <svg ref={this.svg} xmlns='http://www.w3.org/2000/svg' className='grid'\r\n                 onContextMenu={e => e.preventDefault()}\r\n                 onMouseDown={e => this.mouseDown(e.nativeEvent)}\r\n                 onMouseUp={e => this.mouseUp(e.nativeEvent)}\r\n                 onMouseMove={e => this.mouseMove(e.nativeEvent)}\r\n                 onMouseLeave={e => this.onEndingEvent(e.nativeEvent)}\r\n                 onTouchStart={e => this.touchStart(e.nativeEvent)}\r\n                 onTouchMoveCapture={e => this.touchMove(e.nativeEvent)}\r\n                 onTouchEnd={e => this.onEndingEvent(e.nativeEvent)}\r\n                 onTouchCancel={e => this.onEndingEvent(e.nativeEvent)}\r\n            >\r\n                <defs>\r\n                    <marker id='arrowhead-path' markerWidth='3' markerHeight='3'\r\n                            refX='0' refY='1.5' orient='auto'\r\n                            fill={ARROW_PATH_COLOR}\r\n                    >\r\n                        <polygon points='0 0, 3 1.5, 0 3'/>\r\n                    </marker>\r\n                </defs>\r\n                {this.renderEndTile(this.state.initial, INITIAL_COLOR,'initial')}\r\n                {this.renderEndTile(this.state.goal, GOAL_COLOR,'goal')}\r\n                {this.renderPath()}\r\n                {this.renderTiles()}\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    private renderPath = () => {\r\n        const lines: JSX.Element[] = [];\r\n        for(let i = 0; i < this.state.path.length-1; i++) {\r\n            const first = this.state.path[i].point;\r\n            const second = this.state.path[i+1].point;\r\n            lines.push(this.renderPathArrow(i, first, second));\r\n        }\r\n        return lines;\r\n    }\r\n\r\n    private renderPathArrow = (index: number, first: Point, second: Point) => {\r\n        const width = this.props.tileWidth;\r\n        const offset = width/2;\r\n        const firstX = first.x * width;\r\n        const firstY = first.y * width;\r\n        const secondX = second.x * width;\r\n        const secondY = second.y * width;\r\n        const offsetX = (secondX - firstX)/4;\r\n        const offsetY = (secondY - firstY)/4;\r\n        return (\r\n            <line key={'path ' + index}\r\n                  x1={firstX + offset + offsetX}\r\n                  y1={firstY + offset + offsetY}\r\n                  x2={secondX + offset - offsetX}\r\n                  y2={secondY + offset - offsetY}\r\n                  stroke={ARROW_PATH_COLOR}\r\n                  strokeWidth={2 * this.props.tileWidth/BASE_WIDTH}\r\n                  className='line-path-arrow'\r\n                  markerEnd='url(#arrowhead-path)' />\r\n        );\r\n    }\r\n\r\n    private renderTiles = () => {\r\n        const tiles: JSX.Element[] = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                }\r\n                if(this.state.grid.isSolid(point)) {\r\n                    tiles.push(\r\n                        <TileFg key={point.x + ',' + point.y} point={point}\r\n                                doAnimation={this.doTileAnimation}\r\n                                tileWidth={this.props.tileWidth}\r\n                                color={SOLID_COLOR}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    private renderEndTile = (point: Point, color: string, key: string) => {\r\n        return <TileFg key={key} point={point} doAnimation={false}\r\n                       tileWidth={this.props.tileWidth}\r\n                       color={color}/>\r\n    }\r\n}\r\n\r\nfunction pointsEqual(point1: Point, point2: Point) {\r\n    return point1.x === point2.x && point1.y === point2.y;\r\n}\r\n\r\nexport default GridForeground;","import React, {RefObject} from 'react';\r\nimport './Grid.css';\r\n\r\ninterface IProps {\r\n    algorithm: string,\r\n    length: number,\r\n    time: number,\r\n    nodes: number,\r\n}\r\n\r\nclass StatsPanel extends React.Component<IProps>\r\n{\r\n    private readonly textLog: RefObject<HTMLTextAreaElement> = React.createRef();\r\n\r\n    componentDidUpdate() {\r\n        this.textLog.current!.scrollTop = this.textLog.current!.scrollHeight;\r\n    }\r\n\r\n    getHeight() {\r\n        return this.textLog.current!.clientHeight;\r\n    }\r\n\r\n    render() {\r\n        const time = precise(this.props.time);\r\n        const text = this.props.algorithm === '' ? '' :\r\n            this.props.algorithm + ' visited ' + this.props.nodes + ' nodes in ' +\r\n            time + ' ms. Path length = ' + this.props.length + '. ';\r\n        return(\r\n            <div>\r\n                <textarea tabIndex={-1} ref={this.textLog} readOnly={true}\r\n                          className='stats-text-area no-select'\r\n                          value={text} unselectable={'on'} onDrop={() => false}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction precise(x: number) {\r\n    return x.toFixed(2);\r\n}\r\n\r\nexport default StatsPanel;","import {Grid} from './Grid';\r\nimport {Point, Tile} from './Components';\r\n\r\nexport const UNIT = 1; //number of tiles we can move at once\r\n\r\n/**\r\n * Describes an abstract navigator for a grid\r\n * Provides graph-like traversal for the grid\r\n * Determines where we can travel to from a certain point,\r\n * whether we have reached a destination, and the cost to\r\n * travel to a certain point\r\n */\r\nabstract class Navigator\r\n{\r\n    protected readonly grid: Grid;\r\n\r\n    constructor(grid: Grid) {\r\n        this.grid = grid;\r\n    }\r\n\r\n    getGrid() {\r\n        return this.grid;\r\n    }\r\n\r\n    /**\r\n     * Goal check function: Checks if two points are equal\r\n     * @param a\r\n     * @param b\r\n     */\r\n    equals(a: Point, b: Point) {\r\n        return a.x === b.x && a.y === b.y;\r\n    }\r\n\r\n    /**\r\n     * Step cost function from a to b\r\n     * @param a\r\n     * @param b to point to travel to\r\n     */\r\n    abstract cost(a: Point, b: Point): number;\r\n\r\n    /**\r\n     * Neighbors function: Gets the available neighbors for a point in a grid we can make\r\n     * in a given move\r\n     * @param point\r\n     */\r\n    abstract neighbors(point: Point): Tile[];\r\n\r\n    abstract getType(): string;\r\n}\r\n\r\nexport default Navigator;","import {Point, Tile} from './Components';\r\nimport Navigator, {UNIT} from './Navigator';\r\n\r\n/**\r\n * Concretion of a Plus Navigator for a grid\r\n * Allows movement akin to a 'plus' symbol\r\n */\r\nclass PlusNavigator extends Navigator\r\n{\r\n    /**\r\n     * Adds the neighbors of a point to the left, right, top and down\r\n     * @param point\r\n     */\r\n    neighbors(point: Point): Tile[] {\r\n        const tiles: Tile[] = [];\r\n        if(point.x + UNIT < this.grid.getWidth()) {\r\n            const tile = this.grid.get({\r\n                x: point.x + UNIT,\r\n                y: point.y\r\n            })\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.y + UNIT < this.grid.getHeight()) {\r\n            const tile = this.grid.get({\r\n                x: point.x,\r\n                y: point.y + UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.x - UNIT >= 0) {\r\n            const tile = this.grid.get({\r\n                x: point.x - UNIT,\r\n                y: point.y\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.y - UNIT >= 0) {\r\n            const tile = this.grid.get({\r\n                x: point.x,\r\n                y: point.y - UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    /**\r\n     * Step cost function that works by getting the pathCost stored in the grid\r\n     * from one point a to b\r\n     * @param a\r\n     * @param b to point to travel to\r\n     */\r\n    cost(a: Point, b: Point) {\r\n        return this.grid.get(b).data.pathCost;\r\n    }\r\n\r\n    getType() {\r\n        return 'plus';\r\n    }\r\n}\r\n\r\nexport default PlusNavigator;","import {Point} from '../core/Components';\r\n\r\nexport type HeuristicFunc = (a: Point, b: Point) => number;\r\n\r\nexport function manhattan(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x) ;\r\n    const dy = Math.abs(a.y - b.y);\r\n    return dx + dy;\r\n}\r\n\r\nexport function euclidean(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n}\r\n\r\nexport function octile(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.SQRT2 * Math.min(dx, dy) + Math.abs(dx - dy);\r\n}\r\n\r\nexport function chebyshev(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.max(dx, dy);\r\n}\r\n\r\nexport function nullHeuristic(a: Point, b: Point): number {\r\n    return 0;\r\n}","import {Point, Tile} from './Components';\r\nimport Navigator, {UNIT} from './Navigator';\r\nimport {euclidean} from '../algorithms/Heuristics';\r\n\r\n/**\r\n * Concretion of a Plus Navigator for a grid\r\n * Allows movement akin to a 'asterisk' symbol\r\n */\r\nclass AsteriskNavigator extends Navigator\r\n{\r\n    /**\r\n     * Adds the neighbors of a point to the left, right, top and down\r\n     * @param point\r\n     */\r\n    neighbors(point: Point): Tile[] {\r\n        //keep track of double squares that block diagonals\r\n        let walkBottomRight = false;\r\n        let walkTopRight = false;\r\n        let walkBottomLeft = false;\r\n        let walkTopLeft = false;\r\n        //plus\r\n        const tiles: Tile[] = [];\r\n        if(point.x + UNIT < this.grid.getWidth()) {\r\n            const tile = this.grid.get({\r\n                x: point.x + UNIT,\r\n                y: point.y\r\n            })\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n                walkBottomRight = true;\r\n                walkTopRight = true;\r\n            }\r\n        }\r\n        if(point.y + UNIT < this.grid.getHeight()) {\r\n            const tile = this.grid.get({\r\n                x: point.x,\r\n                y: point.y + UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n                walkBottomRight = true;\r\n                walkBottomLeft = true;\r\n            }\r\n        }\r\n        if(point.x - UNIT >= 0) {\r\n            const tile = this.grid.get({\r\n                x: point.x - UNIT,\r\n                y: point.y\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n                walkBottomLeft = true;\r\n                walkTopLeft = true;\r\n            }\r\n        }\r\n        if(point.y - UNIT >= 0) {\r\n            const tile = this.grid.get({\r\n                x: point.x,\r\n                y: point.y - UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n                walkTopRight = true;\r\n                walkTopLeft = true;\r\n            }\r\n        }\r\n        //diagonals\r\n        if(point.x + UNIT < this.grid.getWidth() &&\r\n            point.y + UNIT < this.grid.getHeight() &&\r\n            walkBottomRight) {\r\n            const tile = this.grid.get({\r\n                x: point.x + UNIT,\r\n                y: point.y + UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.x - UNIT >= 0 &&\r\n            point.y + UNIT < this.grid.getHeight() &&\r\n            walkBottomLeft) {\r\n            const tile = this.grid.get({\r\n                x: point.x - UNIT,\r\n                y: point.y + UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.x + UNIT < this.grid.getWidth() &&\r\n            point.y - UNIT >= 0 &&\r\n            walkTopRight) {\r\n            const tile =  this.grid.get({\r\n                x: point.x + UNIT,\r\n                y: point.y - UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.x - UNIT >= 0 &&\r\n            point.y - UNIT >= 0 &&\r\n            walkTopLeft) {\r\n            const tile =  this.grid.get({\r\n                x: point.x - UNIT,\r\n                y: point.y - UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    /**\r\n     * Step cost function that works by getting the pathCost stored in the grid\r\n     * from one point a to b\r\n     * Returns the exact distance multiplied by the cost to travel there\r\n     * @param a\r\n     * @param b to point to travel to\r\n     */\r\n    cost(a: Point, b: Point) {\r\n        return euclidean(a,b) * this.grid.get(b).data.pathCost;\r\n    }\r\n\r\n    getType() {\r\n        return 'asterisk';\r\n    }\r\n}\r\n\r\nexport default AsteriskNavigator;","import {Point} from '../core/Components';\r\n\r\n/**\r\n * A simple data structure that keeps track of whether keys have been added to it\r\n */\r\nexport class HashSet\r\n{\r\n    private map: {[key: string]: boolean} = {};\r\n\r\n    add(key: string) {\r\n        this.map[key] = true;\r\n    }\r\n\r\n    remove(key: string) {\r\n        this.map[key] = false;\r\n    }\r\n\r\n    has(key: string) {\r\n        return this.map[key];\r\n    }\r\n\r\n    clear() {\r\n        this.map = {};\r\n    }\r\n}\r\n\r\n/**\r\n * A simple data structure that stores a type at a key\r\n */\r\nexport class HashTable<Value>\r\n{\r\n    private map: {[key: string]: Value | undefined} = {};\r\n\r\n    add(key: string, data: Value) {\r\n        this.map[key] = data;\r\n    }\r\n\r\n    remove(key: string) {\r\n        this.map[key] = undefined;\r\n    }\r\n\r\n    get(key: string) {\r\n        return this.map[key];\r\n    }\r\n\r\n    has(key: string) {\r\n        return this.map[key] !== undefined;\r\n    }\r\n\r\n    clear() {\r\n        this.map = {};\r\n    }\r\n}\r\n\r\n/**\r\n * Serialize point into a unique string\r\n * @param point\r\n */\r\nexport function stringify(point: Point) {\r\n    return 'x' + point.x + 'y' + point.y;\r\n}","/**\r\n * A compare function to determine if a is 'better' (deserves a higher position) than b\r\n */\r\nexport type Comparator<E> = (a: E, b: E) => boolean\r\n\r\n/**\r\n * Minimalist Implementation of the heap data structure as an array\r\n */\r\nclass Heap<E>\r\n{\r\n    private elements: E[] = [];\r\n    readonly compare: Comparator<E>;\r\n\r\n    constructor(compare: Comparator<E>) {\r\n        this.compare = compare;\r\n    }\r\n\r\n    /**\r\n     * Returns the size of the heap\r\n     */\r\n    getSize() {\r\n        return this.elements.length;\r\n    }\r\n\r\n    /**\r\n     * Checks if heap is empty\r\n     */\r\n    isEmpty() {\r\n        return this.elements.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Add a new element to the heap\r\n     * @param e\r\n     */\r\n    push(e: E) {\r\n        this.elements.push(e);\r\n        this.siftUp(this.elements.length-1); //last element\r\n    }\r\n\r\n    /**\r\n     * Returns the top of the heap without removing it\r\n     * Fails if heap is empty\r\n     */\r\n    peek() {\r\n        return this.elements[0];\r\n    }\r\n\r\n    /**\r\n     * Returns the top of the heap and removes it\r\n     * Fails if heap is empty\r\n     */\r\n    pop() {\r\n        const val = this.peek();\r\n        this.move(this.elements.length - 1, 0);\r\n        this.elements.pop();\r\n        this.siftDown(0);\r\n        return val;\r\n    }\r\n\r\n    /**\r\n     * Clear the heap\r\n     */\r\n    clear() {\r\n        this.elements = [];\r\n    }\r\n\r\n    /**\r\n     * Sifts a new element that is out of order up to the right position\r\n     * @param pos of new element\r\n     */\r\n    private siftUp(pos: number) {\r\n        let parent = ((pos - 1) / 2) >> 0; //integer division\r\n        while(parent >= 0) {\r\n            //if the current position is better than parent\r\n            if(this.compare(this.elements[pos], this.elements[parent])) {\r\n                //then current position with parent and move to next\r\n                this.swap(pos, parent);\r\n                pos = parent;\r\n                parent = ((pos - 1) / 2) >> 0;\r\n            } else {\r\n                //otherwise stop\r\n                parent = -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sifts a new element that is out of order down to the right position\r\n     * @param pos of new element\r\n     */\r\n    private siftDown(pos: number) {\r\n        const left = 2 * pos + 1;\r\n        const right = 2 * pos + 2;\r\n        //stop if the children are out of bounds\r\n        if(left >= this.elements.length) {\r\n            return;\r\n        }\r\n        //find the better child\r\n        const child = (right >= this.elements.length || this.compare(this.elements[left], this.elements[right]))\r\n            ? left : right;\r\n        //continues to sift down if the child is better than the current position\r\n        if(this.compare(this.elements[child], this.elements[pos])) {\r\n            this.swap(child, pos);\r\n            this.siftDown(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Internal move function\r\n     * @param from\r\n     * @param to\r\n     */\r\n    private move(from: number, to: number) {\r\n        this.elements[to] = this.elements[from];\r\n    }\r\n\r\n    /**\r\n     * Internal swap function\r\n     * @param a\r\n     * @param b\r\n     */\r\n    private swap(a: number, b: number) {\r\n        let val = this.elements[a];\r\n        this.elements[a] = this.elements[b];\r\n        this.elements[b] = val;\r\n    }\r\n}\r\n\r\nexport default Heap;","import {Point, Tile} from '../core/Components';\r\nimport Navigator from '../core/Navigator';\r\nimport {Node} from './Node';\r\n\r\n/**\r\n * Pathfinder performs algorithms operations on the grid\r\n * Uses the navigator rank and expand nodes\r\n */\r\nabstract class Pathfinder\r\n{\r\n    protected recentSearch: Node[] = [];\r\n    protected navigator: Navigator;\r\n\r\n    constructor(navigator: Navigator) {\r\n        this.navigator = navigator;\r\n    }\r\n\r\n    setNavigator(navigator: Navigator) {\r\n        this.navigator = navigator;\r\n    }\r\n\r\n    getNavigator() {\r\n        return this.navigator;\r\n    }\r\n\r\n    getRecentNodes() {\r\n        return this.recentSearch.length;\r\n    }\r\n\r\n    clearRecentSearch() {\r\n        this.recentSearch = [];\r\n    }\r\n\r\n    getRecentGenerations() {\r\n        return this.recentSearch.slice();\r\n    }\r\n\r\n    protected addRecent(node: Node) {\r\n        this.recentSearch.push(node);\r\n    }\r\n\r\n    abstract getAlgorithmName(): string;\r\n\r\n    /**\r\n     * Finds the best path between initial and goal on the grid\r\n     * and returns it in an array\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    abstract findPath(initial: Point, goal: Point): Tile[];\r\n}\r\n\r\n/**\r\n * Reconstructs the path from a tree, given the bottomLeaf, and\r\n * returns the shortest path in an array\r\n * @param bottomLeaf bottom of the tree to start from\r\n */\r\nexport function reconstructPath(bottomLeaf: Node): Tile[] {\r\n    return reconstructPathReversed(bottomLeaf).reverse();\r\n}\r\n\r\n/**\r\n * Reconstructs the path from a tree, given the bottomLeaf, and\r\n * returns the shortest path in an array\r\n * @param bottomLeaf bottom of the tree to start from\r\n */\r\nexport function reconstructPathReversed(bottomLeaf: Node): Tile[] {\r\n    const path: Tile[] = [];\r\n    while(bottomLeaf.parent !== null) {\r\n        path.push(bottomLeaf.tile);\r\n        bottomLeaf = bottomLeaf.parent;\r\n    }\r\n    return path;\r\n}\r\n\r\nexport default Pathfinder;","import {Tile} from '../core/Components';\r\n\r\n/**\r\n * Represents a search Tree Node\r\n */\r\nexport class Node\r\n{\r\n    parent: Node | null = null; //parent node\r\n    readonly children: Node[] = [];\r\n    readonly tile: Tile; //stores a graph node\r\n\r\n    constructor(tile: Tile) {\r\n        this.tile = tile;\r\n    }\r\n\r\n    addChild(child: Node) {\r\n        child.parent = this;\r\n        this.children.push(child);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents an heuristic weighted aStar search tree node\r\n */\r\nexport class AStarNode extends Node\r\n{\r\n    readonly g: number; //path cost\r\n    readonly fScore: number; //heuristic\r\n\r\n    constructor(tile: Tile, g: number, fScore: number) {\r\n        super(tile);\r\n        this.g = g;\r\n        this.fScore = fScore;\r\n    }\r\n\r\n    f() {\r\n        return this.fScore;\r\n    }\r\n}\r\n","import {HashSet, HashTable, stringify} from '../structures/Hash';\r\nimport Heap from '../structures/Heap';\r\nimport Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {AStarNode} from './Node';\r\nimport Navigator from '../core/Navigator';\r\nimport {euclidean, HeuristicFunc} from './Heuristics';\r\n\r\nclass AStarPathfinder extends Pathfinder\r\n{\r\n    private readonly heuristic: HeuristicFunc = (a: Point, b: Point) => euclidean(a,b);\r\n    private readonly isNewScoreBetter: (newF: number, oldF: number) => boolean;\r\n\r\n    constructor(navigator: Navigator, func?: HeuristicFunc, canRediscover?: boolean) {\r\n        super(navigator);\r\n        if(func !== undefined) {\r\n            this.heuristic = func;\r\n        }\r\n        this.isNewScoreBetter = canRediscover === undefined || canRediscover ?\r\n            (newScore: number, oldScore: number) => newScore < oldScore :\r\n            () => false;\r\n    }\r\n\r\n    getAlgorithmName(): string {\r\n        return 'A*';\r\n    }\r\n\r\n    /**\r\n     * Performs aStar algorithm on the grid given an initial and goal point\r\n     * Always returns the shortest path, and performs well on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const openFrontier = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const closedSet = new HashSet();\r\n        const openSet = new HashTable<number>();\r\n        const root = new AStarNode(\r\n            grid.get(initial), 0, 0\r\n        );\r\n        openFrontier.push(root);\r\n        openSet.add(stringify(initial), root.g);\r\n        while (!openFrontier.isEmpty()) {\r\n            const currentNode = openFrontier.pop();\r\n            const currentPoint = currentNode.tile.point;\r\n            const currentKey = stringify(currentPoint);\r\n            openSet.remove(currentKey);\r\n            closedSet.add(currentKey);\r\n            this.addRecent(currentNode);\r\n            if (this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            for (const neighbor of this.navigator.neighbors(currentPoint)) {\r\n                const neighborPoint = neighbor.point;\r\n                const neighborKey = stringify(neighborPoint);\r\n                if(closedSet.has(neighborKey)) {\r\n                    continue;\r\n                }\r\n                const g = currentNode.g + this.stepCost(currentPoint, neighborPoint);\r\n                const f = g + this.heuristic(neighborPoint, goal);\r\n                if (!openSet.has(neighborKey) || this.isNewScoreBetter(g, openSet.get(neighborKey)!)) {\r\n                    const neighborNode = new AStarNode(\r\n                        neighbor, g, f\r\n                    );\r\n                    currentNode.addChild(neighborNode);\r\n                    openFrontier.push(neighborNode);\r\n                    openSet.add(neighborKey, neighborNode.g);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * The step-cost function to be used, calculating the cost from\r\n     * currentPoint to neighborPoint. Uses the stepCost function provided by the\r\n     * navigator by default but can be overridden\r\n     * @param currentPoint\r\n     * @param neighborPoint\r\n     */\r\n    stepCost(currentPoint: Point, neighborPoint: Point) {\r\n        return this.navigator.cost(currentPoint, neighborPoint);\r\n    }\r\n}\r\n\r\nexport default AStarPathfinder;","import Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {HashSet, stringify} from '../structures/Hash';\r\nimport {Node} from './Node';\r\n\r\nclass BFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName(): string {\r\n        return 'Breadth First Search';\r\n    }\r\n\r\n    /**\r\n     * Implementation of BFS to find the shortest path from initial to point\r\n     * Always returns the shortest path, but performs poorly on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const frontier: Node[] = []; //fifo, stores nodes on the frontier\r\n        const visited = new HashSet();\r\n        const root = new Node(grid.get(initial));\r\n        frontier.push(root); //enqueue\r\n        visited.add(stringify(initial));\r\n        while(frontier.length !== 0) { //not empty\r\n            const currentNode = frontier.shift()!; //dequeue\r\n            const currentPoint = currentNode.tile.point;\r\n            this.addRecent(currentNode);\r\n            if(this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            for(const neighbor of this.navigator.neighbors(currentPoint)) {\r\n                const neighborKey = stringify(neighbor.point);\r\n                if(!visited.has(neighborKey)) {\r\n                    const neighborNode = new Node(neighbor);\r\n                    currentNode.addChild(neighborNode);\r\n                    frontier.push(neighborNode); //enqueue\r\n                    visited.add(neighborKey);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default BFSPathfinder;","/**\r\n * Stack node\r\n */\r\nclass Node<E>\r\n{\r\n    next: Node<E> | null = null;\r\n    data: E;\r\n\r\n    constructor(data: E) {\r\n        this.data = data;\r\n    }\r\n}\r\n\r\n/**\r\n * Minimalist Implementation of the stack data structure\r\n */\r\nclass Stack<E>\r\n{\r\n    private top: Node<E> | null = null;\r\n    private size: number = 0;\r\n\r\n    peek() {\r\n        return this.top != null ? this.top.data : undefined;\r\n    }\r\n\r\n    push(e: E) {\r\n        const node = new Node(e);\r\n        node.next = this.top;\r\n        this.top = node;\r\n        this.size++;\r\n    }\r\n\r\n    pop() {\r\n        const top = this.peek();\r\n        if(this.top != null) {\r\n            this.top = this.top.next;\r\n            this.size--;\r\n        }\r\n        return top;\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.size === 0;\r\n    }\r\n\r\n    getSize() {\r\n        return this.size;\r\n    }\r\n}\r\n\r\nexport default Stack;","import Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {HashSet, stringify} from '../structures/Hash';\r\nimport {Node} from './Node';\r\nimport Stack from '../structures/Stack';\r\n\r\nclass DFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName(): string {\r\n        return 'Depth First Search';\r\n    }\r\n\r\n    /**\r\n     * Calls DFS between a start and goal point, will typically not find the 'Best' path,\r\n     * and will instead find the best path capable for the algorithm\r\n     * As this algorithm is non optimal it should only be used for educational purposes\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const root = new Node(grid.get(initial));\r\n        const frontier = new Stack<Node>();\r\n        frontier.push(root);\r\n        const visited = new HashSet();\r\n        visited.add(stringify(initial));\r\n        while(!frontier.isEmpty()) {\r\n            const currentNode = frontier.pop()!;\r\n            const currentPoint = currentNode.tile.point;\r\n            visited.add(stringify(currentPoint));\r\n            this.addRecent(currentNode);\r\n            if(this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            const neighbors = this.navigator.neighbors(currentPoint).reverse();\r\n            for(const neighbor of neighbors){\r\n                const neighborKey = stringify(neighbor.point);\r\n                if(!visited.has(neighborKey)) {\r\n                    const neighborNode = new Node(neighbor);\r\n                    currentNode.addChild(neighborNode);\r\n                    frontier.push(neighborNode);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default DFSPathfinder;\r\n","import {HashSet, HashTable, stringify} from '../structures/Hash';\r\nimport Heap from '../structures/Heap';\r\nimport Pathfinder, {reconstructPath, reconstructPathReversed} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {AStarNode} from './Node';\r\nimport Navigator from '../core/Navigator';\r\nimport {euclidean, HeuristicFunc} from './Heuristics';\r\n\r\nclass BiAStarPathfinder extends Pathfinder\r\n{\r\n    private readonly heuristic: HeuristicFunc = (a: Point, b: Point) => euclidean(a,b);\r\n    private readonly isNewScoreBetter: (newF: number, oldF: number) => boolean;\r\n\r\n    constructor(navigator: Navigator, func?: HeuristicFunc, canRediscover?: boolean) {\r\n        super(navigator);\r\n        if(func !== undefined) {\r\n            this.heuristic = func;\r\n        }\r\n        this.isNewScoreBetter = canRediscover === undefined || canRediscover ?\r\n            (newScore: number, oldScore: number) => newScore < oldScore :\r\n            () => false;\r\n    }\r\n\r\n    getAlgorithmName(): string {\r\n        return 'Bidirectional A*';\r\n    }\r\n\r\n    /**\r\n     * Performs aStar algorithm on the grid given an initial and goal point\r\n     * Always returns the shortest path, and performs well on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const closedSet = new HashSet();\r\n        const startOpenFrontier = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const startOpenSet = new HashTable<AStarNode>();\r\n        const endOpenFrontier = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const endOpenSet = new HashTable<AStarNode>();\r\n        const initialRoot = new AStarNode(\r\n            grid.get(initial), 0, 0\r\n        );\r\n        startOpenFrontier.push(initialRoot);\r\n        startOpenSet.add(stringify(initial), initialRoot);\r\n        const goalRoot = new AStarNode(\r\n            grid.get(goal), 0, 0\r\n        );\r\n        endOpenFrontier.push(goalRoot);\r\n        endOpenSet.add(stringify(goal), goalRoot);\r\n        while (!startOpenFrontier.isEmpty() && !endOpenFrontier.isEmpty()) {\r\n            //expand startOpenFrontier\r\n            const startCurrentNode = startOpenFrontier.pop();\r\n            const startCurrentPoint = startCurrentNode.tile.point;\r\n            const startCurrentPointKey = stringify(startCurrentPoint);\r\n            startOpenSet.remove(startCurrentPointKey);\r\n            closedSet.add(startCurrentPointKey);\r\n            this.addRecent(startCurrentNode);\r\n            if(endOpenSet.has(startCurrentPointKey)) {\r\n                if(startCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startCurrentNode.parent\r\n                    ).concat(reconstructPathReversed(\r\n                        endOpenSet.get(startCurrentPointKey)!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            for (const neighbor of this.navigator.neighbors(startCurrentPoint)) {\r\n                const neighborPoint = neighbor.point;\r\n                const neighborKey = stringify(neighborPoint);\r\n                if(closedSet.has(neighborKey)) {\r\n                    continue;\r\n                }\r\n                const g = startCurrentNode.g + this.stepCost(startCurrentPoint, neighborPoint);\r\n                const f = g + this.heuristic(neighborPoint, goal);\r\n                if (!startOpenSet.has(neighborKey) || this.isNewScoreBetter(g, startOpenSet.get(neighborKey)!.g)) {\r\n                    const neighborNode = new AStarNode(\r\n                        neighbor, g, f\r\n                    );\r\n                    startCurrentNode.addChild(neighborNode);\r\n                    startOpenFrontier.push(neighborNode);\r\n                    startOpenSet.add(neighborKey, neighborNode);\r\n                }\r\n            }\r\n            //expand endOpenFrontier\r\n            const endCurrentNode = endOpenFrontier.pop();\r\n            const endCurrentPoint = endCurrentNode.tile.point;\r\n            const endCurrentPointKey = stringify(endCurrentPoint);\r\n            endOpenSet.remove(endCurrentPointKey);\r\n            closedSet.add(endCurrentPointKey);\r\n            this.addRecent(endCurrentNode);\r\n            if(startOpenSet.has(endCurrentPointKey)) {\r\n                if(endCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startOpenSet.get(endCurrentPointKey)!\r\n                    ).concat(reconstructPathReversed(\r\n                        endCurrentNode.parent!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            for (const neighbor of this.navigator.neighbors(endCurrentPoint)) {\r\n                const neighborPoint = neighbor.point;\r\n                const neighborKey = stringify(neighborPoint);\r\n                if(closedSet.has(neighborKey)) {\r\n                    continue;\r\n                }\r\n                const g = endCurrentNode.g + this.stepCost(endCurrentPoint, neighborPoint);\r\n                const f = g + this.heuristic(neighborPoint, initial);\r\n                if (!endOpenSet.has(neighborKey) || this.isNewScoreBetter(g, endOpenSet.get(neighborKey)!.g)) {\r\n                    const neighborNode = new AStarNode(\r\n                        neighbor, g, f\r\n                    );\r\n                    endCurrentNode.addChild(neighborNode);\r\n                    endOpenFrontier.push(neighborNode);\r\n                    endOpenSet.add(neighborKey, neighborNode);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * The step-cost function to be used, calculating the cost from\r\n     * currentPoint to neighborPoint. Uses the stepCost function provided by the\r\n     * navigator by default but can be overridden\r\n     * @param currentPoint\r\n     * @param neighborPoint\r\n     */\r\n    stepCost(currentPoint: Point, neighborPoint: Point) {\r\n        return this.navigator.cost(currentPoint, neighborPoint);\r\n    }\r\n}\r\n\r\nexport default BiAStarPathfinder;","import Pathfinder, {reconstructPath, reconstructPathReversed} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {HashTable, stringify} from '../structures/Hash';\r\nimport {Node} from './Node';\r\n\r\nclass BiBFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName(): string {\r\n        return 'Bidirectional Breadth First Search';\r\n    }\r\n\r\n    /**\r\n     * Implementation of BFS to find the shortest path from initial to point\r\n     * Always returns the shortest path, but performs poorly on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const startVisited = new HashTable<Node>();\r\n        const endVisited = new HashTable<Node>();\r\n        const startFrontier: Node[] = [];\r\n        const endFrontier: Node[] = [];\r\n        const initialRoot = new Node(grid.get(initial));\r\n        startFrontier.push(initialRoot);\r\n        startVisited.add(stringify(initial), initialRoot);\r\n        const goalRoot = new Node(grid.get(goal));\r\n        endFrontier.push(goalRoot);\r\n        endVisited.add(stringify(goal), goalRoot);\r\n        while(startFrontier.length !== 0 && endFrontier.length !== 0) {\r\n            //expand startQueue\r\n            const startCurrentNode = startFrontier.shift()!;\r\n            const startCurrentPoint = startCurrentNode.tile.point;\r\n            const startCurrentPointKey = stringify(startCurrentPoint);\r\n            this.addRecent(startCurrentNode);\r\n            if(endVisited.has(startCurrentPointKey)) {\r\n                if(startCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startCurrentNode.parent\r\n                    ).concat(reconstructPathReversed(\r\n                        endVisited.get(startCurrentPointKey)!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            for(const neighbor of this.navigator.neighbors(startCurrentPoint)) {\r\n                const neighborKey = stringify(neighbor.point);\r\n                if(!startVisited.has(neighborKey)) {\r\n                    const neighborNode = new Node(neighbor);\r\n                    startCurrentNode.addChild(neighborNode);\r\n                    startFrontier.push(neighborNode);\r\n                    startVisited.add(neighborKey, neighborNode);\r\n                }\r\n            }\r\n            //expand endQueue\r\n            const endCurrentNode = endFrontier.shift()!;\r\n            const endCurrentPoint = endCurrentNode.tile.point;\r\n            const endCurrentPointKey = stringify(endCurrentPoint);\r\n            this.addRecent(endCurrentNode);\r\n            if(startVisited.has(endCurrentPointKey)) {\r\n                if(endCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startVisited.get(endCurrentPointKey)!\r\n                    ).concat(reconstructPathReversed(\r\n                        endCurrentNode.parent\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            for(const neighbor of this.navigator.neighbors(endCurrentPoint)) {\r\n                const neighborKey = stringify(neighbor.point);\r\n                if(!endVisited.has(neighborKey)) {\r\n                    const neighborNode = new Node(neighbor);\r\n                    endCurrentNode.addChild(neighborNode);\r\n                    endFrontier.push(neighborNode);\r\n                    endVisited.add(neighborKey, neighborNode);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default BiBFSPathfinder;","import Navigator from '../core/Navigator';\r\nimport PlusNavigator from '../core/PlusNavigator';\r\nimport AsteriskNavigator from '../core/AsteriskNavigator';\r\nimport {Point} from '../core/Components';\r\nimport {Grid} from '../core/Grid';\r\nimport {chebyshev, euclidean, HeuristicFunc, manhattan, nullHeuristic, octile} from './Heuristics';\r\nimport Pathfinder from './Pathfinder';\r\nimport AStarPathfinder from './AStar';\r\nimport BFSPathfinder from './BFS';\r\nimport DFSPathfinder from './DFS';\r\nimport BiAStarPathfinder from './BidirectionalAStar';\r\nimport BiBFSPathfinder from \"./BidirectionalBFS\";\r\n\r\nconst CREATE_NAVIGATOR: {[key: string]: ((grid: Grid) => Navigator)} = {\r\n    'plus': (grid: Grid) => new PlusNavigator(grid),\r\n    'asterisk': (grid: Grid) => new AsteriskNavigator(grid)\r\n}\r\n\r\nconst CREATE_HEURISTIC: {[key: string]: (() => HeuristicFunc)} = {\r\n    'manhattan': () => manhattan,\r\n    'euclidean': () => euclidean,\r\n    'chebyshev': () => chebyshev,\r\n    'octile': () => octile,\r\n    'null': () => nullHeuristic\r\n}\r\n\r\nconst CREATE_PATHFINDER: {[key: string]: ((navigator: Navigator, heuristic: HeuristicFunc) => Pathfinder)} = {\r\n    'dijkstra': (navigator) => {\r\n        return new (class DijkstraPathfinder extends AStarPathfinder {\r\n            getAlgorithmName(): string {\r\n                return 'Dijkstra';\r\n            }\r\n        })(navigator, nullHeuristic);\r\n    },\r\n    'best-first': (navigator, heuristic) => {\r\n        return new (class BestFirstPathfinder extends AStarPathfinder {\r\n            stepCost(currentPoint: Point, neighborPoint: Point) {\r\n                return 0;\r\n            }\r\n            getAlgorithmName(): string {\r\n                return 'Best-First Search';\r\n            }\r\n        })(navigator, heuristic);\r\n    },\r\n    'a*': (navigator, heuristic) => {\r\n        return new AStarPathfinder(navigator, heuristic,navigator.getType() !== 'plus');\r\n    },\r\n    'bfs': (navigator) => {\r\n        return new BFSPathfinder(navigator);\r\n    },\r\n    'dfs': (navigator) => {\r\n        return new DFSPathfinder(navigator);\r\n    },\r\n    'bi-a*': (navigator, heuristic) => {\r\n        return new BiAStarPathfinder(navigator, heuristic, navigator.getType() !== 'plus');\r\n    },\r\n    'bi-dijkstra': (navigator) => {\r\n        return new (class BiDijkstraPathfinder extends BiAStarPathfinder {\r\n            getAlgorithmName(): string {\r\n                return 'Bidirectional Dijkstra';\r\n            }\r\n        })(navigator, nullHeuristic);\r\n    },\r\n    'bi-bfs': (navigator) => {\r\n        return new BiBFSPathfinder(navigator);\r\n    }\r\n}\r\n\r\nclass PathfinderBuilder\r\n{\r\n    private navigator: string = 'plus';\r\n    private algorithm: string = 'a*';\r\n    private heuristic: string = 'null';\r\n    private readonly grid: Readonly<Grid>;\r\n\r\n    constructor(grid: Readonly<Grid>) {\r\n        this.grid = grid;\r\n    }\r\n\r\n    setNavigator(navigator: string) {\r\n        navigator = navigator.toLowerCase();\r\n        if(CREATE_NAVIGATOR[navigator] == null) {\r\n            throw new Error('No such navigator pattern exists')\r\n        } else {\r\n            this.navigator = navigator;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setAlgorithm(algorithm: string) {\r\n        algorithm = algorithm.toLowerCase();\r\n        if(CREATE_PATHFINDER[algorithm] == null) {\r\n            throw new Error('No such pathfinding algorithm exists')\r\n        } else {\r\n            this.algorithm = algorithm;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setHeuristic(heuristic: string) {\r\n        heuristic = heuristic.toLowerCase();\r\n        if(CREATE_HEURISTIC[heuristic] == null) {\r\n            throw new Error('No such heuristic function exists')\r\n        } else {\r\n            this.heuristic = heuristic;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Builds a pathfinder with a navigator with the set algorithm, heuristic, and navigator\r\n     */\r\n    build() {\r\n        const createHeuristic = CREATE_HEURISTIC[this.heuristic];\r\n        const createNavigator = CREATE_NAVIGATOR[this.navigator];\r\n        const createPathfinder = CREATE_PATHFINDER[this.algorithm];\r\n        return createPathfinder(createNavigator(this.grid), createHeuristic());\r\n    }\r\n\r\n    static usesHeuristic(algorithm: string) {\r\n        return algorithm === 'a*' || algorithm === 'bi-a*' ||\r\n            algorithm === 'best-first';\r\n    }\r\n\r\n    static hasBidirectional(algorithm: string) {\r\n        return CREATE_PATHFINDER['bi-' + algorithm] != null;\r\n    }\r\n\r\n    static makeBidirectional(algorithm: string) {\r\n        return 'bi-' + algorithm;\r\n    }\r\n}\r\n\r\nexport default PathfinderBuilder;\r\n\r\n","class VirtualTimer\r\n{\r\n    private timeout: NodeJS.Timeout;\r\n    private readonly callback: () => void\r\n    private timeStarted: number;\r\n    private timeRemaining: number;\r\n    private finished: boolean;\r\n\r\n    constructor(callback: () => void, countDown: number) {\r\n        this.callback = callback;\r\n        this.finished = false;\r\n        this.timeStarted = Date.now();\r\n        this.timeRemaining = countDown;\r\n        this.timeout = setTimeout(() => {\r\n            callback();\r\n            this.finished = true;\r\n        }, this.timeRemaining);\r\n    }\r\n\r\n    clear() {\r\n        clearTimeout(this.timeout);\r\n        this.finished = true;\r\n    }\r\n\r\n    pause() {\r\n        if(!this.finished) {\r\n            clearTimeout(this.timeout);\r\n            this.timeRemaining -= Date.now() - this.timeStarted;\r\n        }\r\n    }\r\n\r\n    resume() {\r\n        if(!this.finished) {\r\n            this.timeStarted = Date.now();\r\n            this.timeout = setTimeout(() => {\r\n                this.callback();\r\n                this.finished = true;\r\n            }, this.timeRemaining);\r\n        }\r\n    }\r\n\r\n    isFinished() {\r\n        return this.finished;\r\n    }\r\n\r\n    getNativeTimeout() {\r\n        return this.timeout;\r\n    }\r\n}\r\n\r\nexport default VirtualTimer;","import {Point, Tile} from '../core/Components';\r\nimport {Grid} from '../core/Grid';\r\nimport {HashSet, stringify} from '../structures/Hash';\r\n\r\nabstract class TerrainGenerator\r\n{\r\n    protected readonly width: number;\r\n    protected readonly height: number;\r\n    protected readonly ignore: HashSet;\r\n\r\n    protected constructor(width: number, height: number, ignore?: Point[]) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.ignore = new HashSet();\r\n        if(ignore !== undefined) {\r\n            for(const i of ignore) {\r\n                this.ignore.add(stringify(i));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws a tile to the grid\r\n     * @param grid\r\n     * @param tile\r\n     */\r\n    draw(grid: Grid, tile: Tile) {\r\n        if(!this.shouldIgnore(tile.point)) {\r\n            grid.mutateTile(tile);\r\n        }\r\n    }\r\n\r\n    shouldIgnore(point: Point) {\r\n        return this.ignore.has(stringify(point));\r\n    }\r\n\r\n    abstract generateTerrain(topLeft?: Point, bottomRight?: Point): Grid;\r\n}\r\n\r\nexport default TerrainGenerator;","import TerrainGenerator from './TerrainGenerator';\r\nimport {createTile, Point} from '../core/Components';\r\nimport RectGrid, {Grid} from '../core/Grid';\r\n\r\nclass RandomTerrainGenerator extends TerrainGenerator\r\n{\r\n    constructor(width: number, height: number, ignore?: Point[]) {\r\n        super(width, height, ignore);\r\n    }\r\n\r\n    /**\r\n     * Performs a random terrain generation algorithm where each tile has a 1/4\r\n     * chance of being solid\r\n     * @param topLeft optional parameter to specify what point the terrain should start from\r\n     *  This should not be further up/left than (1,1)\r\n     * @param bottomRight optional parameter to specify how far down and right the terrain will go\r\n     *  This should not be further right/down than (width-2,height-2)\r\n     */\r\n    generateTerrain(topLeft?: Point, bottomRight?: Point): Grid {\r\n        const grid = new RectGrid(this.width, this.height);\r\n        if(topLeft === undefined) {\r\n            topLeft = {\r\n                x: 1, y: 1\r\n            }\r\n        }\r\n        if(bottomRight === undefined) {\r\n            bottomRight = {\r\n                x: grid.getWidth()-2,\r\n                y: grid.getHeight()-2\r\n            }\r\n        }\r\n        for(let x = topLeft.x - 1; x <= bottomRight.x + 1; x++) {\r\n            for(let y = topLeft.y - 1; y <= bottomRight.y + 1; y++) {\r\n                if(getRand(0, 3) === 0) {\r\n                    this.draw(grid,{\r\n                        point: {\r\n                            x: x, y: y\r\n                        },\r\n                        data: createTile(true)\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n}\r\n\r\n/**\r\n * Generate a random number between min and max, inclusive for min and max\r\n * @param min\r\n * @param max\r\n */\r\nfunction getRand(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max+1-min) + min);\r\n}\r\n\r\nexport default RandomTerrainGenerator;","import RectGrid, {Grid} from '../core/Grid';\r\nimport {Point, Tile, createTile} from '../core/Components';\r\nimport TerrainGenerator from './TerrainGenerator';\r\n\r\nconst LIMIT = 2;\r\n\r\nexport const NO_SKEW = 0;\r\nexport const VERTICAL_SKEW = 1;\r\nexport const HORIZONTAL_SKEW = 2;\r\n\r\ninterface Chamber\r\n{\r\n    topLeft: Point; //min\r\n    bottomRight: Point; //max\r\n}\r\n\r\nclass MazeGenerator extends TerrainGenerator\r\n{\r\n    private readonly divideWidth: (width: number, height: number) => boolean;\r\n\r\n    constructor(width: number, height: number, ignore?: Point[], slant?: number) {\r\n        super(width, height, ignore);\r\n        if(slant === undefined || slant === NO_SKEW) {\r\n            this.divideWidth = divideWidthNoSkew;\r\n        } else if(slant === VERTICAL_SKEW) {\r\n            this.divideWidth = divideWidthVSkew;\r\n        } else if(slant === HORIZONTAL_SKEW) {\r\n            this.divideWidth = divideWidthHSkew;\r\n        } else {\r\n            throw new Error(\"Invalid recursive maze division skew type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs the recursive division maze generation algorithm on a new empty grid\r\n     * by bisecting parts until the maze can no longer be bisected\r\n     * Params must be within bounds and create a chamber\r\n     * @param topLeft optional parameter to specify what point the maze should start from\r\n     *  This should not be further up/left than (1,1)\r\n     * @param bottomRight optional parameter to specify how far down and right the maze will go\r\n     *  This should not be further right/down than (width-2,height-2)\r\n     */\r\n    generateTerrain(topLeft?: Point, bottomRight?: Point) {\r\n        const grid = new RectGrid(this.width, this.height);\r\n        if(topLeft === undefined) {\r\n            topLeft = {\r\n                x: 1, y: 1\r\n            }\r\n        }\r\n        if(bottomRight === undefined) {\r\n            bottomRight = {\r\n                x: grid.getWidth()-2,\r\n                y: grid.getHeight()-2\r\n            }\r\n        }\r\n        for(let x = topLeft.x - 1; x <= bottomRight.x + 1; x++) {\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: x, y: topLeft.y - 1\r\n                },\r\n                data: createTile(true)\r\n            });\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: x, y: bottomRight.y + 1\r\n                },\r\n                data: createTile(true)\r\n            });\r\n        }\r\n        for(let y = topLeft.y - 1; y <= bottomRight.y + 1; y++) {\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: topLeft.x - 1, y: y\r\n                },\r\n                data: createTile(true)\r\n            });\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: bottomRight.x + 1, y: y\r\n                },\r\n                data: createTile(true)\r\n            });\r\n        }\r\n        this.divide(grid,{\r\n            topLeft: topLeft,\r\n            bottomRight: bottomRight,\r\n        });\r\n        return grid;\r\n    }\r\n\r\n    /**\r\n     * Draws a list of tiles to the grid\r\n     * @param grid\r\n     * @param tiles\r\n     */\r\n    private drawArr(grid: Grid, tiles: Tile[]) {\r\n        for(const tile of tiles) {\r\n            this.draw(grid, tile);\r\n        }\r\n    }\r\n    /**\r\n     * Create a line between a region, with an open hole, in a chamber,\r\n     * and call bisection algorithm on it, and call division algorithms on\r\n     * its split chambers until no chambers can be bisected\r\n     * @param grid\r\n     * @param chamber\r\n     */\r\n    divide(grid: Grid, chamber: Chamber) {\r\n        const width = widthOf(chamber);\r\n        const height = heightOf(chamber);\r\n        const min = chamber.topLeft;\r\n        const max = chamber.bottomRight;\r\n        if(this.divideWidth(width,height)) {\r\n            if(width > LIMIT) {\r\n                //calculate axis\r\n                const randX = getMidPoint(\r\n                    min.x, max.x\r\n                );\r\n                //create axis wall\r\n                const toDraw: Tile[] = [];\r\n                for(let y = min.y; y <= max.y; y++) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: y\r\n                        },\r\n                        data: createTile(true)\r\n                    });\r\n                }\r\n                //create holes in axis wall\r\n                let edgeBlocked = false;\r\n                if(!grid.get({\r\n                    x: randX, y: min.y-1\r\n                }).data.isSolid) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: min.y\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(!grid.get({\r\n                    x: randX, y: max.y+1\r\n                }).data.isSolid) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: max.y\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(!edgeBlocked) {\r\n                    const randY = getRand(\r\n                        min.y, max.y,\r\n                    );\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                }\r\n                this.drawArr(grid, toDraw);\r\n                //create children chambers and recurse\r\n                const leftChamber = {\r\n                    topLeft: chamber.topLeft,\r\n                    bottomRight: {\r\n                        x: randX-1,\r\n                        y: chamber.bottomRight.y\r\n                    },\r\n                };\r\n                const rightChamber = {\r\n                    topLeft: {\r\n                        x: randX+1,\r\n                        y: chamber.topLeft.y\r\n                    },\r\n                    bottomRight: chamber.bottomRight,\r\n                };\r\n                this.divide(grid, leftChamber);\r\n                this.divide(grid, rightChamber);\r\n            }\r\n        } else {\r\n            if(height > LIMIT) {\r\n                //calculate axis\r\n                const randY = getMidPoint(\r\n                    min.y, max.y\r\n                );\r\n                //draw axis wall\r\n                const toDraw: Tile[] = [];\r\n                for(let x = min.x; x <= max.x; x++) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: x, y: randY\r\n                        },\r\n                        data: createTile(true)\r\n                    });\r\n                }\r\n                //create holes in axis wall\r\n                let edgeBlocked = false;\r\n                if(!grid.get({\r\n                    x: min.x-1, y: randY\r\n                }).data.isSolid) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: min.x, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(!grid.get({\r\n                    x: max.x+1, y: randY\r\n                }).data.isSolid) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: max.x, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(!edgeBlocked) {\r\n                    const randX = getRand(\r\n                        min.x, max.x,\r\n                    );\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                }\r\n                this.drawArr(grid, toDraw);\r\n                //create children chambers and recurse\r\n                const topChamber = {\r\n                    topLeft: chamber.topLeft,\r\n                    bottomRight: {\r\n                        x: chamber.bottomRight.x,\r\n                        y: randY-1\r\n                    },\r\n                };\r\n                const bottomChamber = {\r\n                    topLeft: {\r\n                        x: chamber.topLeft.x,\r\n                        y: randY+1\r\n                    },\r\n                    bottomRight: chamber.bottomRight,\r\n                };\r\n                this.divide(grid, topChamber);\r\n                this.divide(grid, bottomChamber);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction divideWidthNoSkew(width: number, height: number) {\r\n    return width >= height;\r\n}\r\n\r\nfunction divideWidthHSkew(width: number, height: number) {\r\n    return width >= height * 2;\r\n}\r\n\r\nfunction divideWidthVSkew(width: number, height: number) {\r\n    return width * 2 >= height;\r\n}\r\n\r\nfunction widthOf(chamber: Chamber) {\r\n    return chamber.bottomRight.x - chamber.topLeft.x + 1;\r\n}\r\n\r\nfunction heightOf(chamber: Chamber) {\r\n    return chamber.bottomRight.y - chamber.topLeft.y + 1;\r\n}\r\n\r\n/**\r\n * Returns the 'midpoint' to be used\r\n * @param min\r\n * @param max\r\n */\r\nfunction getMidPoint(min: number, max: number) {\r\n    const range = max - min;\r\n    if(range >= 20) {\r\n        return ((min+max)/2) >> 0;\r\n    } else if(range > 5) {\r\n        const mid = ((min+max)/2) >> 0;\r\n        const points = [mid, mid+1];\r\n        return points[getRand(0,points.length-1)];\r\n    } else {\r\n        return getRand(min+1,max-1);\r\n    }\r\n}\r\n\r\n/**\r\n * Generate a random number between min and max-1 then increment the number\r\n * if it is larger than or equal to excluded, inclusive for min and max\r\n * @param min\r\n * @param max\r\n * @param excluded\r\n */\r\nfunction getRandEx(min: number, max: number, excluded: number) {\r\n    let rand = getRand(min, max-1);\r\n    return rand >= excluded ? ++rand : rand;\r\n}\r\n\r\n/**\r\n * Generate a random number between min and max, inclusive for min and max\r\n * @param min\r\n * @param max\r\n */\r\nfunction getRand(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max+1-min) + min);\r\n}\r\n\r\nexport default MazeGenerator;","import RandomTerrainGenerator from './RandomTerrainGenerator';\r\nimport MazeGenerator from './MazeGenerator';\r\nimport {Point} from '../core/Components';\r\n\r\nexport const MAZE = 0;\r\nexport const MAZE_VERTICAL_SKEW = 1;\r\nexport const MAZE_HORIZONTAL_SKEW = 2;\r\nexport const RANDOM_TERRAIN = 3;\r\n\r\nclass TerrainGeneratorBuilder\r\n{\r\n    private width: number = 0;\r\n    private height: number = 0;\r\n    private type: number = MAZE;\r\n    private ignore: Point[] = [];\r\n\r\n    setDimensions(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n\r\n    setGeneratorType(type: number) {\r\n        this.type = type;\r\n        return this;\r\n    }\r\n\r\n    setIgnorePoints(ignore: Point[]) {\r\n        this.ignore = ignore.slice();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Builds a terrain generator with the specified type\r\n     */\r\n    build() {\r\n       if(this.type >= RANDOM_TERRAIN) {\r\n           return new RandomTerrainGenerator(this.width, this.height, this.ignore);\r\n       } else {\r\n           return new MazeGenerator(this.width, this.height, this.ignore, this.type);\r\n       }\r\n    }\r\n}\r\n\r\nexport default TerrainGeneratorBuilder;","import React, {RefObject} from 'react';\r\nimport './Grid.css';\r\nimport GridBackground from './GridBackground';\r\nimport GridForeground from './GridForeground';\r\nimport StatsPanel from './StatsPanel';\r\nimport {Node} from '../../pathfinding/algorithms/Node';\r\nimport PathfindingSettings from '../PathfindingSettings';\r\nimport PathfinderBuilder from '../../pathfinding/algorithms/PathfinderBuilder';\r\nimport Pathfinder from '../../pathfinding/algorithms/Pathfinder';\r\nimport {Point, Tile} from '../../pathfinding/core/Components';\r\nimport {euclidean} from '../../pathfinding/algorithms/Heuristics';\r\nimport VirtualTimer from '../utility/VirtualTimer';\r\nimport TerrainGeneratorBuilder from '../../pathfinding/algorithms/TerrainGeneratorBuilder';\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    settings: Readonly<PathfindingSettings>,\r\n    topMargin: number,\r\n    onChangeVisualizing: (visualizing: boolean) => void;\r\n}\r\n\r\ninterface IState {\r\n    tilesX: number,\r\n    tilesY: number,\r\n    time: number,\r\n    length: number,\r\n    nodes: number,\r\n    algorithm: string\r\n}\r\n\r\nclass PathfindingVisualizer extends React.Component<IProps,IState>\r\n{\r\n    //references to expose background and foreground grids to parent\r\n    private background: RefObject<GridBackground> = React.createRef();\r\n    private foreground: RefObject<GridForeground> = React.createRef();\r\n    private stats: RefObject<StatsPanel> = React.createRef();\r\n\r\n    private visualized = false;\r\n    private visualizing = false;\r\n    private visualTimeouts: VirtualTimer[]  = [];\r\n    private generations: Node[] = [];\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const w = window.screen.availWidth;\r\n        const h = window.screen.availHeight;\r\n        const tilesX = Math.floor(w / this.props.tileWidth) + 1;\r\n        const tilesY = Math.floor((h - this.props.topMargin - 30) / this.props.tileWidth) + 1;\r\n        this.state = {\r\n            tilesX: tilesX,\r\n            tilesY: tilesY,\r\n            time: -1,\r\n            length: -1,\r\n            nodes: -1,\r\n            algorithm: ''\r\n        }\r\n    }\r\n\r\n    canShowArrows = () => {\r\n        const settings = this.props.settings;\r\n        return settings.showArrows && settings.algorithm !== 'dfs';\r\n    }\r\n\r\n    canShowFrontier = () => {\r\n        const settings = this.props.settings;\r\n        return settings.visualizeAlg;\r\n    }\r\n\r\n    /**\r\n     * Pause the delayed pathfinding algorithm being performed\r\n     */\r\n    pausePathfinding = () => {\r\n        for(const timeout of this.visualTimeouts) {\r\n            timeout.pause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resume the delayed pathfinding algorithm being performed\r\n     * Will reset the timeouts to the last time the timeout was paused/started\r\n     * if not properly called while the timeout is paused\r\n     */\r\n    resumePathfinding = () => {\r\n        for(const timeout of this.visualTimeouts) {\r\n            timeout.resume();\r\n        }\r\n    }\r\n\r\n    jumpToGeneration = (generation: number) => {\r\n        this.clearPath();\r\n        const generations = this.generations.slice(generation);\r\n        if(this.canShowArrows()) {\r\n            this.addArrowGenerations(generations);\r\n        }\r\n        if(this.canShowFrontier()) {\r\n            this.visualizeGenerations(generations);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs the pathfinding algorithm on the grid and visualizes it\r\n     */\r\n    doPathfinding = () => {\r\n        this.clearPath();\r\n        const settings = this.props.settings;\r\n        const pathfinder = this.getPathfinder(settings);\r\n        const path = this.findPath(pathfinder);\r\n        this.generations = pathfinder.getRecentGenerations();\r\n        if(this.canShowArrows()) {\r\n            this.addArrowGenerations(this.generations);\r\n        }\r\n        if(this.canShowFrontier()) {\r\n            this.visualizeGenerations(this.generations);\r\n        }\r\n        this.drawPath(path);\r\n    }\r\n\r\n    /**\r\n     * Performs the pathfinding algorithm on the grid and visualizes it with delays between successive\r\n     * node generations\r\n     * If the visualizer is currently visualizing, the visualization stops instead\r\n     */\r\n    doDelayedPathfinding = () => {\r\n        this.clearVisualization();\r\n        this.clearPath();\r\n        const settings = this.props.settings;\r\n        this.visualized = false;\r\n        const foreground = this.foreground.current!;\r\n        foreground.toggleDisable();\r\n        if(!this.visualizing) { //start visualization if not visualizing\r\n            this.visualizing = true;\r\n            this.props.onChangeVisualizing(this.visualizing);\r\n            const pathfinder = this.getPathfinder(settings);\r\n            const path = this.findPath(pathfinder);\r\n            const promises: Promise<VirtualTimer>[] = []; //to call function when timeouts finish\r\n            this.visualTimeouts = [];\r\n            const baseIncrement = settings.delayInc;\r\n            let delay = 0;\r\n            const visualizeAlg = this.canShowFrontier();\r\n            const showArrows = this.canShowArrows();\r\n            if(showArrows || visualizeAlg) {\r\n                const expandVisualization = visualizeAlg ? this.visualizeGeneration : () => {};\r\n                const expandArrows = showArrows ? this.addArrowGeneration : () => {};\r\n                this.generations = pathfinder.getRecentGenerations();\r\n                this.generations.forEach((generation) => {\r\n                    const promise = new Promise<VirtualTimer>((resolve) => {\r\n                        //each generation gets a higher timeout\r\n                        const timeout = new VirtualTimer(() => {\r\n                            expandArrows(generation);\r\n                            expandVisualization(generation);\r\n                            resolve(timeout);\r\n                        }, delay);\r\n                        this.visualTimeouts.push(timeout);\r\n                    });\r\n                    promises.push(promise);\r\n                    delay += baseIncrement;\r\n                });\r\n            }\r\n            //call functions when timeouts finish\r\n            Promise.all(promises).then(() => {\r\n                this.drawPath(path);\r\n                foreground.toggleDisable();\r\n                this.visualizing = false;\r\n                this.visualized = true;\r\n                this.props.onChangeVisualizing(this.visualizing);\r\n            });\r\n        } else { //stop visualizing if visualizing\r\n            for (const timeout of this.visualTimeouts) {\r\n                timeout.clear();\r\n            }\r\n            this.visualizing = false;\r\n            this.props.onChangeVisualizing(this.visualizing);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the pathfinder for the settings\r\n     * @param settings\r\n     */\r\n    private getPathfinder = (settings: PathfindingSettings) => {\r\n        const algorithmKey = settings.algorithm;\r\n        const algorithm = settings.bidirectional && PathfinderBuilder.hasBidirectional(algorithmKey) ?\r\n            PathfinderBuilder.makeBidirectional(algorithmKey) : algorithmKey;\r\n        return new PathfinderBuilder(this.foreground.current!.state.grid)\r\n            .setAlgorithm(algorithm)\r\n            .setHeuristic(settings.heuristicKey)\r\n            .setNavigator(settings.navigatorKey)\r\n            .build();\r\n    }\r\n\r\n    /**\r\n     * Find path with a given pathfinder, includes benchmarking\r\n     * @param pathfinder\r\n     */\r\n    private findPath = (pathfinder: Pathfinder) => {\r\n        const foreground = this.foreground.current!;\r\n        const t0 = performance.now();\r\n        const path = pathfinder.findPath(foreground.state.initial, foreground.state.goal);\r\n        const t1 = performance.now();\r\n        const t2 = (t1 - t0);\r\n        this.setState({\r\n            time: t2,\r\n            nodes: pathfinder.getRecentNodes(),\r\n            length: calcLength(foreground.state.initial, path),\r\n            algorithm: pathfinder.getAlgorithmName()\r\n        });\r\n        return path;\r\n    }\r\n\r\n    /**\r\n     * Draw path on the grid and change length on ui\r\n     * @param path\r\n     */\r\n    private drawPath = (path: Tile[]) => {\r\n        const foreground = this.foreground.current!\r\n        path.unshift(this.foreground.current!.state.grid.get(foreground.state.initial));\r\n        this.foreground.current!.drawPath(path);\r\n    }\r\n\r\n    /**\r\n     * Called when child foreground moves a tile\r\n     */\r\n    private onTilesDragged = () => {\r\n        if(this.visualized) {\r\n            this.clearVisualization();\r\n            this.doPathfinding();\r\n            this.visualized = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create terrain on the grid foreground\r\n     */\r\n    createTerrain = (mazeType: number) => {\r\n        if(this.visualizing) {\r\n            return;\r\n        }\r\n        this.clearTiles();\r\n        this.clearPath();\r\n        this.clearVisualization();\r\n        const foreground = this.foreground.current!;\r\n        const end = this.calcEndPointInView();\r\n        foreground.setState({\r\n            initial: {\r\n                x: 1, y:1\r\n            },\r\n            goal: {\r\n                x: end.x-2, y: end.y-2\r\n            }\r\n        },() => {\r\n            const prevGrid = foreground.state.grid;\r\n            const generator = new TerrainGeneratorBuilder()\r\n                .setDimensions(\r\n                    prevGrid.getWidth(),\r\n                    prevGrid.getHeight()\r\n                )\r\n                .setGeneratorType(mazeType)\r\n                .setIgnorePoints([foreground.state.initial, foreground.state.goal])\r\n                .build();\r\n            const topLeft = {\r\n                x: 1, y: 1\r\n            };\r\n            const bottomRight = {\r\n                x: end.x-2, y: end.y-2\r\n            };\r\n            const grid = generator.generateTerrain(topLeft, bottomRight);\r\n            foreground.drawGrid(grid);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Calculate the end/goal point in view of the screen\r\n     */\r\n    calcEndPointInView = () => {\r\n        const xEnd = window.innerWidth / this.props.tileWidth;\r\n        const yEnd = (window.innerHeight - this.props.topMargin\r\n            - this.stats.current!.getHeight()) / this.props.tileWidth;\r\n        const xFloor = Math.floor(xEnd);\r\n        const yFloor = Math.floor(yEnd);\r\n        const xDecimal = xEnd - xFloor;\r\n        const yDecimal = yEnd - yFloor;\r\n        return {\r\n            x: xDecimal > 0.05 ? Math.ceil(xEnd) : xFloor,\r\n            y: yDecimal > 0.05 ? Math.ceil(yEnd) : yFloor\r\n        }\r\n    }\r\n\r\n    resetPoints = () => {\r\n        if(!this.visualizing) {\r\n            this.foreground.current!.resetPoints();\r\n        }\r\n    }\r\n\r\n    clearPath = () => {\r\n        this.foreground.current!.erasePath();\r\n    }\r\n\r\n    clearTiles = () => {\r\n        this.foreground.current!.clearTiles();\r\n    }\r\n\r\n    clearTilesChecked = () => {\r\n        if(!this.visualizing) {\r\n            this.foreground.current!.clearTiles();\r\n        }\r\n    }\r\n\r\n    clearVisualization = () => {\r\n        this.visualized = false;\r\n        this.background.current!.clear();\r\n    }\r\n\r\n    clearVisualizationChecked = () => {\r\n        if(!this.visualizing) {\r\n            this.visualized = false;\r\n            this.background.current!.clear();\r\n        }\r\n    }\r\n\r\n    private visualizeGenerations = (generations: Node[]) => {\r\n        this.background.current!.visualizeGenerations(generations);\r\n        this.visualized = true;\r\n    }\r\n\r\n    private visualizeGeneration = (generation: Node) => {\r\n        this.background.current!.visualizeGeneration(generation);\r\n    }\r\n\r\n    private addArrowGenerations = (generations: Node[]) => {\r\n        this.background.current!.addArrowGenerations(generations);\r\n    }\r\n\r\n    private addArrowGeneration = (generation: Node) => {\r\n        this.background.current!.addArrowGeneration(generation);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <StatsPanel ref={this.stats} algorithm={this.state.algorithm} length={this.state.length}\r\n                            time={this.state.time} nodes={this.state.nodes}/>\r\n                <GridBackground ref={this.background} tileWidth={this.props.tileWidth}\r\n                                tilesX={this.state.tilesX} tilesY={this.state.tilesY}/>\r\n                <GridForeground ref={this.foreground} topMargin={this.props.topMargin}\r\n                                onTilesDragged={this.onTilesDragged} tileWidth={this.props.tileWidth}\r\n                                tilesX={this.state.tilesX} tilesY={this.state.tilesY}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction calcLength(initial: Point, path: Tile[]) {\r\n    if(path.length === 0) {\r\n        return 0;\r\n    }\r\n    let len = euclidean(initial, path[0].point);\r\n    for (let i = 0; i < path.length - 1; i++) {\r\n        len += euclidean(path[i].point, path[i + 1].point);\r\n    }\r\n    return +(len).toFixed(3);\r\n}\r\n\r\nexport default PathfindingVisualizer;","import React from 'react';\r\n\r\ninterface IProps {\r\n    boxStyle: string,\r\n    defaultChecked: boolean,\r\n    disabled?: boolean,\r\n    onChange: (checked: boolean) => void\r\n}\r\n\r\ninterface IState {\r\n    checked: boolean\r\n}\r\n\r\nclass Checkbox extends React.Component<IProps,IState>\r\n{\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            checked: this.props.defaultChecked\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger callback and change checkbox state\r\n     */\r\n    onChange = () => {\r\n        this.setState(prevState => ({\r\n            checked: !prevState.checked\r\n        }), () => this.props.onChange(this.state.checked));\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <input checked={this.state.checked} type='checkbox' disabled={this.props.disabled}\r\n                       className={this.props.boxStyle} onKeyPress={this.onChange} onChange={this.onChange}\r\n                >\r\n                </input>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Checkbox;","import React from 'react';\r\n\r\ninterface IProps {\r\n    min: number,\r\n    max: number,\r\n    default: number,\r\n    step: number,\r\n    sliderStyle: string,\r\n    onChange: (val: number) => void\r\n}\r\n\r\ninterface IState {\r\n    value: number\r\n}\r\n\r\nclass SteppedRangeSlider extends React.Component<IProps, IState>\r\n{\r\n    private mouseUp = true;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            value: this.props.default\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger callback when slider value is changed\r\n     * @param e\r\n     */\r\n    onChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n        if(!this.mouseUp) { //to prevent firefox from resetting on release\r\n            const val = Number(e.currentTarget.value);\r\n            this.setState({\r\n                value: val\r\n            }, () => this.props.onChange(val));\r\n        }\r\n    }\r\n\r\n    onMouseUp = () => {\r\n        this.mouseUp = true;\r\n    }\r\n\r\n    onMouseDown = () => {\r\n        this.mouseUp = false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <input type='range' list='step-list'\r\n                   value={this.state.value}\r\n                   min={this.props.min} max={this.props.max}\r\n                   step={this.props.step} className={this.props.sliderStyle}\r\n                   onInput={this.onChange}\r\n                   onMouseUp={this.onMouseUp}\r\n                   onMouseDown={this.onMouseDown}\r\n                   onTouchEnd={this.onMouseUp}\r\n                   onTouchStart={this.onMouseDown}\r\n            >\r\n            </input>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SteppedRangeSlider;","import React from 'react';\r\n\r\ninterface IProps {\r\n    boxStyle: string,\r\n    defaultChecked: number,\r\n    disabled: boolean,\r\n    onChange: (() => void)[]\r\n}\r\n\r\ninterface IState {\r\n    checked: boolean[];\r\n}\r\n\r\nclass RadioButtonGroup extends React.Component<IProps, IState>\r\n{\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const checked: boolean[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            checked.push(i === this.props.defaultChecked);\r\n        }\r\n        this.state = {\r\n            checked: checked\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set all radio buttons to checked aside from the index\r\n     * of the one that was changed\r\n     * Trigger callback\r\n     * @param index\r\n     */\r\n    private onChange = (index: number) => {\r\n        const checked: boolean[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            checked.push(i === index);\r\n        }\r\n        this.setState({\r\n            checked: checked\r\n        }, () => this.props.onChange[index]());\r\n    }\r\n\r\n    render() {\r\n        const children = React.Children.toArray(this.props.children);\r\n        const radioButtons: JSX.Element[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            radioButtons.push(\r\n                <div key={i}>\r\n                    <input checked={this.state.checked[i]} type='radio' disabled={this.props.disabled}\r\n                           className={this.props.boxStyle}\r\n                           onChange={() => this.onChange(i)}\r\n                    >\r\n                    </input>\r\n                    {children[i]}\r\n                </div>\r\n            );\r\n        }\r\n        return radioButtons;\r\n    };\r\n}\r\n\r\nexport default RadioButtonGroup;","import React from 'react';\r\nimport './Navbar.css'\r\nimport Checkbox from '../utility/Checkbox';\r\nimport SteppedRangeSlider from '../utility/SteppedRangeSlider';\r\nimport RadioButtonGroup from '../utility/RadioButtonGroup';\r\n\r\ninterface VisualProps {\r\n    onChangeViz: () => void,\r\n    onChangeShowArrows: () => void,\r\n    disabled: boolean\r\n}\r\n\r\ninterface SpeedProps {\r\n    onChange: (value: number) => void,\r\n    initialSpeed: number\r\n}\r\n\r\ninterface SpeedState {\r\n    speedText: string\r\n}\r\n\r\ninterface AlgorithmProps {\r\n    onChangeDiagonals: (checked: boolean) => void,\r\n    onChangeBidirectional: (checked: boolean) => void\r\n    disabled: boolean\r\n}\r\n\r\ninterface HeuristicProps {\r\n    onClickManhattan: () => void,\r\n    onClickEuclidean: () => void,\r\n    onClickChebyshev: () => void,\r\n    onClickOctile: () => void,\r\n    disabled: boolean\r\n}\r\n\r\nconst SPEED_STEP = 2;\r\nconst SPEED_INITIAL = 2;\r\nconst MAX = 19;\r\n\r\nexport class VisualSettings extends React.Component<VisualProps>\r\n{\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Visualization</div>\r\n                <Checkbox defaultChecked={true} boxStyle='box'\r\n                          onChange={this.props.onChangeViz}>\r\n                    Show Frontier\r\n                </Checkbox>\r\n                <Checkbox defaultChecked={true} boxStyle='box'\r\n                          onChange={this.props.onChangeShowArrows}\r\n                          disabled={this.props.disabled}>\r\n                    Show Tree\r\n                </Checkbox>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class SpeedSettings extends React.Component<SpeedProps, SpeedState>\r\n{\r\n    constructor(props: SpeedProps) {\r\n        super(props);\r\n        this.state = {\r\n            speedText: String(this.props.initialSpeed)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback function to be called when slider is changed\r\n     * Call another callback and change text\r\n     * @param value\r\n     */\r\n    onChangeSpeed = (value: number) => {\r\n        const speed = SPEED_INITIAL + SPEED_STEP * value;\r\n        this.setState({\r\n            speedText: String(speed)\r\n        })\r\n        this.props.onChange(speed);\r\n    }\r\n\r\n    render() {\r\n        const options: JSX.Element[] = [];\r\n        for(let i = 1; i <= MAX; i++) {\r\n            options.push(<option key={'option ' + i}>{i}</option>);\r\n        }\r\n        return (\r\n            <div className='slider-container'>\r\n                <div className='slider-text'>\r\n                    Speed: <div className='speed-text'> {this.state.speedText} </div>\r\n                </div>\r\n                    <SteppedRangeSlider min={1} max={MAX} step={1}\r\n                                        default={(this.props.initialSpeed - SPEED_INITIAL) / SPEED_STEP}\r\n                                        sliderStyle='slider speed-slider'\r\n                                        onChange={this.onChangeSpeed}\r\n                />\r\n                <datalist id='step-list'>\r\n                    {options}\r\n                </datalist>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class AlgorithmSettings extends React.Component<AlgorithmProps>\r\n{\r\n    constructor(props: AlgorithmProps) {\r\n        super(props);\r\n        this.state = {\r\n            disabled: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Algorithm</div>\r\n                <Checkbox defaultChecked={true} boxStyle='box'\r\n                          onChange={this.props.onChangeDiagonals}>\r\n                    Allow Diagonals\r\n                </Checkbox>\r\n                <Checkbox defaultChecked={false} boxStyle='box'\r\n                          disabled={this.props.disabled}\r\n                          onChange={this.props.onChangeBidirectional}>\r\n                    Bidirectional\r\n                </Checkbox>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class HeuristicSettings extends React.Component<HeuristicProps>\r\n{\r\n    constructor(props: HeuristicProps) {\r\n        super(props);\r\n        this.state = {\r\n            disabled: false\r\n        }\r\n    }\r\n\r\n    disable = () => {\r\n        this.setState({\r\n            disabled: true\r\n        })\r\n    }\r\n\r\n    enable = () => {\r\n        this.setState({\r\n            disabled: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Heuristic</div>\r\n                <RadioButtonGroup boxStyle='box'\r\n                                  defaultChecked={1}\r\n                                  disabled={this.props.disabled}\r\n                                  onChange={[\r\n                                      this.props.onClickManhattan, this.props.onClickEuclidean,\r\n                                      this.props.onClickChebyshev, this.props.onClickOctile\r\n                                  ]}\r\n                >\r\n                    {[<span key='Manhattan'>Manhattan</span>, <span key='Euclidean'>Euclidean</span>,\r\n                        <span key='Chebyshev'>Chebyshev</span>, <span key='Octile<'>Octile</span>]}\r\n                </RadioButtonGroup>\r\n            </div>\r\n        )\r\n    }\r\n}","import PathfindingSettings, {getDefaultSettings} from './PathfindingSettings';\r\n\r\nclass SettingsManager\r\n{\r\n    settings: PathfindingSettings = getDefaultSettings();\r\n\r\n    changeAlgo = (algo: string) => {\r\n        this.settings.algorithm = algo;\r\n    }\r\n\r\n    changeVisualize = () => {\r\n        this.settings.visualizeAlg = !this.settings.visualizeAlg;\r\n    }\r\n\r\n    changeShowArrows = () => {\r\n        this.settings.showArrows = !this.settings.showArrows;\r\n    }\r\n\r\n    changeBidirectional = () => {\r\n        this.settings.bidirectional = !this.settings.bidirectional;\r\n    }\r\n\r\n    changeDiagonals = (checked: boolean) => {\r\n        this.settings.navigatorKey = checked ? 'asterisk' : 'plus';\r\n    }\r\n\r\n    changeSpeed = (value: number) => {\r\n        this.settings.delayInc = value;\r\n    }\r\n\r\n    changeManhattan = () => {\r\n        this.settings.heuristicKey = 'manhattan';\r\n    }\r\n\r\n    changeEuclidean = () => {\r\n        this.settings.heuristicKey = 'euclidean';\r\n    }\r\n\r\n    changeChebyshev = () => {\r\n        this.settings.heuristicKey = 'chebyshev';\r\n    }\r\n\r\n    changeOctile = () => {\r\n        this.settings.heuristicKey = 'octile';\r\n    }\r\n}\r\n\r\nexport default SettingsManager;","interface PathfindingSettings\r\n{\r\n    visualizeAlg: boolean,\r\n    showArrows: boolean,\r\n    delayInc: number,\r\n    algorithm: string,\r\n    heuristicKey: string,\r\n    navigatorKey: string,\r\n    bidirectional: boolean\r\n}\r\n\r\nexport function getDefaultSettings(): PathfindingSettings {\r\n    return {\r\n        visualizeAlg: true,\r\n        showArrows: true,\r\n        delayInc: 6,\r\n        algorithm: 'a*',\r\n        heuristicKey: 'euclidean',\r\n        navigatorKey: 'asterisk',\r\n        bidirectional: false\r\n    }\r\n}\r\n\r\nexport default PathfindingSettings;","import React, {RefObject} from 'react';\r\nimport TopBar from './navbar/TopBar';\r\nimport {VisualizeButton, SettingsButton} from './navbar/Buttons';\r\nimport {AlgorithmDropDown, ClearDropDown, MazeDropDown} from './navbar/DropDown';\r\nimport DraggablePanel from './utility/DraggablePanel';\r\nimport PathfindingVisualizer from './grid/PathfindingVisualizer';\r\nimport {VisualSettings, SpeedSettings, AlgorithmSettings, HeuristicSettings} from './navbar/SettingPanels';\r\nimport SettingsManager from './SettingsManager';\r\nimport PathfinderBuilder from '../pathfinding/algorithms/PathfinderBuilder';\r\nimport {MAZE, MAZE_HORIZONTAL_SKEW, MAZE_VERTICAL_SKEW, RANDOM_TERRAIN} from '../pathfinding/algorithms/TerrainGeneratorBuilder';\r\n\r\ninterface IProps {}\r\n\r\ninterface IState {\r\n    heuristicDisabled: boolean,\r\n    bidirectionalDisabled: boolean,\r\n    arrowsDisabled: boolean,\r\n\r\n    panelShow: boolean,\r\n\r\n    topMargin: number,\r\n\r\n    visualizing: boolean,\r\n    paused: boolean\r\n}\r\n\r\nclass PathfindingApp extends React.Component<IProps, IState>\r\n{\r\n    //expose grid to parent to connect to button siblings\r\n    private grid: RefObject<PathfindingVisualizer> = React.createRef();\r\n\r\n    private algDropDown: RefObject<AlgorithmDropDown> = React.createRef();\r\n    private clrDropDown: RefObject<ClearDropDown> = React.createRef();\r\n    private mazeDropDown: RefObject<MazeDropDown> = React.createRef();\r\n\r\n    private settingsManager: SettingsManager = new SettingsManager();\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            heuristicDisabled: false,\r\n            bidirectionalDisabled: false,\r\n            arrowsDisabled: false,\r\n            panelShow: false,\r\n            topMargin: 75,\r\n            visualizing: false,\r\n            paused: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('click', e => {\r\n            this.algDropDown.current!.hide();\r\n            this.clrDropDown.current!.hide();\r\n            this.mazeDropDown.current!.hide();\r\n        });\r\n    }\r\n\r\n    onClickAlgDrop = () => {\r\n        this.clrDropDown.current!.hide();\r\n        this.mazeDropDown.current!.hide();\r\n    }\r\n\r\n    onClickClrDrop = () => {\r\n        this.algDropDown.current!.hide();\r\n        this.mazeDropDown.current!.hide();\r\n    }\r\n\r\n    onClickMazeDrop = () => {\r\n        this.clrDropDown.current!.hide();\r\n        this.algDropDown.current!.hide();\r\n    }\r\n\r\n    changeVButtonColor = (visualizing: boolean) => {\r\n        this.setState({\r\n            visualizing: visualizing\r\n        })\r\n    }\r\n\r\n    toggleSettings = () => {\r\n        this.setState(prevState => ({\r\n            panelShow: !prevState.panelShow\r\n        }));\r\n    }\r\n\r\n    hideSettings = () => {\r\n        this.setState({\r\n            panelShow: false\r\n        });\r\n    }\r\n\r\n    changeAlgo = (algorithm: string) => {\r\n        this.setState({\r\n            heuristicDisabled: !PathfinderBuilder.usesHeuristic(algorithm),\r\n            bidirectionalDisabled: !PathfinderBuilder.hasBidirectional(algorithm),\r\n            arrowsDisabled: algorithm === 'dfs'\r\n        });\r\n        this.settingsManager.changeAlgo(algorithm);\r\n    }\r\n\r\n    doPathfinding = () => {\r\n        this.setState({\r\n            paused: false\r\n        });\r\n        this.grid.current!.doDelayedPathfinding();\r\n    }\r\n\r\n    pausePathfinding = () => {\r\n        this.setState({\r\n            paused: true\r\n        });\r\n        this.grid.current!.pausePathfinding();\r\n    }\r\n\r\n    resumePathfinding = () => {\r\n        this.setState({\r\n            paused: false\r\n        });\r\n        this.grid.current!.resumePathfinding();\r\n    }\r\n\r\n    clearPath = () => {\r\n        this.grid.current!.clearPath();\r\n        this.grid.current!.clearVisualizationChecked();\r\n    }\r\n\r\n    clearTiles = () => {\r\n        this.clearPath();\r\n        this.grid.current!.clearTilesChecked();\r\n    }\r\n\r\n    resetBoard = () => {\r\n        this.clearPath();\r\n        this.clearTiles();\r\n        this.grid.current!.resetPoints();\r\n    }\r\n\r\n    createMaze = () => {\r\n        this.grid.current!.createTerrain(MAZE);\r\n    }\r\n\r\n    createMazeVSkew = () => {\r\n        this.grid.current!.createTerrain(MAZE_VERTICAL_SKEW);\r\n    }\r\n\r\n    createMazeHSkew = () => {\r\n        this.grid.current!.createTerrain(MAZE_HORIZONTAL_SKEW);\r\n    }\r\n\r\n    createRandomTerrain = () => {\r\n        this.grid.current!.createTerrain(RANDOM_TERRAIN);\r\n    }\r\n\r\n    onChangeHeight = (height: number) => {\r\n        this.setState({\r\n            topMargin: height\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const mobile = isMobile();\r\n        const tileWidth =  mobile ? 47 : Math.round(window.screen.availWidth / 57);\r\n        if(mobile) {\r\n            this.settingsManager.changeSpeed(12);\r\n        }\r\n        return (\r\n            <div>\r\n                <DraggablePanel title='Grid Settings'\r\n                                show={this.state.panelShow}\r\n                                onClickXButton={this.hideSettings}\r\n                                width={350}\r\n                                height={430}\r\n                >\r\n                    <VisualSettings disabled={this.state.arrowsDisabled}\r\n                                    onChangeViz={this.settingsManager.changeVisualize}\r\n                                    onChangeShowArrows={this.settingsManager.changeShowArrows}\r\n                    />\r\n                    <SpeedSettings onChange={this.settingsManager.changeSpeed}\r\n                                   initialSpeed={this.settingsManager.settings.delayInc}\r\n                    />\r\n                    <AlgorithmSettings disabled={this.state.bidirectionalDisabled}\r\n                                       onChangeBidirectional={this.settingsManager.changeBidirectional}\r\n                                       onChangeDiagonals={this.settingsManager.changeDiagonals}\r\n                    />\r\n                    <HeuristicSettings disabled={this.state.heuristicDisabled}\r\n                                       onClickManhattan={this.settingsManager.changeManhattan}\r\n                                       onClickEuclidean={this.settingsManager.changeEuclidean}\r\n                                       onClickChebyshev={this.settingsManager.changeChebyshev}\r\n                                       onClickOctile={this.settingsManager.changeOctile}\r\n                    />\r\n                </DraggablePanel>\r\n                <TopBar onChangeHeight={this.onChangeHeight}>\r\n                    <a href='https://github.com/JosephPrichard/PathfinderReact' className='title'>\r\n                        Pathfinding Visualizer\r\n                    </a>\r\n                    <div className='top-container'>\r\n                        <AlgorithmDropDown ref={this.algDropDown}\r\n                                           onClick={this.onClickAlgDrop}\r\n                                           onChange={this.changeAlgo}\r\n                        />\r\n                        <VisualizeButton active={this.state.visualizing}\r\n                                         paused={this.state.paused}\r\n                                         onPause={this.pausePathfinding}\r\n                                         onResume={this.resumePathfinding}\r\n                                         onStartStop={this.doPathfinding}\r\n                        />\r\n                        <ClearDropDown ref={this.clrDropDown}\r\n                                       onClick={this.onClickClrDrop}\r\n                                       onClickTiles={this.clearTiles}\r\n                                       onClickPath={this.clearPath}\r\n                                       onClickReset={this.resetBoard}\r\n                        />\r\n                        <MazeDropDown ref={this.mazeDropDown}\r\n                                      onClick={this.onClickMazeDrop}\r\n                                      onClickMaze={this.createMaze}\r\n                                      onClickMazeHorizontal={this.createMazeHSkew}\r\n                                      onClickMazeVertical={this.createMazeVSkew}\r\n                                      onClickRandomTerrain={this.createRandomTerrain}\r\n                        />\r\n                        <SettingsButton onClick={this.toggleSettings}/>\r\n                    </div>\r\n                </TopBar>\r\n                <PathfindingVisualizer ref={this.grid}\r\n                                       onChangeVisualizing={this.changeVButtonColor}\r\n                                       topMargin={this.state.topMargin}\r\n                                       settings={this.settingsManager.settings}\r\n                                       tileWidth={tileWidth}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction isMobile() {\r\n    return /Android|webOS|iPhone|iPad|Mac|Macintosh|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n}\r\n\r\nexport default PathfindingApp;","import React from 'react';\nimport './App.css';\nimport PathfindingApp from './view/PathfindingApp';\n\nclass App extends React.Component\n{\n    render() {\n        return (\n            <PathfindingApp/>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n//reportWebVitals();\n"],"sourceRoot":""}