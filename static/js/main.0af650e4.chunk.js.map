{"version":3,"sources":["common/components/navbar/TopBar.tsx","common/components/navbar/Buttons.tsx","common/components/navbar/DropDown.tsx","common/components/navbar/DropDownComponents.tsx","common/components/panel/Checkbox.tsx","common/components/panel/SteppedRangeSlider.tsx","common/components/panel/RadioButtonGroup.tsx","common/components/navbar/SettingPanels.tsx","common/components/panel/DraggablePanel.tsx","common/components/grid/GridBackground.tsx","common/pathfinding/core/Components.ts","common/pathfinding/core/Grid.ts","common/components/grid/TileFg.tsx","common/components/grid/SolidFg.tsx","images/weight.svg","common/components/grid/WeightFg.tsx","common/components/grid/GridForeground.tsx","common/components/grid/StatsPanel.tsx","common/components/grid/GridStaticTiles.tsx","common/pathfinding/core/PlusNavigator.ts","common/pathfinding/core/Navigator.ts","common/pathfinding/algorithms/Heuristics.ts","common/pathfinding/algorithms/Pathfinder.ts","common/pathfinding/algorithms/Node.ts","common/pathfinding/structures/Hash.ts","common/pathfinding/structures/Heap.ts","common/pathfinding/algorithms/AStarPathfinder.ts","common/pathfinding/algorithms/BFSPathfinder.ts","common/pathfinding/structures/Stack.ts","common/pathfinding/algorithms/DFSPathfinder.ts","common/pathfinding/algorithms/BiAStarPathfinder.ts","common/pathfinding/algorithms/BiBFSPathfinder.ts","common/pathfinding/algorithms/PathfinderBuilder.ts","common/pathfinding/algorithms/TerrainGenerator.ts","common/pathfinding/algorithms/TerrainRandomGenerator.ts","common/pathfinding/algorithms/TerrainMazeGenerator.ts","common/pathfinding/algorithms/TerrainGeneratorBuilder.ts","common/utils/VirtualTimer.ts","common/components/grid/PathfindingVisualizer.tsx","images/react.png","common/components/PathfindingApp.tsx","common/utils/AppSettings.ts","App.tsx","index.tsx"],"names":["TopBar","bar","React","createRef","ref","this","style","width","window","screen","availWidth","className","props","children","Component","SYMBOL_COLOR","DIMENSION","VisualizeButton","height","rx","fill","points","x","active","onMouseDown","e","preventDefault","onClick","paused","onResume","onPause","xmlns","getResumeSymbol","getPauseSymbol","onStartStop","getStopSymbol","SettingsButton","DropDown","setState","up","display","stopPropagation","isHidden","show","hide","state","Clickable","tabIndex","onKeyPress","click","AlgorithmDropDown","text","fade","key","algText","onChange","toggle","nativeEvent","arrowClass","contentStyle","ClearDropDown","onClickPath","onClickTiles","onClickReset","MazeDropDown","onClickMaze","onClickMazeHorizontal","onClickMazeVertical","onClickRandomTerrain","TilesDropDown","cost","onClickTileType","Checkbox","checked","defaultChecked","prevState","type","disabled","boxStyle","defaultProps","SteppedRangeSlider","mouseUp","value","default","val","Number","currentTarget","list","min","max","step","sliderStyle","onInput","onMouseUp","onTouchEnd","onTouchStart","RadioButtonGroup","i","length","push","index","Children","toArray","radioButtons","VisualSettings","defaultShowArrows","onChangeShowArrows","disabledTree","defaultShowScores","onChangeShowScores","disabledScore","SpeedSettings","speedText","String","initialSpeed","speed","options","onChangeSpeed","id","AlgorithmSettings","defaultAlg","onChangeBidirectional","HeuristicSettings","heuristic","getIndex","defaultHeuristic","onClickManhattan","onClickEuclidean","onClickChebyshev","onClickOctile","DraggablePanel","draggable","draggableContainer","draggableContent","dragging","prevX","prevY","mouseDown","clientY","clientX","touchStart","touch","touches","changedTouches","mouseMove","drag","touchMove","top","left","document","addEventListener","container","current","offsetTop","offsetLeft","content","innerHeight","innerWidth","offsetHeight","offsetWidth","visibleStyle","minHeight","getPosition","renderDraggable","draggableStyle","title","onClickXButton","ARROW_COLOR","TILE_CLASS","clone","array","map","arr","slice","GridBackground","tileWidth","tileClass","lastAlgo","tilesX","tilesY","visualization","createEmptyViz","scores","createEmptyScores","arrows","y","row","f","g","h","generation","doVizGeneration","doScoreGeneration","generations","doArrowGeneration","renderViz","markerWidth","markerHeight","refX","refY","orient","settings","showArrows","renderArrows","offset","arrow","first","from","second","to","firstX","firstY","secondX","secondY","offsetX","offsetY","x1","y1","x2","y2","stroke","strokeWidth","markerEnd","tiles","point","viz","score","renderTile","color","backgroundColor","fontSize","showScores","tile","node","point1","point2","newArrow","a","indexOf","splice","createTileData","isSolid","pathCost","RectGrid","nodes","data","createEmptyGrid","solid","mutate","console","str","log","JSON","stringify","grid","mutateTile","get","TileFg","size","position","borderColor","SolidFg","doTileAnimation","tileSize","WeightFg","backgroundImage","Weight","ARROW_PATH_COLOR","pointsEqual","isControlKey","button","GridForeground","svg","tilePointer","drawing","erasing","draggingInitial","draggingGoal","disable","initialKey","goalKey","end","calcEndPointInView","path","initial","goal","Math","round","topMargin","getBoundingClientRect","bounds","getBoundingRect","onPress","onDrag","xCoordinate","yCoordinate","calculatePoint","isEmpty","drawTile","eraseTile","moveInitial","moveGoal","inBounds","mutateDefault","canMoveEndPoint","onTilesDragged","floor","renderEndTile","renderPath","onContextMenu","onMouseMove","onMouseLeave","onEndingEvent","onTouchMoveCapture","onTouchCancel","renderTilesTable","lines","renderPathArrow","renderWeightText","paddingTop","textAlign","cursor","StatsPanel","textLog","scrollTop","scrollHeight","time","toFixed","algorithm","readOnly","unselectable","onDrop","GridStaticTiles","renderTiles","PlusNavigator","getWidth","getHeight","b","manhattan","abs","euclidean","dx","dy","sqrt","octile","SQRT2","chebyshev","nullHeuristic","reconstructPath","bottomLeaf","reconstructPathReversed","reverse","parent","Pathfinder","navigator","recentSearch","Node","child","AStarNode","fScore","HashSet","undefined","HashTable","Heap","compare","elements","siftUp","peek","move","pop","siftDown","pos","swap","right","AStarPathfinder","func","heuristicFunc","p","getNavigator","getGrid","clearRecentSearch","openFrontier","closedSet","openSet","root","add","currentNode","currentPoint","currentKey","remove","has","addRecent","equals","neighbors","neighbor","neighborPoint","neighborKey","stepCost","neighborNode","addChild","BFSPathfinder","frontier","visited","shift","next","Stack","DFSPathfinder","BiAStarPathfinder","startOpenFrontier","startOpenSet","endOpenFrontier","endOpenSet","initialRoot","goalRoot","startCurrentNode","startCurrentPointKey","concat","doAStarExpansion","endCurrentNode","endCurrentPointKey","structures","endPoint","BiBFSPathfinder","startVisited","endVisited","startFrontier","endFrontier","doBFSExpansion","CREATE_NAVIGATOR","CREATE_HEURISTIC","CREATE_PATHFINDER","PathfinderBuilder","toLowerCase","Error","createHeuristic","createNavigator","createPathfinder","TerrainGenerator","ignore","shouldIgnore","TerrainRandomGenerator","tileData","topLeft","bottomRight","random","draw","getTerrain","divideWidthNoSkew","divideWidthHSkew","divideWidthVSkew","canDrawHole","getMidPoint","range","mid","getRand","TerrainMazeGenerator","slant","divideWidth","getSolid","divide","chamber","widthOf","heightOf","randX","toDraw","edgeBlocked","randY","drawArr","leftChamber","rightChamber","topChamber","bottomChamber","TerrainGeneratorBuilder","VirtualTimer","callback","countDown","timeout","timeStarted","timeRemaining","finished","Date","now","setTimeout","clearTimeout","calcLength","len","calcCost","PathfindingVisualizer","background","foreground","visualized","visualizing","visualTimeouts","wasPaused","mazeTile","clearPath","erasePath","w","outerWidth","availHeight","outerHeight","isPaused","pausePathfinding","resumePathfinding","nextProps","nextState","prevProps","changeTile","pause","resume","pathfinder","getPathfinder","findPath","getRecentGenerations","visualizeGenerations","addArrowGenerations","drawPath","setLastAlgo","enableAnimations","clearVisualization","toggleDisable","clear","onChangeVisualizing","promises","baseIncrement","delayInc","delay","generationSet","forEach","promise","Promise","resolve","visualizeGenerationAndArrows","all","then","disableAnimations","algorithmKey","bidirectional","hasBidirectional","makeBidirectional","setAlgorithm","setHeuristic","heuristicKey","setNavigator","navigatorKey","build","t0","performance","t2","getRecentNodes","getAlgorithmName","unshift","doPathfinding","mazeType","useMazeTile","clearTiles","newState","prevGrid","generator","setDimensions","setGeneratorType","setIgnorePoints","setTileData","generateTerrain","drawGrid","xEnd","yEnd","xFloor","yFloor","yDecimal","ceil","resetPoints","visualizeGeneration","addArrowGeneration","PathfindingApp","visualizer","algDropDown","clrDropDown","mazeDropDown","tilesDropDown","heuristicDisabled","bidirectionalDisabled","arrowsDisabled","scoreDisabled","panelShow","useIcon","mobile","test","userAgent","doDelayedPathfinding","clearVisualizationChecked","clearTilesChecked","createTerrain","usesHeuristic","usesWeights","icon","alt","src","Icon","hideSettings","changeShowArrows","changeShowScores","changeSpeed","changeBidirectional","changeManhattan","changeEuclidean","changeChebyshev","changeOctile","href","onClickAlgDrop","alg","changeAlgo","onClickClrDrop","resetBoard","onClickTilesDrop","onClickMazeDrop","createMaze","createMazeHSkew","createMazeVSkew","createRandomTerrain","toggleSettings","changeVButtonColor","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0af650e4.chunk.js","sourcesContent":["import React, {RefObject} from 'react';\r\n\r\nclass TopBar extends React.Component\r\n{\r\n    private bar: RefObject<HTMLDivElement> = React.createRef();\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                ref={this.bar}\r\n                style={{\r\n                    width: window.screen.availWidth\r\n                }}\r\n                className='top-navbar'\r\n            >\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TopBar;","import React from 'react';\r\n\r\ninterface VProps {\r\n    active: boolean,\r\n    paused: boolean,\r\n    onStartStop: ()  => void,\r\n    onPause: ()  => void,\r\n    onResume: ()  => void,\r\n}\r\n\r\ninterface ButtonProps {\r\n    onClick: ()  => void\r\n}\r\n\r\nconst SYMBOL_COLOR = 'rgb(230,230,230)';\r\nconst OFFSET = 14;\r\nconst DIMENSION = 47 - 2 * OFFSET;\r\n\r\nexport class VisualizeButton extends React.Component<VProps>\r\n{\r\n    getStopSymbol() {\r\n        return (\r\n            <rect\r\n                width={DIMENSION}\r\n                height={DIMENSION}\r\n                rx={4}\r\n                fill={SYMBOL_COLOR}\r\n            />\r\n        );\r\n    }\r\n\r\n    getResumeSymbol() {\r\n        const midY = DIMENSION / 2;\r\n        return (\r\n            <polygon\r\n                points={`${0},${0} ${0},${DIMENSION} ${DIMENSION},${midY}`}\r\n                className={'track round'}\r\n                fill={SYMBOL_COLOR}\r\n            />\r\n        );\r\n    }\r\n\r\n    getPauseSymbol() {\r\n        return (\r\n            <svg>\r\n                <rect\r\n                    width={DIMENSION/2.5}\r\n                    height={DIMENSION}\r\n                    rx={3}\r\n                    fill={SYMBOL_COLOR}\r\n                />\r\n                <rect\r\n                    width={DIMENSION/2.5}\r\n                    height={DIMENSION}\r\n                    x={0.2*DIMENSION + DIMENSION/2.5}\r\n                    rx={3}\r\n                    fill={SYMBOL_COLOR}\r\n                />\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        if(this.props.active) {\r\n            return (\r\n                <div className={'half-button-wrapper'}>\r\n                    <button\r\n                        onMouseDown={e => e.preventDefault()}\r\n                        className={'center half-button-left red-button half-viz-button'}\r\n                        onClick={this.props.paused ? this.props.onResume : this.props.onPause}\r\n                    >\r\n                        <svg\r\n                            xmlns='http://www.w3.org/2000/svg'\r\n                            className='svg-icon'\r\n                            width={DIMENSION}\r\n                            height={DIMENSION}\r\n                        >\r\n                            {this.props.paused ? this.getResumeSymbol() : this.getPauseSymbol()}\r\n                        </svg>\r\n                    </button>\r\n                    <button\r\n                        onMouseDown={e => e.preventDefault()}\r\n                        className={'center half-button-right red-button half-viz-button'}\r\n                        onClick={this.props.onStartStop}\r\n                    >\r\n                        <svg\r\n                            xmlns='http://www.w3.org/2000/svg'\r\n                            className='svg-icon'\r\n                            width={DIMENSION}\r\n                            height={DIMENSION}\r\n                        >\r\n                            {this.getStopSymbol()}\r\n                        </svg>\r\n                    </button>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <button\r\n                    onMouseDown={e => e.preventDefault()}\r\n                    className={'button green-button viz-button'}\r\n                    onClick={this.props.onStartStop}\r\n                >\r\n                    Visualize!\r\n                </button>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport class SettingsButton extends React.Component<ButtonProps>\r\n{\r\n    render() {\r\n        return (\r\n            <button\r\n                onMouseDown={e => e.preventDefault()}\r\n                className='button settings-button'\r\n                onClick={this.props.onClick}\r\n            >\r\n                Settings\r\n            </button>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport interface DropDownProps {\r\n    onClick: () => void,\r\n}\r\n\r\nexport interface DropDownState {\r\n    up: boolean,\r\n    display: string,\r\n    fade: string\r\n}\r\n\r\nabstract class DropDown<IProps extends DropDownProps, IState extends DropDownState>\r\n    extends React.Component<IProps, IState>\r\n{\r\n    protected constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    show() {\r\n        this.setState({\r\n            up: false,\r\n            display: 'block',\r\n        });\r\n    }\r\n\r\n    hide() {\r\n        this.setState({\r\n            display: 'none',\r\n            up: true,\r\n        });\r\n    }\r\n\r\n    toggle(e: Event) {\r\n        e.stopPropagation();\r\n        this.props.onClick();\r\n        if(this.isHidden()) {\r\n            this.show();\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    isHidden() {\r\n        return this.state.display === 'none';\r\n    }\r\n\r\n    contentStyle() {\r\n        return {\r\n            display: this.state.display\r\n        }\r\n    }\r\n}\r\n\r\nexport default DropDown;","import React from 'react';\r\nimport DropDown, {DropDownProps, DropDownState} from './DropDown';\r\n\r\ninterface AlgProps extends DropDownProps {\r\n    onChange: (alg: string) => void\r\n}\r\n\r\ninterface DropDownTextState extends DropDownState {\r\n    text: string,\r\n}\r\n\r\ninterface ClrProps extends DropDownProps {\r\n    onClickPath: () => void,\r\n    onClickTiles: () => void,\r\n    onClickReset: () => void;\r\n}\r\n\r\ninterface MazeProps extends DropDownProps {\r\n    onClickMaze: () => void,\r\n    onClickMazeHorizontal: () => void,\r\n    onClickMazeVertical: () => void,\r\n    onClickRandomTerrain: () => void\r\n}\r\n\r\ninterface TileProps extends DropDownProps {\r\n    onClickTileType: (cost: number) => void\r\n}\r\n\r\ninterface ClickableProps {\r\n    click: () => void;\r\n}\r\n\r\nclass Clickable extends React.Component<ClickableProps>\r\n{\r\n    render() {\r\n        return (\r\n            <div\r\n                tabIndex={0}\r\n                onKeyPress={this.props.click}\r\n                onClick={this.props.click}\r\n            >\r\n                {this.props.children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport class AlgorithmDropDown extends DropDown<AlgProps, DropDownTextState>\r\n{\r\n    constructor(props: AlgProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            text: 'A* Search',\r\n            fade: 'fade-in'\r\n        };\r\n    }\r\n\r\n    onChange(key: string, algText: string) {\r\n        this.props.onChange(key);\r\n        this.setState({\r\n            text: algText\r\n        });\r\n    }\r\n\r\n    arrowClass() {\r\n        return this.state.up ? 'arrowUp' : 'arrowDown';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                tabIndex={0}\r\n                className='alg-drop-down drop-down'\r\n                onMouseDown={e => e.preventDefault()}\r\n                onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='alg-drop-down-button drop-down-button'>\r\n                    <span className='alg-drop-down-text drop-down-text'>{this.state.text}</span>\r\n                    <span className={'alg-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div\r\n                    style={this.contentStyle()}\r\n                    className={this.state.fade + ' alg-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={() => this.onChange('a*', 'A* Search')}>A* Search</Clickable>\r\n                    <Clickable click={() => this.onChange('dijkstra', 'Dijkstra')}>Dijkstra's Algorithm</Clickable>\r\n                    <Clickable click={() => this.onChange('best-first', 'Best First')}>Best First Search</Clickable>\r\n                    <Clickable click={() => this.onChange('bfs', 'Breadth First')}>Breadth First Search</Clickable>\r\n                    <Clickable click={() => this.onChange('dfs', 'Depth First')}>Depth First Search</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class ClearDropDown extends DropDown<ClrProps, DropDownState>\r\n{\r\n    constructor(props: ClrProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            fade: 'fade-in'\r\n        };\r\n    }\r\n\r\n    arrowClass() {\r\n        return this.state.up ? 'arrowUpW' : 'arrowDownW';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                tabIndex={0}\r\n                className='clr-drop-down drop-down'\r\n                onMouseDown={e => e.preventDefault()}\r\n                onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='clr-drop-down-button drop-down-button'>\r\n                    <span className='clr-drop-down-text drop-down-text'>Reset</span>\r\n                    <span className={'clr-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div\r\n                    style={this.contentStyle()}\r\n                    className={this.state.fade + ' clr-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={this.props.onClickPath}>Clear Path</Clickable>\r\n                    <Clickable click={this.props.onClickTiles}>Clear Tiles</Clickable>\r\n                    <Clickable click={this.props.onClickReset}>Reset Grid</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class MazeDropDown extends DropDown<MazeProps, DropDownState>\r\n{\r\n    constructor(props: MazeProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            fade: 'fade-in'\r\n        };\r\n    }\r\n\r\n    arrowClass() {\r\n        return this.state.up ? 'arrowUpW' : 'arrowDownW';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                tabIndex={0} className='maze-drop-down drop-down'\r\n                onMouseDown={e => e.preventDefault()}\r\n                onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='maze-drop-down-button drop-down-button'>\r\n                    <span className='maze-drop-down-text drop-down-text'>Terrain</span>\r\n                    <span className={'clr-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div\r\n                    style={this.contentStyle()}\r\n                    className={this.state.fade + ' maze-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={this.props.onClickMaze}>Recursive Maze Division</Clickable>\r\n                    <Clickable click={this.props.onClickMazeHorizontal}>Horizontal Skewed Maze</Clickable>\r\n                    <Clickable click={this.props.onClickMazeVertical}>Vertical Skewed Maze</Clickable>\r\n                    <Clickable click={this.props.onClickRandomTerrain}>Random Terrain</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class TilesDropDown extends DropDown<TileProps, DropDownTextState>\r\n{\r\n    constructor(props: TileProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            fade: 'fade-in',\r\n            text: 'Wall [∞]'\r\n        };\r\n    }\r\n\r\n    arrowClass() {\r\n        return this.state.up ? 'arrowUpW' : 'arrowDownW';\r\n    }\r\n\r\n    onChange(cost: number, text: string) {\r\n        this.props.onClickTileType(cost);\r\n        this.setState({\r\n            text: text\r\n        }, () => this.props.onClickTileType(cost));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                tabIndex={0}\r\n                className='tiles-drop-down drop-down'\r\n                onMouseDown={e => e.preventDefault()}\r\n                onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='tiles-drop-down-button drop-down-button'>\r\n                    <span className='tiles-drop-down-text drop-down-text'>{this.state.text}</span>\r\n                    <span className={'clr-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div\r\n                    style={this.contentStyle()}\r\n                    className={this.state.fade + ' tiles-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={() => this.onChange(-1, 'Wall [∞]')}>Wall [∞]</Clickable>\r\n                    <Clickable click={() => this.onChange(2, 'Weight [2]')}>Weight [2]</Clickable>\r\n                    <Clickable click={() => this.onChange(3, 'Weight [3]')}>Weight [3]</Clickable>\r\n                    <Clickable click={() => this.onChange(5, 'Weight [5]')}>Weight [5]</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\ninterface IProps {\r\n    boxStyle: string,\r\n    defaultChecked: boolean,\r\n    disabled?: boolean,\r\n    onChange: (checked: boolean) => void\r\n}\r\n\r\ninterface IState {\r\n    checked: boolean\r\n}\r\n\r\nclass Checkbox extends React.Component<IProps,IState>\r\n{\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            checked: this.props.defaultChecked\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger callback and change checkbox state\r\n     */\r\n    onChange() {\r\n        this.setState(prevState => ({\r\n            checked: !prevState.checked\r\n        }), () => this.props.onChange(this.state.checked));\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <input\r\n                    checked={this.state.checked}\r\n                    type='checkbox'\r\n                    disabled={this.props.disabled}\r\n                    className={this.props.boxStyle}\r\n                    onKeyPress={() => this.onChange()}\r\n                    onChange={() => this.onChange()}\r\n                />\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Checkbox;","import React from 'react';\r\n\r\ninterface IProps {\r\n    min: number,\r\n    max: number,\r\n    default: number,\r\n    step: number,\r\n    sliderStyle: string,\r\n    onChange: (val: number) => void\r\n}\r\n\r\ninterface IState {\r\n    value: number\r\n}\r\n\r\nclass SteppedRangeSlider extends React.Component<IProps, IState>\r\n{\r\n    private mouseUp = true;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            value: this.props.default\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger callback when slider value is changed\r\n     * @param e\r\n     */\r\n    onChange(e: React.FormEvent<HTMLInputElement>) {\r\n        if(!this.mouseUp) { //to prevent firefox from resetting on release\r\n            const val = Number(e.currentTarget.value);\r\n            this.setState({\r\n                value: val\r\n            }, () => this.props.onChange(val));\r\n        }\r\n    }\r\n\r\n    onMouseUp() {\r\n        this.mouseUp = true;\r\n    }\r\n\r\n    onMouseDown() {\r\n        this.mouseUp = false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <input\r\n                type='range'\r\n                list='step-list'\r\n                value={this.state.value}\r\n                min={this.props.min}\r\n                max={this.props.max}\r\n                step={this.props.step}\r\n                className={this.props.sliderStyle}\r\n                onInput={e => this.onChange(e)}\r\n                onMouseUp={() => this.onMouseUp()}\r\n                onMouseDown={() => this.onMouseDown()}\r\n                onTouchEnd={() => this.onMouseUp()}\r\n                onTouchStart={() => this.onMouseDown()}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default SteppedRangeSlider;","import React from 'react';\r\n\r\ninterface IProps {\r\n    boxStyle: string,\r\n    defaultChecked: number,\r\n    disabled: boolean,\r\n    onChange: (() => void)[]\r\n}\r\n\r\ninterface IState {\r\n    checked: boolean[];\r\n}\r\n\r\nclass RadioButtonGroup extends React.Component<IProps, IState>\r\n{\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const checked: boolean[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            checked.push(i === this.props.defaultChecked);\r\n        }\r\n        this.state = {\r\n            checked: checked\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set all radio buttons to checked aside from the index\r\n     * of the one that was changed\r\n     * Trigger callback\r\n     * @param index\r\n     */\r\n    onChange (index: number) {\r\n        const checked: boolean[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            checked.push(i === index);\r\n        }\r\n        this.setState({\r\n            checked: checked\r\n        }, () => this.props.onChange[index]());\r\n    }\r\n\r\n    render() {\r\n        const children = React.Children.toArray(this.props.children);\r\n        const radioButtons: JSX.Element[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            radioButtons.push(\r\n                <div key={i}>\r\n                    <input\r\n                        checked={this.state.checked[i]}\r\n                        type='radio'\r\n                        disabled={this.props.disabled}\r\n                        className={this.props.boxStyle}\r\n                        onChange={() => this.onChange(i)}\r\n                    />\r\n                    {children[i]}\r\n                </div>\r\n            );\r\n        }\r\n        return radioButtons;\r\n    };\r\n}\r\n\r\nexport default RadioButtonGroup;","import React from 'react';\r\nimport Checkbox from '../panel/Checkbox';\r\nimport SteppedRangeSlider from '../panel/SteppedRangeSlider';\r\nimport RadioButtonGroup from '../panel/RadioButtonGroup';\r\n\r\ninterface VisualProps {\r\n    defaultShowArrows: boolean,\r\n    defaultShowScores: boolean,\r\n    onChangeShowArrows: () => void,\r\n    onChangeShowScores: () => void,\r\n    disabledTree: boolean,\r\n    disabledScore: boolean\r\n}\r\n\r\ninterface SpeedProps {\r\n    onChange: (value: number) => void,\r\n    initialSpeed: number\r\n}\r\n\r\ninterface SpeedState {\r\n    speedText: string\r\n}\r\n\r\ninterface AlgorithmProps {\r\n    defaultAlg: boolean,\r\n    onChangeBidirectional: (checked: boolean) => void,\r\n    disabled: boolean\r\n}\r\n\r\ninterface HeuristicProps {\r\n    defaultHeuristic: string\r\n    onClickManhattan: () => void,\r\n    onClickEuclidean: () => void,\r\n    onClickChebyshev: () => void,\r\n    onClickOctile: () => void,\r\n    disabled: boolean\r\n}\r\n\r\nconst SPEED_STEP = 5;\r\nconst SPEED_INITIAL = 10;\r\nconst MAX = 20;\r\n\r\nexport class VisualSettings extends React.Component<VisualProps>\r\n{\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Visualization</div>\r\n                <Checkbox\r\n                    defaultChecked={this.props.defaultShowArrows}\r\n                    boxStyle='box'\r\n                    onChange={this.props.onChangeShowArrows}\r\n                    disabled={this.props.disabledTree}\r\n                >\r\n                    Show Tree\r\n                </Checkbox>\r\n                <Checkbox\r\n                    defaultChecked={this.props.defaultShowScores}\r\n                    boxStyle='box'\r\n                    onChange={this.props.onChangeShowScores}\r\n                    disabled={this.props.disabledScore}\r\n                >\r\n                    Show Scores\r\n                </Checkbox>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class SpeedSettings extends React.Component<SpeedProps, SpeedState>\r\n{\r\n    constructor(props: SpeedProps) {\r\n        super(props);\r\n        this.state = {\r\n            speedText: String(this.props.initialSpeed)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback function to be called when slider is changed\r\n     * Call another callback and change text\r\n     * @param value\r\n     */\r\n    onChangeSpeed(value: number) {\r\n        const speed = SPEED_INITIAL + SPEED_STEP * value;\r\n        this.setState({\r\n            speedText: String(speed)\r\n        })\r\n        this.props.onChange(speed);\r\n    }\r\n\r\n    render() {\r\n        const options: JSX.Element[] = [];\r\n        for(let i = 1; i <= MAX; i++) {\r\n            options.push(<option key={'option ' + i}>{i}</option>);\r\n        }\r\n        return (\r\n            <div className='slider-container'>\r\n                <div className='slider-text'>\r\n                    Speed: <div className='speed-text'> {this.state.speedText} </div>\r\n                </div>\r\n                <SteppedRangeSlider\r\n                    min={1}\r\n                    max={MAX}\r\n                    step={1}\r\n                    default={(this.props.initialSpeed - SPEED_INITIAL) / SPEED_STEP}\r\n                    sliderStyle='slider speed-slider'\r\n                    onChange={(value: number) => this.onChangeSpeed(value)}\r\n                />\r\n                <datalist id='step-list'>\r\n                    {options}\r\n                </datalist>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class AlgorithmSettings extends React.Component<AlgorithmProps>\r\n{\r\n    constructor(props: AlgorithmProps) {\r\n        super(props);\r\n        this.state = {\r\n            disabled: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Algorithm</div>\r\n                <Checkbox\r\n                    defaultChecked={this.props.defaultAlg}\r\n                    boxStyle='box'\r\n                    disabled={this.props.disabled}\r\n                    onChange={this.props.onChangeBidirectional}\r\n                >\r\n                    Bidirectional\r\n                </Checkbox>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class HeuristicSettings extends React.Component<HeuristicProps>\r\n{\r\n    constructor(props: HeuristicProps) {\r\n        super(props);\r\n        this.state = {\r\n            disabled: false\r\n        }\r\n    }\r\n\r\n    disable() {\r\n        this.setState({\r\n            disabled: true\r\n        })\r\n    }\r\n\r\n    enable() {\r\n        this.setState({\r\n            disabled: false\r\n        })\r\n    }\r\n\r\n    getIndex(heuristic: string) {\r\n        const mapping: {[key: string]: number} = {\r\n            'manhattan': 0,\r\n            'euclidean': 1,\r\n            'chebyshev': 2,\r\n            'octile': 3\r\n        }\r\n        return mapping[heuristic];\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Heuristic</div>\r\n                <RadioButtonGroup\r\n                    boxStyle='box'\r\n                    defaultChecked={this.getIndex(this.props.defaultHeuristic)}\r\n                    disabled={this.props.disabled}\r\n                    onChange={[\r\n                        this.props.onClickManhattan, this.props.onClickEuclidean,\r\n                        this.props.onClickChebyshev, this.props.onClickOctile\r\n                    ]}\r\n                >\r\n                    {[\r\n                        <span key='Manhattan'>Manhattan</span>,\r\n                        <span key='Euclidean'>Euclidean</span>,\r\n                        <span key='Chebyshev'>Chebyshev</span>,\r\n                        <span key='Octile<'>Octile</span>\r\n                    ]}\r\n                </RadioButtonGroup>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {RefObject} from 'react';\r\n\r\ninterface IProps {\r\n    title: string,\r\n    show: boolean,\r\n    onClickXButton: () => void,\r\n    width: number,\r\n    height: number\r\n}\r\n\r\ninterface IState {\r\n    top: number,\r\n    left: number\r\n}\r\n\r\nclass DraggablePanel extends React.Component<IProps, IState>\r\n{\r\n    //refs are used to access native DOM\r\n    private draggable: RefObject<HTMLDivElement> = React.createRef();\r\n    private draggableContainer: RefObject<HTMLDivElement> = React.createRef();\r\n    private draggableContent: RefObject<HTMLDivElement> = React.createRef();\r\n\r\n    //stores previous mouse location and drag\r\n    private dragging = false;\r\n    private prevX = 0;\r\n    private prevY = 0;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            top: -1,\r\n            left: -1\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        //mouse\r\n        document.addEventListener('mouseup', e => {\r\n            this.mouseUp(e);\r\n        });\r\n        document.addEventListener('mousemove', e => {\r\n            this.mouseMove(e);\r\n        });\r\n        window.addEventListener('mouseleave', e => {\r\n            this.mouseUp(e);\r\n        });\r\n        //touch\r\n        document.addEventListener('touchend', () => {\r\n            this.dragging = false;\r\n        });\r\n        document.addEventListener('touchmove', e => {\r\n            this.touchMove(e);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Start drag and init prev mouse location when mouse is clicked on draggable\r\n     * @param e\r\n     */\r\n    mouseDown = (e: MouseEvent) => {\r\n        e.preventDefault();\r\n        this.prevY = e.clientY;\r\n        this.prevX = e.clientX;\r\n        this.dragging = true;\r\n    }\r\n\r\n    /**\r\n     * Start drag and init prev touch location when finger is clicked on draggable\r\n     * @param e\r\n     */\r\n    touchStart = (e: TouchEvent) => {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        this.prevY = touch.clientY;\r\n        this.prevX = touch.clientX;\r\n        this.dragging = true;\r\n    }\r\n\r\n    /**\r\n     * Called when mouse is risen on document stop drag\r\n     * @param e\r\n     */\r\n    mouseUp = (e: Event) => {\r\n        e.preventDefault();\r\n        this.dragging = false;\r\n    }\r\n\r\n    /**\r\n     * Called when the mouse is moved over the document to calculate the new position of\r\n     * the draggable canvas\r\n     * @param e\r\n     */\r\n    mouseMove = (e: MouseEvent) => {\r\n        this.drag(e.clientX, e.clientY);\r\n    }\r\n\r\n    /**\r\n     * Called when the touch is moved over the document to calculate the new position of\r\n     * the draggable canvas\r\n     * @param e\r\n     */\r\n    touchMove = (e: TouchEvent) => {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        this.drag(touch.clientX, touch.clientY);\r\n    }\r\n\r\n    /**\r\n     * Called when user drags over the document to move the panel\r\n     * @param clientX\r\n     * @param clientY\r\n     */\r\n    drag(clientX: number, clientY: number) {\r\n        if(this.dragging) {\r\n            const container = this.draggableContainer.current!;\r\n            let top = (container.offsetTop - (this.prevY - clientY))\r\n            let left = (container.offsetLeft - (this.prevX - clientX));\r\n            const content = this.draggableContent.current!;\r\n            const draggable = this.draggable.current!;\r\n            //stop drag if mouse goes out of bounds\r\n            if(clientY < 0 || clientY > window.innerHeight\r\n                || clientX < 0 || clientX > window.innerWidth) {\r\n                this.dragging = false;\r\n            }\r\n            //check if position is out of bounds and prevent the panel from being dragged there\r\n            if(top < 0) {\r\n                top = 0;\r\n            } else if (top > window.innerHeight - draggable.offsetHeight) {\r\n                top = window.innerHeight - draggable.offsetHeight;\r\n            }\r\n            if(left < -content.offsetWidth/2) {\r\n                left = -content.offsetWidth/2;\r\n            } else if(left > window.innerWidth - content.offsetWidth/2) {\r\n                left = window.innerWidth - content.offsetWidth/2;\r\n            }\r\n            //set new position\r\n            this.setState({\r\n                top: top,\r\n                left: left\r\n            });\r\n            //update previous pos\r\n            this.prevY = clientY;\r\n            this.prevX = clientX;\r\n        }\r\n    }\r\n\r\n    getPosition() {\r\n        const left = this.state.left;\r\n        const top = this.state.top;\r\n        if(left === -1 || top === -1) {\r\n            return {};\r\n        }\r\n        return {\r\n            left: left + 'px',\r\n            top: top + 'px',\r\n        };\r\n    }\r\n\r\n    visibleStyle()  {\r\n        return this.props.show ? 'block' : 'none';\r\n    }\r\n\r\n    draggableStyle() {\r\n        return {\r\n            width: this.props.width,\r\n            display: this.visibleStyle()\r\n        }\r\n    }\r\n\r\n    contentStyle() {\r\n        return {\r\n            width: this.props.width,\r\n            minHeight: this.props.height,\r\n            display: this.visibleStyle()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                ref={this.draggableContainer}\r\n                className='draggable-container'\r\n                style={this.getPosition()}\r\n            >\r\n                {this.renderDraggable()}\r\n                <div\r\n                    ref={this.draggableContent}\r\n                    style={this.contentStyle()}\r\n                    className='draggable-content'\r\n                >\r\n                    <div className='settings-general'>\r\n                        {this.props.children}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderDraggable() {\r\n        return (\r\n            <div\r\n                style={this.draggableStyle()}\r\n                className='draggable'\r\n                ref={this.draggable}\r\n                onMouseDown={e => this.mouseDown(e.nativeEvent)}\r\n                onTouchStart={e => this.touchStart(e.nativeEvent)}\r\n            >\r\n                <div className='draggable-title'>{this.props.title}</div>\r\n                <div\r\n                    className='x-button'\r\n                    tabIndex={0}\r\n                    onKeyPress={this.props.onClickXButton}\r\n                    onClick={this.props.onClickXButton}\r\n                    onMouseDown={e => {\r\n                        e.stopPropagation();\r\n                        e.preventDefault();\r\n                    }}\r\n                >\r\n                    <div className='x-text'>\r\n                        X\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DraggablePanel;","import React from 'react';\r\nimport {Node} from '../../pathfinding/algorithms/Node';\r\nimport {Point} from '../../pathfinding/core/Components';\r\nimport AppSettings from \"../../utils/AppSettings\";\r\nimport PathfinderBuilder from \"../../pathfinding/algorithms/PathfinderBuilder\";\r\n\r\nconst CLOSED_NODE = 'rgb(198, 237, 238)';\r\nconst OPEN_NODE = 'rgb(191, 248, 159)';\r\nconst ARROW_COLOR = 'rgb(153,153,153)';\r\nconst EMPTY_NODE = 'e';\r\nconst TILE_CLASS = 'tile';\r\nconst VIZ_TILE_CLASS = 'tile-viz';\r\n\r\nconst BASE_WIDTH = 27;\r\n\r\ninterface Score {\r\n    f: number,\r\n    g: number,\r\n    h: number\r\n}\r\n\r\ninterface Arrow {\r\n    to: Point,\r\n    from: Point\r\n}\r\n\r\ninterface IProps {\r\n    settings: AppSettings,\r\n    tileWidth: number,\r\n    tilesX: number,\r\n    tilesY: number\r\n}\r\n\r\ninterface IState {\r\n    visualization: string[][],\r\n    scores: Score[][],\r\n    arrows: Arrow[]\r\n}\r\n\r\n/**\r\n * Represents a visualization canvas for the background grid\r\n * Can be mutated using functions to change the state of the current visualization\r\n */\r\nclass GridBackground extends React.Component<IProps,IState>\r\n{\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n    private readonly tileWidth: number;\r\n\r\n    private tileClass: string = TILE_CLASS;\r\n\r\n    private lastAlgo: string = '';\r\n\r\n    /**\r\n     * Constructs a GridBackground with immutable height and width\r\n     * @param props\r\n     */\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.width = this.props.tilesX;\r\n        this.height = this.props.tilesY;\r\n        this.tileWidth = this.props.tileWidth;\r\n        this.state = {\r\n            visualization: this.createEmptyViz(),\r\n            scores: this.createEmptyScores(),\r\n            arrows: []\r\n        }\r\n    }\r\n\r\n    setLastAlgo(lastAlgo: string) {\r\n        this.lastAlgo = lastAlgo;\r\n    }\r\n\r\n    /**\r\n     * Create a new empty visualization canvas\r\n     */\r\n    createEmptyViz() {\r\n        const visualization: string[][] = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            const row: string[] = [];\r\n            for(let x = 0; x < this.width; x++) {\r\n                row.push(EMPTY_NODE);\r\n            }\r\n            visualization.push(row);\r\n        }\r\n        return visualization;\r\n    }\r\n\r\n    /**\r\n     * Set scores to be -1\r\n     */\r\n    createEmptyScores() {\r\n        const scores: Score[][] = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            const row: Score[] = [];\r\n            for(let x = 0; x < this.width; x++) {\r\n                row.push({\r\n                    f: -1,\r\n                    g: -1,\r\n                    h: -1\r\n                });\r\n            }\r\n            scores.push(row);\r\n        }\r\n        return scores;\r\n    }\r\n\r\n    /**\r\n     * Clear the visualization canvas and update UI\r\n     */\r\n    clear() {\r\n        this.setState({\r\n            visualization: this.createEmptyViz(),\r\n            arrows: []\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Perform a generation on a visualization array\r\n     * @param generation\r\n     * @param visualization\r\n     */\r\n    static doVizGeneration(generation: Node, visualization: string[][]) {\r\n        for(const node of generation.children) {\r\n            const point = node.tile.point;\r\n            visualization[point.y][point.x] = OPEN_NODE;\r\n        }\r\n        const point = generation.tile.point;\r\n        visualization[point.y][point.x] = CLOSED_NODE;\r\n        return visualization;\r\n    }\r\n\r\n    /**\r\n     * Perform a generation on a score array\r\n     * @param generation\r\n     * @param scores\r\n     */\r\n    static doScoreGeneration(generation: Node, scores: Score[][]) {\r\n        for(const node of generation.children) {\r\n            const point = node.tile.point;\r\n            scores[point.y][point.x] = node.score();\r\n        }\r\n        const point = generation.tile.point;\r\n        scores[point.y][point.x] = generation.score();\r\n        return scores;\r\n    }\r\n\r\n    /**\r\n     * Visualize generation and update UI\r\n     * @param generation\r\n     */\r\n    visualizeGeneration(generation: Node) {\r\n        this.setState(prevState => ({\r\n            visualization: GridBackground.doVizGeneration(\r\n                generation,\r\n                clone(prevState.visualization)\r\n            ),\r\n            scores: GridBackground.doScoreGeneration(\r\n                generation,\r\n                clone(prevState.scores)\r\n            )\r\n        }));\r\n    }\r\n\r\n    enableAnimations() {\r\n        this.tileClass = VIZ_TILE_CLASS;\r\n    }\r\n\r\n    disableAnimations() {\r\n        this.tileClass = TILE_CLASS;\r\n    }\r\n\r\n    /**\r\n     * Visualize generation array and update UI\r\n     * @param generations\r\n     */\r\n    visualizeGenerations(generations: Node[]) {\r\n        const visualization = this.createEmptyViz();\r\n        const scores = this.createEmptyScores();\r\n        for(const generation of generations) {\r\n            GridBackground.doVizGeneration(generation, visualization);\r\n            GridBackground.doScoreGeneration(generation, scores);\r\n        }\r\n        this.setState({\r\n            visualization: visualization,\r\n            scores: scores\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Perform an arrow generation on an arrow array\r\n     * @param generation\r\n     * @param arrows\r\n     */\r\n    static doArrowGeneration(generation: Node, arrows: Arrow[]) {\r\n        const point = generation.tile.point;\r\n        for(const node of generation.children) {\r\n            const childPoint = node.tile.point;\r\n            const newArrow = {\r\n                from: point,\r\n                to: childPoint,\r\n            };\r\n            //remove a duplicate arrow to indicate replacement\r\n            //in A* for example, we could have re-discovered a better path to a tile\r\n            for(let i = 0; i < arrows.length; i++) {\r\n                const a = arrows[i];\r\n                if(pointsEqual(a.to, newArrow.to)) {\r\n                    const index = arrows.indexOf(a);\r\n                    arrows.splice(index, 1);\r\n                    i--;\r\n                }\r\n            }\r\n            arrows.push(newArrow);\r\n        }\r\n        return arrows;\r\n    }\r\n\r\n    /**\r\n     * Add arrow generation without updating UI\r\n     * @param generation\r\n     */\r\n    addArrowGeneration(generation: Node) {\r\n        this.setState(prevState => ({\r\n            arrows: GridBackground.doArrowGeneration(\r\n                generation,\r\n                prevState.arrows.slice()\r\n            )\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Add arrow generations and update UI\r\n     * @param generations\r\n     */\r\n    addArrowGenerations(generations: Node[]) {\r\n        const arrows: Arrow[] = [];\r\n        for(const generation of generations) {\r\n            GridBackground.doArrowGeneration(generation, arrows)\r\n        }\r\n        this.setState({\r\n            arrows: arrows\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Visualize both generation and arrows and update UI\r\n     * @param generation\r\n     */\r\n    visualizeGenerationAndArrows(generation: Node) {\r\n        this.setState(prevState => ({\r\n            visualization: GridBackground.doVizGeneration(\r\n                generation,\r\n                clone(prevState.visualization)\r\n            ),\r\n            scores: GridBackground.doScoreGeneration(\r\n                generation,\r\n                clone(prevState.scores)\r\n            ),\r\n            arrows: GridBackground.doArrowGeneration(\r\n                generation,\r\n                prevState.arrows.slice()\r\n            )\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        // console.timeEnd('time');\r\n        // console.time('time');\r\n        return (\r\n            <div>\r\n                <div className='bg'>\r\n                    {this.renderViz()}\r\n                </div>\r\n                <svg\r\n                    xmlns='http://www.w3.org/2000/svg'\r\n                    className='bg-grid'\r\n                >\r\n                    <defs>\r\n                        <marker\r\n                            id='arrowhead'\r\n                            markerWidth='3'\r\n                            markerHeight='3'\r\n                            refX='0'\r\n                            refY='1.5'\r\n                            orient='auto'\r\n                            fill={ARROW_COLOR}\r\n                        >\r\n                            <polygon points='0 0, 3 1.5, 0 3'/>\r\n                        </marker>\r\n                    </defs>\r\n                    {this.props.settings.showArrows ?\r\n                        this.renderArrows() :\r\n                        []\r\n                    }\r\n                </svg>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderArrows() {\r\n        const width = this.tileWidth;\r\n        const offset = width/2;\r\n        const arrows: JSX.Element[] = [];\r\n        for(let i = 0; i < this.state.arrows.length; i++) {\r\n            //calculate arrow position and dimensions\r\n            const arrow = this.state.arrows[i];\r\n            const first = arrow.from;\r\n            const second = arrow.to;\r\n            const firstX = first.x * width;\r\n            const firstY = first.y * width;\r\n            const secondX = second.x * width;\r\n            const secondY = second.y * width;\r\n            const offsetX = (secondX - firstX)/4;\r\n            const offsetY = (secondY - firstY)/4;\r\n            arrows.push(\r\n                <line\r\n                    key={'arrow ' + i}\r\n                    x1={firstX + offset + offsetX}\r\n                    y1={firstY + offset + offsetY}\r\n                    x2={secondX + offset - offsetX}\r\n                    y2={secondY + offset - offsetY}\r\n                    stroke={ARROW_COLOR}\r\n                    strokeWidth={2 * this.tileWidth/BASE_WIDTH}\r\n                    className='line-arrow'\r\n                    markerEnd='url(#arrowhead)'\r\n                />\r\n            );\r\n        }\r\n        return arrows;\r\n    }\r\n\r\n    renderViz() {\r\n        const tiles: JSX.Element[][] = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            const row: JSX.Element[] = [];\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                };\r\n                const viz = this.state.visualization[point.y][point.x];\r\n                const score = this.state.scores[point.y][point.x];\r\n                if(viz !== EMPTY_NODE) {\r\n                    row.push(\r\n                        this.renderTile(point, viz, score)\r\n                    );\r\n                }\r\n            }\r\n            tiles.push(row);\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    renderTile(point: Point, color: string, score: Score) {\r\n        const width = this.tileWidth;\r\n        const top = point.y * width;\r\n        const left = point.x * width;\r\n        const style = {\r\n            backgroundColor: color,\r\n            width: width + 'px',\r\n            height: width + 'px',\r\n            top: top,\r\n            left: left,\r\n            fontSize: 10 * width/BASE_WIDTH\r\n        };\r\n        const text = this.props.settings.showScores ?\r\n            <div key={point.x + ',' + point.y + 'score'}>\r\n                <div className='f-text'>\r\n                    {score.f === -1 ? '' : score.f}\r\n                </div>\r\n            </div> :\r\n            ''\r\n        return (\r\n            <div\r\n                key={point.x + ',' + point.y}\r\n                style={style}\r\n                className={this.tileClass}\r\n            >\r\n                {text}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction clone<T>(array: T[][]) {\r\n    return array.map(\r\n        (arr) => arr.slice()\r\n    );\r\n}\r\n\r\nfunction pointsEqual(point1: Point, point2: Point) {\r\n    return point1.x === point2.x && point1.y === point2.y;\r\n}\r\n\r\nexport default GridBackground;","/**\r\n * Represents a point in 2d space\r\n * Immutable\r\n */\r\nexport interface Point\r\n{\r\n    readonly x: number;\r\n    readonly y: number;\r\n}\r\n\r\n/**\r\n * Represents the data inside a tile\r\n * Solid tiles cannot be passed while non solid ones can\r\n * pathCost stores how expensive it is to travel to the tile if it isn't solid\r\n * Immutable\r\n */\r\nexport interface TileData\r\n{\r\n    readonly pathCost: number;\r\n    readonly isSolid: boolean;\r\n}\r\n\r\n/**\r\n * Represents a tile on the Grid\r\n */\r\nexport interface Tile\r\n{\r\n    data: TileData;\r\n    readonly point: Point;\r\n}\r\n\r\n/**\r\n * Simple function to create a solid tile with path cost of 1\r\n * @param isSolid\r\n */\r\nexport function createTileData(isSolid: boolean): TileData {\r\n    return {\r\n        pathCost: 1,\r\n        isSolid: isSolid\r\n    }\r\n}\r\n\r\n","import {createTileData, Point, Tile, TileData} from './Components';\r\n\r\nexport interface Grid\r\n{\r\n    getWidth(): number;\r\n    getHeight(): number;\r\n    inBounds(point: Point): boolean;\r\n    get(point: Point): Tile;\r\n    isSolid(point: Point): boolean;\r\n    mutate(point: Point, data: TileData): void;\r\n    mutateTile(tile: Tile): void;\r\n    mutateDefault(point: Point, solid: boolean): void;\r\n    output(console: Console): void;\r\n    getJson(): string;\r\n    walkable(point: Point): boolean;\r\n    isEmpty(point: Point): boolean;\r\n    clone(): Grid;\r\n}\r\n\r\n/**\r\n * A square grid system that stores nodes in a matrix\r\n * Uses an x,y system where x corresponds to column of the matrix,\r\n * and y corresponds to the row of the matrix\r\n * Tile should be treated like graph nodes\r\n */\r\nclass RectGrid implements Grid\r\n{\r\n    private readonly tiles: Tile[][];\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    /**\r\n     * Constructs a grid either with empty or predefined tiles\r\n     * @param width of the grid\r\n     * @param height of grid\r\n     */\r\n    constructor(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.tiles = createEmptyGrid(width, height);\r\n    }\r\n\r\n    getWidth() {\r\n        return this.width;\r\n    }\r\n\r\n    getHeight() {\r\n        return this.height;\r\n    }\r\n\r\n    /**\r\n     * Checks if a given point is in bounds\r\n     * Other functions assume arguments are in bounds, this should be used\r\n     * if there is reasonable doubt about whether a point is in bounds\r\n     * @param point, to check\r\n     */\r\n    inBounds(point: Point) {\r\n        return point.x >= 0 && point.x < this.width && point.y >= 0 && point.y < this.height;\r\n    }\r\n\r\n    /**\r\n     * Retrieves a defensive tile for a position\r\n     * Defensive copy prevents this object from being mutated without calling\r\n     * a mutate function\r\n     * @param point, point to get\r\n     */\r\n    get(point: Point) {\r\n        return {\r\n            point: this.tiles[point.y][point.x].point,\r\n            data: this.tiles[point.y][point.x].data\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Mutates a position's tile to solid or non solid\r\n     * @param point, point to mutate\r\n     * @param data to mutate to\r\n     */\r\n    mutate(point: Point, data: TileData) {\r\n        this.tiles[point.y][point.x].data = data;\r\n    }\r\n\r\n    /**\r\n     * Mutates a a tile by point\r\n     * @param tile to mutate\r\n     */\r\n    mutateTile(tile: Tile) {\r\n        this.tiles[tile.point.y][tile.point.x].data = tile.data;\r\n    }\r\n\r\n    /**\r\n     * Mutate tile at point\r\n     * @param point to mutate at\r\n     * @param solid to determine what default tile to create\r\n     */\r\n    mutateDefault(point: Point, solid: boolean) {\r\n        this.mutate(\r\n            point, createTileData(solid)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Outputs the grid to a console\r\n     * @param console\r\n     */\r\n    output(console: Console) {\r\n        for(let y = 0; y < this.height; y++) {\r\n            let str = '';\r\n            for(let x = 0; x < this.width; x++) {\r\n                str += this.tiles[y][x].data.isSolid + ', ';\r\n            }\r\n            console.log(str);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns json of tiles\r\n     */\r\n    getJson() {\r\n        return JSON.stringify(this.tiles);\r\n    }\r\n\r\n    /**\r\n     * Determines if a tile can be walked on\r\n     * @param point\r\n     */\r\n    walkable(point: Point) {\r\n        return !this.tiles[point.y][point.x].data.isSolid;\r\n    }\r\n\r\n    /**\r\n     * Determines if a tile isSolid\r\n     * @param point\r\n     */\r\n    isSolid(point: Point) {\r\n        return this.tiles[point.y][point.x].data.isSolid;\r\n    }\r\n\r\n    /**\r\n     * Determines if a tile is \"empty\"\r\n     *  Meaning it isn't solid and it has a pathCost of 1\r\n     * @param point\r\n     */\r\n    isEmpty(point: Point) {\r\n        const data = this.tiles[point.y][point.x].data;\r\n        return data.pathCost === 1 && !data.isSolid\r\n    }\r\n\r\n    clone() {\r\n        const grid = new RectGrid(this.width, this.height);\r\n        for(let y = 0; y < grid.height; y++) {\r\n            for(let x = 0; x < grid.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                }\r\n                grid.mutateTile(this.get(point));\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a 2d matrix of empty nodes\r\n */\r\nfunction createEmptyGrid(width: number, height: number) {\r\n    const nodes: Tile[][] = [];\r\n    for(let y = 0; y < height; y++) {\r\n        const row: Tile[] = [];\r\n        for(let x = 0; x < width; x++) {\r\n            row.push({\r\n                point: {\r\n                    x: x, y: y\r\n                },\r\n                data: createTileData(false)\r\n            });\r\n        }\r\n        nodes.push(row);\r\n    }\r\n    return nodes;\r\n}\r\n\r\nexport default RectGrid;","import React from 'react';\r\nimport {Point} from '../../pathfinding/core/Components';\r\n\r\ninterface TileProps {\r\n    tileWidth: number,\r\n    point: Point,\r\n    color: string,\r\n}\r\n\r\nclass TileFg extends React.Component<TileProps>\r\n{\r\n    render() {\r\n        const size = this.props.tileWidth\r\n        const top = this.props.point.y * this.props.tileWidth;\r\n        const left = this.props.point.x * this.props.tileWidth;\r\n        return (\r\n            <div\r\n                style={{\r\n                    position: 'absolute',\r\n                    width: size,\r\n                    height: size,\r\n                    top: top,\r\n                    left: left,\r\n                    backgroundColor: this.props.color,\r\n                    display: 'block',\r\n                    borderColor: this.props.color\r\n                }}\r\n                className={'svg-tile tile-fg'}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default TileFg;","import React from 'react';\r\nimport {Point} from '../../pathfinding/core/Components';\r\n\r\ninterface SolidProps {\r\n    tileSize: number,\r\n    point: Point,\r\n    doTileAnimation: boolean\r\n}\r\n\r\nclass SolidFg extends React.Component<SolidProps>\r\n{\r\n    private readonly doTileAnimation: boolean;\r\n\r\n    constructor(props: SolidProps) {\r\n        super(props)\r\n        this.doTileAnimation = this.props.doTileAnimation;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                style={{\r\n                    position: 'absolute',\r\n                    left: this.props.point.x * this.props.tileSize,\r\n                    top: this.props.point.y * this.props.tileSize,\r\n                    width: this.props.tileSize,\r\n                    height: this.props.tileSize\r\n                }}\r\n                className={this.doTileAnimation ? 'solid-animation' : 'solid'}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default SolidFg;","export default __webpack_public_path__ + \"static/media/weight.cae5804e.svg\";","import React from 'react';\r\nimport {Point} from '../../pathfinding/core/Components';\r\nimport Weight from '../../../images/weight.svg';\r\n\r\ninterface WeightProps {\r\n    tileSize: number,\r\n    point: Point,\r\n    doTileAnimation: boolean\r\n}\r\n\r\nclass WeightFg extends React.Component<WeightProps>\r\n{\r\n    private readonly doTileAnimation: boolean;\r\n\r\n    constructor(props: WeightProps) {\r\n        super(props)\r\n        this.doTileAnimation = this.props.doTileAnimation;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                style={{\r\n                    left: this.props.point.x * this.props.tileSize,\r\n                    top: this.props.point.y * this.props.tileSize,\r\n                    width: this.props.tileSize,\r\n                    height: this.props.tileSize,\r\n                    backgroundImage: `url(${Weight})`,\r\n                    position: 'absolute'\r\n                }}\r\n                className={this.doTileAnimation ? 'weight-animation' : 'weight'}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeightFg;","import React, {RefObject} from 'react';\r\nimport {createTileData, Point, Tile, TileData} from '../../pathfinding/core/Components';\r\nimport RectGrid, {Grid} from '../../pathfinding/core/Grid';\r\nimport TileFg from './TileFg';\r\nimport SolidFg from './SolidFg';\r\nimport WeightFg from './WeightFg';\r\n\r\ninterface IProps {\r\n    tileSize: number,\r\n    tilesX: number,\r\n    tilesY: number,\r\n    onTilesDragged: () => void,\r\n    topMargin: number\r\n}\r\n\r\ninterface IState {\r\n    grid: Grid,\r\n    initial: Point,\r\n    goal: Point,\r\n    path: Tile[]\r\n}\r\n\r\nconst INITIAL_COLOR = 'rgb(131, 217, 52)';\r\nconst GOAL_COLOR = 'rgb(203, 75, 14)';\r\nconst ARROW_PATH_COLOR = 'rgb(73, 79, 250)';\r\n\r\nconst BASE_WIDTH = 27;\r\n\r\n/**\r\n * Represents actual tile contents of the Grid itself\r\n * Will re-render itself when given a new Grid\r\n * Binds listeners to allow user to \"draw\" on the grid foreground\r\n */\r\nclass GridForeground extends React.Component<IProps,IState>\r\n{\r\n    private svg: RefObject<SVGSVGElement> = React.createRef();\r\n\r\n    private tilePointer: TileData;\r\n\r\n    private drawing: boolean = false;\r\n    private erasing: boolean = false;\r\n    private draggingInitial: boolean = false;\r\n    private draggingGoal: boolean = false;\r\n    private disable: boolean = false;\r\n\r\n    private doTileAnimation: boolean = true;\r\n\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    private initialKey: number = 0;\r\n    private goalKey: number = 0;\r\n\r\n    /**\r\n     * Constructs a GridForeground with immutable height and width\r\n     * @param props\r\n     */\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.width = this.props.tilesX;\r\n        this.height = this.props.tilesY;\r\n        const end = this.calcEndPointInView();\r\n        this.tilePointer = createTileData(true);\r\n        this.state = {\r\n            grid: new RectGrid(this.width, this.height),\r\n            path: [],\r\n            initial: {\r\n                x: ((end.x)/3) >> 0,\r\n                y: ((end.y)/3) >> 0\r\n            },\r\n            goal: {\r\n                x: ((2*(end.x)/3) >> 0) - 1,\r\n                y: ((2*(end.y)/3) >> 0) - 1\r\n            }\r\n        }\r\n    }\r\n\r\n    changeTile(data: TileData) {\r\n        this.tilePointer = data;\r\n    }\r\n\r\n    calcEndPointInView() {\r\n        const xEnd = Math.round(window.innerWidth / this.props.tileSize);\r\n        const yEnd = Math.round((window.innerHeight - this.props.topMargin - 30) / this.props.tileSize);\r\n        return {\r\n            x: xEnd, y: yEnd\r\n        }\r\n    }\r\n\r\n    toggleDisable() {\r\n        this.disable = !this.disable;\r\n    }\r\n\r\n    getBoundingRect() {\r\n        return this.svg.current!.getBoundingClientRect();\r\n    }\r\n\r\n    mouseDown(e: MouseEvent) {\r\n        e.preventDefault();\r\n        const bounds = this.getBoundingRect();\r\n        this.onPress(e.clientX - bounds.left, e.clientY - bounds.top, e.button);\r\n    }\r\n\r\n    mouseUp(e: MouseEvent) {\r\n        e.preventDefault();\r\n        if(isControlKey(e.button)) {\r\n            this.draggingGoal = false;\r\n            this.draggingInitial = false;\r\n            this.drawing = false;\r\n            this.erasing = false;\r\n        }\r\n    }\r\n\r\n    mouseMove(e: MouseEvent) {\r\n        const bounds = this.getBoundingRect();\r\n        this.onDrag(e.clientX - bounds.left, e.clientY - bounds.top);\r\n    }\r\n\r\n    touchStart(e: TouchEvent) {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        const bounds = this.getBoundingRect();\r\n        this.onPress(touch.clientX - bounds.left, touch.clientY - bounds.top, 0);\r\n    }\r\n\r\n    touchMove(e: TouchEvent) {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        const bounds = this.getBoundingRect();\r\n        this.onDrag(touch.clientX - bounds.left, touch.clientY - bounds.top);\r\n    }\r\n\r\n    onEndingEvent(e: Event) {\r\n        e.preventDefault();\r\n        this.draggingGoal = false;\r\n        this.draggingInitial = false;\r\n        this.drawing = false;\r\n        this.erasing = false;\r\n    }\r\n\r\n    /**\r\n     * Responds to the event thrown at screen coordinates on press\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     * @param button\r\n     */\r\n    onPress(xCoordinate: number, yCoordinate: number, button: number) {\r\n        const point = this.calculatePoint(xCoordinate,yCoordinate);\r\n        if(isControlKey(button)) {\r\n            if(pointsEqual(point, this.state.initial)) {\r\n                this.draggingInitial = true;\r\n            } else if(pointsEqual(point, this.state.goal)) {\r\n                this.draggingGoal = true;\r\n            } else if(!this.disable) {\r\n                if(this.state.grid.isEmpty(point)) {\r\n                    this.drawing = true;\r\n                    this.drawTile(point);\r\n                } else {\r\n                    this.erasing = true;\r\n                    this.eraseTile(point);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Responds to the event thrown at screen coordinates on drag/move\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     */\r\n    onDrag(xCoordinate: number, yCoordinate: number) {\r\n        const point = this.calculatePoint(xCoordinate,yCoordinate);\r\n        if(this.draggingInitial) {\r\n            this.moveInitial(point);\r\n        } else if(this.draggingGoal) {\r\n            this.moveGoal(point);\r\n        } else if(!pointsEqual(point, this.state.initial)\r\n            && !pointsEqual(point, this.state.goal) && !this.disable)\r\n        {\r\n            if(this.drawing) {\r\n                this.drawTile(point);\r\n            } else if(this.erasing) {\r\n                this.eraseTile(point);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw an entire new grid on the foreground with disabled animations\r\n     * @param grid\r\n     */\r\n    drawGrid(grid: Grid) {\r\n        this.doTileAnimation = false;\r\n        this.setState({\r\n            grid: grid\r\n        }, () => this.doTileAnimation = true)\r\n    }\r\n\r\n    /**\r\n     * Draw tile at point\r\n     * @param point\r\n     */\r\n    drawTile(point: Point) {\r\n        const grid = this.state.grid.clone();\r\n        if(grid.inBounds(point)) {\r\n            grid.mutateTile({\r\n                point: point,\r\n                data: this.tilePointer\r\n            });\r\n        }\r\n        this.setState({\r\n            grid: grid\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if a node is visualized, then changes the tile to empty if it isn't\r\n     * @param point\r\n     */\r\n    eraseTile(point: Point) {\r\n        const grid = this.state.grid.clone();\r\n        if(grid.inBounds(point)) {\r\n            grid.mutateDefault(point, false);\r\n        }\r\n        this.setState({\r\n            grid: grid\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clear grid in state\r\n     */\r\n    clearTiles() {\r\n        const grid = this.state.grid.clone();\r\n        for(let y = 0; y < this.height; y++) {\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                }\r\n                grid.mutateDefault(point, false);\r\n            }\r\n        }\r\n        this.setState({\r\n            grid: grid\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Moves initial to a new point\r\n     * @param point\r\n     */\r\n    moveInitial(point: Point) {\r\n        if(this.canMoveEndPoint(point)) {\r\n            this.initialKey++;\r\n            this.setState({\r\n                initial: point\r\n            }, () => this.props.onTilesDragged());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves goal to a new point\r\n     * @param point\r\n     */\r\n    moveGoal(point: Point) {\r\n        if(this.canMoveEndPoint(point)) {\r\n            this.goalKey++;\r\n            this.setState({\r\n                goal: point\r\n            }, () => this.props.onTilesDragged());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if we can move any of the end points (goal or initial) to that point\r\n     * @param point\r\n     */\r\n    canMoveEndPoint(point: Point) {\r\n        return this.state.grid.inBounds(point)\r\n            && this.state.grid.isEmpty(point)\r\n            && !pointsEqual(this.state.initial, point)\r\n            && !pointsEqual(this.state.goal, point)\r\n            && !this.disable;\r\n    }\r\n\r\n    /**\r\n     * Draw a path onto the grid\r\n     * @param path\r\n     */\r\n    drawPath(path: Tile[]) {\r\n        this.setState({\r\n            path: path.slice()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Erase path from the grid\r\n     */\r\n    erasePath() {\r\n        this.setState({\r\n            path: []\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Converts real screen x,y coordinates into\r\n     * a 2d point position on the grid\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     */\r\n    calculatePoint(xCoordinate: number, yCoordinate: number) {\r\n        return {\r\n            x: Math.floor(xCoordinate/this.props.tileSize),\r\n            y: Math.floor(yCoordinate/this.props.tileSize)\r\n        }\r\n    }\r\n\r\n    resetPoints() {\r\n        this.initialKey++;\r\n        this.goalKey++;\r\n        const end = this.calcEndPointInView();\r\n        this.setState({\r\n            initial: {\r\n                x: ((end.x)/3) >> 0,\r\n                y: ((end.y)/3) >> 0\r\n            },\r\n            goal: {\r\n                x: ((2*(end.x)/3) >> 0) - 1,\r\n                y: ((2*(end.y)/3) >> 0) - 1\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        // console.timeEnd('time');\r\n        // console.time('time');\r\n        return (\r\n            <div>\r\n                <div className='endpoint-tiles-table'>\r\n                    {this.renderEndTile(this.state.initial, INITIAL_COLOR,'initial' + this.initialKey)}\r\n                    {this.renderEndTile(this.state.goal, GOAL_COLOR,'goal' + this.goalKey)}\r\n                </div>\r\n                <svg\r\n                    ref={this.svg}\r\n                    xmlns='http://www.w3.org/2000/svg'\r\n                    className='arrow-grid'\r\n                >\r\n                    <defs>\r\n                        <marker\r\n                            id='arrowhead-path'\r\n                            markerWidth='3'\r\n                            markerHeight='3'\r\n                            refX='0'\r\n                            refY='1.5'\r\n                            orient='auto'\r\n                            fill={ARROW_PATH_COLOR}\r\n                        >\r\n                            <polygon points='0 0, 3 1.5, 0 3'/>\r\n                        </marker>\r\n                    </defs>\r\n                    {this.renderPath()}\r\n                </svg>\r\n                <div\r\n                    className='tiles-table'\r\n                    onContextMenu={e => e.preventDefault()}\r\n                    onMouseDown={e => this.mouseDown(e.nativeEvent)}\r\n                    onMouseUp={e => this.mouseUp(e.nativeEvent)}\r\n                    onMouseMove={e => this.mouseMove(e.nativeEvent)}\r\n                    onMouseLeave={e => this.onEndingEvent(e.nativeEvent)}\r\n                    onTouchStart={e => this.touchStart(e.nativeEvent)}\r\n                    onTouchMoveCapture={e => this.touchMove(e.nativeEvent)}\r\n                    onTouchEnd={e => this.onEndingEvent(e.nativeEvent)}\r\n                    onTouchCancel={e => this.onEndingEvent(e.nativeEvent)}\r\n                >\r\n                    {this.renderTilesTable()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderPath() {\r\n        const lines: JSX.Element[] = [];\r\n        for(let i = 0; i < this.state.path.length-1; i++) {\r\n            const first = this.state.path[i].point;\r\n            const second = this.state.path[i+1].point;\r\n            lines.push(this.renderPathArrow(i, first, second));\r\n        }\r\n        return lines;\r\n    }\r\n\r\n    renderPathArrow(index: number, first: Point, second: Point) {\r\n        const width = this.props.tileSize;\r\n        const offset = width/2;\r\n        const firstX = first.x * width;\r\n        const firstY = first.y * width;\r\n        const secondX = second.x * width;\r\n        const secondY = second.y * width;\r\n        const offsetX = (secondX - firstX)/4;\r\n        const offsetY = (secondY - firstY)/4;\r\n        return (\r\n            <line\r\n                key={'path ' + index}\r\n                x1={firstX + offset + offsetX}\r\n                y1={firstY + offset + offsetY}\r\n                x2={secondX + offset - offsetX}\r\n                y2={secondY + offset - offsetY}\r\n                stroke={ARROW_PATH_COLOR}\r\n                strokeWidth={2 * this.props.tileSize/BASE_WIDTH}\r\n                className='line'\r\n                markerEnd='url(#arrowhead-path)'\r\n            />\r\n        );\r\n    }\r\n\r\n    renderTilesTable() {\r\n        const tiles: JSX.Element[] = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                }\r\n                const cost = this.state.grid.get(point).data.pathCost;\r\n                if(this.state.grid.isSolid(point)) {\r\n                    //render a solid tile div\r\n                    tiles.push(\r\n                        <SolidFg\r\n                            key={x + ',' + y}\r\n                            point={point}\r\n                            tileSize={this.props.tileSize}\r\n                            doTileAnimation={this.doTileAnimation}\r\n                        />\r\n                    );\r\n                } else if(cost > 1) {\r\n                    //render a weight svg\r\n                    tiles.push(\r\n                        <WeightFg\r\n                            key={x + ',' + y}\r\n                            point={point}\r\n                            tileSize={this.props.tileSize}\r\n                            doTileAnimation={this.doTileAnimation}\r\n                        />\r\n                    );\r\n                    //render a div containing the cost as text\r\n                    tiles.push(\r\n                        this.renderWeightText(\r\n                            point,\r\n                            cost,\r\n                            x + ',' + y + ' text'\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    renderWeightText(point: Point, cost: number, key: string) {\r\n        return (\r\n            <div\r\n                key={key}\r\n                style={{\r\n                    left: point.x * this.props.tileSize,\r\n                    top: point.y * this.props.tileSize,\r\n                    width: this.props.tileSize,\r\n                    height: this.props.tileSize,\r\n                    position: 'absolute',\r\n                    color: 'white',\r\n                    fontSize: this.props.tileSize / 2.1,\r\n                    paddingTop: this.props.tileSize / 3.70,\r\n                    textAlign: 'center',\r\n                    cursor: 'default'\r\n                }}\r\n            >\r\n                {cost}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderEndTile(point: Point, color: string, key: string) {\r\n        return (\r\n            <TileFg\r\n                key={key}\r\n                point={point}\r\n                tileWidth={this.props.tileSize}\r\n                color={color}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction pointsEqual(point1: Point, point2: Point) {\r\n    return point1.x === point2.x && point1.y === point2.y;\r\n}\r\n\r\nfunction isControlKey(button: number) {\r\n    //right or left mouse\r\n    return button === 0 || button === 2;\r\n}\r\n\r\nexport default GridForeground;","import React, {RefObject} from 'react';\r\n\r\ninterface IProps {\r\n    algorithm: string,\r\n    length: number,\r\n    cost: number,\r\n    time: number,\r\n    nodes: number\r\n}\r\n\r\nclass StatsPanel extends React.Component<IProps>\r\n{\r\n    private readonly textLog: RefObject<HTMLTextAreaElement> = React.createRef();\r\n\r\n    componentDidUpdate() {\r\n        this.textLog.current!.scrollTop = this.textLog.current!.scrollHeight;\r\n    }\r\n\r\n    render() {\r\n        const time = precise(this.props.time);\r\n        const text = this.props.algorithm === '' ? '' :\r\n            this.props.algorithm +\r\n            ' visited ' +\r\n            this.props.nodes +\r\n            ' nodes in ' +\r\n            time +\r\n            ' ms. Path length = ' +\r\n            this.props.length +\r\n            '. Path cost = ' +\r\n            this.props.cost +\r\n            '. ';\r\n        return(\r\n            <textarea\r\n                tabIndex={-1}\r\n                ref={this.textLog}\r\n                readOnly={true}\r\n                className='stats-text-area no-select'\r\n                value={text}\r\n                unselectable={'on'}\r\n                onDrop={() => false}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction precise(x: number) {\r\n    return x.toFixed(2);\r\n}\r\n\r\nexport default StatsPanel;","import React from 'react';\r\nimport {Point} from '../../pathfinding/core/Components';\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    tilesX: number,\r\n    tilesY: number\r\n}\r\n\r\n/**\r\n * A component for a grid with specific width and height proportions\r\n */\r\nclass GridStaticTiles extends React.Component<IProps>\r\n{\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n    private readonly tileWidth: number;\r\n\r\n    /**\r\n     * Constructs a GridBackground with immutable height and width\r\n     * @param props\r\n     */\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.width = this.props.tilesX;\r\n        this.height = this.props.tilesY;\r\n        this.tileWidth = this.props.tileWidth;\r\n    }\r\n\r\n    //should only render once, and never again\r\n    componentDidUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='bg'>\r\n                    {this.renderTiles()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderTiles() {\r\n        const tiles: JSX.Element[][] = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            const row: JSX.Element[] = [];\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                };\r\n                row.push(\r\n                    this.renderTile(point)\r\n                );\r\n            }\r\n            tiles.push(row);\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    renderTile(point: Point) {\r\n        const width = this.tileWidth;\r\n        const top = point.y * this.tileWidth;\r\n        const left = point.x * this.tileWidth;\r\n        const style = {\r\n            backgroundColor: 'white',\r\n            width: width + 'px',\r\n            height: width + 'px',\r\n            top: top,\r\n            left: left\r\n        };\r\n        return (\r\n            <div\r\n                key={point.x + ',' + point.y}\r\n                style={style}\r\n                className='tile'\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default GridStaticTiles;","import {Point, Tile} from './Components';\r\nimport Navigator, {UNIT} from './Navigator';\r\n\r\n/**\r\n * Concretion of a Plus Navigator for a grid\r\n * Allows movement akin to a 'plus' symbol\r\n */\r\nclass PlusNavigator extends Navigator\r\n{\r\n    /**\r\n     * Adds the neighbors of a point to the left, right, top and down\r\n     * @param point\r\n     */\r\n    neighbors(point: Point) {\r\n        const tiles: Tile[] = [];\r\n        if(point.x + UNIT < this.grid.getWidth()) {\r\n            const tile = this.grid.get({\r\n                x: point.x + UNIT,\r\n                y: point.y\r\n            })\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.y + UNIT < this.grid.getHeight()) {\r\n            const tile = this.grid.get({\r\n                x: point.x,\r\n                y: point.y + UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.x - UNIT >= 0) {\r\n            const tile = this.grid.get({\r\n                x: point.x - UNIT,\r\n                y: point.y\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.y - UNIT >= 0) {\r\n            const tile = this.grid.get({\r\n                x: point.x,\r\n                y: point.y - UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    /**\r\n     * Step cost function that works by getting the pathCost stored in the grid\r\n     * from one point a to b\r\n     * @param a\r\n     * @param b to point to travel to\r\n     */\r\n    cost(a: Point, b: Point) {\r\n        return this.grid.get(b).data.pathCost;\r\n    }\r\n\r\n    getType() {\r\n        return 'plus';\r\n    }\r\n}\r\n\r\nexport default PlusNavigator;","import {Grid} from './Grid';\r\nimport {Point, Tile} from './Components';\r\n\r\nexport const UNIT = 1; //number of tiles we can move at once\r\n\r\n/**\r\n * Describes an abstract navigator for a grid\r\n * Provides graph-like traversal for the grid\r\n * Determines where we can travel to from a certain point,\r\n * whether we have reached a destination, and the cost to\r\n * travel to a certain point\r\n */\r\nabstract class Navigator\r\n{\r\n    protected readonly grid: Grid;\r\n\r\n    constructor(grid: Grid) {\r\n        this.grid = grid;\r\n    }\r\n\r\n    getGrid() {\r\n        return this.grid;\r\n    }\r\n\r\n    /**\r\n     * Goal check function: Checks if two points are equal\r\n     * @param a\r\n     * @param b\r\n     */\r\n    equals(a: Point, b: Point) {\r\n        return a.x === b.x && a.y === b.y;\r\n    }\r\n\r\n    /**\r\n     * Step cost function from a to b\r\n     * @param a\r\n     * @param b to point to travel to\r\n     */\r\n    abstract cost(a: Point, b: Point): number;\r\n\r\n    /**\r\n     * Neighbors function: Gets the available neighbors for a point in a grid we can make\r\n     * in a given move\r\n     * @param point\r\n     */\r\n    abstract neighbors(point: Point): Tile[];\r\n\r\n    abstract getType(): string;\r\n}\r\n\r\nexport default Navigator;","import {Point} from '../core/Components';\r\n\r\nexport type HeuristicFunc = (a: Point, b: Point) => number;\r\n\r\nexport function manhattan(a: Point, b: Point) {\r\n    const dx = Math.abs(a.x - b.x) ;\r\n    const dy = Math.abs(a.y - b.y);\r\n    return dx + dy;\r\n}\r\n\r\nexport function euclidean(a: Point, b: Point) {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n}\r\n\r\nexport function octile(a: Point, b: Point) {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.SQRT2 * Math.min(dx, dy) + Math.abs(dx - dy);\r\n}\r\n\r\nexport function chebyshev(a: Point, b: Point) {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.max(dx, dy);\r\n}\r\n\r\nexport function nullHeuristic() {\r\n    return 0;\r\n}","import {Point, Tile} from '../core/Components';\r\nimport Navigator from '../core/Navigator';\r\nimport {Node} from './Node';\r\n\r\n/**\r\n * Pathfinder performs algorithms operations on the grid\r\n * Uses the navigator rank and expand nodes\r\n */\r\nabstract class Pathfinder\r\n{\r\n    protected recentSearch: Node[] = [];\r\n    protected navigator: Navigator;\r\n\r\n    constructor(navigator: Navigator) {\r\n        this.navigator = navigator;\r\n    }\r\n\r\n    setNavigator(navigator: Navigator) {\r\n        this.navigator = navigator;\r\n    }\r\n\r\n    getNavigator() {\r\n        return this.navigator;\r\n    }\r\n\r\n    getRecentNodes() {\r\n        return this.recentSearch.length;\r\n    }\r\n\r\n    clearRecentSearch() {\r\n        this.recentSearch = [];\r\n    }\r\n\r\n    getRecentGenerations() {\r\n        return this.recentSearch.slice();\r\n    }\r\n\r\n    protected addRecent(node: Node) {\r\n        this.recentSearch.push(node);\r\n    }\r\n\r\n    abstract getAlgorithmName(): string;\r\n\r\n    /**\r\n     * Finds the best path between initial and goal on the grid\r\n     * and returns it in an array\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    abstract findPath(initial: Point, goal: Point): Tile[];\r\n}\r\n\r\n/**\r\n * Reconstructs the path from a tree, given the bottomLeaf, and\r\n * returns the shortest path in an array\r\n * @param bottomLeaf bottom of the tree to start from\r\n */\r\nexport function reconstructPath(bottomLeaf: Node) {\r\n    return reconstructPathReversed(bottomLeaf).reverse();\r\n}\r\n\r\n/**\r\n * Reconstructs the path from a tree, given the bottomLeaf, and\r\n * returns the shortest path in an array\r\n * @param bottomLeaf bottom of the tree to start from\r\n */\r\nexport function reconstructPathReversed(bottomLeaf: Node) {\r\n    const path: Tile[] = [];\r\n    while(bottomLeaf.parent !== null) {\r\n        path.push(bottomLeaf.tile);\r\n        bottomLeaf = bottomLeaf.parent;\r\n    }\r\n    return path;\r\n}\r\n\r\nexport default Pathfinder;","import {Tile} from '../core/Components';\r\n\r\n/**\r\n * Represents a search Tree Node\r\n */\r\nexport class Node\r\n{\r\n    parent: Node | null = null; //parent node\r\n    readonly children: Node[] = [];\r\n    readonly tile: Tile; //stores a graph node\r\n\r\n    constructor(tile: Tile) {\r\n        this.tile = tile;\r\n    }\r\n\r\n    addChild(child: Node) {\r\n        child.parent = this;\r\n        this.children.push(child);\r\n    }\r\n\r\n    /**\r\n     * Some nodes don't have scores. returns -1 if the node is un-scored\r\n     */\r\n    score() {\r\n        return {\r\n            f: -1,\r\n            g: -1,\r\n            h: -1\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Represents an heuristic weighted aStar search tree node\r\n */\r\nexport class AStarNode extends Node\r\n{\r\n    readonly g: number; //path cost\r\n    readonly fScore: number; //heuristic\r\n\r\n    constructor(tile: Tile, g: number, fScore: number) {\r\n        super(tile);\r\n        this.g = g;\r\n        this.fScore = fScore;\r\n    }\r\n\r\n    f() {\r\n        return this.fScore;\r\n    }\r\n\r\n    /**\r\n     * Gets scores for the node in a readable format\r\n     */\r\n    score() {\r\n        return {\r\n            f: Math.round(this.f()),\r\n            g: Math.round(this.g),\r\n            h: Math.round(this.f() - this.g)\r\n        }\r\n    }\r\n}\r\n","import {Point} from '../core/Components';\r\n\r\n/**\r\n * A simple data structure that keeps track of whether keys have been added to it\r\n */\r\nexport class HashSet\r\n{\r\n    private map: {[key: string]: boolean | undefined} = {};\r\n\r\n    add(key: string) {\r\n        this.map[key] = true;\r\n    }\r\n\r\n    remove(key: string) {\r\n        this.map[key] = undefined;\r\n    }\r\n\r\n    has(key: string) {\r\n        return this.map[key] !== undefined;\r\n    }\r\n\r\n    clear() {\r\n        this.map = {};\r\n    }\r\n}\r\n\r\n/**\r\n * A simple data structure that stores a type at a key\r\n */\r\nexport class HashTable<Value>\r\n{\r\n    private map: {[key: string]: Value | undefined} = {};\r\n\r\n    add(key: string, data: Value) {\r\n        this.map[key] = data;\r\n    }\r\n\r\n    remove(key: string) {\r\n        this.map[key] = undefined;\r\n    }\r\n\r\n    get(key: string) {\r\n        return this.map[key];\r\n    }\r\n\r\n    has(key: string) {\r\n        return this.map[key] !== undefined;\r\n    }\r\n\r\n    clear() {\r\n        this.map = {};\r\n    }\r\n}\r\n\r\n/**\r\n * Serialize point into a unique string\r\n * @param point\r\n */\r\nexport function stringify(point: Point) {\r\n    return 'x' + point.x + 'y' + point.y;\r\n}","/**\r\n * A compare function to determine if a is 'better' (deserves a higher position) than b\r\n */\r\nexport type Comparator<E> = (a: E, b: E) => boolean\r\n\r\n/**\r\n * Minimalist Implementation of the heap data structure as an array\r\n */\r\nclass Heap<E>\r\n{\r\n    private elements: E[] = [];\r\n    readonly compare: Comparator<E>;\r\n\r\n    constructor(compare: Comparator<E>) {\r\n        this.compare = compare;\r\n    }\r\n\r\n    /**\r\n     * Returns the size of the heap\r\n     */\r\n    getSize() {\r\n        return this.elements.length;\r\n    }\r\n\r\n    /**\r\n     * Checks if heap is empty\r\n     */\r\n    isEmpty() {\r\n        return this.elements.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Add a new element to the heap\r\n     * @param e\r\n     */\r\n    push(e: E) {\r\n        this.elements.push(e);\r\n        this.siftUp(this.elements.length-1); //last element\r\n    }\r\n\r\n    /**\r\n     * Returns the top of the heap without removing it\r\n     * Fails if heap is empty\r\n     */\r\n    peek() {\r\n        return this.elements[0];\r\n    }\r\n\r\n    /**\r\n     * Returns the top of the heap and removes it\r\n     * Fails if heap is empty\r\n     */\r\n    pop() {\r\n        const val = this.peek();\r\n        this.move(this.elements.length - 1, 0);\r\n        this.elements.pop();\r\n        this.siftDown(0);\r\n        return val;\r\n    }\r\n\r\n    /**\r\n     * Clear the heap\r\n     */\r\n    clear() {\r\n        this.elements = [];\r\n    }\r\n\r\n    /**\r\n     * Sifts a new element that is out of order up to the right position\r\n     * @param pos of new element\r\n     */\r\n    private siftUp(pos: number) {\r\n        let parent = ((pos - 1) / 2) >> 0; //integer division\r\n        while(parent >= 0) {\r\n            //if the current position is better than parent\r\n            if(this.compare(this.elements[pos], this.elements[parent])) {\r\n                //then current position with parent and move to next\r\n                this.swap(pos, parent);\r\n                pos = parent;\r\n                parent = ((pos - 1) / 2) >> 0;\r\n            } else {\r\n                //otherwise stop\r\n                parent = -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sifts a new element that is out of order down to the right position\r\n     * @param pos of new element\r\n     */\r\n    private siftDown(pos: number) {\r\n        const left = 2 * pos + 1;\r\n        const right = 2 * pos + 2;\r\n        //stop if the children are out of bounds\r\n        if(left >= this.elements.length) {\r\n            return;\r\n        }\r\n        //find the better child\r\n        const child = (right >= this.elements.length || this.compare(this.elements[left], this.elements[right]))\r\n            ? left : right;\r\n        //continues to sift down if the child is better than the current position\r\n        if(this.compare(this.elements[child], this.elements[pos])) {\r\n            this.swap(child, pos);\r\n            this.siftDown(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Internal move function\r\n     * @param from\r\n     * @param to\r\n     */\r\n    private move(from: number, to: number) {\r\n        this.elements[to] = this.elements[from];\r\n    }\r\n\r\n    /**\r\n     * Internal swap function\r\n     * @param a\r\n     * @param b\r\n     */\r\n    private swap(a: number, b: number) {\r\n        let val = this.elements[a];\r\n        this.elements[a] = this.elements[b];\r\n        this.elements[b] = val;\r\n    }\r\n}\r\n\r\nexport default Heap;","import Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {euclidean, HeuristicFunc} from './Heuristics';\r\nimport {AStarNode} from './Node';\r\nimport {Point} from '../core/Components';\r\nimport Navigator from '../core/Navigator';\r\nimport {HashSet, HashTable, stringify} from '../structures/Hash';\r\nimport Heap from '../structures/Heap';\r\n\r\nclass AStarPathfinder extends Pathfinder\r\n{\r\n    private readonly heuristicFunc: HeuristicFunc = (a: Point, b: Point) => euclidean(a,b);\r\n    private readonly p: number; //tie breaker\r\n\r\n    constructor(navigator: Navigator, func?: HeuristicFunc) {\r\n        super(navigator);\r\n        const grid = this.getNavigator().getGrid();\r\n        //minimum cost of taking one step / expected maximum path length\r\n        this.p = 1/(grid.getWidth() * grid.getHeight());\r\n        if(func !== undefined) {\r\n            this.heuristicFunc = func;\r\n        }\r\n    }\r\n\r\n    getAlgorithmName() {\r\n        return 'A*';\r\n    }\r\n\r\n    /**\r\n     * Performs aStar algorithm on the grid given an initial and goal point\r\n     * Always returns the shortest path, and performs well on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point) {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const openFrontier = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const closedSet = new HashSet();\r\n        const openSet = new HashTable<number>();\r\n        const root = new AStarNode(\r\n            grid.get(initial), 0, 0\r\n        );\r\n        openFrontier.push(root);\r\n        openSet.add(stringify(initial), root.g);\r\n        while (!openFrontier.isEmpty()) {\r\n            const currentNode = openFrontier.pop();\r\n            const currentPoint = currentNode.tile.point;\r\n            const currentKey = stringify(currentPoint);\r\n            openSet.remove(currentKey);\r\n            if(closedSet.has(currentKey)) {\r\n                continue;\r\n            }\r\n            closedSet.add(currentKey);\r\n            this.addRecent(currentNode);\r\n            if (this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            for (const neighbor of this.navigator.neighbors(currentPoint)) {\r\n                const neighborPoint = neighbor.point;\r\n                const neighborKey = stringify(neighborPoint);\r\n                if(closedSet.has(neighborKey)) {\r\n                    continue;\r\n                }\r\n                const g = currentNode.g + this.stepCost(currentPoint, neighborPoint);\r\n                const f = g + this.heuristic(neighborPoint, goal);\r\n                if (!openSet.has(neighborKey) || g < openSet.get(neighborKey)!) {\r\n                    const neighborNode = new AStarNode(\r\n                        neighbor, g, f\r\n                    );\r\n                    currentNode.addChild(neighborNode);\r\n                    openFrontier.push(neighborNode);\r\n                    openSet.add(neighborKey, neighborNode.g);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Heuristic function used to estimate distance between points a and b\r\n     * Includes tie breaker to prevent exploring lots of identical paths\r\n     * @param a\r\n     * @param b\r\n     */\r\n    heuristic(a: Point, b: Point) {\r\n        return this.heuristicFunc(a, b) * (1 + this.p);\r\n    }\r\n\r\n    /**\r\n     * The step-cost function to be used, calculating the cost from\r\n     * currentPoint to neighborPoint. Uses the stepCost function provided by the\r\n     * navigator by default but can be overridden\r\n     * @param currentPoint\r\n     * @param neighborPoint\r\n     */\r\n    stepCost(currentPoint: Point, neighborPoint: Point) {\r\n        return this.navigator.cost(currentPoint, neighborPoint);\r\n    }\r\n}\r\n\r\nexport default AStarPathfinder;","import Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {Node} from './Node';\r\nimport {Point} from '../core/Components';\r\nimport {HashSet, stringify} from '../structures/Hash';\r\n\r\nclass BFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName() {\r\n        return 'Breadth First Search';\r\n    }\r\n\r\n    /**\r\n     * Implementation of BFS to find the shortest path from initial to point\r\n     * Doesn't always return the shortest path, and performs poorly on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point) {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const frontier: Node[] = []; //fifo, stores nodes on the frontier\r\n        const visited = new HashSet();\r\n        const root = new Node(grid.get(initial));\r\n        frontier.push(root); //enqueue\r\n        visited.add(stringify(initial));\r\n        while(frontier.length !== 0) { //not empty\r\n            const currentNode = frontier.shift()!; //dequeue\r\n            const currentPoint = currentNode.tile.point;\r\n            this.addRecent(currentNode);\r\n            if(this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            for(const neighbor of this.navigator.neighbors(currentPoint)) {\r\n                const neighborKey = stringify(neighbor.point);\r\n                if(!visited.has(neighborKey)) {\r\n                    const neighborNode = new Node(neighbor);\r\n                    currentNode.addChild(neighborNode);\r\n                    frontier.push(neighborNode); //enqueue\r\n                    visited.add(neighborKey);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default BFSPathfinder;","/**\r\n * Stack node\r\n */\r\nclass Node<E>\r\n{\r\n    next: Node<E> | null = null;\r\n    data: E;\r\n\r\n    constructor(data: E) {\r\n        this.data = data;\r\n    }\r\n}\r\n\r\n/**\r\n * Minimalist Implementation of the stack data structure\r\n */\r\nclass Stack<E>\r\n{\r\n    private top: Node<E> | null = null;\r\n    private size: number = 0;\r\n\r\n    peek() {\r\n        return this.top != null ? this.top.data : undefined;\r\n    }\r\n\r\n    push(e: E) {\r\n        const node = new Node(e);\r\n        node.next = this.top;\r\n        this.top = node;\r\n        this.size++;\r\n    }\r\n\r\n    pop() {\r\n        const top = this.peek();\r\n        if(this.top != null) {\r\n            this.top = this.top.next;\r\n            this.size--;\r\n        }\r\n        return top;\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.size === 0;\r\n    }\r\n\r\n    getSize() {\r\n        return this.size;\r\n    }\r\n}\r\n\r\nexport default Stack;","import Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {Node} from './Node';\r\nimport {Point} from '../core/Components';\r\nimport {HashSet, stringify} from '../structures/Hash';\r\nimport Stack from '../structures/Stack';\r\n\r\nclass DFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName() {\r\n        return 'Depth First Search';\r\n    }\r\n\r\n    /**\r\n     * Calls DFS between a start and goal point, will typically not find the 'Best' path,\r\n     * and will instead find the best path capable for the algorithm\r\n     * As this algorithm is non optimal it should only be used for educational purposes\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point) {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const root = new Node(grid.get(initial));\r\n        const frontier = new Stack<Node>();\r\n        frontier.push(root);\r\n        const visited = new HashSet();\r\n        while(!frontier.isEmpty()) {\r\n            const currentNode = frontier.pop()!;\r\n            const currentPoint = currentNode.tile.point;\r\n            visited.add(stringify(currentPoint));\r\n            this.addRecent(currentNode);\r\n            if(this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            const neighbors = this.navigator.neighbors(currentPoint).reverse();\r\n            for(const neighbor of neighbors){\r\n                const neighborKey = stringify(neighbor.point);\r\n                if(!visited.has(neighborKey)) {\r\n                    const neighborNode = new Node(neighbor);\r\n                    currentNode.addChild(neighborNode);\r\n                    frontier.push(neighborNode);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default DFSPathfinder;\r\n","import Pathfinder, {reconstructPath, reconstructPathReversed} from './Pathfinder';\r\nimport {euclidean, HeuristicFunc} from './Heuristics';\r\nimport {AStarNode} from './Node';\r\nimport {Point} from '../core/Components';\r\nimport Navigator from '../core/Navigator';\r\nimport {HashSet, HashTable, stringify} from '../structures/Hash';\r\nimport Heap from '../structures/Heap';\r\n\r\ninterface ControlStructures {\r\n    openSet: HashTable<AStarNode>,\r\n    closedSet: HashSet,\r\n    openFrontier: Heap<AStarNode>\r\n}\r\n\r\nclass BiAStarPathfinder extends Pathfinder\r\n{\r\n    private readonly heuristic: HeuristicFunc = (a: Point, b: Point) => euclidean(a,b);\r\n\r\n    constructor(navigator: Navigator, func?: HeuristicFunc) {\r\n        super(navigator);\r\n        if(func !== undefined) {\r\n            this.heuristic = func;\r\n        }\r\n    }\r\n\r\n    getAlgorithmName() {\r\n        return 'Bidirectional A*';\r\n    }\r\n\r\n    /**\r\n     * Performs aStar algorithm on the grid given an initial and goal point\r\n     * Doesn't always returns the shortest path, but performs well on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point) {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const closedSet = new HashSet();\r\n        const startOpenFrontier = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const startOpenSet = new HashTable<AStarNode>();\r\n        const endOpenFrontier = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const endOpenSet = new HashTable<AStarNode>();\r\n        const initialRoot = new AStarNode(\r\n            grid.get(initial), 0, 0\r\n        );\r\n        startOpenFrontier.push(initialRoot);\r\n        startOpenSet.add(stringify(initial), initialRoot);\r\n        const goalRoot = new AStarNode(\r\n            grid.get(goal), 0, 0\r\n        );\r\n        endOpenFrontier.push(goalRoot);\r\n        endOpenSet.add(stringify(goal), goalRoot);\r\n        while (!startOpenFrontier.isEmpty() && !endOpenFrontier.isEmpty()) {\r\n            //expand startOpenFrontier\r\n            const startCurrentNode = startOpenFrontier.pop();\r\n            const startCurrentPoint = startCurrentNode.tile.point;\r\n            const startCurrentPointKey = stringify(startCurrentPoint);\r\n            startOpenSet.remove(startCurrentPointKey);\r\n            if(closedSet.has(startCurrentPointKey)) {\r\n                continue;\r\n            }\r\n            closedSet.add(startCurrentPointKey);\r\n            this.addRecent(startCurrentNode);\r\n            if(endOpenSet.has(startCurrentPointKey)) {\r\n                if(startCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startCurrentNode.parent\r\n                    ).concat(reconstructPathReversed(\r\n                        endOpenSet.get(startCurrentPointKey)!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            this.doAStarExpansion({\r\n                openFrontier: startOpenFrontier,\r\n                openSet: startOpenSet,\r\n                closedSet: closedSet\r\n            }, startCurrentNode, goal);\r\n            //expand endOpenFrontier\r\n            const endCurrentNode = endOpenFrontier.pop();\r\n            const endCurrentPoint = endCurrentNode.tile.point;\r\n            const endCurrentPointKey = stringify(endCurrentPoint);\r\n            endOpenSet.remove(endCurrentPointKey);\r\n            if(closedSet.has(endCurrentPointKey)) {\r\n                continue;\r\n            }\r\n            closedSet.add(endCurrentPointKey);\r\n            this.addRecent(endCurrentNode);\r\n            if(startOpenSet.has(endCurrentPointKey)) {\r\n                if(endCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startOpenSet.get(endCurrentPointKey)!\r\n                    ).concat(reconstructPathReversed(\r\n                        endCurrentNode.parent!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            this.doAStarExpansion({\r\n                openFrontier: endOpenFrontier,\r\n                openSet: endOpenSet,\r\n                closedSet: closedSet\r\n            }, endCurrentNode, initial);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    private doAStarExpansion(structures: ControlStructures, currentNode: AStarNode, endPoint: Point) {\r\n        const currentPoint = currentNode.tile.point;\r\n        for (const neighbor of this.navigator.neighbors(currentPoint)) {\r\n            const neighborPoint = neighbor.point;\r\n            const neighborKey = stringify(neighborPoint);\r\n            if(structures.closedSet.has(neighborKey)) {\r\n                continue;\r\n            }\r\n            const g = currentNode.g + this.stepCost(currentPoint, neighborPoint);\r\n            const f = g + this.heuristic(neighborPoint, endPoint);\r\n            if (!structures.openSet.has(neighborKey) || g < structures.openSet.get(neighborKey)!.g) {\r\n                const neighborNode = new AStarNode(\r\n                    neighbor, g, f\r\n                );\r\n                currentNode.addChild(neighborNode);\r\n                structures.openFrontier.push(neighborNode);\r\n                structures.openSet.add(neighborKey, neighborNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The step-cost function to be used, calculating the cost from\r\n     * currentPoint to neighborPoint. Uses the stepCost function provided by the\r\n     * navigator by default but can be overridden\r\n     * @param currentPoint\r\n     * @param neighborPoint\r\n     */\r\n    stepCost(currentPoint: Point, neighborPoint: Point) {\r\n        return this.navigator.cost(currentPoint, neighborPoint);\r\n    }\r\n}\r\n\r\nexport default BiAStarPathfinder;","import Pathfinder, {reconstructPath, reconstructPathReversed} from './Pathfinder';\r\nimport {Node} from './Node';\r\nimport {Point} from '../core/Components';\r\nimport {HashTable, stringify} from '../structures/Hash';\r\n\r\ninterface ControlStructures {\r\n    frontier: Node[],\r\n    visited: HashTable<Node>\r\n}\r\n\r\nclass BiBFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName() {\r\n        return 'Bidirectional Breadth First Search';\r\n    }\r\n\r\n    /**\r\n     * Implementation of BFS to find the shortest path from initial to point\r\n     * Doesn't always return the shortest path, and performs poorly on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point) {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const startVisited = new HashTable<Node>();\r\n        const endVisited = new HashTable<Node>();\r\n        const startFrontier: Node[] = [];\r\n        const endFrontier: Node[] = [];\r\n        const initialRoot = new Node(grid.get(initial));\r\n        startFrontier.push(initialRoot);\r\n        startVisited.add(stringify(initial), initialRoot);\r\n        const goalRoot = new Node(grid.get(goal));\r\n        endFrontier.push(goalRoot);\r\n        endVisited.add(stringify(goal), goalRoot);\r\n        while(startFrontier.length !== 0 && endFrontier.length !== 0) {\r\n            //expand startQueue\r\n            const startCurrentNode = startFrontier.shift()!;\r\n            const startCurrentPoint = startCurrentNode.tile.point;\r\n            const startCurrentPointKey = stringify(startCurrentPoint);\r\n            this.addRecent(startCurrentNode);\r\n            if(endVisited.has(startCurrentPointKey)) {\r\n                if(startCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startCurrentNode.parent\r\n                    ).concat(reconstructPathReversed(\r\n                        endVisited.get(startCurrentPointKey)!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            this.doBFSExpansion({\r\n                frontier: startFrontier,\r\n                visited: startVisited\r\n            }, startCurrentNode);\r\n            //expand endQueue\r\n            const endCurrentNode = endFrontier.shift()!;\r\n            const endCurrentPoint = endCurrentNode.tile.point;\r\n            const endCurrentPointKey = stringify(endCurrentPoint);\r\n            this.addRecent(endCurrentNode);\r\n            if(startVisited.has(endCurrentPointKey)) {\r\n                if(endCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startVisited.get(endCurrentPointKey)!\r\n                    ).concat(reconstructPathReversed(\r\n                        endCurrentNode.parent\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            this.doBFSExpansion({\r\n                frontier: endFrontier,\r\n                visited: endVisited\r\n            }, endCurrentNode);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    private doBFSExpansion(structures: ControlStructures, currentNode: Node) {\r\n        const currentPoint = currentNode.tile.point;\r\n        for(const neighbor of this.navigator.neighbors(currentPoint)) {\r\n            const neighborKey = stringify(neighbor.point);\r\n            if(!structures.visited.has(neighborKey)) {\r\n                const neighborNode = new Node(neighbor);\r\n                currentNode.addChild(neighborNode);\r\n                structures.frontier.push(neighborNode);\r\n                structures.visited.add(neighborKey, neighborNode);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default BiBFSPathfinder;","import Navigator from '../core/Navigator';\r\nimport PlusNavigator from '../core/PlusNavigator';\r\nimport {Point} from '../core/Components';\r\nimport {Grid} from '../core/Grid';\r\nimport {\r\n    chebyshev,\r\n    euclidean,\r\n    HeuristicFunc,\r\n    manhattan,\r\n    nullHeuristic,\r\n    octile\r\n} from './Heuristics';\r\nimport Pathfinder from './Pathfinder';\r\nimport AStarPathfinder from './AStarPathfinder';\r\nimport BFSPathfinder from './BFSPathfinder';\r\nimport DFSPathfinder from './DFSPathfinder';\r\nimport BiAStarPathfinder from './BiAStarPathfinder';\r\nimport BiBFSPathfinder from \"./BiBFSPathfinder\";\r\n\r\nconst CREATE_NAVIGATOR: {[key: string]: ((grid: Grid) => Navigator)} = {\r\n    'plus': (grid: Grid) => new PlusNavigator(grid),\r\n}\r\n\r\nconst CREATE_HEURISTIC: {[key: string]: (() => HeuristicFunc)} = {\r\n    'manhattan': () => manhattan,\r\n    'euclidean': () => euclidean,\r\n    'chebyshev': () => chebyshev,\r\n    'octile': () => octile,\r\n    'null': () => nullHeuristic\r\n}\r\n\r\nconst CREATE_PATHFINDER: {[key: string]: ((navigator: Navigator, heuristic: HeuristicFunc) => Pathfinder)} = {\r\n    'dijkstra': (navigator) => {\r\n        return new (class DijkstraPathfinder extends AStarPathfinder {\r\n            getAlgorithmName() {\r\n                return 'Dijkstra';\r\n            }\r\n        })(navigator, nullHeuristic);\r\n    },\r\n    'best-first': (navigator, heuristic) => {\r\n        return new (class BestFirstPathfinder extends AStarPathfinder {\r\n            stepCost(currentPoint: Point, neighborPoint: Point) {\r\n                return 0;\r\n            }\r\n            getAlgorithmName() {\r\n                return 'Best-First Search';\r\n            }\r\n        })(navigator, heuristic);\r\n    },\r\n    'a*': (navigator, heuristic) => {\r\n        return new AStarPathfinder(navigator, heuristic);\r\n    },\r\n    'bfs': (navigator) => {\r\n        return new BFSPathfinder(navigator);\r\n    },\r\n    'dfs': (navigator) => {\r\n        return new DFSPathfinder(navigator);\r\n    },\r\n    'bi-a*': (navigator, heuristic) => {\r\n        return new BiAStarPathfinder(navigator, heuristic);\r\n    },\r\n    'bi-dijkstra': (navigator) => {\r\n        return new (class BiDijkstraPathfinder extends BiAStarPathfinder {\r\n            getAlgorithmName() {\r\n                return 'Bidirectional Dijkstra';\r\n            }\r\n        })(navigator, nullHeuristic);\r\n    },\r\n    'bi-bfs': (navigator) => {\r\n        return new BiBFSPathfinder(navigator);\r\n    }\r\n}\r\n\r\nclass PathfinderBuilder\r\n{\r\n    private navigator: string = 'plus';\r\n    private algorithm: string = 'a*';\r\n    private heuristic: string = 'null';\r\n    private readonly grid: Readonly<Grid>;\r\n\r\n    constructor(grid: Readonly<Grid>) {\r\n        this.grid = grid;\r\n    }\r\n\r\n    setNavigator(navigator: string) {\r\n        navigator = navigator.toLowerCase();\r\n        if(CREATE_NAVIGATOR[navigator] == null) {\r\n            throw new Error('No such navigator pattern exists')\r\n        } else {\r\n            this.navigator = navigator;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setAlgorithm(algorithm: string) {\r\n        algorithm = algorithm.toLowerCase();\r\n        if(CREATE_PATHFINDER[algorithm] == null) {\r\n            throw new Error('No such pathfinding algorithm exists')\r\n        } else {\r\n            this.algorithm = algorithm;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setHeuristic(heuristic: string) {\r\n        heuristic = heuristic.toLowerCase();\r\n        if(CREATE_HEURISTIC[heuristic] == null) {\r\n            throw new Error('No such heuristic function exists')\r\n        } else {\r\n            this.heuristic = heuristic;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Builds a pathfinder with a navigator with the set algorithm, heuristic, and navigator\r\n     */\r\n    build() {\r\n        const createHeuristic = CREATE_HEURISTIC[this.heuristic];\r\n        const createNavigator = CREATE_NAVIGATOR[this.navigator];\r\n        const createPathfinder = CREATE_PATHFINDER[this.algorithm];\r\n        return createPathfinder(createNavigator(this.grid), createHeuristic());\r\n    }\r\n\r\n    static usesHeuristic(algorithm: string) {\r\n        return algorithm === 'a*' || algorithm === 'bi-a*' ||\r\n            algorithm === 'best-first';\r\n    }\r\n\r\n    static usesWeights(algorithm: string) {\r\n        return algorithm === 'a*' || algorithm === 'bi-a*' ||\r\n            algorithm === 'best-first' || algorithm === 'dijkstra' ||\r\n            algorithm === 'bi-dijkstra';\r\n    }\r\n\r\n    static hasBidirectional(algorithm: string) {\r\n        return CREATE_PATHFINDER['bi-' + algorithm] != null;\r\n    }\r\n\r\n    static makeBidirectional(algorithm: string) {\r\n        return 'bi-' + algorithm;\r\n    }\r\n}\r\n\r\nexport default PathfinderBuilder;\r\n\r\n","import {createTileData, Point, Tile, TileData} from '../core/Components';\r\nimport {Grid} from '../core/Grid';\r\nimport {HashSet, stringify} from '../structures/Hash';\r\n\r\nabstract class TerrainGenerator\r\n{\r\n    protected readonly width: number;\r\n    protected readonly height: number;\r\n    protected readonly ignore: HashSet;\r\n    protected readonly data: TileData;\r\n\r\n    protected constructor(width: number, height: number, data?: TileData, ignore?: Point[]) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.ignore = new HashSet();\r\n        if(data !== undefined) {\r\n            this.data = data;\r\n        } else {\r\n            this.data = createTileData(true);\r\n        }\r\n        if(ignore !== undefined) {\r\n            for(const i of ignore) {\r\n                this.ignore.add(stringify(i));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws a tile to the grid\r\n     * @param grid\r\n     * @param tile\r\n     */\r\n    protected draw(grid: Grid, tile: Tile) {\r\n        if(!this.shouldIgnore(tile.point)) {\r\n            grid.mutateTile(tile);\r\n        }\r\n    }\r\n\r\n    protected getTerrain() {\r\n        return this.data;\r\n    }\r\n\r\n    protected getSolid() {\r\n        return {\r\n            pathCost: 1,\r\n            isSolid: true\r\n        }\r\n    }\r\n\r\n    protected shouldIgnore(point: Point) {\r\n        return this.ignore.has(stringify(point));\r\n    }\r\n\r\n    abstract generateTerrain(topLeft?: Point, bottomRight?: Point): Grid;\r\n}\r\n\r\nexport default TerrainGenerator;","import TerrainGenerator from './TerrainGenerator';\r\nimport {Point, TileData} from '../core/Components';\r\nimport RectGrid from '../core/Grid';\r\n\r\nclass TerrainRandomGenerator extends TerrainGenerator\r\n{\r\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\r\n    constructor(width: number, height: number, tileData?: TileData, ignore?: Point[]) {\r\n        super(width, height, tileData, ignore);\r\n    }\r\n\r\n    /**\r\n     * Performs a random terrain generation algorithm where each tile has a 1/4\r\n     * chance of being solid\r\n     * @param topLeft optional parameter to specify what point the terrain should start from\r\n     *  This should not be further up/left than (1,1)\r\n     * @param bottomRight optional parameter to specify how far down and right the terrain will go\r\n     *  This should not be further right/down than (width-2,height-2)\r\n     */\r\n    generateTerrain(topLeft?: Point, bottomRight?: Point) {\r\n        const grid = new RectGrid(this.width, this.height);\r\n        if(topLeft === undefined) {\r\n            topLeft = {\r\n                x: 1, y: 1\r\n            }\r\n        }\r\n        if(bottomRight === undefined) {\r\n            bottomRight = {\r\n                x: grid.getWidth()-2,\r\n                y: grid.getHeight()-2\r\n            }\r\n        }\r\n        for(let x = topLeft.x - 1; x <= bottomRight.x + 1; x++) {\r\n            for(let y = topLeft.y - 1; y <= bottomRight.y + 1; y++) {\r\n                if(getRand(0, 3) === 0) {\r\n                    this.draw(grid,{\r\n                        point: {\r\n                            x: x, y: y\r\n                        },\r\n                        data: this.getTerrain()\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n}\r\n\r\n/**\r\n * Generate a random number between min and max, inclusive for min and max\r\n * @param min\r\n * @param max\r\n */\r\nfunction getRand(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max+1-min) + min);\r\n}\r\n\r\nexport default TerrainRandomGenerator;","import TerrainGenerator from './TerrainGenerator';\r\nimport RectGrid, {Grid} from '../core/Grid';\r\nimport {createTileData, Point, Tile, TileData} from '../core/Components';\r\n\r\nconst LIMIT = 2;\r\n\r\nexport const NO_SKEW = 0;\r\nexport const VERTICAL_SKEW = 1;\r\nexport const HORIZONTAL_SKEW = 2;\r\n\r\ninterface Chamber {\r\n    topLeft: Point; //min\r\n    bottomRight: Point; //max\r\n}\r\n\r\nclass TerrainMazeGenerator extends TerrainGenerator\r\n{\r\n    private readonly divideWidth: (width: number, height: number) => boolean;\r\n\r\n    constructor(width: number, height: number, tileData?: TileData, ignore?: Point[], slant?: number) {\r\n        super(width, height, tileData, ignore);\r\n        if(slant === undefined || slant === NO_SKEW) {\r\n            this.divideWidth = divideWidthNoSkew;\r\n        } else if(slant === VERTICAL_SKEW) {\r\n            this.divideWidth = divideWidthVSkew;\r\n        } else if(slant === HORIZONTAL_SKEW) {\r\n            this.divideWidth = divideWidthHSkew;\r\n        } else {\r\n            throw new Error(\"Invalid recursive maze division skew type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs the recursive division maze generation algorithm on a new empty grid\r\n     * by bisecting parts until the maze can no longer be bisected\r\n     * Params must be within bounds and create a chamber\r\n     * @param topLeft optional parameter to specify what point the maze should start from\r\n     *  This should not be further up/left than (1,1)\r\n     * @param bottomRight optional parameter to specify how far down and right the maze will go\r\n     *  This should not be further right/down than (width-2,height-2)\r\n     */\r\n    generateTerrain(topLeft?: Point, bottomRight?: Point) {\r\n        const grid = new RectGrid(this.width, this.height);\r\n        if(topLeft === undefined) {\r\n            topLeft = {\r\n                x: 1, y: 1\r\n            }\r\n        }\r\n        if(bottomRight === undefined) {\r\n            bottomRight = {\r\n                x: grid.getWidth()-2,\r\n                y: grid.getHeight()-2\r\n            }\r\n        }\r\n        for(let x = topLeft.x - 1; x <= bottomRight.x + 1; x++) {\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: x, y: topLeft.y - 1\r\n                },\r\n                data: this.getSolid()\r\n            });\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: x, y: bottomRight.y + 1\r\n                },\r\n                data: this.getSolid()\r\n            });\r\n        }\r\n        for(let y = topLeft.y - 1; y <= bottomRight.y + 1; y++) {\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: topLeft.x - 1, y: y\r\n                },\r\n                data: this.getSolid()\r\n            });\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: bottomRight.x + 1, y: y\r\n                },\r\n                data: this.getSolid()\r\n            });\r\n        }\r\n        this.divide(grid,{\r\n            topLeft: topLeft,\r\n            bottomRight: bottomRight,\r\n        });\r\n        return grid;\r\n    }\r\n\r\n    /**\r\n     * Draws a list of tiles to the grid\r\n     * @param grid\r\n     * @param tiles\r\n     */\r\n    private drawArr(grid: Grid, tiles: Tile[]) {\r\n        for(const tile of tiles) {\r\n            this.draw(grid, tile);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a line between a region, with an open hole, in a chamber,\r\n     * and call bisection algorithm on it, and call division algorithms on\r\n     * its split chambers until no chambers can be bisected\r\n     * @param grid\r\n     * @param chamber\r\n     */\r\n    divide(grid: Grid, chamber: Chamber) {\r\n        const width = widthOf(chamber);\r\n        const height = heightOf(chamber);\r\n        const min = chamber.topLeft;\r\n        const max = chamber.bottomRight;\r\n        if(this.divideWidth(width,height)) {\r\n            if(width > LIMIT) {\r\n                //calculate axis\r\n                const randX = getMidPoint(\r\n                    min.x, max.x\r\n                );\r\n                //create axis wall\r\n                const toDraw: Tile[] = [];\r\n                for(let y = min.y; y <= max.y; y++) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: y\r\n                        },\r\n                        data: this.getTerrain()\r\n                    });\r\n                }\r\n                //create holes in axis wall\r\n                let edgeBlocked = false;\r\n                if(canDrawHole(grid.get({\r\n                    x: randX, y: min.y-1\r\n                }))) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: min.y\r\n                        },\r\n                        data: createTileData(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(canDrawHole(grid.get({\r\n                    x: randX, y: max.y+1\r\n                }))) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: max.y\r\n                        },\r\n                        data: createTileData(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(!edgeBlocked) {\r\n                    const randY = getRand(\r\n                        min.y, max.y,\r\n                    );\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: randY\r\n                        },\r\n                        data: createTileData(false)\r\n                    });\r\n                }\r\n                this.drawArr(grid, toDraw);\r\n                //create children chambers and recurse\r\n                const leftChamber = {\r\n                    topLeft: chamber.topLeft,\r\n                    bottomRight: {\r\n                        x: randX-1,\r\n                        y: chamber.bottomRight.y\r\n                    },\r\n                };\r\n                const rightChamber = {\r\n                    topLeft: {\r\n                        x: randX+1,\r\n                        y: chamber.topLeft.y\r\n                    },\r\n                    bottomRight: chamber.bottomRight,\r\n                };\r\n                this.divide(grid, leftChamber);\r\n                this.divide(grid, rightChamber);\r\n            }\r\n        } else {\r\n            if(height > LIMIT) {\r\n                //calculate axis\r\n                const randY = getMidPoint(\r\n                    min.y, max.y\r\n                );\r\n                //draw axis wall\r\n                const toDraw: Tile[] = [];\r\n                for(let x = min.x; x <= max.x; x++) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: x, y: randY\r\n                        },\r\n                        data: this.getTerrain()\r\n                    });\r\n                }\r\n                //create holes in axis wall\r\n                let edgeBlocked = false;\r\n                if(canDrawHole(grid.get({\r\n                    x: min.x-1, y: randY\r\n                }))) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: min.x, y: randY\r\n                        },\r\n                        data: createTileData(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(canDrawHole(grid.get({\r\n                    x: max.x+1, y: randY\r\n                }))) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: max.x, y: randY\r\n                        },\r\n                        data: createTileData(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(!edgeBlocked) {\r\n                    const randX = getRand(\r\n                        min.x, max.x,\r\n                    );\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: randY\r\n                        },\r\n                        data: createTileData(false)\r\n                    });\r\n                }\r\n                this.drawArr(grid, toDraw);\r\n                //create children chambers and recurse\r\n                const topChamber = {\r\n                    topLeft: chamber.topLeft,\r\n                    bottomRight: {\r\n                        x: chamber.bottomRight.x,\r\n                        y: randY-1\r\n                    },\r\n                };\r\n                const bottomChamber = {\r\n                    topLeft: {\r\n                        x: chamber.topLeft.x,\r\n                        y: randY+1\r\n                    },\r\n                    bottomRight: chamber.bottomRight,\r\n                };\r\n                this.divide(grid, topChamber);\r\n                this.divide(grid, bottomChamber);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction divideWidthNoSkew(width: number, height: number) {\r\n    return width >= height;\r\n}\r\n\r\nfunction divideWidthHSkew(width: number, height: number) {\r\n    return width >= height * 2;\r\n}\r\n\r\nfunction divideWidthVSkew(width: number, height: number) {\r\n    return width * 2 >= height;\r\n}\r\n\r\nfunction widthOf(chamber: Chamber) {\r\n    return chamber.bottomRight.x - chamber.topLeft.x + 1;\r\n}\r\n\r\nfunction heightOf(chamber: Chamber) {\r\n    return chamber.bottomRight.y - chamber.topLeft.y + 1;\r\n}\r\n\r\nfunction canDrawHole(tile: Tile) {\r\n    return tile.data.pathCost === 1 && !tile.data.isSolid;\r\n}\r\n\r\n/**\r\n * Returns the 'midpoint' to be used\r\n * @param min\r\n * @param max\r\n */\r\nfunction getMidPoint(min: number, max: number) {\r\n    const range = max - min;\r\n    if(range >= 20) {\r\n        return ((min+max)/2) >> 0;\r\n    } else if(range > 5) {\r\n        const mid = ((min+max)/2) >> 0;\r\n        const points = [mid, mid+1];\r\n        return points[getRand(0,points.length-1)];\r\n    } else {\r\n        return getRand(min+1,max-1);\r\n    }\r\n}\r\n\r\n/**\r\n * Generate a random number between min and max, inclusive for min and max\r\n * @param min\r\n * @param max\r\n */\r\nfunction getRand(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max+1-min) + min);\r\n}\r\n\r\nexport default TerrainMazeGenerator;","import TerrainRandomGenerator from './TerrainRandomGenerator';\r\nimport TerrainMazeGenerator from './TerrainMazeGenerator';\r\nimport {createTileData, Point, TileData} from '../core/Components';\r\n\r\nexport const MAZE = 0;\r\nexport const MAZE_VERTICAL_SKEW = 1;\r\nexport const MAZE_HORIZONTAL_SKEW = 2;\r\nexport const RANDOM_TERRAIN = 3;\r\n\r\nclass TerrainGeneratorBuilder\r\n{\r\n    private width: number = 0;\r\n    private height: number = 0;\r\n    private type: number = MAZE;\r\n    private ignore: Point[] = [];\r\n    private data: TileData = createTileData(true);\r\n\r\n    setDimensions(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n\r\n    setGeneratorType(type: number) {\r\n        this.type = type;\r\n        return this;\r\n    }\r\n\r\n    setIgnorePoints(ignore: Point[]) {\r\n        this.ignore = ignore.slice();\r\n        return this;\r\n    }\r\n\r\n    setTileData(data: TileData) {\r\n        this.data = data;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Builds a terrain generator with the specified type\r\n     */\r\n    build() {\r\n       if(this.type >= RANDOM_TERRAIN) {\r\n           return new TerrainRandomGenerator(this.width, this.height, this.data, this.ignore);\r\n       } else {\r\n           return new TerrainMazeGenerator(this.width, this.height, this.data, this.ignore, this.type);\r\n       }\r\n    }\r\n}\r\n\r\nexport default TerrainGeneratorBuilder;","class VirtualTimer\r\n{\r\n    private timeout: NodeJS.Timeout;\r\n    private readonly callback: () => void\r\n    private timeStarted: number;\r\n    private timeRemaining: number;\r\n    private finished: boolean;\r\n\r\n    constructor(callback: () => void, countDown: number) {\r\n        this.callback = callback;\r\n        this.finished = false;\r\n        this.timeStarted = Date.now();\r\n        this.timeRemaining = countDown;\r\n        this.timeout = setTimeout(() => {\r\n            callback();\r\n            this.finished = true;\r\n        }, this.timeRemaining);\r\n    }\r\n\r\n    clear() {\r\n        clearTimeout(this.timeout);\r\n        this.finished = true;\r\n    }\r\n\r\n    pause() {\r\n        if(!this.finished) {\r\n            clearTimeout(this.timeout);\r\n            this.timeRemaining -= Date.now() - this.timeStarted;\r\n        }\r\n    }\r\n\r\n    resume() {\r\n        if(!this.finished) {\r\n            this.timeStarted = Date.now();\r\n            this.timeout = setTimeout(() => {\r\n                this.callback();\r\n                this.finished = true;\r\n            }, this.timeRemaining);\r\n        }\r\n    }\r\n\r\n    isFinished() {\r\n        return this.finished;\r\n    }\r\n\r\n    getNativeTimeout() {\r\n        return this.timeout;\r\n    }\r\n}\r\n\r\nexport default VirtualTimer;","import React, {RefObject} from 'react';\r\nimport GridBackground from './GridBackground';\r\nimport GridForeground from './GridForeground';\r\nimport StatsPanel from './StatsPanel';\r\nimport GridStaticTiles from './GridStaticTiles';\r\nimport {Node} from '../../pathfinding/algorithms/Node';\r\nimport PathfinderBuilder from '../../pathfinding/algorithms/PathfinderBuilder';\r\nimport Pathfinder from '../../pathfinding/algorithms/Pathfinder';\r\nimport {euclidean} from '../../pathfinding/algorithms/Heuristics';\r\nimport TerrainGeneratorBuilder, {RANDOM_TERRAIN} from '../../pathfinding/algorithms/TerrainGeneratorBuilder';\r\nimport {createTileData, Point, Tile, TileData} from '../../pathfinding/core/Components';\r\nimport {HashSet, stringify} from '../../pathfinding/structures/Hash';\r\nimport AppSettings from '../../utils/AppSettings';\r\nimport VirtualTimer from '../../utils/VirtualTimer';\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    settings: Readonly<AppSettings>,\r\n    onChangeVisualizing: (visualizing: boolean) => void;\r\n}\r\n\r\ninterface IState {\r\n    time: number,\r\n    length: number,\r\n    cost: number,\r\n    nodes: number,\r\n    algorithm: string\r\n}\r\n\r\n/**\r\n * Component to encapsulate and perform all pathfinding operations\r\n * Exposes functions to initiate pathfinding or draw terrain\r\n */\r\nclass PathfindingVisualizer extends React.Component<IProps,IState>\r\n{\r\n    //references to expose background and foreground grids to parent\r\n    private background: RefObject<GridBackground> = React.createRef();\r\n    private foreground: RefObject<GridForeground> = React.createRef();\r\n\r\n    private visualized = false;\r\n    private visualizing = false;\r\n    private visualTimeouts: VirtualTimer[]  = [];\r\n    private generations: Node[] = [];\r\n    private paused = false;\r\n    private wasPaused = false; //paused before alt tab?\r\n\r\n    private mazeTile: TileData = createTileData(true);\r\n\r\n    private readonly tilesX: number;\r\n    private readonly tilesY: number;\r\n    private readonly tileWidth: number\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const w = window.screen.availWidth - (window.outerWidth - window.innerWidth);\r\n        const h = window.screen.availHeight - (window.outerHeight - window.innerHeight);\r\n        this.tileWidth = this.props.tileWidth;\r\n        this.tilesX = Math.floor(w / this.tileWidth) + 1;\r\n        this.tilesY = Math.floor((h - 75 - 30) / this.tileWidth) + 1;\r\n        this.state = {\r\n            time: -1,\r\n            length: -1,\r\n            cost: -1,\r\n            nodes: -1,\r\n            algorithm: ''\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Automatically pause/resume the visualization when user alt tabs\r\n     */\r\n    componentDidMount() {\r\n        window.addEventListener('blur', () => {\r\n            this.wasPaused = this.isPaused();\r\n            if(!this.wasPaused) {\r\n                this.pausePathfinding();\r\n            }\r\n        });\r\n        window.addEventListener('focus', () => {\r\n            if(this.isPaused() && !this.wasPaused) {\r\n                this.resumePathfinding();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Prevents pathfinding visualizer from being updated unless the algorithm stats\r\n     * have changed (meaning an algorithm was visualized)\r\n     * Doesn't prevent Foreground and background from being updated automatically\r\n     * when their state changes\r\n     * @param nextProps\r\n     * @param nextState\r\n     */\r\n    shouldComponentUpdate(nextProps: Readonly<IProps>, nextState: Readonly<IState>) {\r\n        const prevState = this.state;\r\n        const prevProps = this.props;\r\n        return prevProps.settings.showArrows !== nextProps.settings.showArrows ||\r\n            prevProps.settings.showScores !== nextProps.settings.showScores ||\r\n            prevState.time !== nextState.time ||\r\n            prevState.length !== nextState.length ||\r\n            prevState.cost !== nextState.cost ||\r\n            prevState.nodes !== nextState.nodes ||\r\n            prevState.algorithm !== nextState.algorithm;\r\n    }\r\n\r\n    changeTile(data: TileData) {\r\n        this.mazeTile = data; //enables weighted terrain\r\n        this.foreground.current!.changeTile(data);\r\n    }\r\n\r\n    isPaused() {\r\n        return this.paused;\r\n    }\r\n\r\n    /**\r\n     * Pause the delayed pathfinding algorithm being performed\r\n     */\r\n    pausePathfinding() {\r\n        this.paused = true;\r\n        for(const timeout of this.visualTimeouts) {\r\n            timeout.pause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resume the delayed pathfinding algorithm being performed\r\n     * Will reset the timeouts to the last time the timeout was paused/started\r\n     * if not properly called while the timeout is paused\r\n     */\r\n    resumePathfinding() {\r\n        this.paused = false;\r\n        for(const timeout of this.visualTimeouts) {\r\n            timeout.resume();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs the pathfinding algorithm on the grid and visualizes it\r\n     */\r\n    doPathfinding() {\r\n        this.clearPath();\r\n        const settings = this.props.settings;\r\n        const pathfinder = this.getPathfinder(settings);\r\n        const path = this.findPath(pathfinder);\r\n        this.generations = pathfinder.getRecentGenerations();\r\n        this.visualizeGenerations(this.generations);\r\n        this.addArrowGenerations(this.generations);\r\n        this.drawPath(path);\r\n    }\r\n\r\n    /**\r\n     * Performs the pathfinding algorithm on the grid and visualizes it with delays between successive\r\n     * node generations\r\n     * If the visualizer is currently visualizing, the visualization stops instead\r\n     */\r\n    doDelayedPathfinding() {\r\n        const settings = this.props.settings;\r\n        const background = this.background.current!;\r\n        background.setLastAlgo(settings.algorithm)\r\n        background.enableAnimations();\r\n        this.paused = false;\r\n        this.clearVisualization();\r\n        this.clearPath();\r\n        this.visualized = false;\r\n        const foreground = this.foreground.current!;\r\n        foreground.toggleDisable();\r\n        if(!this.visualizing) { //start visualization if not visualizing\r\n            this.visualizing = true;\r\n            this.props.onChangeVisualizing(this.visualizing);\r\n            const pathfinder = this.getPathfinder(settings);\r\n            const path = this.findPath(pathfinder);\r\n            const promises: Promise<VirtualTimer>[] = []; //to call function when timeouts finish\r\n            this.visualTimeouts = [];\r\n            const baseIncrement = settings.delayInc;\r\n            let delay = 0;\r\n            this.generations = pathfinder.getRecentGenerations();\r\n            const generationSet = new HashSet(); //to keep track of rediscovered nodes\r\n            this.generations.forEach((generation) => {\r\n                const promise = new Promise<VirtualTimer>((resolve) => {\r\n                    //each generation gets a higher timeout\r\n                    const timeout = new VirtualTimer(() => {\r\n                        this.visualizeGenerationAndArrows(generation);\r\n                        resolve(timeout);\r\n                    }, delay);\r\n                    this.visualTimeouts.push(timeout);\r\n                });\r\n                promises.push(promise);\r\n                if(!generationSet.has(stringify(generation.tile.point))) {\r\n                    //rediscovered nodes shouldn't add a delay to visualization\r\n                    delay += baseIncrement;\r\n                }\r\n                generationSet.add(stringify(generation.tile.point));\r\n            });\r\n            //call functions when timeouts finish\r\n            Promise.all(promises).then(() => {\r\n                this.drawPath(path);\r\n                foreground.toggleDisable();\r\n                this.visualizing = false;\r\n                this.visualized = true;\r\n                this.props.onChangeVisualizing(this.visualizing);\r\n                background.disableAnimations();\r\n            });\r\n        } else { //stop visualizing if currently visualizing\r\n            for (const timeout of this.visualTimeouts) {\r\n                timeout.clear();\r\n            }\r\n            this.visualizing = false;\r\n            this.props.onChangeVisualizing(this.visualizing);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the pathfinder for the settings\r\n     * @param settings\r\n     */\r\n    getPathfinder(settings: AppSettings) {\r\n        const algorithmKey = settings.algorithm;\r\n        const algorithm = settings.bidirectional && PathfinderBuilder.hasBidirectional(algorithmKey) ?\r\n            PathfinderBuilder.makeBidirectional(algorithmKey) : algorithmKey;\r\n        return new PathfinderBuilder(this.foreground.current!.state.grid)\r\n            .setAlgorithm(algorithm)\r\n            .setHeuristic(settings.heuristicKey)\r\n            .setNavigator(settings.navigatorKey)\r\n            .build();\r\n    }\r\n\r\n    /**\r\n     * Find path with a given pathfinder, includes benchmarking\r\n     * @param pathfinder\r\n     */\r\n     findPath(pathfinder: Pathfinder) {\r\n        const foreground = this.foreground.current!;\r\n        const t0 = performance.now();\r\n        const path = pathfinder.findPath(foreground.state.initial, foreground.state.goal);\r\n        const t1 = performance.now();\r\n        const t2 = t1 - t0;\r\n        this.setState({\r\n            time: t2,\r\n            nodes: pathfinder.getRecentNodes(),\r\n            length: calcLength(foreground.state.initial, path),\r\n            cost: calcCost(foreground.state.grid.get(foreground.state.initial), path),\r\n            algorithm: pathfinder.getAlgorithmName()\r\n        });\r\n        return path;\r\n    }\r\n\r\n    /**\r\n     * Draw path on the grid and change length on ui\r\n     * @param path\r\n     */\r\n    drawPath(path: Tile[]) {\r\n        const foreground = this.foreground.current!\r\n        path.unshift(this.foreground.current!.state.grid.get(foreground.state.initial));\r\n        this.foreground.current!.drawPath(path);\r\n    }\r\n\r\n    /**\r\n     * Called when child foreground moves a tile\r\n     */\r\n    onTilesDragged() {\r\n        if(this.visualized) {\r\n            this.clearVisualization();\r\n            this.doPathfinding();\r\n            this.visualized = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create terrain on the grid foreground\r\n     */\r\n    createTerrain(mazeType: number, useMazeTile: boolean) {\r\n        if(this.visualizing) {\r\n            return;\r\n        }\r\n        this.clearTiles();\r\n        this.clearPath();\r\n        this.clearVisualization();\r\n        const foreground = this.foreground.current!;\r\n        const end = this.calcEndPointInView();\r\n        const newState = (mazeType !== RANDOM_TERRAIN) ? {\r\n            initial: {\r\n                x: 1, y: 1\r\n            },\r\n            goal: {\r\n                x: end.x-2, y: end.y-2\r\n            }\r\n        } : {\r\n            initial: {\r\n                x: 1, y: ((end.y-1) / 2) >> 0\r\n            },\r\n            goal: {\r\n                x: end.x-2, y: ((end.y-1) / 2) >> 0\r\n            }\r\n        };\r\n        foreground.setState(newState,() => {\r\n            const prevGrid = foreground.state.grid;\r\n            const generator = new TerrainGeneratorBuilder()\r\n                .setDimensions(\r\n                    prevGrid.getWidth(),\r\n                    prevGrid.getHeight()\r\n                )\r\n                .setGeneratorType(mazeType)\r\n                .setIgnorePoints([foreground.state.initial, foreground.state.goal])\r\n                .setTileData(useMazeTile ? this.mazeTile : getSolid())\r\n                .build();\r\n            const topLeft = {\r\n                x: 1, y: 1\r\n            };\r\n            const bottomRight = {\r\n                x: end.x-2, y: end.y-2\r\n            };\r\n            const grid = generator.generateTerrain(topLeft, bottomRight);\r\n            foreground.drawGrid(grid);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Calculate the end/goal point in view of the screen\r\n     * Used to calculate the terrain dimensions\r\n     */\r\n    calcEndPointInView() {\r\n        const xEnd = window.innerWidth / this.tileWidth;\r\n        const yEnd = (window.innerHeight - 75 - 30) / this.tileWidth;\r\n        const xFloor = Math.floor(xEnd);\r\n        const yFloor = Math.floor(yEnd);\r\n        const xDecimal = xEnd - xFloor;\r\n        const yDecimal = yEnd - yFloor;\r\n        let x = xDecimal > 0.05 ? Math.ceil(xEnd) : xFloor;\r\n        let y = yDecimal > 0.05 ? Math.ceil(yEnd) : yFloor;\r\n        if(x > this.tilesX) {\r\n            x = this.tilesX\r\n        }\r\n        if(y > this.tilesY) {\r\n            y = this.tilesY\r\n        }\r\n        return {\r\n            x: x, y: y\r\n        }\r\n    }\r\n\r\n    resetPoints() {\r\n        if(!this.visualizing) {\r\n            this.foreground.current!.resetPoints();\r\n        }\r\n    }\r\n\r\n    clearPath = () => {\r\n        this.foreground.current!.erasePath();\r\n    }\r\n\r\n    clearTiles() {\r\n        this.foreground.current!.clearTiles();\r\n    }\r\n\r\n    clearTilesChecked() {\r\n        if(!this.visualizing) {\r\n            this.foreground.current!.clearTiles();\r\n        }\r\n    }\r\n\r\n    clearVisualization() {\r\n        this.visualized = false;\r\n        this.background.current!.clear();\r\n    }\r\n\r\n    clearVisualizationChecked() {\r\n        if(!this.visualizing) {\r\n            this.visualized = false;\r\n            this.background.current!.clear();\r\n        }\r\n    }\r\n\r\n    visualizeGenerations(generations: Node[]) {\r\n        this.background.current!.visualizeGenerations(generations);\r\n        this.visualized = true;\r\n    }\r\n\r\n    visualizeGeneration(generation: Node) {\r\n        this.background.current!.visualizeGeneration(generation);\r\n    }\r\n\r\n    addArrowGenerations(generations: Node[]) {\r\n        this.background.current!.addArrowGenerations(generations);\r\n    }\r\n\r\n    addArrowGeneration(generation: Node) {\r\n        this.background.current!.addArrowGeneration(generation);\r\n    }\r\n\r\n    visualizeGenerationAndArrows(generation: Node) {\r\n        this.background.current!.visualizeGenerationAndArrows(generation);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <StatsPanel\r\n                    algorithm={this.state.algorithm}\r\n                    length={this.state.length}\r\n                    cost={this.state.cost}\r\n                    time={this.state.time}\r\n                    nodes={this.state.nodes}\r\n                />\r\n                <div>\r\n                    <GridStaticTiles\r\n                        tileWidth={this.tileWidth}\r\n                        tilesX={this.tilesX}\r\n                        tilesY={this.tilesY}\r\n                    />\r\n                    <GridBackground\r\n                        ref={this.background}\r\n                        settings={this.props.settings}\r\n                        tileWidth={this.tileWidth}\r\n                        tilesX={this.tilesX}\r\n                        tilesY={this.tilesY}\r\n                    />\r\n                    <GridForeground\r\n                        ref={this.foreground}\r\n                        topMargin={75}\r\n                        onTilesDragged={() => this.onTilesDragged()}\r\n                        tileSize={this.tileWidth}\r\n                        tilesX={this.tilesX}\r\n                        tilesY={this.tilesY}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction getSolid() {\r\n    return {\r\n        pathCost: 1,\r\n        isSolid: true\r\n    }\r\n}\r\n\r\nfunction calcLength(initial: Point, path: Tile[]) {\r\n    if(path.length === 0) {\r\n        return 0;\r\n    }\r\n    let len = euclidean(initial, path[0].point);\r\n    for (let i = 0; i < path.length - 1; i++) {\r\n        len += euclidean(path[i].point, path[i + 1].point);\r\n    }\r\n    return +(len).toFixed(3);\r\n}\r\n\r\nfunction calcCost(initial: Tile, path: Tile[]) {\r\n    if(path.length === 0) {\r\n        return 0;\r\n    }\r\n    let len = euclidean(initial.point, path[0].point) * path[0].data.pathCost;\r\n    for (let i = 0; i < path.length - 1; i++) {\r\n        len += euclidean(path[i].point, path[i + 1].point) * path[i + 1].data.pathCost;\r\n    }\r\n    return +(len).toFixed(3);\r\n}\r\n\r\nexport default PathfindingVisualizer;","export default __webpack_public_path__ + \"static/media/react.93a4bdf1.png\";","import React, {RefObject} from 'react';\r\nimport TopBar from './navbar/TopBar';\r\nimport {SettingsButton, VisualizeButton} from './navbar/Buttons';\r\nimport {\r\n    AlgorithmDropDown,\r\n    ClearDropDown,\r\n    MazeDropDown,\r\n    TilesDropDown\r\n} from './navbar/DropDownComponents';\r\nimport {\r\n    AlgorithmSettings,\r\n    HeuristicSettings, \r\n    SpeedSettings,\r\n    VisualSettings\r\n} from './navbar/SettingPanels';\r\nimport DraggablePanel from './panel/DraggablePanel';\r\nimport PathfindingVisualizer from './grid/PathfindingVisualizer';\r\nimport PathfinderBuilder from '../pathfinding/algorithms/PathfinderBuilder';\r\nimport {\r\n    MAZE,\r\n    MAZE_HORIZONTAL_SKEW,\r\n    MAZE_VERTICAL_SKEW,\r\n    RANDOM_TERRAIN\r\n} from '../pathfinding/algorithms/TerrainGeneratorBuilder';\r\nimport Icon from '../../images/react.png';\r\nimport AppSettings, {getDefaultSettings} from \"../utils/AppSettings\";\r\n\r\ninterface IProps {}\r\n\r\ninterface IState {\r\n    settings: AppSettings,\r\n\r\n    heuristicDisabled: boolean,\r\n    bidirectionalDisabled: boolean,\r\n    arrowsDisabled: boolean,\r\n    scoreDisabled: boolean\r\n\r\n    panelShow: boolean,\r\n\r\n    visualizing: boolean,\r\n    paused: boolean,\r\n\r\n    useIcon: boolean\r\n}\r\n\r\nclass PathfindingApp extends React.Component<IProps, IState>\r\n{\r\n    //expose visualizer to parent to connect to button siblings\r\n    private visualizer: RefObject<PathfindingVisualizer> = React.createRef();\r\n\r\n    //drop down refs needed to invoke behavior between dropdowns\r\n    private algDropDown: RefObject<AlgorithmDropDown> = React.createRef();\r\n    private clrDropDown: RefObject<ClearDropDown> = React.createRef();\r\n    private mazeDropDown: RefObject<MazeDropDown> = React.createRef();\r\n    private tilesDropDown: RefObject<TilesDropDown> = React.createRef();\r\n\r\n    private readonly tileWidth: number;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            settings: getDefaultSettings(),\r\n            heuristicDisabled: false,\r\n            bidirectionalDisabled: false,\r\n            arrowsDisabled: false,\r\n            scoreDisabled: false,\r\n            panelShow: false,\r\n            visualizing: false,\r\n            paused: false,\r\n            useIcon: this.useIcon()\r\n        }\r\n        const mobile = isMobile();\r\n        this.tileWidth =  mobile ? 47 : Math.round(window.screen.availWidth / 57);\r\n    }\r\n\r\n    /**\r\n     * Binds window listeners.\r\n     * One listener is to hide drop downs on click anywhere\r\n     * Other listener is to keep track of screen size to check if we show icon\r\n     */\r\n    componentDidMount() {\r\n        window.addEventListener('click', () => {\r\n            this.algDropDown.current!.hide();\r\n            this.clrDropDown.current!.hide();\r\n            this.mazeDropDown.current!.hide();\r\n            this.tilesDropDown.current!.hide();\r\n        });\r\n        window.addEventListener('resize', () => {\r\n            this.setState({\r\n                useIcon: this.useIcon()\r\n            })\r\n        });\r\n    }\r\n\r\n    useIcon() {\r\n        return window.innerWidth <= 850;\r\n    }\r\n\r\n    /**\r\n     * Called when the drop downs are clicked to prevent more\r\n     * than one dropdown from being open at a time\r\n     */\r\n\r\n    onClickAlgDrop() {\r\n        this.clrDropDown.current!.hide();\r\n        this.mazeDropDown.current!.hide();\r\n        this.tilesDropDown.current!.hide();\r\n    }\r\n\r\n    onClickClrDrop() {\r\n        this.algDropDown.current!.hide();\r\n        this.mazeDropDown.current!.hide();\r\n        this.tilesDropDown.current!.hide();\r\n    }\r\n\r\n    onClickMazeDrop() {\r\n        this.clrDropDown.current!.hide();\r\n        this.algDropDown.current!.hide();\r\n        this.tilesDropDown.current!.hide();\r\n    }\r\n\r\n    onClickTilesDrop() {\r\n        this.clrDropDown.current!.hide();\r\n        this.algDropDown.current!.hide();\r\n        this.mazeDropDown.current!.hide();\r\n    }\r\n\r\n    /**\r\n     * Utility functions to change overall state of application\r\n     * Settings, overall appearance, etc\r\n     */\r\n\r\n    changeVButtonColor(visualizing: boolean) {\r\n        this.setState({\r\n            visualizing: visualizing\r\n        })\r\n    }\r\n\r\n    toggleSettings() {\r\n        this.setState(prevState => ({\r\n            panelShow: !prevState.panelShow\r\n        }));\r\n    }\r\n\r\n    hideSettings() {\r\n        this.setState({\r\n            panelShow: false\r\n        });\r\n    }\r\n\r\n    doPathfinding() {\r\n        this.setState({\r\n            paused: false\r\n        });\r\n        this.visualizer.current!.doDelayedPathfinding();\r\n    }\r\n\r\n    pausePathfinding() {\r\n        this.setState({\r\n            paused: true\r\n        });\r\n        this.visualizer.current!.pausePathfinding();\r\n    }\r\n\r\n    resumePathfinding() {\r\n        this.setState({\r\n            paused: false\r\n        });\r\n        this.visualizer.current!.resumePathfinding();\r\n    }\r\n\r\n    clearPath() {\r\n        this.visualizer.current!.clearPath();\r\n        this.visualizer.current!.clearVisualizationChecked();\r\n    }\r\n\r\n    clearTiles() {\r\n        this.clearPath();\r\n        this.visualizer.current!.clearTilesChecked();\r\n    }\r\n\r\n    resetBoard() {\r\n        this.clearPath();\r\n        this.clearTiles();\r\n        this.visualizer.current!.resetPoints();\r\n    }\r\n\r\n    createMaze() {\r\n        this.visualizer.current!.createTerrain(MAZE, false);\r\n    }\r\n\r\n    createMazeVSkew() {\r\n        this.visualizer.current!.createTerrain(MAZE_VERTICAL_SKEW, false);\r\n    }\r\n\r\n    createMazeHSkew() {\r\n        this.visualizer.current!.createTerrain(MAZE_HORIZONTAL_SKEW, false);\r\n    }\r\n\r\n    createRandomTerrain() {\r\n        this.visualizer.current!.createTerrain(RANDOM_TERRAIN, true);\r\n    }\r\n\r\n    changeTile(cost: number) {\r\n        this.visualizer.current!.changeTile({\r\n            isSolid: cost === -1,\r\n            pathCost: cost\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Functions to modify app's settings\r\n     */\r\n\r\n    changeAlgo(algorithm: string) {\r\n        this.setState(prevState => ({\r\n            heuristicDisabled: !PathfinderBuilder.usesHeuristic(algorithm),\r\n            bidirectionalDisabled: !PathfinderBuilder.hasBidirectional(algorithm),\r\n            scoreDisabled: !PathfinderBuilder.usesWeights(algorithm),\r\n            settings: {\r\n                ...prevState.settings,\r\n                algorithm: algorithm\r\n            }\r\n        }));\r\n    }\r\n\r\n    changeShowArrows() {\r\n        this.setState(prevState => ({\r\n            settings: {\r\n                ...prevState.settings,\r\n                showArrows: !prevState.settings.showArrows\r\n            }\r\n        }));\r\n    }\r\n\r\n    changeShowScores() {\r\n        this.setState(prevState => ({\r\n            settings: {\r\n                ...prevState.settings,\r\n                showScores: !prevState.settings.showScores\r\n            }\r\n        }));\r\n    }\r\n\r\n    changeBidirectional() {\r\n        this.setState(prevState => ({\r\n            settings: {\r\n                ...prevState.settings,\r\n                bidirectional: !prevState.settings.bidirectional\r\n            }\r\n        }));\r\n    }\r\n\r\n    changeSpeed(value: number) {\r\n        this.setState(prevState => ({\r\n            settings: {\r\n                ...prevState.settings,\r\n                delayInc: value\r\n            }\r\n        }));\r\n    }\r\n\r\n    changeManhattan() {\r\n        this.setState(prevState => ({\r\n            settings: {\r\n                ...prevState.settings,\r\n                heuristicKey: 'manhattan'\r\n            }\r\n        }));\r\n    }\r\n\r\n    changeEuclidean() {\r\n        this.setState(prevState => ({\r\n            settings: {\r\n                ...prevState.settings,\r\n                heuristicKey: 'euclidean'\r\n            }\r\n        }));\r\n    }\r\n\r\n    changeChebyshev() {\r\n        this.setState(prevState => ({\r\n            settings: {\r\n                ...prevState.settings,\r\n                heuristicKey: 'chebyshev'\r\n            }\r\n        }));\r\n    }\r\n\r\n    changeOctile() {\r\n        this.setState(prevState => ({\r\n            settings: {\r\n                ...prevState.settings,\r\n                heuristicKey: 'octile'\r\n            }\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        const title: string = 'Pathfinding Visualizer';\r\n        const icon = this.state.useIcon ?\r\n            <img\r\n                width={'100%'} height={'100%'}\r\n                className='icon'\r\n                alt={title} src={Icon}\r\n            /> :\r\n            title;\r\n        return (\r\n            <div>\r\n                <DraggablePanel\r\n                    title='Grid Settings'\r\n                    show={this.state.panelShow}\r\n                    onClickXButton={() => this.hideSettings()}\r\n                    width={350}\r\n                    height={405}\r\n                >\r\n                    <VisualSettings\r\n                        defaultShowArrows={this.state.settings.showArrows}\r\n                        defaultShowScores={this.state.settings.showScores}\r\n                        disabledTree={this.state.arrowsDisabled}\r\n                        disabledScore={this.state.scoreDisabled}\r\n                        onChangeShowArrows={() => this.changeShowArrows()}\r\n                        onChangeShowScores={() => this.changeShowScores()}\r\n                    />\r\n                    <SpeedSettings\r\n                        onChange={(value: number) => this.changeSpeed(value)}\r\n                        initialSpeed={this.state.settings.delayInc}\r\n                    />\r\n                    <AlgorithmSettings\r\n                        defaultAlg={this.state.settings.bidirectional}\r\n                        disabled={this.state.bidirectionalDisabled}\r\n                        onChangeBidirectional={() => this.changeBidirectional()}\r\n                    />\r\n                    <HeuristicSettings\r\n                        defaultHeuristic={this.state.settings.heuristicKey}\r\n                        disabled={this.state.heuristicDisabled}\r\n                        onClickManhattan={() => this.changeManhattan()}\r\n                        onClickEuclidean={() => this.changeEuclidean()}\r\n                        onClickChebyshev={() => this.changeChebyshev()}\r\n                        onClickOctile={() => this.changeOctile()}\r\n                    />\r\n                </DraggablePanel>\r\n                <TopBar>\r\n                    <a href='https://github.com/JosephPrichard/PathfinderReact' className='title'\r\n                       style={{\r\n                           width: this.state.useIcon ? 70 : 'auto',\r\n                           height: this.state.useIcon ? 52 : '100%'\r\n                       }}\r\n                    >\r\n                        {icon}\r\n                    </a>\r\n                    <div className='top-container'>\r\n                        <AlgorithmDropDown\r\n                            ref={this.algDropDown}\r\n                            onClick={() => this.onClickAlgDrop()}\r\n                            onChange={(alg: string) => this.changeAlgo(alg)}\r\n                        />\r\n                        <VisualizeButton\r\n                            active={this.state.visualizing}\r\n                            paused={this.state.paused}\r\n                            onPause={() => this.pausePathfinding()}\r\n                            onResume={() => this.resumePathfinding()}\r\n                            onStartStop={() => this.doPathfinding()}\r\n                        />\r\n                        <ClearDropDown\r\n                            ref={this.clrDropDown}\r\n                            onClick={() => this.onClickClrDrop()}\r\n                            onClickTiles={() => this.clearTiles()}\r\n                            onClickPath={() => this.clearPath()}\r\n                            onClickReset={() => this.resetBoard()}\r\n                        />\r\n                        <TilesDropDown\r\n                            ref={this.tilesDropDown}\r\n                            onClick={() => this.onClickTilesDrop()}\r\n                            onClickTileType={(cost: number) => this.changeTile(cost)}\r\n                        />\r\n                        <MazeDropDown\r\n                            ref={this.mazeDropDown}\r\n                            onClick={() => this.onClickMazeDrop()}\r\n                            onClickMaze={() => this.createMaze()}\r\n                            onClickMazeHorizontal={() => this.createMazeHSkew()}\r\n                            onClickMazeVertical={() => this.createMazeVSkew()}\r\n                            onClickRandomTerrain={() => this.createRandomTerrain()}\r\n                        />\r\n                        <SettingsButton onClick={() => this.toggleSettings()}/>\r\n                    </div>\r\n                </TopBar>\r\n                <PathfindingVisualizer\r\n                    ref={this.visualizer}\r\n                    onChangeVisualizing={(viz: boolean) => this.changeVButtonColor(viz)}\r\n                    settings={this.state.settings}\r\n                    tileWidth={this.tileWidth}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction isMobile() {\r\n    return /Android|webOS|iPhone|iPad|Mac|Macintosh|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n}\r\n\r\nexport default PathfindingApp;","interface AppSettings\r\n{\r\n    showArrows: boolean,\r\n    delayInc: number,\r\n    algorithm: string,\r\n    heuristicKey: string,\r\n    navigatorKey: string,\r\n    bidirectional: boolean,\r\n    showScores: boolean\r\n}\r\n\r\nexport function getDefaultSettings(): AppSettings {\r\n    return {\r\n        showArrows: true,\r\n        delayInc: 25,\r\n        algorithm: 'a*',\r\n        heuristicKey: 'manhattan',\r\n        navigatorKey: 'plus',\r\n        bidirectional: false,\r\n        showScores: false\r\n    }\r\n}\r\n\r\nexport default AppSettings;","import React from 'react';\r\nimport './styles/Grid.css';\r\nimport './styles/Utility.css';\r\nimport './styles/Navbar.css';\r\nimport PathfindingApp from './common/components/PathfindingApp';\r\n\r\nclass App extends React.Component\r\n{\r\n    render() {\r\n        return (\r\n            <PathfindingApp/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n//import reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n//reportWebVitals();\r\n"],"sourceRoot":""}