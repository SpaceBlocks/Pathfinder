{"version":3,"sources":["view/navbar/TopBar.tsx","view/navbar/Buttons.tsx","view/navbar/DropDown.tsx","view/navbar/DropDownComponents.tsx","view/utility/DraggablePanel.tsx","view/grid/GridBackground.tsx","pathfinding/core/Components.ts","pathfinding/core/Grid.ts","view/grid/TileFg.tsx","view/grid/SolidFg.tsx","view/web-content/weight.svg","view/grid/WeightFg.tsx","view/grid/GridForeground.tsx","view/grid/StatsPanel.tsx","pathfinding/core/PlusNavigator.ts","pathfinding/core/Navigator.ts","pathfinding/algorithms/Heuristics.ts","pathfinding/structures/Hash.ts","pathfinding/structures/Heap.ts","pathfinding/algorithms/Pathfinder.ts","pathfinding/algorithms/Node.ts","pathfinding/algorithms/AStar.ts","pathfinding/algorithms/BFS.ts","pathfinding/structures/Stack.ts","pathfinding/algorithms/DFS.ts","pathfinding/algorithms/BidirectionalAStar.ts","pathfinding/algorithms/BidirectionalBFS.ts","pathfinding/algorithms/PathfinderBuilder.ts","view/utility/VirtualTimer.ts","pathfinding/algorithms/TerrainGenerator.ts","pathfinding/algorithms/TerrainRandomGenerator.ts","pathfinding/algorithms/TerrainMazeGenerator.ts","pathfinding/algorithms/TerrainGeneratorBuilder.ts","view/grid/GridStaticTiles.tsx","view/grid/PathfindingVisualizer.tsx","view/utility/Checkbox.tsx","view/utility/SteppedRangeSlider.tsx","view/utility/RadioButtonGroup.tsx","view/navbar/SettingPanels.tsx","view/SettingsManager.ts","view/PathfindingSettings.ts","view/web-content/react.png","view/PathfindingApp.tsx","App.tsx","index.tsx"],"names":["TopBar","bar","React","createRef","ref","this","style","width","window","screen","availWidth","className","props","children","Component","SYMBOL_COLOR","DIMENSION","VisualizeButton","height","rx","fill","points","x","active","onMouseDown","e","preventDefault","onClick","paused","onResume","onPause","xmlns","getResumeSymbol","getPauseSymbol","onStartStop","getStopSymbol","SettingsButton","DropDown","setState","up","display","stopPropagation","isHidden","show","hide","state","Clickable","tabIndex","onKeyPress","click","AlgorithmDropDown","text","fade","key","algText","onChange","toggle","nativeEvent","arrowClass","contentStyle","ClearDropDown","onClickPath","onClickTiles","onClickReset","MazeDropDown","onClickMaze","onClickMazeHorizontal","onClickMazeVertical","onClickRandomTerrain","TilesDropDown","cost","onClickTileType","DraggablePanel","draggable","draggableContainer","draggableContent","dragging","prevX","prevY","mouseDown","clientY","clientX","touchStart","touch","touches","changedTouches","mouseUp","mouseMove","drag","touchMove","top","left","document","addEventListener","container","current","offsetTop","offsetLeft","content","innerHeight","innerWidth","offsetHeight","offsetWidth","visibleStyle","minHeight","getPosition","renderDraggable","draggableStyle","onTouchStart","title","onClickXButton","ARROW_COLOR","VIZ_TILE_CLASS","clone","array","map","arr","slice","GridBackground","tileWidth","tileClass","tilesX","tilesY","visualization","createEmptyBg","arrows","y","row","push","generation","prevState","doGeneration","generations","doArrowGeneration","renderViz","id","markerWidth","markerHeight","refX","refY","orient","renderArrows","offset","i","length","arrow","first","from","second","to","firstX","firstY","secondX","secondY","offsetX","offsetY","x1","y1","x2","y2","stroke","strokeWidth","markerEnd","tiles","point","viz","renderTile","color","backgroundColor","tile","point1","point2","newArrow","a","index","indexOf","splice","createTile","isSolid","pathCost","RectGrid","nodes","data","createEmptyGrid","solid","mutate","console","str","log","JSON","stringify","grid","mutateTile","get","TileFg","nextProps","prevPoint","nextPoint","size","position","borderColor","SolidFg","doTileAnimation","tileSize","WeightFg","backgroundImage","Weight","ARROW_PATH_COLOR","pointsEqual","isControlKey","button","GridForeground","svg","tilePointer","drawing","erasing","draggingInitial","draggingGoal","disable","end","calcEndPointInView","path","initial","goal","Math","round","topMargin","getBoundingClientRect","bounds","getBoundingRect","onPress","onDrag","xCoordinate","yCoordinate","calculatePoint","isEmpty","drawTile","eraseTile","moveInitial","moveGoal","inBounds","mutateDefault","canMoveEndPoint","onTilesDragged","floor","renderEndTile","renderPath","onContextMenu","onMouseUp","onMouseMove","onMouseLeave","onEndingEvent","onTouchMoveCapture","onTouchEnd","onTouchCancel","renderTilesTable","lines","renderPathArrow","renderWeightText","fontSize","paddingTop","textAlign","cursor","StatsPanel","textLog","scrollTop","scrollHeight","clientHeight","time","toFixed","algorithm","readOnly","value","unselectable","onDrop","PlusNavigator","getWidth","getHeight","b","manhattan","abs","euclidean","dx","dy","sqrt","octile","SQRT2","min","chebyshev","max","nullHeuristic","HashSet","undefined","HashTable","Heap","compare","elements","siftUp","val","peek","move","pop","siftDown","pos","parent","swap","right","child","reconstructPath","bottomLeaf","reconstructPathReversed","reverse","Pathfinder","navigator","recentSearch","node","Node","AStarNode","g","fScore","AStarPathfinder","func","heuristicFunc","p","getNavigator","getGrid","clearRecentSearch","openFrontier","f","closedSet","openSet","root","add","currentNode","currentPoint","currentKey","remove","addRecent","equals","neighbors","neighbor","neighborPoint","neighborKey","has","stepCost","heuristic","neighborNode","addChild","BFSPathfinder","frontier","visited","shift","next","Stack","DFSPathfinder","BiAStarPathfinder","startOpenFrontier","startOpenSet","endOpenFrontier","endOpenSet","initialRoot","goalRoot","startCurrentNode","startCurrentPointKey","concat","doAStarExpansion","endCurrentNode","endCurrentPointKey","structures","endPoint","BiBFSPathfinder","startVisited","endVisited","startFrontier","endFrontier","doBFSExpansion","CREATE_NAVIGATOR","CREATE_HEURISTIC","CREATE_PATHFINDER","PathfinderBuilder","toLowerCase","Error","createHeuristic","createNavigator","createPathfinder","VirtualTimer","callback","countDown","timeout","timeStarted","timeRemaining","finished","Date","now","setTimeout","clearTimeout","TerrainGenerator","ignore","shouldIgnore","TerrainRandomGenerator","tileData","topLeft","bottomRight","random","draw","getTerrain","divideWidthNoSkew","divideWidthHSkew","divideWidthVSkew","canDrawHole","getMidPoint","range","mid","getRand","TerrainMazeGenerator","slant","divideWidth","getSolid","divide","chamber","widthOf","heightOf","randX","toDraw","edgeBlocked","randY","drawArr","leftChamber","rightChamber","topChamber","bottomChamber","TerrainGeneratorBuilder","type","GridStaticTiles","renderTiles","calcLength","len","calcCost","PathfindingVisualizer","background","foreground","stats","visualized","visualizing","visualTimeouts","mazeTile","clearPath","erasePath","w","outerWidth","h","availHeight","outerHeight","nextState","changeTile","settings","showArrows","visualizeAlg","pause","resume","pathfinder","getPathfinder","findPath","getRecentGenerations","canShowArrows","addArrowGenerations","canShowFrontier","visualizeGenerations","drawPath","clearVisualization","toggleDisable","clear","onChangeVisualizing","promises","baseIncrement","delayInc","expand","delay","visualizeGenerationAndArrows","visualizeGeneration","addArrowGeneration","generationSet","forEach","promise","Promise","resolve","all","then","algorithmKey","bidirectional","hasBidirectional","makeBidirectional","setAlgorithm","setHeuristic","heuristicKey","setNavigator","navigatorKey","build","t0","performance","t2","getRecentNodes","getAlgorithmName","unshift","doPathfinding","mazeType","clearTiles","newState","prevGrid","generator","setDimensions","setGeneratorType","setIgnorePoints","setTileData","generateTerrain","drawGrid","xEnd","yEnd","xFloor","yFloor","yDecimal","ceil","resetPoints","Checkbox","checked","defaultChecked","disabled","boxStyle","defaultProps","SteppedRangeSlider","default","Number","currentTarget","list","step","sliderStyle","onInput","RadioButtonGroup","Children","toArray","radioButtons","VisualSettings","onChangeViz","onChangeShowArrows","SpeedSettings","speedText","String","initialSpeed","speed","options","onChangeSpeed","AlgorithmSettings","onChangeBidirectional","HeuristicSettings","onClickManhattan","onClickEuclidean","onClickChebyshev","onClickOctile","SettingsManager","algo","PathfindingApp","visualizer","algDropDown","clrDropDown","mazeDropDown","tilesDropDown","settingsManager","mobile","test","userAgent","changeSpeed","heuristicDisabled","bidirectionalDisabled","arrowsDisabled","panelShow","useIcon","usesHeuristic","changeAlgo","doDelayedPathfinding","pausePathfinding","resumePathfinding","clearVisualizationChecked","clearTilesChecked","createTerrain","hideSettings","changeVisualize","changeShowArrows","changeBidirectional","changeManhattan","changeEuclidean","changeChebyshev","changeOctile","href","alt","src","Icon","onClickAlgDrop","alg","onClickClrDrop","resetBoard","onClickTilesDrop","onClickMazeDrop","createMaze","createMazeHSkew","createMazeVSkew","createRandomTerrain","toggleSettings","changeVButtonColor","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dbf8e3dd.chunk.js","sourcesContent":["import React, {RefObject} from 'react';\r\nimport './Navbar.css'\r\n\r\nclass TopBar extends React.Component\r\n{\r\n    private bar: RefObject<HTMLDivElement> = React.createRef();\r\n\r\n    render() {\r\n        return (\r\n            <div ref={this.bar} style={{\r\n                width: window.screen.availWidth\r\n            }} className='top-navbar'>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TopBar;","import React from 'react';\r\nimport './Navbar.css'\r\n\r\ninterface VProps {\r\n    active: boolean,\r\n    paused: boolean,\r\n    onStartStop: ()  => void,\r\n    onPause: ()  => void,\r\n    onResume: ()  => void,\r\n}\r\n\r\ninterface ButtonProps {\r\n    onClick: ()  => void\r\n}\r\n\r\nconst SYMBOL_COLOR = 'rgb(230,230,230)';\r\nconst OFFSET = 14;\r\nconst DIMENSION = 47 - 2 * OFFSET;\r\n\r\nexport class VisualizeButton extends React.Component<VProps>\r\n{\r\n    getStopSymbol() {\r\n        return (\r\n            <rect width={DIMENSION}\r\n                  height={DIMENSION}\r\n                  rx={4}\r\n                  fill={SYMBOL_COLOR}\r\n            />\r\n        );\r\n    }\r\n\r\n    getResumeSymbol() {\r\n        const midY = DIMENSION / 2;\r\n        return (\r\n            <polygon\r\n                  points={`${0},${0} ${0},${DIMENSION} ${DIMENSION},${midY}`}\r\n                  className={'track round'}\r\n                  fill={SYMBOL_COLOR}\r\n            />\r\n        );\r\n    }\r\n\r\n    getPauseSymbol() {\r\n        return (\r\n            <svg>\r\n                <rect width={DIMENSION/2.5}\r\n                      height={DIMENSION}\r\n                      rx={3}\r\n                      fill={SYMBOL_COLOR}\r\n                />\r\n                <rect width={DIMENSION/2.5}\r\n                      height={DIMENSION}\r\n                      x={0.2*DIMENSION + DIMENSION/2.5}\r\n                      rx={3}\r\n                      fill={SYMBOL_COLOR}\r\n                />\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        if(this.props.active) {\r\n            return (\r\n                <div className={'half-button-wrapper'}>\r\n                    <button onMouseDown={e => e.preventDefault()}\r\n                            className={'center half-button-left red-button half-viz-button'}\r\n                            onClick={this.props.paused ? this.props.onResume : this.props.onPause}\r\n                    >\r\n                        <svg xmlns='http://www.w3.org/2000/svg'\r\n                             className='svg-icon'\r\n                             width={DIMENSION}\r\n                             height={DIMENSION}\r\n                        >\r\n                            {this.props.paused ? this.getResumeSymbol() : this.getPauseSymbol()}\r\n                        </svg>\r\n                    </button>\r\n                    <button onMouseDown={e => e.preventDefault()}\r\n                            className={'center half-button-right red-button half-viz-button'}\r\n                            onClick={this.props.onStartStop}\r\n                    >\r\n                        <svg xmlns='http://www.w3.org/2000/svg'\r\n                             className='svg-icon'\r\n                             width={DIMENSION}\r\n                             height={DIMENSION}\r\n                        >\r\n                            {this.getStopSymbol()}\r\n                        </svg>\r\n                    </button>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <button onMouseDown={e => e.preventDefault()}\r\n                        className={'button green-button viz-button'}\r\n                        onClick={this.props.onStartStop}\r\n                >\r\n                    Visualize!\r\n                </button>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport class SettingsButton extends React.Component<ButtonProps>\r\n{\r\n    render() {\r\n        return (\r\n            <button onMouseDown={e => e.preventDefault()}\r\n                    className='button settings-button'\r\n                    onClick={this.props.onClick}>\r\n                Settings\r\n            </button>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport interface DropDownProps {\r\n    onClick: () => void,\r\n}\r\n\r\nexport interface DropDownState {\r\n    up: boolean,\r\n    display: string,\r\n    fade: string\r\n}\r\n\r\nabstract class DropDown<IProps extends DropDownProps, IState extends DropDownState>\r\n    extends React.Component<IProps, IState>\r\n{\r\n    protected constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    show() {\r\n        this.setState({\r\n            up: false,\r\n            display: 'block',\r\n        });\r\n    }\r\n\r\n    hide() {\r\n        this.setState({\r\n            display: 'none',\r\n            up: true,\r\n        });\r\n    }\r\n\r\n    toggle(e: Event) {\r\n        e.stopPropagation();\r\n        this.props.onClick();\r\n        if(this.isHidden()) {\r\n            this.show();\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    isHidden() {\r\n        return this.state.display === 'none';\r\n    }\r\n\r\n    contentStyle() {\r\n        return {\r\n            display: this.state.display\r\n        }\r\n    }\r\n}\r\n\r\nexport default DropDown;","import React from 'react';\r\nimport './Navbar.css'\r\nimport DropDown, {DropDownProps, DropDownState} from './DropDown';\r\n\r\ninterface AlgProps extends DropDownProps {\r\n    onChange: (alg: string) => void\r\n}\r\n\r\ninterface DropDownTextState extends DropDownState {\r\n    text: string,\r\n}\r\n\r\ninterface ClrProps extends DropDownProps {\r\n    onClickPath: () => void,\r\n    onClickTiles: () => void,\r\n    onClickReset: () => void;\r\n}\r\n\r\ninterface MazeProps extends DropDownProps {\r\n    onClickMaze: () => void,\r\n    onClickMazeHorizontal: () => void,\r\n    onClickMazeVertical: () => void,\r\n    onClickRandomTerrain: () => void\r\n}\r\n\r\ninterface TileProps extends DropDownProps {\r\n    onClickTileType: (cost: number) => void\r\n}\r\n\r\ninterface ClickableProps {\r\n    click: () => void;\r\n}\r\n\r\nclass Clickable extends React.Component<ClickableProps>\r\n{\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} onKeyPress={this.props.click} onClick={this.props.click}>{this.props.children}</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport class AlgorithmDropDown extends DropDown<AlgProps, DropDownTextState>\r\n{\r\n    constructor(props: AlgProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            text: 'A* Search',\r\n            fade: 'fade-in'\r\n        };\r\n    }\r\n\r\n    onChange(key: string, algText: string) {\r\n        this.props.onChange(key);\r\n        this.setState({\r\n            text: algText\r\n        });\r\n    }\r\n\r\n    arrowClass() {\r\n        return this.state.up ? 'arrowUp' : 'arrowDown';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} className='alg-drop-down drop-down'\r\n                 onMouseDown={e => e.preventDefault()}\r\n                 onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                 onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='alg-drop-down-button drop-down-button'>\r\n                    <span className='alg-drop-down-text drop-down-text'>{this.state.text}</span>\r\n                    <span className={'alg-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div style={this.contentStyle()}\r\n                     className={this.state.fade + ' alg-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={() => this.onChange('a*', 'A* Search')}>A* Search</Clickable>\r\n                    <Clickable click={() => this.onChange('dijkstra', 'Dijkstra')}>Dijkstra's Algorithm</Clickable>\r\n                    <Clickable click={() => this.onChange('best-first', 'Best First')}>Best First Search</Clickable>\r\n                    <Clickable click={() => this.onChange('bfs', 'Breadth First')}>Breadth First Search</Clickable>\r\n                    <Clickable click={() => this.onChange('dfs', 'Depth First')}>Depth First Search</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class ClearDropDown extends DropDown<ClrProps, DropDownState>\r\n{\r\n    constructor(props: ClrProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            fade: 'fade-in'\r\n        };\r\n    }\r\n\r\n    arrowClass() {\r\n        return this.state.up ? 'arrowUpW' : 'arrowDownW';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} className='clr-drop-down drop-down'\r\n                 onMouseDown={e => e.preventDefault()}\r\n                 onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                 onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='clr-drop-down-button drop-down-button'>\r\n                    <span className='clr-drop-down-text drop-down-text'>Reset</span>\r\n                    <span className={'clr-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div style={this.contentStyle()}\r\n                     className={this.state.fade + ' clr-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={this.props.onClickPath}>Clear Path</Clickable>\r\n                    <Clickable click={this.props.onClickTiles}>Clear Tiles</Clickable>\r\n                    <Clickable click={this.props.onClickReset}>Reset Grid</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class MazeDropDown extends DropDown<MazeProps, DropDownState>\r\n{\r\n    constructor(props: MazeProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            fade: 'fade-in'\r\n        };\r\n    }\r\n\r\n    arrowClass() {\r\n        return this.state.up ? 'arrowUpW' : 'arrowDownW';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} className='maze-drop-down drop-down'\r\n                 onMouseDown={e => e.preventDefault()}\r\n                 onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                 onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='maze-drop-down-button drop-down-button'>\r\n                    <span className='maze-drop-down-text drop-down-text'>Terrain</span>\r\n                    <span className={'clr-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div style={this.contentStyle()}\r\n                     className={this.state.fade + ' maze-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={this.props.onClickMaze}>Recursive Maze Division</Clickable>\r\n                    <Clickable click={this.props.onClickMazeHorizontal}>Horizontal Skewed Maze</Clickable>\r\n                    <Clickable click={this.props.onClickMazeVertical}>Vertical Skewed Maze</Clickable>\r\n                    <Clickable click={this.props.onClickRandomTerrain}>Random Terrain</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class TilesDropDown extends DropDown<TileProps, DropDownTextState>\r\n{\r\n    constructor(props: TileProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            fade: 'fade-in',\r\n            text: 'Wall [∞]'\r\n        };\r\n    }\r\n\r\n    arrowClass() {\r\n        return this.state.up ? 'arrowUpW' : 'arrowDownW';\r\n    }\r\n\r\n    onChange(cost: number, text: string) {\r\n        this.props.onClickTileType(cost);\r\n        this.setState({\r\n            text: text\r\n        }, () => this.props.onClickTileType(cost));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} className='tiles-drop-down drop-down'\r\n                 onMouseDown={e => e.preventDefault()}\r\n                 onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                 onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='tiles-drop-down-button drop-down-button'>\r\n                    <span className='tiles-drop-down-text drop-down-text'>{this.state.text}</span>\r\n                    <span className={'clr-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div style={this.contentStyle()}\r\n                     className={this.state.fade + ' tiles-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={() => this.onChange(-1, 'Wall [∞]')}>Wall [∞]</Clickable>\r\n                    <Clickable click={() => this.onChange(2, 'Weight [2]')}>Weight [2]</Clickable>\r\n                    <Clickable click={() => this.onChange(3, 'Weight [3]')}>Weight [3]</Clickable>\r\n                    <Clickable click={() => this.onChange(5, 'Weight [5]')}>Weight [5]</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {RefObject} from 'react';\r\nimport './DraggablePanel.css'\r\n\r\ninterface IProps {\r\n    title: string,\r\n    show: boolean,\r\n    onClickXButton: () => void,\r\n    width: number,\r\n    height: number\r\n}\r\n\r\ninterface IState {\r\n    top: number,\r\n    left: number\r\n}\r\n\r\nclass DraggablePanel extends React.Component<IProps, IState>\r\n{\r\n    //refs are used to access native DOM\r\n    private draggable: RefObject<HTMLDivElement> = React.createRef();\r\n    private draggableContainer: RefObject<HTMLDivElement> = React.createRef();\r\n    private draggableContent: RefObject<HTMLDivElement> = React.createRef();\r\n\r\n    //stores previous mouse location and drag\r\n    private dragging = false;\r\n    private prevX = 0;\r\n    private prevY = 0;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            top: -1,\r\n            left: -1\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        //mouse\r\n        document.addEventListener('mouseup', e => {\r\n            this.mouseUp(e);\r\n        });\r\n        document.addEventListener('mousemove', e => {\r\n            this.mouseMove(e);\r\n        });\r\n        window.addEventListener('mouseleave', e => {\r\n            this.mouseUp(e);\r\n        });\r\n        //touch\r\n        document.addEventListener('touchend', () => {\r\n            this.dragging = false;\r\n        });\r\n        document.addEventListener('touchmove', e => {\r\n            this.touchMove(e);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Start drag and init prev mouse location when mouse is clicked on draggable\r\n     * @param e\r\n     */\r\n    mouseDown = (e: MouseEvent) => {\r\n        e.preventDefault();\r\n        this.prevY = e.clientY;\r\n        this.prevX = e.clientX;\r\n        this.dragging = true;\r\n    }\r\n\r\n    /**\r\n     * Start drag and init prev touch location when finger is clicked on draggable\r\n     * @param e\r\n     */\r\n    touchStart = (e: TouchEvent) => {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        this.prevY = touch.clientY;\r\n        this.prevX = touch.clientX;\r\n        this.dragging = true;\r\n    }\r\n\r\n    /**\r\n     * Called when mouse is risen on document stop drag\r\n     * @param e\r\n     */\r\n    mouseUp = (e: Event) => {\r\n        e.preventDefault();\r\n        this.dragging = false;\r\n    }\r\n\r\n    /**\r\n     * Called when the mouse is moved over the document to calculate the new position of\r\n     * the draggable canvas\r\n     * @param e\r\n     */\r\n    mouseMove = (e: MouseEvent) => {\r\n        this.drag(e.clientX, e.clientY);\r\n    }\r\n\r\n    /**\r\n     * Called when the touch is moved over the document to calculate the new position of\r\n     * the draggable canvas\r\n     * @param e\r\n     */\r\n    touchMove = (e: TouchEvent) => {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        this.drag(touch.clientX, touch.clientY);\r\n    }\r\n\r\n    /**\r\n     * Called when user drags over the document to move the panel\r\n     * @param clientX\r\n     * @param clientY\r\n     */\r\n    drag(clientX: number, clientY: number) {\r\n        if(this.dragging) {\r\n            const container = this.draggableContainer.current!;\r\n            let top = (container.offsetTop - (this.prevY - clientY))\r\n            let left = (container.offsetLeft - (this.prevX - clientX));\r\n            const content = this.draggableContent.current!;\r\n            const draggable = this.draggable.current!;\r\n            //stop drag if mouse goes out of bounds\r\n            if(clientY < 0 || clientY > window.innerHeight\r\n                || clientX < 0 || clientX > window.innerWidth) {\r\n                this.dragging = false;\r\n            }\r\n            //check if position is out of bounds and prevent the panel from being dragged there\r\n            if(top < 0) {\r\n                top = 0;\r\n            } else if (top > window.innerHeight - draggable.offsetHeight) {\r\n                top = window.innerHeight - draggable.offsetHeight;\r\n            }\r\n            if(left < -content.offsetWidth/2) {\r\n                left = -content.offsetWidth/2;\r\n            } else if(left > window.innerWidth - content.offsetWidth/2) {\r\n                left = window.innerWidth - content.offsetWidth/2;\r\n            }\r\n            //set new position\r\n            this.setState({\r\n                top: top,\r\n                left: left\r\n            });\r\n            //update previous pos\r\n            this.prevY = clientY;\r\n            this.prevX = clientX;\r\n        }\r\n    }\r\n\r\n    getPosition() {\r\n        const left = this.state.left;\r\n        const top = this.state.top;\r\n        if(left === -1 || top === -1) {\r\n            return {};\r\n        }\r\n        return {\r\n            left: left + 'px',\r\n            top: top + 'px',\r\n        };\r\n    }\r\n\r\n    visibleStyle()  {\r\n        return this.props.show ? 'block' : 'none';\r\n    }\r\n\r\n    draggableStyle() {\r\n        return {\r\n            width: this.props.width,\r\n            display: this.visibleStyle()\r\n        }\r\n    }\r\n\r\n    contentStyle() {\r\n        return {\r\n            width: this.props.width,\r\n            minHeight: this.props.height,\r\n            display: this.visibleStyle()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={this.draggableContainer} className='draggable-container' style={this.getPosition()}>\r\n                {this.renderDraggable()}\r\n                <div ref={this.draggableContent} style={this.contentStyle()} className='draggable-content'>\r\n                    <div className='settings-general'>\r\n                        {this.props.children}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderDraggable() {\r\n        return (\r\n            <div style={this.draggableStyle()} className='draggable'\r\n                 ref={this.draggable}\r\n                 onMouseDown={e => this.mouseDown(e.nativeEvent)}\r\n                 onTouchStart={e => this.touchStart(e.nativeEvent)}\r\n            >\r\n                <div className='draggable-title'>{this.props.title}</div>\r\n                <div className='x-button' tabIndex={0}\r\n                     onKeyPress={this.props.onClickXButton}\r\n                     onClick={this.props.onClickXButton}\r\n                     onMouseDown={e => {\r\n                         e.stopPropagation();\r\n                         e.preventDefault();\r\n                     }}\r\n                >\r\n                    <div className='x-text'>\r\n                        X\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DraggablePanel;","import React from 'react';\r\nimport './Grid.css';\r\nimport {Node} from '../../pathfinding/algorithms/Node';\r\nimport {Point} from '../../pathfinding/core/Components';\r\n\r\ninterface Arrow {\r\n    to: Point,\r\n    from: Point\r\n}\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    tilesX: number,\r\n    tilesY: number\r\n}\r\n\r\ninterface IState {\r\n    visualization: string[][],\r\n    arrows: Arrow[]\r\n}\r\n\r\nconst CLOSED_NODE = 'rgb(198, 237, 238)';\r\nconst OPEN_NODE = 'rgb(191, 248, 159)';\r\nconst ARROW_COLOR = 'rgb(153,153,153)';\r\nconst EMPTY_NODE = 'e';\r\nconst TILE_CLASS = 'tile';\r\nconst VIZ_TILE_CLASS = 'tile-viz';\r\n\r\nconst BASE_WIDTH = 27;\r\n\r\nclass GridBackground extends React.Component<IProps,IState>\r\n{\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n    private readonly tileWidth: number;\r\n\r\n    private tileClass: string = VIZ_TILE_CLASS;\r\n\r\n    /**\r\n     * Constructs a GridBackground with immutable height and width\r\n     * @param props\r\n     */\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.width = this.props.tilesX;\r\n        this.height = this.props.tilesY;\r\n        this.tileWidth = this.props.tileWidth;\r\n        this.state = {\r\n            visualization: this.createEmptyBg(),\r\n            arrows: []\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a new empty visualization canvas\r\n     */\r\n    createEmptyBg() {\r\n        const visualization = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            const row: string[] = [];\r\n            for(let x = 0; x < this.width; x++) {\r\n                row.push(EMPTY_NODE);\r\n            }\r\n            visualization.push(row);\r\n        }\r\n        return visualization;\r\n    }\r\n\r\n    /**\r\n     * Clear the visualization canvas and update UI\r\n     */\r\n    clear() {\r\n        this.setState({\r\n            visualization: this.createEmptyBg(),\r\n            arrows: []\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Perform a generation on a visualization array\r\n     * @param generation\r\n     * @param visualization\r\n     */\r\n    static doGeneration(generation: Node, visualization: string[][]) {\r\n        for(const node of generation.children) {\r\n            const point = node.tile.point;\r\n            visualization[point.y][point.x] = OPEN_NODE;\r\n        }\r\n        const point = generation.tile.point;\r\n        visualization[point.y][point.x] = CLOSED_NODE;\r\n        return visualization;\r\n    }\r\n\r\n    /**\r\n     * Visualize generation and update UI\r\n     * @param generation\r\n     */\r\n    visualizeGeneration(generation: Node) {\r\n        this.setState(prevState => ({\r\n            visualization: GridBackground.doGeneration(\r\n                generation,\r\n                clone(prevState.visualization)\r\n            )\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Visualize generation array and update UI\r\n     * @param generations\r\n     */\r\n    visualizeGenerations(generations: Node[]) {\r\n        this.tileClass = TILE_CLASS;\r\n        const visualization = this.createEmptyBg();\r\n        for(const generation of generations) {\r\n            GridBackground.doGeneration(generation, visualization);\r\n        }\r\n        this.setState({\r\n            visualization: visualization\r\n        }, () => this.tileClass = VIZ_TILE_CLASS);\r\n    }\r\n\r\n    /**\r\n     * Perform an arrow generation on an arrow array\r\n     * @param generation\r\n     * @param arrows\r\n     */\r\n    static doArrowGeneration(generation: Node, arrows: Arrow[]) {\r\n        const point = generation.tile.point;\r\n        for(const node of generation.children) {\r\n            const childPoint = node.tile.point;\r\n            const newArrow = {\r\n                from: point,\r\n                to: childPoint,\r\n            };\r\n            //remove a duplicate arrow to indicate replacement\r\n            //in A* for example, we could have re-discovered a better path to a tile\r\n            for(let i = 0; i < arrows.length; i++) {\r\n                const a = arrows[i];\r\n                if(pointsEqual(a.to, newArrow.to)) {\r\n                    const index = arrows.indexOf(a);\r\n                    arrows.splice(index, 1);\r\n                    i--;\r\n                }\r\n            }\r\n            arrows.push(newArrow);\r\n        }\r\n        return arrows;\r\n    }\r\n\r\n    /**\r\n     * Add arrow generation without updating UI\r\n     * @param generation\r\n     */\r\n    addArrowGeneration(generation: Node) {\r\n        this.setState(prevState => ({\r\n            arrows: GridBackground.doArrowGeneration(\r\n                generation,\r\n                prevState.arrows.slice()\r\n            )\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Add arrow generations and update UI\r\n     * @param generations\r\n     */\r\n    addArrowGenerations(generations: Node[]) {\r\n        const arrows: Arrow[] = [];\r\n        for(const generation of generations) {\r\n            GridBackground.doArrowGeneration(generation, arrows)\r\n        }\r\n        this.setState({\r\n            arrows: arrows\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Visualize both generation and arrows and update UI\r\n     * @param generation\r\n     */\r\n    visualizeGenerationAndArrows(generation: Node) {\r\n        this.setState(prevState => ({\r\n            visualization: GridBackground.doGeneration(\r\n                generation,\r\n                clone(prevState.visualization)\r\n            ),\r\n            arrows: GridBackground.doArrowGeneration(\r\n                generation,\r\n                prevState.arrows.slice()\r\n            )\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        // console.timeEnd('time');\r\n        // console.time('time');\r\n        return (\r\n            <div>\r\n                <div className='bg'>\r\n                    {this.renderViz()}\r\n                </div>\r\n                <svg xmlns='http://www.w3.org/2000/svg' className='bg-grid'>\r\n                    <defs>\r\n                        <marker id='arrowhead' markerWidth='3' markerHeight='3'\r\n                                refX='0' refY='1.5' orient='auto'\r\n                                fill={ARROW_COLOR}\r\n                        >\r\n                            <polygon points='0 0, 3 1.5, 0 3'/>\r\n                        </marker>\r\n                    </defs>\r\n                    {this.renderArrows()}\r\n                </svg>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderArrows() {\r\n        const width = this.tileWidth;\r\n        const offset = width/2;\r\n        const arrows: JSX.Element[] = [];\r\n        for(let i = 0; i < this.state.arrows.length; i++) {\r\n            //calculate arrow position and dimensions\r\n            const arrow = this.state.arrows[i];\r\n            const first = arrow.from;\r\n            const second = arrow.to;\r\n            const firstX = first.x * width;\r\n            const firstY = first.y * width;\r\n            const secondX = second.x * width;\r\n            const secondY = second.y * width;\r\n            const offsetX = (secondX - firstX)/4;\r\n            const offsetY = (secondY - firstY)/4;\r\n            arrows.push(<line key={'arrow ' + i}\r\n                              x1={firstX + offset + offsetX}\r\n                              y1={firstY + offset + offsetY}\r\n                              x2={secondX + offset - offsetX}\r\n                              y2={secondY + offset - offsetY}\r\n                              stroke={ARROW_COLOR}\r\n                              strokeWidth={2 * this.tileWidth/BASE_WIDTH}\r\n                              className='line-arrow'\r\n                              markerEnd='url(#arrowhead)' />);\r\n        }\r\n        return arrows;\r\n    }\r\n\r\n    renderViz() {\r\n        const tiles: JSX.Element[][] = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            const row: JSX.Element[] = [];\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                };\r\n                const viz = this.state.visualization[point.y][point.x];\r\n                if(viz !== EMPTY_NODE) {\r\n                    row.push(\r\n                        this.renderTile(point, viz)\r\n                    );\r\n                }\r\n            }\r\n            tiles.push(row);\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    renderTile(point: Point, color: string) {\r\n        const width = this.tileWidth;\r\n        const top = point.y * width;\r\n        const left = point.x * width;\r\n        const style = {\r\n            backgroundColor: color,\r\n            width: width + 'px',\r\n            height: width + 'px',\r\n            top: top,\r\n            left: left\r\n        };\r\n        return (\r\n            <div key={point.x + ',' + point.y}\r\n                 style={style}\r\n                 className={this.tileClass}/>\r\n        );\r\n    }\r\n}\r\n\r\nfunction clone(array: string[][]) {\r\n    return array.map(\r\n        (arr) => arr.slice()\r\n    );\r\n}\r\n\r\nfunction pointsEqual(point1: Point, point2: Point) {\r\n    return point1.x === point2.x && point1.y === point2.y;\r\n}\r\n\r\nexport default GridBackground;","/**\r\n * Represents a point in 2d space\r\n * Immutable\r\n */\r\nexport interface Point\r\n{\r\n    readonly x: number;\r\n    readonly y: number;\r\n}\r\n\r\n/**\r\n * Represents the data inside a tile\r\n * Solid tiles cannot be passed while non solid ones can\r\n * pathCost stores how expensive it is to travel to the tile if it isn't solid\r\n * Immutable\r\n */\r\nexport interface TileData\r\n{\r\n    readonly pathCost: number;\r\n    readonly isSolid: boolean;\r\n}\r\n\r\n/**\r\n * Represents a tile on the Grid\r\n */\r\nexport interface Tile\r\n{\r\n    data: TileData;\r\n    readonly point: Point;\r\n}\r\n\r\n/**\r\n * Simple function to create a solid tile with path cost of 1\r\n * @param isSolid\r\n */\r\nexport function createTile(isSolid: boolean) {\r\n    return {\r\n        pathCost: 1,\r\n        isSolid: isSolid\r\n    }\r\n}\r\n\r\n","import {createTile, Point, Tile, TileData} from './Components';\r\n\r\nexport interface Grid\r\n{\r\n    getWidth(): number;\r\n    getHeight(): number;\r\n    inBounds(point: Point): boolean;\r\n    get(point: Point): Tile;\r\n    isSolid(point: Point): boolean;\r\n    mutate(point: Point, data: TileData): void;\r\n    mutateTile(tile: Tile): void;\r\n    mutateDefault(point: Point, solid: boolean): void;\r\n    output(console: Console): void;\r\n    getJson(): string;\r\n    walkable(point: Point): boolean;\r\n    isEmpty(point: Point): boolean;\r\n    clone(): Grid;\r\n}\r\n\r\n/**\r\n * A square grid system that stores nodes in a matrix\r\n * Uses an x,y system where x corresponds to column of the matrix,\r\n * and y corresponds to the row of the matrix\r\n * TileData.ts should be treated like graph nodes\r\n */\r\nclass RectGrid implements Grid\r\n{\r\n    private readonly tiles: Tile[][];\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    /**\r\n     * Constructs a grid either with empty or predefined tiles\r\n     * @param width of the grid\r\n     * @param height of grid\r\n     * will perform a defensive copy to the grid\r\n     */\r\n    constructor(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.tiles = createEmptyGrid(width, height);\r\n    }\r\n\r\n    getWidth() {\r\n        return this.width;\r\n    }\r\n\r\n    getHeight() {\r\n        return this.height;\r\n    }\r\n\r\n    /**\r\n     * Checks if a given point is in bounds\r\n     * Other functions assume arguments are in bounds, this should be used\r\n     * if there is reasonable doubt about whether a point is in bounds\r\n     * @param point, to check\r\n     */\r\n    inBounds(point: Point) {\r\n        return point.x >= 0 && point.x < this.width && point.y >= 0 && point.y < this.height;\r\n    }\r\n\r\n    /**\r\n     * Retrieves a defensive tile for a position\r\n     * Defensive copy prevents this object from being mutated without calling\r\n     * a mutate function\r\n     * @param point, point to get\r\n     */\r\n    get(point: Point): Tile {\r\n        return {\r\n            point: this.tiles[point.y][point.x].point,\r\n            data: this.tiles[point.y][point.x].data\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Mutates a position's tile to solid or non solid\r\n     * @param point, point to mutate\r\n     * @param data to mutate to\r\n     */\r\n    mutate(point: Point, data: TileData) {\r\n        this.tiles[point.y][point.x].data = data;\r\n    }\r\n\r\n    /**\r\n     * Mutates a a tile by point\r\n     * @param tile to mutate\r\n     */\r\n    mutateTile(tile: Tile) {\r\n        this.tiles[tile.point.y][tile.point.x].data = tile.data;\r\n    }\r\n\r\n    /**\r\n     * Mutate tile at point\r\n     * @param point to mutate at\r\n     * @param solid to determine what default tile to create\r\n     */\r\n    mutateDefault(point: Point, solid: boolean) {\r\n        this.mutate(\r\n            point, createTile(solid)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Outputs the grid to a console\r\n     * @param console\r\n     */\r\n    output(console: Console) {\r\n        for(let y = 0; y < this.height; y++) {\r\n            let str = '';\r\n            for(let x = 0; x < this.width; x++) {\r\n                str += this.tiles[y][x].data.isSolid + ', ';\r\n            }\r\n            console.log(str);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns json of tiles\r\n     */\r\n    getJson() {\r\n        return JSON.stringify(this.tiles);\r\n    }\r\n\r\n    /**\r\n     * Determines if a tile can be walked on\r\n     * @param point\r\n     */\r\n    walkable(point: Point) {\r\n        return !this.tiles[point.y][point.x].data.isSolid;\r\n    }\r\n\r\n    /**\r\n     * Determines if a tile isSolid\r\n     * @param point\r\n     */\r\n    isSolid(point: Point) {\r\n        return this.tiles[point.y][point.x].data.isSolid;\r\n    }\r\n\r\n    /**\r\n     * Determines if a tile is \"empty\"\r\n     *  Meaning it isn't solid and it has a pathCost of 1\r\n     * @param point\r\n     */\r\n    isEmpty(point: Point): boolean {\r\n        const data = this.tiles[point.y][point.x].data;\r\n        return data.pathCost === 1 && !data.isSolid\r\n    }\r\n\r\n    clone(): Grid {\r\n        const grid = new RectGrid(this.width, this.height);\r\n        for(let y = 0; y < grid.height; y++) {\r\n            for(let x = 0; x < grid.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                }\r\n                grid.mutateTile(this.get(point));\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a 2d matrix of empty nodes\r\n */\r\nfunction createEmptyGrid(width: number, height: number) {\r\n    const nodes: Tile[][] = [];\r\n    for(let y = 0; y < height; y++) {\r\n        const row: Tile[] = [];\r\n        for(let x = 0; x < width; x++) {\r\n            row.push({\r\n                point: {\r\n                    x: x, y: y\r\n                },\r\n                data: createTile(false)\r\n            });\r\n        }\r\n        nodes.push(row);\r\n    }\r\n    return nodes;\r\n}\r\n\r\nexport default RectGrid;","import React from 'react';\r\nimport './Grid.css';\r\nimport {Point} from '../../pathfinding/core/Components';\r\n\r\ninterface TileProps {\r\n    tileWidth: number,\r\n    point: Point,\r\n    color: string,\r\n}\r\n\r\nclass TileFg extends React.Component<TileProps>\r\n{\r\n    shouldComponentUpdate(nextProps: Readonly<TileProps>) {\r\n        const prevPoint = this.props.point;\r\n        const nextPoint = nextProps.point;\r\n        return prevPoint.y !== nextPoint.y ||\r\n            prevPoint.x !== nextPoint.x;\r\n    }\r\n\r\n    render() {\r\n        const size = this.props.tileWidth\r\n        const top = this.props.point.y * this.props.tileWidth;\r\n        const left = this.props.point.x * this.props.tileWidth;\r\n        return (\r\n            <div style={{\r\n                position: 'absolute',\r\n                width: size,\r\n                height: size,\r\n                top: top,\r\n                left: left,\r\n                backgroundColor: this.props.color,\r\n                display: 'block',\r\n                borderColor: this.props.color\r\n            }} className={'svg-tile tile-fg'}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TileFg;","import {Point} from '../../pathfinding/core/Components';\r\nimport React from 'react';\r\n\r\ninterface SolidProps {\r\n    tileSize: number,\r\n    point: Point,\r\n    doTileAnimation: boolean\r\n}\r\n\r\nclass SolidFg extends React.Component<SolidProps>\r\n{\r\n    private readonly doTileAnimation: boolean;\r\n\r\n    constructor(props: SolidProps) {\r\n        super(props)\r\n        this.doTileAnimation = this.props.doTileAnimation;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                style={{\r\n                    position: 'absolute',\r\n                    left: this.props.point.x * this.props.tileSize,\r\n                    top: this.props.point.y * this.props.tileSize,\r\n                    width: this.props.tileSize,\r\n                    height: this.props.tileSize\r\n                }}\r\n                className={this.doTileAnimation ? 'solid-animation' : 'solid'}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default SolidFg;","export default __webpack_public_path__ + \"static/media/weight.cae5804e.svg\";","import {Point} from '../../pathfinding/core/Components';\r\nimport React from 'react';\r\nimport Weight from '../web-content/weight.svg';\r\n\r\ninterface WeightProps {\r\n    tileSize: number,\r\n    point: Point,\r\n    doTileAnimation: boolean\r\n}\r\n\r\nclass WeightFg extends React.Component<WeightProps>\r\n{\r\n    private readonly doTileAnimation: boolean;\r\n\r\n    constructor(props: WeightProps) {\r\n        super(props)\r\n        this.doTileAnimation = this.props.doTileAnimation;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{\r\n                left: this.props.point.x * this.props.tileSize,\r\n                top: this.props.point.y * this.props.tileSize,\r\n                width: this.props.tileSize,\r\n                height: this.props.tileSize,\r\n                backgroundImage: `url(${Weight})`,\r\n                position: 'absolute'\r\n            }}\r\n                 className={this.doTileAnimation ? 'weight-animation' : 'weight'}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeightFg;","import React, {RefObject} from 'react';\r\nimport './Grid.css';\r\nimport {createTile, Point, Tile, TileData} from '../../pathfinding/core/Components';\r\nimport RectGrid, {Grid} from '../../pathfinding/core/Grid';\r\nimport TileFg from './TileFg';\r\nimport SolidFg from './SolidFg';\r\nimport WeightFg from './WeightFg';\r\n\r\ninterface IProps {\r\n    tileSize: number,\r\n    tilesX: number,\r\n    tilesY: number,\r\n    onTilesDragged: () => void,\r\n    topMargin: number\r\n}\r\n\r\ninterface IState {\r\n    grid: Grid,\r\n    initial: Point,\r\n    goal: Point,\r\n    path: Tile[]\r\n}\r\n\r\nconst INITIAL_COLOR = 'rgb(131, 217, 52)';\r\nconst GOAL_COLOR = 'rgb(203, 75, 14)';\r\nconst ARROW_PATH_COLOR = 'rgb(73, 79, 250)';\r\n\r\nconst BASE_WIDTH = 27;\r\n\r\nclass GridForeground extends React.Component<IProps,IState>\r\n{\r\n    private svg: RefObject<SVGSVGElement> = React.createRef();\r\n\r\n    private tilePointer: TileData;\r\n\r\n    private drawing: boolean = false;\r\n    private erasing: boolean = false;\r\n    private draggingInitial: boolean = false;\r\n    private draggingGoal: boolean = false;\r\n    private disable: boolean = false;\r\n\r\n    private doTileAnimation: boolean = true;\r\n\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    /**\r\n     * Constructs a GridForeground with immutable height and width\r\n     * @param props\r\n     */\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.width = this.props.tilesX;\r\n        this.height = this.props.tilesY;\r\n        const end = this.calcEndPointInView();\r\n        this.tilePointer = createTile(true);\r\n        this.state = {\r\n            grid: new RectGrid(this.width, this.height),\r\n            path: [],\r\n            initial: {\r\n                x: ((end.x)/3) >> 0,\r\n                y: ((end.y)/3) >> 0\r\n            },\r\n            goal: {\r\n                x: ((2*(end.x)/3) >> 0) - 1,\r\n                y: ((2*(end.y)/3) >> 0) - 1\r\n            }\r\n        }\r\n    }\r\n\r\n    changeTile(data: TileData) {\r\n        this.tilePointer = data;\r\n    }\r\n\r\n    calcEndPointInView() {\r\n        const xEnd = Math.round(window.innerWidth / this.props.tileSize);\r\n        const yEnd = Math.round((window.innerHeight - this.props.topMargin - 30) / this.props.tileSize);\r\n        return {\r\n            x: xEnd, y: yEnd\r\n        }\r\n    }\r\n\r\n    toggleDisable() {\r\n        this.disable = !this.disable;\r\n    }\r\n\r\n    getBoundingRect() {\r\n        return this.svg.current!.getBoundingClientRect();\r\n    }\r\n\r\n    mouseDown(e: MouseEvent) {\r\n        e.preventDefault();\r\n        const bounds = this.getBoundingRect();\r\n        this.onPress(e.clientX - bounds.left, e.clientY - bounds.top, e.button);\r\n    }\r\n\r\n    mouseUp(e: MouseEvent) {\r\n        e.preventDefault();\r\n        if(isControlKey(e.button)) {\r\n            this.draggingGoal = false;\r\n            this.draggingInitial = false;\r\n            this.drawing = false;\r\n            this.erasing = false;\r\n        }\r\n    }\r\n\r\n    mouseMove(e: MouseEvent) {\r\n        const bounds = this.getBoundingRect();\r\n        this.onDrag(e.clientX - bounds.left, e.clientY - bounds.top);\r\n    }\r\n\r\n    touchStart(e: TouchEvent) {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        const bounds = this.getBoundingRect();\r\n        this.onPress(touch.clientX - bounds.left, touch.clientY - bounds.top, 0);\r\n    }\r\n\r\n    touchMove(e: TouchEvent) {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        const bounds = this.getBoundingRect();\r\n        this.onDrag(touch.clientX - bounds.left, touch.clientY - bounds.top);\r\n    }\r\n\r\n    onEndingEvent(e: Event) {\r\n        e.preventDefault();\r\n        this.draggingGoal = false;\r\n        this.draggingInitial = false;\r\n        this.drawing = false;\r\n        this.erasing = false;\r\n    }\r\n\r\n    /**\r\n     * Responds to the event thrown at screen coordinates on press\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     * @param button\r\n     */\r\n    onPress(xCoordinate: number, yCoordinate: number, button: number) {\r\n        const point = this.calculatePoint(xCoordinate,yCoordinate);\r\n        if(isControlKey(button)) {\r\n            if(pointsEqual(point, this.state.initial)) {\r\n                this.draggingInitial = true;\r\n            } else if(pointsEqual(point, this.state.goal)) {\r\n                this.draggingGoal = true;\r\n            } else if(!this.disable) {\r\n                if(this.state.grid.isEmpty(point)) {\r\n                    this.drawing = true;\r\n                    this.drawTile(point);\r\n                } else {\r\n                    this.erasing = true;\r\n                    this.eraseTile(point);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Responds to the event thrown at screen coordinates on drag/move\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     */\r\n    onDrag(xCoordinate: number, yCoordinate: number) {\r\n        const point = this.calculatePoint(xCoordinate,yCoordinate);\r\n        if(this.draggingInitial) {\r\n            this.moveInitial(point);\r\n        } else if(this.draggingGoal) {\r\n            this.moveGoal(point);\r\n        } else if(!pointsEqual(point, this.state.initial)\r\n            && !pointsEqual(point, this.state.goal) && !this.disable)\r\n        {\r\n            if(this.drawing) {\r\n                this.drawTile(point);\r\n            } else if(this.erasing) {\r\n                this.eraseTile(point);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw an entire new grid on the foreground with disabled animations\r\n     * @param grid\r\n     */\r\n    drawGrid(grid: Grid) {\r\n        this.doTileAnimation = false;\r\n        this.setState({\r\n            grid: grid\r\n        }, () => this.doTileAnimation = true)\r\n    }\r\n\r\n    /**\r\n     * Draw tile at point\r\n     * @param point\r\n     */\r\n    drawTile(point: Point) {\r\n        const grid = this.state.grid.clone();\r\n        if(grid.inBounds(point)) {\r\n            grid.mutateTile({\r\n                point: point,\r\n                data: this.tilePointer\r\n            });\r\n        }\r\n        this.setState({\r\n            grid: grid\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if a node is visualized, then changes the tile to empty if it isn't\r\n     * @param point\r\n     */\r\n    eraseTile(point: Point) {\r\n        const grid = this.state.grid.clone();\r\n        if(grid.inBounds(point)) {\r\n            grid.mutateDefault(point, false);\r\n        }\r\n        this.setState({\r\n            grid: grid\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clear grid in state\r\n     */\r\n    clearTiles() {\r\n        const grid = this.state.grid.clone();\r\n        for(let y = 0; y < this.height; y++) {\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                }\r\n                grid.mutateDefault(point, false);\r\n            }\r\n        }\r\n        this.setState({\r\n            grid: grid\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Moves initial to a new point\r\n     * @param point\r\n     */\r\n    moveInitial(point: Point) {\r\n        if(this.canMoveEndPoint(point)) {\r\n            this.setState({\r\n                initial: point\r\n            }, () => this.props.onTilesDragged());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves goal to a new point\r\n     * @param point\r\n     */\r\n    moveGoal(point: Point) {\r\n        if(this.canMoveEndPoint(point)) {\r\n            this.setState({\r\n                goal: point\r\n            }, () => this.props.onTilesDragged());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if we can move any of the end points (goal or initial) to that point\r\n     * @param point\r\n     */\r\n    canMoveEndPoint(point: Point) {\r\n        return this.state.grid.inBounds(point)\r\n            && !this.state.grid.isSolid(point)\r\n            && !pointsEqual(this.state.initial, point)\r\n            && !pointsEqual(this.state.goal, point)\r\n            && !this.disable;\r\n    }\r\n\r\n    /**\r\n     * Draw a path onto the grid\r\n     * @param path\r\n     */\r\n    drawPath(path: Tile[]) {\r\n        this.setState({\r\n            path: path.slice()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Erase path from the grid\r\n     */\r\n    erasePath() {\r\n        this.setState({\r\n            path: []\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Converts real screen x,y coordinates into\r\n     * a 2d point position on the grid\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     */\r\n    calculatePoint(xCoordinate: number, yCoordinate: number) {\r\n        return {\r\n            x: Math.floor(xCoordinate/this.props.tileSize),\r\n            y: Math.floor(yCoordinate/this.props.tileSize)\r\n        }\r\n    }\r\n\r\n    resetPoints() {\r\n        const end = this.calcEndPointInView();\r\n        this.setState({\r\n            initial: {\r\n                x: ((end.x)/3) >> 0,\r\n                y: ((end.y)/3) >> 0\r\n            },\r\n            goal: {\r\n                x: ((2*(end.x)/3) >> 0) - 1,\r\n                y: ((2*(end.y)/3) >> 0) - 1\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        // console.timeEnd('time');\r\n        // console.time('time');\r\n        return (\r\n            <div>\r\n                <div className='endpoint-tiles-table'>\r\n                    {this.renderEndTile(this.state.initial, INITIAL_COLOR,'initial')}\r\n                    {this.renderEndTile(this.state.goal, GOAL_COLOR,'goal')}\r\n                </div>\r\n                <svg ref={this.svg} xmlns='http://www.w3.org/2000/svg' className='arrow-grid'>\r\n                    <defs>\r\n                        <marker id='arrowhead-path' markerWidth='3' markerHeight='3'\r\n                                refX='0' refY='1.5' orient='auto'\r\n                                fill={ARROW_PATH_COLOR}\r\n                        >\r\n                            <polygon points='0 0, 3 1.5, 0 3'/>\r\n                        </marker>\r\n                    </defs>\r\n                    {this.renderPath()}\r\n                </svg>\r\n                <div className='tiles-table'\r\n                     onContextMenu={e => e.preventDefault()}\r\n                     onMouseDown={e => this.mouseDown(e.nativeEvent)}\r\n                     onMouseUp={e => this.mouseUp(e.nativeEvent)}\r\n                     onMouseMove={e => this.mouseMove(e.nativeEvent)}\r\n                     onMouseLeave={e => this.onEndingEvent(e.nativeEvent)}\r\n                     onTouchStart={e => this.touchStart(e.nativeEvent)}\r\n                     onTouchMoveCapture={e => this.touchMove(e.nativeEvent)}\r\n                     onTouchEnd={e => this.onEndingEvent(e.nativeEvent)}\r\n                     onTouchCancel={e => this.onEndingEvent(e.nativeEvent)}\r\n                >\r\n                    {this.renderTilesTable()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderPath() {\r\n        const lines: JSX.Element[] = [];\r\n        for(let i = 0; i < this.state.path.length-1; i++) {\r\n            const first = this.state.path[i].point;\r\n            const second = this.state.path[i+1].point;\r\n            lines.push(this.renderPathArrow(i, first, second));\r\n        }\r\n        return lines;\r\n    }\r\n\r\n    renderPathArrow(index: number, first: Point, second: Point) {\r\n        const width = this.props.tileSize;\r\n        const offset = width/2;\r\n        const firstX = first.x * width;\r\n        const firstY = first.y * width;\r\n        const secondX = second.x * width;\r\n        const secondY = second.y * width;\r\n        const offsetX = (secondX - firstX)/4;\r\n        const offsetY = (secondY - firstY)/4;\r\n        return (\r\n            <line key={'path ' + index}\r\n                  x1={firstX + offset + offsetX}\r\n                  y1={firstY + offset + offsetY}\r\n                  x2={secondX + offset - offsetX}\r\n                  y2={secondY + offset - offsetY}\r\n                  stroke={ARROW_PATH_COLOR}\r\n                  strokeWidth={2 * this.props.tileSize/BASE_WIDTH}\r\n                  className='line'\r\n                  markerEnd='url(#arrowhead-path)' />\r\n        );\r\n    }\r\n\r\n    renderTilesTable() {\r\n        const tiles: JSX.Element[] = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                }\r\n                const cost = this.state.grid.get(point).data.pathCost;\r\n                if(this.state.grid.isSolid(point)) {\r\n                    //render a solid tile div\r\n                    tiles.push(\r\n                        <SolidFg key={x + ',' + y}\r\n                                  point={point}\r\n                                  tileSize={this.props.tileSize}\r\n                                  doTileAnimation={this.doTileAnimation}\r\n                        />\r\n                    );\r\n                } else if(cost > 1) {\r\n                    //render a weight svg\r\n                    tiles.push(\r\n                        <WeightFg key={x + ',' + y}\r\n                                  point={point}\r\n                                  tileSize={this.props.tileSize}\r\n                                  doTileAnimation={this.doTileAnimation}\r\n                        />\r\n                    );\r\n                    //render a div containing the cost as text\r\n                    tiles.push(\r\n                        this.renderWeightText(point, cost, x + ',' + y + ' text')\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    renderWeightText(point: Point, cost: number, key: string) {\r\n        return (\r\n            <div key={key}\r\n                 style={{\r\n                     left: point.x * this.props.tileSize,\r\n                     top: point.y * this.props.tileSize,\r\n                     width: this.props.tileSize,\r\n                     height: this.props.tileSize,\r\n                     position: 'absolute',\r\n                     color: 'white',\r\n                     fontSize: this.props.tileSize / 2.1,\r\n                     paddingTop: this.props.tileSize / 3.70,\r\n                     textAlign: 'center',\r\n                     cursor: 'default'\r\n                 }}\r\n            >\r\n                {cost}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderEndTile(point: Point, color: string, key: string) {\r\n        return <TileFg key={key} point={point}\r\n                       tileWidth={this.props.tileSize}\r\n                       color={color}/>\r\n    }\r\n}\r\n\r\nfunction pointsEqual(point1: Point, point2: Point) {\r\n    return point1.x === point2.x && point1.y === point2.y;\r\n}\r\n\r\nfunction isControlKey(button: number) {\r\n    //right or left mouse\r\n    return button === 0 || button === 2;\r\n}\r\n\r\nexport default GridForeground;","import React, {RefObject} from 'react';\r\nimport './Grid.css';\r\n\r\ninterface IProps {\r\n    algorithm: string,\r\n    length: number,\r\n    cost: number,\r\n    time: number,\r\n    nodes: number\r\n}\r\n\r\nclass StatsPanel extends React.Component<IProps>\r\n{\r\n    private readonly textLog: RefObject<HTMLTextAreaElement> = React.createRef();\r\n\r\n    componentDidUpdate() {\r\n        this.textLog.current!.scrollTop = this.textLog.current!.scrollHeight;\r\n    }\r\n\r\n    getHeight() {\r\n        //top border: 1\r\n        return this.textLog.current!.clientHeight + 1;\r\n    }\r\n\r\n    render() {\r\n        const time = precise(this.props.time);\r\n        const text = this.props.algorithm === '' ? '' :\r\n            this.props.algorithm +\r\n            ' visited ' +\r\n            this.props.nodes +\r\n            ' nodes in ' +\r\n            time +\r\n            ' ms. Path length = ' +\r\n            this.props.length +\r\n            '. Path cost = ' +\r\n            this.props.cost +\r\n            '. ';\r\n        return(\r\n            <textarea tabIndex={-1} ref={this.textLog} readOnly={true}\r\n                      className='stats-text-area no-select'\r\n                      value={text} unselectable={'on'} onDrop={() => false}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction precise(x: number) {\r\n    return x.toFixed(2);\r\n}\r\n\r\nexport default StatsPanel;","import {Point, Tile} from './Components';\r\nimport Navigator, {UNIT} from './Navigator';\r\n\r\n/**\r\n * Concretion of a Plus Navigator for a grid\r\n * Allows movement akin to a 'plus' symbol\r\n */\r\nclass PlusNavigator extends Navigator\r\n{\r\n    /**\r\n     * Adds the neighbors of a point to the left, right, top and down\r\n     * @param point\r\n     */\r\n    neighbors(point: Point): Tile[] {\r\n        const tiles: Tile[] = [];\r\n        if(point.x + UNIT < this.grid.getWidth()) {\r\n            const tile = this.grid.get({\r\n                x: point.x + UNIT,\r\n                y: point.y\r\n            })\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.y + UNIT < this.grid.getHeight()) {\r\n            const tile = this.grid.get({\r\n                x: point.x,\r\n                y: point.y + UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.x - UNIT >= 0) {\r\n            const tile = this.grid.get({\r\n                x: point.x - UNIT,\r\n                y: point.y\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.y - UNIT >= 0) {\r\n            const tile = this.grid.get({\r\n                x: point.x,\r\n                y: point.y - UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    /**\r\n     * Step cost function that works by getting the pathCost stored in the grid\r\n     * from one point a to b\r\n     * @param a\r\n     * @param b to point to travel to\r\n     */\r\n    cost(a: Point, b: Point) {\r\n        return this.grid.get(b).data.pathCost;\r\n    }\r\n\r\n    getType() {\r\n        return 'plus';\r\n    }\r\n}\r\n\r\nexport default PlusNavigator;","import {Grid} from './Grid';\r\nimport {Point, Tile} from './Components';\r\n\r\nexport const UNIT = 1; //number of tiles we can move at once\r\n\r\n/**\r\n * Describes an abstract navigator for a grid\r\n * Provides graph-like traversal for the grid\r\n * Determines where we can travel to from a certain point,\r\n * whether we have reached a destination, and the cost to\r\n * travel to a certain point\r\n */\r\nabstract class Navigator\r\n{\r\n    protected readonly grid: Grid;\r\n\r\n    constructor(grid: Grid) {\r\n        this.grid = grid;\r\n    }\r\n\r\n    getGrid() {\r\n        return this.grid;\r\n    }\r\n\r\n    /**\r\n     * Goal check function: Checks if two points are equal\r\n     * @param a\r\n     * @param b\r\n     */\r\n    equals(a: Point, b: Point) {\r\n        return a.x === b.x && a.y === b.y;\r\n    }\r\n\r\n    /**\r\n     * Step cost function from a to b\r\n     * @param a\r\n     * @param b to point to travel to\r\n     */\r\n    abstract cost(a: Point, b: Point): number;\r\n\r\n    /**\r\n     * Neighbors function: Gets the available neighbors for a point in a grid we can make\r\n     * in a given move\r\n     * @param point\r\n     */\r\n    abstract neighbors(point: Point): Tile[];\r\n\r\n    abstract getType(): string;\r\n}\r\n\r\nexport default Navigator;","import {Point} from '../core/Components';\r\n\r\nexport type HeuristicFunc = (a: Point, b: Point) => number;\r\n\r\nexport function manhattan(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x) ;\r\n    const dy = Math.abs(a.y - b.y);\r\n    return dx + dy;\r\n}\r\n\r\nexport function euclidean(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n}\r\n\r\nexport function octile(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.SQRT2 * Math.min(dx, dy) + Math.abs(dx - dy);\r\n}\r\n\r\nexport function chebyshev(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.max(dx, dy);\r\n}\r\n\r\nexport function nullHeuristic(): number {\r\n    return 0;\r\n}","import {Point} from '../core/Components';\r\n\r\n/**\r\n * A simple data structure that keeps track of whether keys have been added to it\r\n */\r\nexport class HashSet\r\n{\r\n    private map: {[key: string]: boolean | undefined} = {};\r\n\r\n    add(key: string) {\r\n        this.map[key] = true;\r\n    }\r\n\r\n    remove(key: string) {\r\n        this.map[key] = undefined;\r\n    }\r\n\r\n    has(key: string) {\r\n        return this.map[key] !== undefined;\r\n    }\r\n\r\n    clear() {\r\n        this.map = {};\r\n    }\r\n}\r\n\r\n/**\r\n * A simple data structure that stores a type at a key\r\n */\r\nexport class HashTable<Value>\r\n{\r\n    private map: {[key: string]: Value | undefined} = {};\r\n\r\n    add(key: string, data: Value) {\r\n        this.map[key] = data;\r\n    }\r\n\r\n    remove(key: string) {\r\n        this.map[key] = undefined;\r\n    }\r\n\r\n    get(key: string) {\r\n        return this.map[key];\r\n    }\r\n\r\n    has(key: string) {\r\n        return this.map[key] !== undefined;\r\n    }\r\n\r\n    clear() {\r\n        this.map = {};\r\n    }\r\n}\r\n\r\n/**\r\n * Serialize point into a unique string\r\n * @param point\r\n */\r\nexport function stringify(point: Point) {\r\n    return 'x' + point.x + 'y' + point.y;\r\n}","/**\r\n * A compare function to determine if a is 'better' (deserves a higher position) than b\r\n */\r\nexport type Comparator<E> = (a: E, b: E) => boolean\r\n\r\n/**\r\n * Minimalist Implementation of the heap data structure as an array\r\n */\r\nclass Heap<E>\r\n{\r\n    private elements: E[] = [];\r\n    readonly compare: Comparator<E>;\r\n\r\n    constructor(compare: Comparator<E>) {\r\n        this.compare = compare;\r\n    }\r\n\r\n    /**\r\n     * Returns the size of the heap\r\n     */\r\n    getSize() {\r\n        return this.elements.length;\r\n    }\r\n\r\n    /**\r\n     * Checks if heap is empty\r\n     */\r\n    isEmpty() {\r\n        return this.elements.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Add a new element to the heap\r\n     * @param e\r\n     */\r\n    push(e: E) {\r\n        this.elements.push(e);\r\n        this.siftUp(this.elements.length-1); //last element\r\n    }\r\n\r\n    /**\r\n     * Returns the top of the heap without removing it\r\n     * Fails if heap is empty\r\n     */\r\n    peek() {\r\n        return this.elements[0];\r\n    }\r\n\r\n    /**\r\n     * Returns the top of the heap and removes it\r\n     * Fails if heap is empty\r\n     */\r\n    pop() {\r\n        const val = this.peek();\r\n        this.move(this.elements.length - 1, 0);\r\n        this.elements.pop();\r\n        this.siftDown(0);\r\n        return val;\r\n    }\r\n\r\n    /**\r\n     * Clear the heap\r\n     */\r\n    clear() {\r\n        this.elements = [];\r\n    }\r\n\r\n    /**\r\n     * Sifts a new element that is out of order up to the right position\r\n     * @param pos of new element\r\n     */\r\n    private siftUp(pos: number) {\r\n        let parent = ((pos - 1) / 2) >> 0; //integer division\r\n        while(parent >= 0) {\r\n            //if the current position is better than parent\r\n            if(this.compare(this.elements[pos], this.elements[parent])) {\r\n                //then current position with parent and move to next\r\n                this.swap(pos, parent);\r\n                pos = parent;\r\n                parent = ((pos - 1) / 2) >> 0;\r\n            } else {\r\n                //otherwise stop\r\n                parent = -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sifts a new element that is out of order down to the right position\r\n     * @param pos of new element\r\n     */\r\n    private siftDown(pos: number) {\r\n        const left = 2 * pos + 1;\r\n        const right = 2 * pos + 2;\r\n        //stop if the children are out of bounds\r\n        if(left >= this.elements.length) {\r\n            return;\r\n        }\r\n        //find the better child\r\n        const child = (right >= this.elements.length || this.compare(this.elements[left], this.elements[right]))\r\n            ? left : right;\r\n        //continues to sift down if the child is better than the current position\r\n        if(this.compare(this.elements[child], this.elements[pos])) {\r\n            this.swap(child, pos);\r\n            this.siftDown(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Internal move function\r\n     * @param from\r\n     * @param to\r\n     */\r\n    private move(from: number, to: number) {\r\n        this.elements[to] = this.elements[from];\r\n    }\r\n\r\n    /**\r\n     * Internal swap function\r\n     * @param a\r\n     * @param b\r\n     */\r\n    private swap(a: number, b: number) {\r\n        let val = this.elements[a];\r\n        this.elements[a] = this.elements[b];\r\n        this.elements[b] = val;\r\n    }\r\n}\r\n\r\nexport default Heap;","import {Point, Tile} from '../core/Components';\r\nimport Navigator from '../core/Navigator';\r\nimport {Node} from './Node';\r\n\r\n/**\r\n * Pathfinder performs algorithms operations on the grid\r\n * Uses the navigator rank and expand nodes\r\n */\r\nabstract class Pathfinder\r\n{\r\n    protected recentSearch: Node[] = [];\r\n    protected navigator: Navigator;\r\n\r\n    constructor(navigator: Navigator) {\r\n        this.navigator = navigator;\r\n    }\r\n\r\n    setNavigator(navigator: Navigator) {\r\n        this.navigator = navigator;\r\n    }\r\n\r\n    getNavigator() {\r\n        return this.navigator;\r\n    }\r\n\r\n    getRecentNodes() {\r\n        return this.recentSearch.length;\r\n    }\r\n\r\n    clearRecentSearch() {\r\n        this.recentSearch = [];\r\n    }\r\n\r\n    getRecentGenerations() {\r\n        return this.recentSearch.slice();\r\n    }\r\n\r\n    protected addRecent(node: Node) {\r\n        this.recentSearch.push(node);\r\n    }\r\n\r\n    abstract getAlgorithmName(): string;\r\n\r\n    /**\r\n     * Finds the best path between initial and goal on the grid\r\n     * and returns it in an array\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    abstract findPath(initial: Point, goal: Point): Tile[];\r\n}\r\n\r\n/**\r\n * Reconstructs the path from a tree, given the bottomLeaf, and\r\n * returns the shortest path in an array\r\n * @param bottomLeaf bottom of the tree to start from\r\n */\r\nexport function reconstructPath(bottomLeaf: Node): Tile[] {\r\n    return reconstructPathReversed(bottomLeaf).reverse();\r\n}\r\n\r\n/**\r\n * Reconstructs the path from a tree, given the bottomLeaf, and\r\n * returns the shortest path in an array\r\n * @param bottomLeaf bottom of the tree to start from\r\n */\r\nexport function reconstructPathReversed(bottomLeaf: Node): Tile[] {\r\n    const path: Tile[] = [];\r\n    while(bottomLeaf.parent !== null) {\r\n        path.push(bottomLeaf.tile);\r\n        bottomLeaf = bottomLeaf.parent;\r\n    }\r\n    return path;\r\n}\r\n\r\nexport default Pathfinder;","import {Tile} from '../core/Components';\r\n\r\n/**\r\n * Represents a search Tree Node\r\n */\r\nexport class Node\r\n{\r\n    parent: Node | null = null; //parent node\r\n    readonly children: Node[] = [];\r\n    readonly tile: Tile; //stores a graph node\r\n\r\n    constructor(tile: Tile) {\r\n        this.tile = tile;\r\n    }\r\n\r\n    addChild(child: Node) {\r\n        child.parent = this;\r\n        this.children.push(child);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents an heuristic weighted aStar search tree node\r\n */\r\nexport class AStarNode extends Node\r\n{\r\n    readonly g: number; //path cost\r\n    readonly fScore: number; //heuristic\r\n\r\n    constructor(tile: Tile, g: number, fScore: number) {\r\n        super(tile);\r\n        this.g = g;\r\n        this.fScore = fScore;\r\n    }\r\n\r\n    f() {\r\n        return this.fScore;\r\n    }\r\n}\r\n","import {HashSet, HashTable, stringify} from '../structures/Hash';\r\nimport Heap from '../structures/Heap';\r\nimport Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {AStarNode} from './Node';\r\nimport Navigator from '../core/Navigator';\r\nimport {euclidean, HeuristicFunc} from './Heuristics';\r\n\r\nclass AStarPathfinder extends Pathfinder\r\n{\r\n    private readonly heuristicFunc: HeuristicFunc = (a: Point, b: Point) => euclidean(a,b);\r\n    private readonly p: number; //tie breaker\r\n\r\n    constructor(navigator: Navigator, func?: HeuristicFunc) {\r\n        super(navigator);\r\n        const grid = this.getNavigator().getGrid();\r\n        //minimum cost of taking one step / expected maximum path length\r\n        this.p = 1/(grid.getWidth() * grid.getHeight());\r\n        if(func !== undefined) {\r\n            this.heuristicFunc = func;\r\n        }\r\n    }\r\n\r\n    getAlgorithmName(): string {\r\n        return 'A*';\r\n    }\r\n\r\n    /**\r\n     * Performs aStar algorithm on the grid given an initial and goal point\r\n     * Always returns the shortest path, and performs well on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const openFrontier = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const closedSet = new HashSet();\r\n        const openSet = new HashTable<number>();\r\n        const root = new AStarNode(\r\n            grid.get(initial), 0, 0\r\n        );\r\n        openFrontier.push(root);\r\n        openSet.add(stringify(initial), root.g);\r\n        while (!openFrontier.isEmpty()) {\r\n            const currentNode = openFrontier.pop();\r\n            const currentPoint = currentNode.tile.point;\r\n            const currentKey = stringify(currentPoint);\r\n            openSet.remove(currentKey);\r\n            closedSet.add(currentKey);\r\n            this.addRecent(currentNode);\r\n            if (this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            for (const neighbor of this.navigator.neighbors(currentPoint)) {\r\n                const neighborPoint = neighbor.point;\r\n                const neighborKey = stringify(neighborPoint);\r\n                if(closedSet.has(neighborKey)) {\r\n                    continue;\r\n                }\r\n                const g = currentNode.g + this.stepCost(currentPoint, neighborPoint);\r\n                const f = g + this.heuristic(neighborPoint, goal);\r\n                if (!openSet.has(neighborKey) || g < openSet.get(neighborKey)!) {\r\n                    const neighborNode = new AStarNode(\r\n                        neighbor, g, f\r\n                    );\r\n                    currentNode.addChild(neighborNode);\r\n                    openFrontier.push(neighborNode);\r\n                    openSet.add(neighborKey, neighborNode.g);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Heuristic function used to estimate distance between points a and b\r\n     * Includes tie breaker to prevent exploring lots of identical paths\r\n     * @param a\r\n     * @param b\r\n     */\r\n    heuristic(a: Point, b: Point) {\r\n        return this.heuristicFunc(a, b) * (1 + this.p);\r\n    }\r\n\r\n    /**\r\n     * The step-cost function to be used, calculating the cost from\r\n     * currentPoint to neighborPoint. Uses the stepCost function provided by the\r\n     * navigator by default but can be overridden\r\n     * @param currentPoint\r\n     * @param neighborPoint\r\n     */\r\n    stepCost(currentPoint: Point, neighborPoint: Point) {\r\n        return this.navigator.cost(currentPoint, neighborPoint);\r\n    }\r\n}\r\n\r\nexport default AStarPathfinder;","import Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {HashSet, stringify} from '../structures/Hash';\r\nimport {Node} from './Node';\r\n\r\nclass BFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName(): string {\r\n        return 'Breadth First Search';\r\n    }\r\n\r\n    /**\r\n     * Implementation of BFS to find the shortest path from initial to point\r\n     * Doesn't always return the shortest path, and performs poorly on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const frontier: Node[] = []; //fifo, stores nodes on the frontier\r\n        const visited = new HashSet();\r\n        const root = new Node(grid.get(initial));\r\n        frontier.push(root); //enqueue\r\n        visited.add(stringify(initial));\r\n        while(frontier.length !== 0) { //not empty\r\n            const currentNode = frontier.shift()!; //dequeue\r\n            const currentPoint = currentNode.tile.point;\r\n            this.addRecent(currentNode);\r\n            if(this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            for(const neighbor of this.navigator.neighbors(currentPoint)) {\r\n                const neighborKey = stringify(neighbor.point);\r\n                if(!visited.has(neighborKey)) {\r\n                    const neighborNode = new Node(neighbor);\r\n                    currentNode.addChild(neighborNode);\r\n                    frontier.push(neighborNode); //enqueue\r\n                    visited.add(neighborKey);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default BFSPathfinder;","/**\r\n * Stack node\r\n */\r\nclass Node<E>\r\n{\r\n    next: Node<E> | null = null;\r\n    data: E;\r\n\r\n    constructor(data: E) {\r\n        this.data = data;\r\n    }\r\n}\r\n\r\n/**\r\n * Minimalist Implementation of the stack data structure\r\n */\r\nclass Stack<E>\r\n{\r\n    private top: Node<E> | null = null;\r\n    private size: number = 0;\r\n\r\n    peek() {\r\n        return this.top != null ? this.top.data : undefined;\r\n    }\r\n\r\n    push(e: E) {\r\n        const node = new Node(e);\r\n        node.next = this.top;\r\n        this.top = node;\r\n        this.size++;\r\n    }\r\n\r\n    pop() {\r\n        const top = this.peek();\r\n        if(this.top != null) {\r\n            this.top = this.top.next;\r\n            this.size--;\r\n        }\r\n        return top;\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.size === 0;\r\n    }\r\n\r\n    getSize() {\r\n        return this.size;\r\n    }\r\n}\r\n\r\nexport default Stack;","import Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {HashSet, stringify} from '../structures/Hash';\r\nimport {Node} from './Node';\r\nimport Stack from '../structures/Stack';\r\n\r\nclass DFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName(): string {\r\n        return 'Depth First Search';\r\n    }\r\n\r\n    /**\r\n     * Calls DFS between a start and goal point, will typically not find the 'Best' path,\r\n     * and will instead find the best path capable for the algorithm\r\n     * As this algorithm is non optimal it should only be used for educational purposes\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const root = new Node(grid.get(initial));\r\n        const frontier = new Stack<Node>();\r\n        frontier.push(root);\r\n        const visited = new HashSet();\r\n        while(!frontier.isEmpty()) {\r\n            const currentNode = frontier.pop()!;\r\n            const currentPoint = currentNode.tile.point;\r\n            visited.add(stringify(currentPoint));\r\n            this.addRecent(currentNode);\r\n            if(this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            const neighbors = this.navigator.neighbors(currentPoint).reverse();\r\n            for(const neighbor of neighbors){\r\n                const neighborKey = stringify(neighbor.point);\r\n                if(!visited.has(neighborKey)) {\r\n                    const neighborNode = new Node(neighbor);\r\n                    currentNode.addChild(neighborNode);\r\n                    frontier.push(neighborNode);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default DFSPathfinder;\r\n","import {HashSet, HashTable, stringify} from '../structures/Hash';\r\nimport Heap from '../structures/Heap';\r\nimport Pathfinder, {reconstructPath, reconstructPathReversed} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {AStarNode} from './Node';\r\nimport Navigator from '../core/Navigator';\r\nimport {euclidean, HeuristicFunc} from './Heuristics';\r\n\r\ninterface ControlStructures {\r\n    openSet: HashTable<AStarNode>,\r\n    closedSet: HashSet,\r\n    openFrontier: Heap<AStarNode>\r\n}\r\n\r\nclass BiAStarPathfinder extends Pathfinder\r\n{\r\n    private readonly heuristic: HeuristicFunc = (a: Point, b: Point) => euclidean(a,b);\r\n\r\n    constructor(navigator: Navigator, func?: HeuristicFunc) {\r\n        super(navigator);\r\n        if(func !== undefined) {\r\n            this.heuristic = func;\r\n        }\r\n    }\r\n\r\n    getAlgorithmName(): string {\r\n        return 'Bidirectional A*';\r\n    }\r\n\r\n    /**\r\n     * Performs aStar algorithm on the grid given an initial and goal point\r\n     * Doesn't always returns the shortest path, but performs well on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const closedSet = new HashSet();\r\n        const startOpenFrontier = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const startOpenSet = new HashTable<AStarNode>();\r\n        const endOpenFrontier = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const endOpenSet = new HashTable<AStarNode>();\r\n        const initialRoot = new AStarNode(\r\n            grid.get(initial), 0, 0\r\n        );\r\n        startOpenFrontier.push(initialRoot);\r\n        startOpenSet.add(stringify(initial), initialRoot);\r\n        const goalRoot = new AStarNode(\r\n            grid.get(goal), 0, 0\r\n        );\r\n        endOpenFrontier.push(goalRoot);\r\n        endOpenSet.add(stringify(goal), goalRoot);\r\n        while (!startOpenFrontier.isEmpty() && !endOpenFrontier.isEmpty()) {\r\n            //expand startOpenFrontier\r\n            const startCurrentNode = startOpenFrontier.pop();\r\n            const startCurrentPoint = startCurrentNode.tile.point;\r\n            const startCurrentPointKey = stringify(startCurrentPoint);\r\n            startOpenSet.remove(startCurrentPointKey);\r\n            closedSet.add(startCurrentPointKey);\r\n            this.addRecent(startCurrentNode);\r\n            if(endOpenSet.has(startCurrentPointKey)) {\r\n                if(startCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startCurrentNode.parent\r\n                    ).concat(reconstructPathReversed(\r\n                        endOpenSet.get(startCurrentPointKey)!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            this.doAStarExpansion({\r\n                openFrontier: startOpenFrontier,\r\n                openSet: startOpenSet,\r\n                closedSet: closedSet\r\n            }, startCurrentNode, goal);\r\n            //expand endOpenFrontier\r\n            const endCurrentNode = endOpenFrontier.pop();\r\n            const endCurrentPoint = endCurrentNode.tile.point;\r\n            const endCurrentPointKey = stringify(endCurrentPoint);\r\n            endOpenSet.remove(endCurrentPointKey);\r\n            closedSet.add(endCurrentPointKey);\r\n            this.addRecent(endCurrentNode);\r\n            if(startOpenSet.has(endCurrentPointKey)) {\r\n                if(endCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startOpenSet.get(endCurrentPointKey)!\r\n                    ).concat(reconstructPathReversed(\r\n                        endCurrentNode.parent!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            this.doAStarExpansion({\r\n                openFrontier: endOpenFrontier,\r\n                openSet: endOpenSet,\r\n                closedSet: closedSet\r\n            }, endCurrentNode, initial);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    private doAStarExpansion(structures: ControlStructures, currentNode: AStarNode, endPoint: Point) {\r\n        const currentPoint = currentNode.tile.point;\r\n        for (const neighbor of this.navigator.neighbors(currentPoint)) {\r\n            const neighborPoint = neighbor.point;\r\n            const neighborKey = stringify(neighborPoint);\r\n            if(structures.closedSet.has(neighborKey)) {\r\n                continue;\r\n            }\r\n            const g = currentNode.g + this.stepCost(currentPoint, neighborPoint);\r\n            const f = g + this.heuristic(neighborPoint, endPoint);\r\n            if (!structures.openSet.has(neighborKey) || g < structures.openSet.get(neighborKey)!.g) {\r\n                const neighborNode = new AStarNode(\r\n                    neighbor, g, f\r\n                );\r\n                currentNode.addChild(neighborNode);\r\n                structures.openFrontier.push(neighborNode);\r\n                structures.openSet.add(neighborKey, neighborNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The step-cost function to be used, calculating the cost from\r\n     * currentPoint to neighborPoint. Uses the stepCost function provided by the\r\n     * navigator by default but can be overridden\r\n     * @param currentPoint\r\n     * @param neighborPoint\r\n     */\r\n    stepCost(currentPoint: Point, neighborPoint: Point) {\r\n        return this.navigator.cost(currentPoint, neighborPoint);\r\n    }\r\n}\r\n\r\nexport default BiAStarPathfinder;","import Pathfinder, {reconstructPath, reconstructPathReversed} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {HashTable, stringify} from '../structures/Hash';\r\nimport {Node} from './Node';\r\n\r\ninterface ControlStructures {\r\n    frontier: Node[],\r\n    visited: HashTable<Node>\r\n}\r\n\r\nclass BiBFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName(): string {\r\n        return 'Bidirectional Breadth First Search';\r\n    }\r\n\r\n    /**\r\n     * Implementation of BFS to find the shortest path from initial to point\r\n     * Doesn't always return the shortest path, and performs poorly on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const startVisited = new HashTable<Node>();\r\n        const endVisited = new HashTable<Node>();\r\n        const startFrontier: Node[] = [];\r\n        const endFrontier: Node[] = [];\r\n        const initialRoot = new Node(grid.get(initial));\r\n        startFrontier.push(initialRoot);\r\n        startVisited.add(stringify(initial), initialRoot);\r\n        const goalRoot = new Node(grid.get(goal));\r\n        endFrontier.push(goalRoot);\r\n        endVisited.add(stringify(goal), goalRoot);\r\n        while(startFrontier.length !== 0 && endFrontier.length !== 0) {\r\n            //expand startQueue\r\n            const startCurrentNode = startFrontier.shift()!;\r\n            const startCurrentPoint = startCurrentNode.tile.point;\r\n            const startCurrentPointKey = stringify(startCurrentPoint);\r\n            this.addRecent(startCurrentNode);\r\n            if(endVisited.has(startCurrentPointKey)) {\r\n                if(startCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startCurrentNode.parent\r\n                    ).concat(reconstructPathReversed(\r\n                        endVisited.get(startCurrentPointKey)!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            this.doBFSExpansion({\r\n                frontier: startFrontier,\r\n                visited: startVisited\r\n            }, startCurrentNode);\r\n            //expand endQueue\r\n            const endCurrentNode = endFrontier.shift()!;\r\n            const endCurrentPoint = endCurrentNode.tile.point;\r\n            const endCurrentPointKey = stringify(endCurrentPoint);\r\n            this.addRecent(endCurrentNode);\r\n            if(startVisited.has(endCurrentPointKey)) {\r\n                if(endCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startVisited.get(endCurrentPointKey)!\r\n                    ).concat(reconstructPathReversed(\r\n                        endCurrentNode.parent\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            this.doBFSExpansion({\r\n                frontier: endFrontier,\r\n                visited: endVisited\r\n            }, endCurrentNode);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    private doBFSExpansion(structures: ControlStructures, currentNode: Node) {\r\n        const currentPoint = currentNode.tile.point;\r\n        for(const neighbor of this.navigator.neighbors(currentPoint)) {\r\n            const neighborKey = stringify(neighbor.point);\r\n            if(!structures.visited.has(neighborKey)) {\r\n                const neighborNode = new Node(neighbor);\r\n                currentNode.addChild(neighborNode);\r\n                structures.frontier.push(neighborNode);\r\n                structures.visited.add(neighborKey, neighborNode);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default BiBFSPathfinder;","import Navigator from '../core/Navigator';\r\nimport PlusNavigator from '../core/PlusNavigator';\r\nimport {Point} from '../core/Components';\r\nimport {Grid} from '../core/Grid';\r\nimport {chebyshev, euclidean, HeuristicFunc, manhattan, nullHeuristic, octile} from './Heuristics';\r\nimport Pathfinder from './Pathfinder';\r\nimport AStarPathfinder from './AStar';\r\nimport BFSPathfinder from './BFS';\r\nimport DFSPathfinder from './DFS';\r\nimport BiAStarPathfinder from './BidirectionalAStar';\r\nimport BiBFSPathfinder from \"./BidirectionalBFS\";\r\n\r\nconst CREATE_NAVIGATOR: {[key: string]: ((grid: Grid) => Navigator)} = {\r\n    'plus': (grid: Grid) => new PlusNavigator(grid),\r\n}\r\n\r\nconst CREATE_HEURISTIC: {[key: string]: (() => HeuristicFunc)} = {\r\n    'manhattan': () => manhattan,\r\n    'euclidean': () => euclidean,\r\n    'chebyshev': () => chebyshev,\r\n    'octile': () => octile,\r\n    'null': () => nullHeuristic\r\n}\r\n\r\nconst CREATE_PATHFINDER: {[key: string]: ((navigator: Navigator, heuristic: HeuristicFunc) => Pathfinder)} = {\r\n    'dijkstra': (navigator) => {\r\n        return new (class DijkstraPathfinder extends AStarPathfinder {\r\n            getAlgorithmName(): string {\r\n                return 'Dijkstra';\r\n            }\r\n        })(navigator, nullHeuristic);\r\n    },\r\n    'best-first': (navigator, heuristic) => {\r\n        return new (class BestFirstPathfinder extends AStarPathfinder {\r\n            stepCost(currentPoint: Point, neighborPoint: Point) {\r\n                return 0;\r\n            }\r\n            getAlgorithmName(): string {\r\n                return 'Best-First Search';\r\n            }\r\n        })(navigator, heuristic);\r\n    },\r\n    'a*': (navigator, heuristic) => {\r\n        return new AStarPathfinder(navigator, heuristic);\r\n    },\r\n    'bfs': (navigator) => {\r\n        return new BFSPathfinder(navigator);\r\n    },\r\n    'dfs': (navigator) => {\r\n        return new DFSPathfinder(navigator);\r\n    },\r\n    'bi-a*': (navigator, heuristic) => {\r\n        return new BiAStarPathfinder(navigator, heuristic);\r\n    },\r\n    'bi-dijkstra': (navigator) => {\r\n        return new (class BiDijkstraPathfinder extends BiAStarPathfinder {\r\n            getAlgorithmName(): string {\r\n                return 'Bidirectional Dijkstra';\r\n            }\r\n        })(navigator, nullHeuristic);\r\n    },\r\n    'bi-bfs': (navigator) => {\r\n        return new BiBFSPathfinder(navigator);\r\n    }\r\n}\r\n\r\nclass PathfinderBuilder\r\n{\r\n    private navigator: string = 'plus';\r\n    private algorithm: string = 'a*';\r\n    private heuristic: string = 'null';\r\n    private readonly grid: Readonly<Grid>;\r\n\r\n    constructor(grid: Readonly<Grid>) {\r\n        this.grid = grid;\r\n    }\r\n\r\n    setNavigator(navigator: string) {\r\n        navigator = navigator.toLowerCase();\r\n        if(CREATE_NAVIGATOR[navigator] == null) {\r\n            throw new Error('No such navigator pattern exists')\r\n        } else {\r\n            this.navigator = navigator;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setAlgorithm(algorithm: string) {\r\n        algorithm = algorithm.toLowerCase();\r\n        if(CREATE_PATHFINDER[algorithm] == null) {\r\n            throw new Error('No such pathfinding algorithm exists')\r\n        } else {\r\n            this.algorithm = algorithm;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setHeuristic(heuristic: string) {\r\n        heuristic = heuristic.toLowerCase();\r\n        if(CREATE_HEURISTIC[heuristic] == null) {\r\n            throw new Error('No such heuristic function exists')\r\n        } else {\r\n            this.heuristic = heuristic;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Builds a pathfinder with a navigator with the set algorithm, heuristic, and navigator\r\n     */\r\n    build() {\r\n        const createHeuristic = CREATE_HEURISTIC[this.heuristic];\r\n        const createNavigator = CREATE_NAVIGATOR[this.navigator];\r\n        const createPathfinder = CREATE_PATHFINDER[this.algorithm];\r\n        return createPathfinder(createNavigator(this.grid), createHeuristic());\r\n    }\r\n\r\n    static usesHeuristic(algorithm: string) {\r\n        return algorithm === 'a*' || algorithm === 'bi-a*' ||\r\n            algorithm === 'best-first';\r\n    }\r\n\r\n    static hasBidirectional(algorithm: string) {\r\n        return CREATE_PATHFINDER['bi-' + algorithm] != null;\r\n    }\r\n\r\n    static makeBidirectional(algorithm: string) {\r\n        return 'bi-' + algorithm;\r\n    }\r\n}\r\n\r\nexport default PathfinderBuilder;\r\n\r\n","class VirtualTimer\r\n{\r\n    private timeout: NodeJS.Timeout;\r\n    private readonly callback: () => void\r\n    private timeStarted: number;\r\n    private timeRemaining: number;\r\n    private finished: boolean;\r\n\r\n    constructor(callback: () => void, countDown: number) {\r\n        this.callback = callback;\r\n        this.finished = false;\r\n        this.timeStarted = Date.now();\r\n        this.timeRemaining = countDown;\r\n        this.timeout = setTimeout(() => {\r\n            callback();\r\n            this.finished = true;\r\n        }, this.timeRemaining);\r\n    }\r\n\r\n    clear() {\r\n        clearTimeout(this.timeout);\r\n        this.finished = true;\r\n    }\r\n\r\n    pause() {\r\n        if(!this.finished) {\r\n            clearTimeout(this.timeout);\r\n            this.timeRemaining -= Date.now() - this.timeStarted;\r\n        }\r\n    }\r\n\r\n    resume() {\r\n        if(!this.finished) {\r\n            this.timeStarted = Date.now();\r\n            this.timeout = setTimeout(() => {\r\n                this.callback();\r\n                this.finished = true;\r\n            }, this.timeRemaining);\r\n        }\r\n    }\r\n\r\n    isFinished() {\r\n        return this.finished;\r\n    }\r\n\r\n    getNativeTimeout() {\r\n        return this.timeout;\r\n    }\r\n}\r\n\r\nexport default VirtualTimer;","import {createTile, Point, Tile, TileData} from '../core/Components';\r\nimport {Grid} from '../core/Grid';\r\nimport {HashSet, stringify} from '../structures/Hash';\r\n\r\nabstract class TerrainGenerator\r\n{\r\n    protected readonly width: number;\r\n    protected readonly height: number;\r\n    protected readonly ignore: HashSet;\r\n    protected readonly data: TileData;\r\n\r\n    protected constructor(width: number, height: number, data?: TileData, ignore?: Point[]) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.ignore = new HashSet();\r\n        if(data !== undefined) {\r\n            this.data = data;\r\n        } else {\r\n            this.data = createTile(true);\r\n        }\r\n        if(ignore !== undefined) {\r\n            for(const i of ignore) {\r\n                this.ignore.add(stringify(i));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws a tile to the grid\r\n     * @param grid\r\n     * @param tile\r\n     */\r\n    protected draw(grid: Grid, tile: Tile) {\r\n        if(!this.shouldIgnore(tile.point)) {\r\n            grid.mutateTile(tile);\r\n        }\r\n    }\r\n\r\n    protected getTerrain() {\r\n        return this.data;\r\n    }\r\n\r\n    protected getSolid() {\r\n        return {\r\n            pathCost: 1,\r\n            isSolid: true\r\n        }\r\n    }\r\n\r\n    protected shouldIgnore(point: Point) {\r\n        return this.ignore.has(stringify(point));\r\n    }\r\n\r\n    abstract generateTerrain(topLeft?: Point, bottomRight?: Point): Grid;\r\n}\r\n\r\nexport default TerrainGenerator;","import TerrainGenerator from './TerrainGenerator';\r\nimport {Point, TileData} from '../core/Components';\r\nimport RectGrid, {Grid} from '../core/Grid';\r\n\r\nclass TerrainRandomGenerator extends TerrainGenerator\r\n{\r\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\r\n    constructor(width: number, height: number, tileData?: TileData, ignore?: Point[]) {\r\n        super(width, height, tileData, ignore);\r\n    }\r\n\r\n    /**\r\n     * Performs a random terrain generation algorithm where each tile has a 1/4\r\n     * chance of being solid\r\n     * @param topLeft optional parameter to specify what point the terrain should start from\r\n     *  This should not be further up/left than (1,1)\r\n     * @param bottomRight optional parameter to specify how far down and right the terrain will go\r\n     *  This should not be further right/down than (width-2,height-2)\r\n     */\r\n    generateTerrain(topLeft?: Point, bottomRight?: Point): Grid {\r\n        const grid = new RectGrid(this.width, this.height);\r\n        if(topLeft === undefined) {\r\n            topLeft = {\r\n                x: 1, y: 1\r\n            }\r\n        }\r\n        if(bottomRight === undefined) {\r\n            bottomRight = {\r\n                x: grid.getWidth()-2,\r\n                y: grid.getHeight()-2\r\n            }\r\n        }\r\n        for(let x = topLeft.x - 1; x <= bottomRight.x + 1; x++) {\r\n            for(let y = topLeft.y - 1; y <= bottomRight.y + 1; y++) {\r\n                if(getRand(0, 3) === 0) {\r\n                    this.draw(grid,{\r\n                        point: {\r\n                            x: x, y: y\r\n                        },\r\n                        data: this.getTerrain()\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n}\r\n\r\n/**\r\n * Generate a random number between min and max, inclusive for min and max\r\n * @param min\r\n * @param max\r\n */\r\nfunction getRand(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max+1-min) + min);\r\n}\r\n\r\nexport default TerrainRandomGenerator;","import RectGrid, {Grid} from '../core/Grid';\r\nimport {Point, Tile, createTile, TileData} from '../core/Components';\r\nimport TerrainGenerator from './TerrainGenerator';\r\n\r\nconst LIMIT = 2;\r\n\r\nexport const NO_SKEW = 0;\r\nexport const VERTICAL_SKEW = 1;\r\nexport const HORIZONTAL_SKEW = 2;\r\n\r\ninterface Chamber {\r\n    topLeft: Point; //min\r\n    bottomRight: Point; //max\r\n}\r\n\r\nclass TerrainMazeGenerator extends TerrainGenerator\r\n{\r\n    private readonly divideWidth: (width: number, height: number) => boolean;\r\n\r\n    constructor(width: number, height: number, tileData?: TileData, ignore?: Point[], slant?: number) {\r\n        super(width, height, tileData, ignore);\r\n        if(slant === undefined || slant === NO_SKEW) {\r\n            this.divideWidth = divideWidthNoSkew;\r\n        } else if(slant === VERTICAL_SKEW) {\r\n            this.divideWidth = divideWidthVSkew;\r\n        } else if(slant === HORIZONTAL_SKEW) {\r\n            this.divideWidth = divideWidthHSkew;\r\n        } else {\r\n            throw new Error(\"Invalid recursive maze division skew type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs the recursive division maze generation algorithm on a new empty grid\r\n     * by bisecting parts until the maze can no longer be bisected\r\n     * Params must be within bounds and create a chamber\r\n     * @param topLeft optional parameter to specify what point the maze should start from\r\n     *  This should not be further up/left than (1,1)\r\n     * @param bottomRight optional parameter to specify how far down and right the maze will go\r\n     *  This should not be further right/down than (width-2,height-2)\r\n     */\r\n    generateTerrain(topLeft?: Point, bottomRight?: Point) {\r\n        const grid = new RectGrid(this.width, this.height);\r\n        if(topLeft === undefined) {\r\n            topLeft = {\r\n                x: 1, y: 1\r\n            }\r\n        }\r\n        if(bottomRight === undefined) {\r\n            bottomRight = {\r\n                x: grid.getWidth()-2,\r\n                y: grid.getHeight()-2\r\n            }\r\n        }\r\n        for(let x = topLeft.x - 1; x <= bottomRight.x + 1; x++) {\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: x, y: topLeft.y - 1\r\n                },\r\n                data: this.getSolid()\r\n            });\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: x, y: bottomRight.y + 1\r\n                },\r\n                data: this.getSolid()\r\n            });\r\n        }\r\n        for(let y = topLeft.y - 1; y <= bottomRight.y + 1; y++) {\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: topLeft.x - 1, y: y\r\n                },\r\n                data: this.getSolid()\r\n            });\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: bottomRight.x + 1, y: y\r\n                },\r\n                data: this.getSolid()\r\n            });\r\n        }\r\n        this.divide(grid,{\r\n            topLeft: topLeft,\r\n            bottomRight: bottomRight,\r\n        });\r\n        return grid;\r\n    }\r\n\r\n    /**\r\n     * Draws a list of tiles to the grid\r\n     * @param grid\r\n     * @param tiles\r\n     */\r\n    private drawArr(grid: Grid, tiles: Tile[]) {\r\n        for(const tile of tiles) {\r\n            this.draw(grid, tile);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a line between a region, with an open hole, in a chamber,\r\n     * and call bisection algorithm on it, and call division algorithms on\r\n     * its split chambers until no chambers can be bisected\r\n     * @param grid\r\n     * @param chamber\r\n     */\r\n    divide(grid: Grid, chamber: Chamber) {\r\n        const width = widthOf(chamber);\r\n        const height = heightOf(chamber);\r\n        const min = chamber.topLeft;\r\n        const max = chamber.bottomRight;\r\n        if(this.divideWidth(width,height)) {\r\n            if(width > LIMIT) {\r\n                //calculate axis\r\n                const randX = getMidPoint(\r\n                    min.x, max.x\r\n                );\r\n                //create axis wall\r\n                const toDraw: Tile[] = [];\r\n                for(let y = min.y; y <= max.y; y++) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: y\r\n                        },\r\n                        data: this.getTerrain()\r\n                    });\r\n                }\r\n                //create holes in axis wall\r\n                let edgeBlocked = false;\r\n                if(canDrawHole(grid.get({\r\n                    x: randX, y: min.y-1\r\n                }))) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: min.y\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(canDrawHole(grid.get({\r\n                    x: randX, y: max.y+1\r\n                }))) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: max.y\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(!edgeBlocked) {\r\n                    const randY = getRand(\r\n                        min.y, max.y,\r\n                    );\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                }\r\n                this.drawArr(grid, toDraw);\r\n                //create children chambers and recurse\r\n                const leftChamber = {\r\n                    topLeft: chamber.topLeft,\r\n                    bottomRight: {\r\n                        x: randX-1,\r\n                        y: chamber.bottomRight.y\r\n                    },\r\n                };\r\n                const rightChamber = {\r\n                    topLeft: {\r\n                        x: randX+1,\r\n                        y: chamber.topLeft.y\r\n                    },\r\n                    bottomRight: chamber.bottomRight,\r\n                };\r\n                this.divide(grid, leftChamber);\r\n                this.divide(grid, rightChamber);\r\n            }\r\n        } else {\r\n            if(height > LIMIT) {\r\n                //calculate axis\r\n                const randY = getMidPoint(\r\n                    min.y, max.y\r\n                );\r\n                //draw axis wall\r\n                const toDraw: Tile[] = [];\r\n                for(let x = min.x; x <= max.x; x++) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: x, y: randY\r\n                        },\r\n                        data: this.getTerrain()\r\n                    });\r\n                }\r\n                //create holes in axis wall\r\n                let edgeBlocked = false;\r\n                if(canDrawHole(grid.get({\r\n                    x: min.x-1, y: randY\r\n                }))) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: min.x, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(canDrawHole(grid.get({\r\n                    x: max.x+1, y: randY\r\n                }))) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: max.x, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(!edgeBlocked) {\r\n                    const randX = getRand(\r\n                        min.x, max.x,\r\n                    );\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                }\r\n                this.drawArr(grid, toDraw);\r\n                //create children chambers and recurse\r\n                const topChamber = {\r\n                    topLeft: chamber.topLeft,\r\n                    bottomRight: {\r\n                        x: chamber.bottomRight.x,\r\n                        y: randY-1\r\n                    },\r\n                };\r\n                const bottomChamber = {\r\n                    topLeft: {\r\n                        x: chamber.topLeft.x,\r\n                        y: randY+1\r\n                    },\r\n                    bottomRight: chamber.bottomRight,\r\n                };\r\n                this.divide(grid, topChamber);\r\n                this.divide(grid, bottomChamber);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction divideWidthNoSkew(width: number, height: number) {\r\n    return width >= height;\r\n}\r\n\r\nfunction divideWidthHSkew(width: number, height: number) {\r\n    return width >= height * 2;\r\n}\r\n\r\nfunction divideWidthVSkew(width: number, height: number) {\r\n    return width * 2 >= height;\r\n}\r\n\r\nfunction widthOf(chamber: Chamber) {\r\n    return chamber.bottomRight.x - chamber.topLeft.x + 1;\r\n}\r\n\r\nfunction heightOf(chamber: Chamber) {\r\n    return chamber.bottomRight.y - chamber.topLeft.y + 1;\r\n}\r\n\r\nfunction canDrawHole(tile: Tile) {\r\n    return tile.data.pathCost === 1 && !tile.data.isSolid;\r\n}\r\n\r\n/**\r\n * Returns the 'midpoint' to be used\r\n * @param min\r\n * @param max\r\n */\r\nfunction getMidPoint(min: number, max: number) {\r\n    const range = max - min;\r\n    if(range >= 20) {\r\n        return ((min+max)/2) >> 0;\r\n    } else if(range > 5) {\r\n        const mid = ((min+max)/2) >> 0;\r\n        const points = [mid, mid+1];\r\n        return points[getRand(0,points.length-1)];\r\n    } else {\r\n        return getRand(min+1,max-1);\r\n    }\r\n}\r\n\r\n/**\r\n * Generate a random number between min and max, inclusive for min and max\r\n * @param min\r\n * @param max\r\n */\r\nfunction getRand(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max+1-min) + min);\r\n}\r\n\r\nexport default TerrainMazeGenerator;","import TerrainRandomGenerator from './TerrainRandomGenerator';\r\nimport TerrainMazeGenerator from './TerrainMazeGenerator';\r\nimport {createTile, Point, TileData} from '../core/Components';\r\n\r\nexport const MAZE = 0;\r\nexport const MAZE_VERTICAL_SKEW = 1;\r\nexport const MAZE_HORIZONTAL_SKEW = 2;\r\nexport const RANDOM_TERRAIN = 3;\r\n\r\nclass TerrainGeneratorBuilder\r\n{\r\n    private width: number = 0;\r\n    private height: number = 0;\r\n    private type: number = MAZE;\r\n    private ignore: Point[] = [];\r\n    private data: TileData = createTile(true);\r\n\r\n    setDimensions(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n\r\n    setGeneratorType(type: number) {\r\n        this.type = type;\r\n        return this;\r\n    }\r\n\r\n    setIgnorePoints(ignore: Point[]) {\r\n        this.ignore = ignore.slice();\r\n        return this;\r\n    }\r\n\r\n    setTileData(data: TileData) {\r\n        this.data = data;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Builds a terrain generator with the specified type\r\n     */\r\n    build() {\r\n       if(this.type >= RANDOM_TERRAIN) {\r\n           return new TerrainRandomGenerator(this.width, this.height, this.data, this.ignore);\r\n       } else {\r\n           return new TerrainMazeGenerator(this.width, this.height, this.data, this.ignore, this.type);\r\n       }\r\n    }\r\n}\r\n\r\nexport default TerrainGeneratorBuilder;","import React from 'react';\r\nimport {Point} from '../../pathfinding/core/Components';\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    tilesX: number,\r\n    tilesY: number\r\n}\r\n\r\nclass GridStaticTiles extends React.Component<IProps>\r\n{\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n    private readonly tileWidth: number;\r\n\r\n    /**\r\n     * Constructs a GridBackground with immutable height and width\r\n     * @param props\r\n     */\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.width = this.props.tilesX;\r\n        this.height = this.props.tilesY;\r\n        this.tileWidth = this.props.tileWidth;\r\n    }\r\n\r\n    //should only render once, and never again\r\n    componentDidUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='bg'>\r\n                    {this.renderTiles()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderTiles() {\r\n        const tiles: JSX.Element[][] = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            const row: JSX.Element[] = [];\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                };\r\n                row.push(\r\n                    this.renderTile(point)\r\n                );\r\n            }\r\n            tiles.push(row);\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    renderTile(point: Point) {\r\n        const width = this.tileWidth;\r\n        const top = point.y * this.tileWidth;\r\n        const left = point.x * this.tileWidth;\r\n        const style = {\r\n            backgroundColor: 'white',\r\n            width: width + 'px',\r\n            height: width + 'px',\r\n            top: top,\r\n            left: left\r\n        };\r\n        return (\r\n            <div key={point.x + ',' + point.y} style={style} className='tile'/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GridStaticTiles;","import React, {RefObject} from 'react';\r\nimport './Grid.css';\r\nimport GridBackground from './GridBackground';\r\nimport GridForeground from './GridForeground';\r\nimport StatsPanel from './StatsPanel';\r\nimport {Node} from '../../pathfinding/algorithms/Node';\r\nimport PathfindingSettings from '../PathfindingSettings';\r\nimport PathfinderBuilder from '../../pathfinding/algorithms/PathfinderBuilder';\r\nimport Pathfinder from '../../pathfinding/algorithms/Pathfinder';\r\nimport {createTile, Point, Tile, TileData} from '../../pathfinding/core/Components';\r\nimport {euclidean} from '../../pathfinding/algorithms/Heuristics';\r\nimport VirtualTimer from '../utility/VirtualTimer';\r\nimport TerrainGeneratorBuilder, {RANDOM_TERRAIN} from '../../pathfinding/algorithms/TerrainGeneratorBuilder';\r\nimport {HashSet, stringify} from '../../pathfinding/structures/Hash';\r\nimport GridStaticTiles from './GridStaticTiles';\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    settings: Readonly<PathfindingSettings>,\r\n    onChangeVisualizing: (visualizing: boolean) => void;\r\n}\r\n\r\ninterface IState {\r\n    time: number,\r\n    length: number,\r\n    cost: number,\r\n    nodes: number,\r\n    algorithm: string\r\n}\r\n\r\nclass PathfindingVisualizer extends React.Component<IProps,IState>\r\n{\r\n    //references to expose background and foreground grids to parent\r\n    private background: RefObject<GridBackground> = React.createRef();\r\n    private foreground: RefObject<GridForeground> = React.createRef();\r\n    private stats: RefObject<StatsPanel> = React.createRef();\r\n\r\n    private visualized = false;\r\n    private visualizing = false;\r\n    private visualTimeouts: VirtualTimer[]  = [];\r\n    private generations: Node[] = [];\r\n\r\n    private mazeTile: TileData = createTile(true);\r\n\r\n    private readonly tilesX: number;\r\n    private readonly tilesY: number;\r\n    private readonly tileWidth: number\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const w = window.screen.availWidth - (window.outerWidth - window.innerWidth);\r\n        const h = window.screen.availHeight - (window.outerHeight - window.innerHeight);\r\n        this.tileWidth = this.props.tileWidth;\r\n        this.tilesX = Math.floor(w / this.tileWidth) + 1;\r\n        this.tilesY = Math.floor((h - 75 - 30) / this.tileWidth) + 1;\r\n        this.state = {\r\n            time: -1,\r\n            length: -1,\r\n            cost: -1,\r\n            nodes: -1,\r\n            algorithm: ''\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps: Readonly<IProps>, nextState: Readonly<IState>) {\r\n        const prevState = this.state;\r\n        return prevState.time !== nextState.time ||\r\n            prevState.length !== nextState.length ||\r\n            prevState.cost !== nextState.cost ||\r\n            prevState.nodes !== nextState.nodes ||\r\n            prevState.algorithm !== nextState.algorithm;\r\n    }\r\n\r\n    changeTile(data: TileData) {\r\n        this.mazeTile = data; //enables weighted mazes\r\n        this.foreground.current!.changeTile(data);\r\n    }\r\n\r\n    canShowArrows() {\r\n        const settings = this.props.settings;\r\n        return settings.showArrows && settings.algorithm !== 'dfs';\r\n    }\r\n\r\n    canShowFrontier() {\r\n        const settings = this.props.settings;\r\n        return settings.visualizeAlg;\r\n    }\r\n\r\n    /**\r\n     * Pause the delayed pathfinding algorithm being performed\r\n     */\r\n    pausePathfinding() {\r\n        for(const timeout of this.visualTimeouts) {\r\n            timeout.pause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resume the delayed pathfinding algorithm being performed\r\n     * Will reset the timeouts to the last time the timeout was paused/started\r\n     * if not properly called while the timeout is paused\r\n     */\r\n    resumePathfinding() {\r\n        for(const timeout of this.visualTimeouts) {\r\n            timeout.resume();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs the pathfinding algorithm on the grid and visualizes it\r\n     */\r\n    doPathfinding() {\r\n        this.clearPath();\r\n        const settings = this.props.settings;\r\n        const pathfinder = this.getPathfinder(settings);\r\n        const path = this.findPath(pathfinder);\r\n        this.generations = pathfinder.getRecentGenerations();\r\n        if(this.canShowArrows()) {\r\n            this.addArrowGenerations(this.generations);\r\n        }\r\n        if(this.canShowFrontier()) {\r\n            this.visualizeGenerations(this.generations);\r\n        }\r\n        this.drawPath(path);\r\n    }\r\n\r\n    /**\r\n     * Performs the pathfinding algorithm on the grid and visualizes it with delays between successive\r\n     * node generations\r\n     * If the visualizer is currently visualizing, the visualization stops instead\r\n     */\r\n    doDelayedPathfinding() {\r\n        this.clearVisualization();\r\n        this.clearPath();\r\n        const settings = this.props.settings;\r\n        this.visualized = false;\r\n        const foreground = this.foreground.current!;\r\n        foreground.toggleDisable();\r\n        if(!this.visualizing) { //start visualization if not visualizing\r\n            this.visualizing = true;\r\n            this.props.onChangeVisualizing(this.visualizing);\r\n            const pathfinder = this.getPathfinder(settings);\r\n            const path = this.findPath(pathfinder);\r\n            const promises: Promise<VirtualTimer>[] = []; //to call function when timeouts finish\r\n            this.visualTimeouts = [];\r\n            const baseIncrement = settings.delayInc;\r\n            const visualizeAlg = this.canShowFrontier();\r\n            const showArrows = this.canShowArrows();\r\n            if(showArrows || visualizeAlg) {\r\n                let delay = 0;\r\n                let expand: (generation: Node) => void;\r\n                if(visualizeAlg && showArrows) {\r\n                    expand = (generation: Node) => this.visualizeGenerationAndArrows(generation);\r\n                } else if(visualizeAlg) {\r\n                    expand = (generation: Node) => this.visualizeGeneration(generation);\r\n                } else if(showArrows) {\r\n                    expand = (generation: Node) => this.addArrowGeneration(generation);\r\n                } else {\r\n                    expand = () => {};\r\n                }\r\n                this.generations = pathfinder.getRecentGenerations();\r\n                const generationSet = new HashSet(); //to keep track of rediscovered nodes\r\n                this.generations.forEach((generation) => {\r\n                    const promise = new Promise<VirtualTimer>((resolve) => {\r\n                        //each generation gets a higher timeout\r\n                        const timeout = new VirtualTimer(() => {\r\n                            expand(generation);\r\n                            resolve(timeout);\r\n                        }, delay);\r\n                        this.visualTimeouts.push(timeout);\r\n                    });\r\n                    promises.push(promise);\r\n                    if(!generationSet.has(stringify(generation.tile.point))) {\r\n                        //rediscovered nodes shouldn't add a delay to visualization\r\n                        delay += baseIncrement;\r\n                    }\r\n                    generationSet.add(stringify(generation.tile.point));\r\n                });\r\n            }\r\n            //call functions when timeouts finish\r\n            Promise.all(promises).then(() => {\r\n                this.drawPath(path);\r\n                foreground.toggleDisable();\r\n                this.visualizing = false;\r\n                this.visualized = true;\r\n                this.props.onChangeVisualizing(this.visualizing);\r\n            });\r\n        } else { //stop visualizing if currently visualizing\r\n            for (const timeout of this.visualTimeouts) {\r\n                timeout.clear();\r\n            }\r\n            this.visualizing = false;\r\n            this.props.onChangeVisualizing(this.visualizing);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the pathfinder for the settings\r\n     * @param settings\r\n     */\r\n    getPathfinder(settings: PathfindingSettings) {\r\n        const algorithmKey = settings.algorithm;\r\n        const algorithm = settings.bidirectional && PathfinderBuilder.hasBidirectional(algorithmKey) ?\r\n            PathfinderBuilder.makeBidirectional(algorithmKey) : algorithmKey;\r\n        return new PathfinderBuilder(this.foreground.current!.state.grid)\r\n            .setAlgorithm(algorithm)\r\n            .setHeuristic(settings.heuristicKey)\r\n            .setNavigator(settings.navigatorKey)\r\n            .build();\r\n    }\r\n\r\n    /**\r\n     * Find path with a given pathfinder, includes benchmarking\r\n     * @param pathfinder\r\n     */\r\n     findPath(pathfinder: Pathfinder) {\r\n        const foreground = this.foreground.current!;\r\n        const t0 = performance.now();\r\n        const path = pathfinder.findPath(foreground.state.initial, foreground.state.goal);\r\n        const t1 = performance.now();\r\n        const t2 = t1 - t0;\r\n        this.setState({\r\n            time: t2,\r\n            nodes: pathfinder.getRecentNodes(),\r\n            length: calcLength(foreground.state.initial, path),\r\n            cost: calcCost(foreground.state.grid.get(foreground.state.initial), path),\r\n            algorithm: pathfinder.getAlgorithmName()\r\n        });\r\n        return path;\r\n    }\r\n\r\n    /**\r\n     * Draw path on the grid and change length on ui\r\n     * @param path\r\n     */\r\n    drawPath(path: Tile[]) {\r\n        const foreground = this.foreground.current!\r\n        path.unshift(this.foreground.current!.state.grid.get(foreground.state.initial));\r\n        this.foreground.current!.drawPath(path);\r\n    }\r\n\r\n    /**\r\n     * Called when child foreground moves a tile\r\n     */\r\n    onTilesDragged() {\r\n        if(this.visualized) {\r\n            this.clearVisualization();\r\n            this.doPathfinding();\r\n            this.visualized = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create terrain on the grid foreground\r\n     */\r\n    createTerrain(mazeType: number) {\r\n        if(this.visualizing) {\r\n            return;\r\n        }\r\n        this.clearTiles();\r\n        this.clearPath();\r\n        this.clearVisualization();\r\n        const foreground = this.foreground.current!;\r\n        const end = this.calcEndPointInView();\r\n        const newState = (mazeType !== RANDOM_TERRAIN) ? {\r\n            initial: {\r\n                x: 1, y: 1\r\n            },\r\n            goal: {\r\n                x: end.x-2, y: end.y-2\r\n            }\r\n        } : {\r\n            initial: {\r\n                x: 1, y: ((end.y-1) / 2) >> 0\r\n            },\r\n            goal: {\r\n                x: end.x-2, y: ((end.y-1) / 2) >> 0\r\n            }\r\n        };\r\n        foreground.setState(newState,() => {\r\n            const prevGrid = foreground.state.grid;\r\n            const generator = new TerrainGeneratorBuilder()\r\n                .setDimensions(\r\n                    prevGrid.getWidth(),\r\n                    prevGrid.getHeight()\r\n                )\r\n                .setGeneratorType(mazeType)\r\n                .setIgnorePoints([foreground.state.initial, foreground.state.goal])\r\n                .setTileData(this.mazeTile)\r\n                .build();\r\n            const topLeft = {\r\n                x: 1, y: 1\r\n            };\r\n            const bottomRight = {\r\n                x: end.x-2, y: end.y-2\r\n            };\r\n            const grid = generator.generateTerrain(topLeft, bottomRight);\r\n            foreground.drawGrid(grid);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Calculate the end/goal point in view of the screen\r\n     */\r\n    calcEndPointInView() {\r\n        const xEnd = window.innerWidth / this.tileWidth;\r\n        const yEnd = (window.innerHeight - 75 - this.stats.current!.getHeight()) / this.tileWidth;\r\n        const xFloor = Math.floor(xEnd);\r\n        const yFloor = Math.floor(yEnd);\r\n        const xDecimal = xEnd - xFloor;\r\n        const yDecimal = yEnd - yFloor;\r\n        let x = xDecimal > 0.05 ? Math.ceil(xEnd) : xFloor;\r\n        let y = yDecimal > 0.05 ? Math.ceil(yEnd) : yFloor;\r\n        if(x > this.tilesX) {\r\n            x = this.tilesX\r\n        }\r\n        if(y > this.tilesY) {\r\n            y = this.tilesY\r\n        }\r\n        return {\r\n            x: x, y: y\r\n        }\r\n    }\r\n\r\n    resetPoints() {\r\n        if(!this.visualizing) {\r\n            this.foreground.current!.resetPoints();\r\n        }\r\n    }\r\n\r\n    clearPath = () => {\r\n        this.foreground.current!.erasePath();\r\n    }\r\n\r\n    clearTiles() {\r\n        this.foreground.current!.clearTiles();\r\n    }\r\n\r\n    clearTilesChecked() {\r\n        if(!this.visualizing) {\r\n            this.foreground.current!.clearTiles();\r\n        }\r\n    }\r\n\r\n    clearVisualization() {\r\n        this.visualized = false;\r\n        this.background.current!.clear();\r\n    }\r\n\r\n    clearVisualizationChecked() {\r\n        if(!this.visualizing) {\r\n            this.visualized = false;\r\n            this.background.current!.clear();\r\n        }\r\n    }\r\n\r\n    visualizeGenerations(generations: Node[]) {\r\n        this.background.current!.visualizeGenerations(generations);\r\n        this.visualized = true;\r\n    }\r\n\r\n    visualizeGeneration(generation: Node) {\r\n        this.background.current!.visualizeGeneration(generation);\r\n    }\r\n\r\n    addArrowGenerations(generations: Node[]) {\r\n        this.background.current!.addArrowGenerations(generations);\r\n    }\r\n\r\n    addArrowGeneration(generation: Node) {\r\n        this.background.current!.addArrowGeneration(generation);\r\n    }\r\n\r\n    visualizeGenerationAndArrows(generation: Node) {\r\n        this.background.current!.visualizeGenerationAndArrows(generation);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <StatsPanel ref={this.stats} algorithm={this.state.algorithm}\r\n                            length={this.state.length} cost={this.state.cost}\r\n                            time={this.state.time} nodes={this.state.nodes}\r\n                />\r\n                <div>\r\n                    <GridStaticTiles tileWidth={this.tileWidth}\r\n                                     tilesX={this.tilesX} tilesY={this.tilesY}\r\n                    />\r\n                    <GridBackground ref={this.background} tileWidth={this.tileWidth}\r\n                                    tilesX={this.tilesX} tilesY={this.tilesY}\r\n                    />\r\n                    <GridForeground ref={this.foreground} topMargin={75}\r\n                                    onTilesDragged={() => this.onTilesDragged()}\r\n                                    tileSize={this.tileWidth}\r\n                                    tilesX={this.tilesX} tilesY={this.tilesY}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction calcLength(initial: Point, path: Tile[]) {\r\n    if(path.length === 0) {\r\n        return 0;\r\n    }\r\n    let len = euclidean(initial, path[0].point);\r\n    for (let i = 0; i < path.length - 1; i++) {\r\n        len += euclidean(path[i].point, path[i + 1].point);\r\n    }\r\n    return +(len).toFixed(3);\r\n}\r\n\r\nfunction calcCost(initial: Tile, path: Tile[]) {\r\n    if(path.length === 0) {\r\n        return 0;\r\n    }\r\n    let len = euclidean(initial.point, path[0].point) * path[0].data.pathCost;\r\n    for (let i = 0; i < path.length - 1; i++) {\r\n        len += euclidean(path[i].point, path[i + 1].point) * path[i + 1].data.pathCost;\r\n    }\r\n    return +(len).toFixed(3);\r\n}\r\n\r\nexport default PathfindingVisualizer;","import React from 'react';\r\n\r\ninterface IProps {\r\n    boxStyle: string,\r\n    defaultChecked: boolean,\r\n    disabled?: boolean,\r\n    onChange: (checked: boolean) => void\r\n}\r\n\r\ninterface IState {\r\n    checked: boolean\r\n}\r\n\r\nclass Checkbox extends React.Component<IProps,IState>\r\n{\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            checked: this.props.defaultChecked\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger callback and change checkbox state\r\n     */\r\n    onChange() {\r\n        this.setState(prevState => ({\r\n            checked: !prevState.checked\r\n        }), () => this.props.onChange(this.state.checked));\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <input checked={this.state.checked} type='checkbox' disabled={this.props.disabled}\r\n                       className={this.props.boxStyle}\r\n                       onKeyPress={() => this.onChange()}\r\n                       onChange={() => this.onChange()}\r\n                >\r\n                </input>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Checkbox;","import React from 'react';\r\n\r\ninterface IProps {\r\n    min: number,\r\n    max: number,\r\n    default: number,\r\n    step: number,\r\n    sliderStyle: string,\r\n    onChange: (val: number) => void\r\n}\r\n\r\ninterface IState {\r\n    value: number\r\n}\r\n\r\nclass SteppedRangeSlider extends React.Component<IProps, IState>\r\n{\r\n    private mouseUp = true;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            value: this.props.default\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger callback when slider value is changed\r\n     * @param e\r\n     */\r\n    onChange(e: React.FormEvent<HTMLInputElement>) {\r\n        if(!this.mouseUp) { //to prevent firefox from resetting on release\r\n            const val = Number(e.currentTarget.value);\r\n            this.setState({\r\n                value: val\r\n            }, () => this.props.onChange(val));\r\n        }\r\n    }\r\n\r\n    onMouseUp() {\r\n        this.mouseUp = true;\r\n    }\r\n\r\n    onMouseDown() {\r\n        this.mouseUp = false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <input type='range' list='step-list'\r\n                   value={this.state.value}\r\n                   min={this.props.min} max={this.props.max}\r\n                   step={this.props.step} className={this.props.sliderStyle}\r\n                   onInput={e => this.onChange(e)}\r\n                   onMouseUp={() => this.onMouseUp()}\r\n                   onMouseDown={() => this.onMouseDown()}\r\n                   onTouchEnd={() => this.onMouseUp()}\r\n                   onTouchStart={() => this.onMouseDown()}\r\n            >\r\n            </input>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SteppedRangeSlider;","import React from 'react';\r\n\r\ninterface IProps {\r\n    boxStyle: string,\r\n    defaultChecked: number,\r\n    disabled: boolean,\r\n    onChange: (() => void)[]\r\n}\r\n\r\ninterface IState {\r\n    checked: boolean[];\r\n}\r\n\r\nclass RadioButtonGroup extends React.Component<IProps, IState>\r\n{\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const checked: boolean[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            checked.push(i === this.props.defaultChecked);\r\n        }\r\n        this.state = {\r\n            checked: checked\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set all radio buttons to checked aside from the index\r\n     * of the one that was changed\r\n     * Trigger callback\r\n     * @param index\r\n     */\r\n    onChange (index: number) {\r\n        const checked: boolean[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            checked.push(i === index);\r\n        }\r\n        this.setState({\r\n            checked: checked\r\n        }, () => this.props.onChange[index]());\r\n    }\r\n\r\n    render() {\r\n        const children = React.Children.toArray(this.props.children);\r\n        const radioButtons: JSX.Element[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            radioButtons.push(\r\n                <div key={i}>\r\n                    <input checked={this.state.checked[i]} type='radio' disabled={this.props.disabled}\r\n                           className={this.props.boxStyle}\r\n                           onChange={() => this.onChange(i)}\r\n                    >\r\n                    </input>\r\n                    {children[i]}\r\n                </div>\r\n            );\r\n        }\r\n        return radioButtons;\r\n    };\r\n}\r\n\r\nexport default RadioButtonGroup;","import React from 'react';\r\nimport './Navbar.css'\r\nimport Checkbox from '../utility/Checkbox';\r\nimport SteppedRangeSlider from '../utility/SteppedRangeSlider';\r\nimport RadioButtonGroup from '../utility/RadioButtonGroup';\r\n\r\ninterface VisualProps {\r\n    onChangeViz: () => void,\r\n    onChangeShowArrows: () => void,\r\n    disabled: boolean\r\n}\r\n\r\ninterface SpeedProps {\r\n    onChange: (value: number) => void,\r\n    initialSpeed: number\r\n}\r\n\r\ninterface SpeedState {\r\n    speedText: string\r\n}\r\n\r\ninterface AlgorithmProps {\r\n    onChangeBidirectional: (checked: boolean) => void,\r\n    disabled: boolean\r\n}\r\n\r\ninterface HeuristicProps {\r\n    onClickManhattan: () => void,\r\n    onClickEuclidean: () => void,\r\n    onClickChebyshev: () => void,\r\n    onClickOctile: () => void,\r\n    disabled: boolean\r\n}\r\n\r\nconst SPEED_STEP = 5;\r\nconst SPEED_INITIAL = 20;\r\nconst MAX = 20;\r\n\r\nexport class VisualSettings extends React.Component<VisualProps>\r\n{\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Visualization</div>\r\n                <Checkbox defaultChecked={true} boxStyle='box'\r\n                          onChange={this.props.onChangeViz}>\r\n                    Show Frontier\r\n                </Checkbox>\r\n                <Checkbox defaultChecked={true} boxStyle='box'\r\n                          onChange={this.props.onChangeShowArrows}\r\n                          disabled={this.props.disabled}>\r\n                    Show Tree\r\n                </Checkbox>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class SpeedSettings extends React.Component<SpeedProps, SpeedState>\r\n{\r\n    constructor(props: SpeedProps) {\r\n        super(props);\r\n        this.state = {\r\n            speedText: String(this.props.initialSpeed)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback function to be called when slider is changed\r\n     * Call another callback and change text\r\n     * @param value\r\n     */\r\n    onChangeSpeed(value: number) {\r\n        const speed = SPEED_INITIAL + SPEED_STEP * value;\r\n        this.setState({\r\n            speedText: String(speed)\r\n        })\r\n        this.props.onChange(speed);\r\n    }\r\n\r\n    render() {\r\n        const options: JSX.Element[] = [];\r\n        for(let i = 1; i <= MAX; i++) {\r\n            options.push(<option key={'option ' + i}>{i}</option>);\r\n        }\r\n        return (\r\n            <div className='slider-container'>\r\n                <div className='slider-text'>\r\n                    Speed: <div className='speed-text'> {this.state.speedText} </div>\r\n                </div>\r\n                    <SteppedRangeSlider min={1} max={MAX} step={1}\r\n                                        default={(this.props.initialSpeed - SPEED_INITIAL) / SPEED_STEP}\r\n                                        sliderStyle='slider speed-slider'\r\n                                        onChange={(value: number) => this.onChangeSpeed(value)}\r\n                />\r\n                <datalist id='step-list'>\r\n                    {options}\r\n                </datalist>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class AlgorithmSettings extends React.Component<AlgorithmProps>\r\n{\r\n    constructor(props: AlgorithmProps) {\r\n        super(props);\r\n        this.state = {\r\n            disabled: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Algorithm</div>\r\n                <Checkbox defaultChecked={false} boxStyle='box'\r\n                          disabled={this.props.disabled}\r\n                          onChange={this.props.onChangeBidirectional}>\r\n                    Bidirectional\r\n                </Checkbox>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class HeuristicSettings extends React.Component<HeuristicProps>\r\n{\r\n    constructor(props: HeuristicProps) {\r\n        super(props);\r\n        this.state = {\r\n            disabled: false\r\n        }\r\n    }\r\n\r\n    disable() {\r\n        this.setState({\r\n            disabled: true\r\n        })\r\n    }\r\n\r\n    enable() {\r\n        this.setState({\r\n            disabled: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Heuristic</div>\r\n                <RadioButtonGroup boxStyle='box'\r\n                                  defaultChecked={0}\r\n                                  disabled={this.props.disabled}\r\n                                  onChange={[\r\n                                      this.props.onClickManhattan, this.props.onClickEuclidean,\r\n                                      this.props.onClickChebyshev, this.props.onClickOctile\r\n                                  ]}\r\n                >\r\n                    {[<span key='Manhattan'>Manhattan</span>, <span key='Euclidean'>Euclidean</span>,\r\n                        <span key='Chebyshev'>Chebyshev</span>, <span key='Octile<'>Octile</span>]}\r\n                </RadioButtonGroup>\r\n            </div>\r\n        )\r\n    }\r\n}","import PathfindingSettings, {getDefaultSettings} from './PathfindingSettings';\r\n\r\nclass SettingsManager\r\n{\r\n    settings: PathfindingSettings = getDefaultSettings();\r\n\r\n    changeAlgo(algo: string) {\r\n        this.settings.algorithm = algo;\r\n    }\r\n\r\n    changeVisualize() {\r\n        this.settings.visualizeAlg = !this.settings.visualizeAlg;\r\n    }\r\n\r\n    changeShowArrows() {\r\n        this.settings.showArrows = !this.settings.showArrows;\r\n    }\r\n\r\n    changeBidirectional() {\r\n        this.settings.bidirectional = !this.settings.bidirectional;\r\n    }\r\n\r\n    changeSpeed(value: number) {\r\n        this.settings.delayInc = value;\r\n    }\r\n\r\n    changeManhattan() {\r\n        this.settings.heuristicKey = 'manhattan';\r\n    }\r\n\r\n    changeEuclidean() {\r\n        this.settings.heuristicKey = 'euclidean';\r\n    }\r\n\r\n    changeChebyshev() {\r\n        this.settings.heuristicKey = 'chebyshev';\r\n    }\r\n\r\n    changeOctile() {\r\n        this.settings.heuristicKey = 'octile';\r\n    }\r\n}\r\n\r\nexport default SettingsManager;","interface PathfindingSettings\r\n{\r\n    visualizeAlg: boolean,\r\n    showArrows: boolean,\r\n    delayInc: number,\r\n    algorithm: string,\r\n    heuristicKey: string,\r\n    navigatorKey: string,\r\n    bidirectional: boolean,\r\n}\r\n\r\nexport function getDefaultSettings(): PathfindingSettings {\r\n    return {\r\n        visualizeAlg: true,\r\n        showArrows: true,\r\n        delayInc: 35,\r\n        algorithm: 'a*',\r\n        heuristicKey: 'manhattan',\r\n        navigatorKey: 'plus',\r\n        bidirectional: false,\r\n    }\r\n}\r\n\r\nexport default PathfindingSettings;","export default __webpack_public_path__ + \"static/media/react.93a4bdf1.png\";","import React, {RefObject} from 'react';\r\nimport TopBar from './navbar/TopBar';\r\nimport {VisualizeButton, SettingsButton} from './navbar/Buttons';\r\nimport {AlgorithmDropDown, ClearDropDown, MazeDropDown, TilesDropDown} from './navbar/DropDownComponents';\r\nimport DraggablePanel from './utility/DraggablePanel';\r\nimport PathfindingVisualizer from './grid/PathfindingVisualizer';\r\nimport {VisualSettings, SpeedSettings, AlgorithmSettings, HeuristicSettings} from './navbar/SettingPanels';\r\nimport SettingsManager from './SettingsManager';\r\nimport PathfinderBuilder from '../pathfinding/algorithms/PathfinderBuilder';\r\nimport {MAZE, MAZE_HORIZONTAL_SKEW, MAZE_VERTICAL_SKEW, RANDOM_TERRAIN} from '../pathfinding/algorithms/TerrainGeneratorBuilder';\r\nimport Icon from './web-content/react.png';\r\n\r\ninterface IProps {}\r\n\r\ninterface IState {\r\n    heuristicDisabled: boolean,\r\n    bidirectionalDisabled: boolean,\r\n    arrowsDisabled: boolean,\r\n\r\n    panelShow: boolean,\r\n\r\n    visualizing: boolean,\r\n    paused: boolean,\r\n\r\n    useIcon: boolean\r\n}\r\n\r\nclass PathfindingApp extends React.Component<IProps, IState>\r\n{\r\n    //expose visualizer to parent to connect to button siblings\r\n    private visualizer: RefObject<PathfindingVisualizer> = React.createRef();\r\n\r\n    //drop down refs needed to invoke behavior between dropdowns\r\n    private algDropDown: RefObject<AlgorithmDropDown> = React.createRef();\r\n    private clrDropDown: RefObject<ClearDropDown> = React.createRef();\r\n    private mazeDropDown: RefObject<MazeDropDown> = React.createRef();\r\n    private tilesDropDown: RefObject<TilesDropDown> = React.createRef();\r\n\r\n    private settingsManager: SettingsManager = new SettingsManager();\r\n\r\n    private readonly tileWidth: number;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const speed = this.settingsManager.settings.delayInc;\r\n        const mobile = isMobile();\r\n        this.tileWidth =  mobile ? 47 : Math.round(window.screen.availWidth / 57);\r\n        if(mobile) {\r\n            this.settingsManager.changeSpeed(speed + 20);\r\n        } else if(window.screen.availWidth > 2500) {\r\n            this.settingsManager.changeSpeed(speed + 10);\r\n        }\r\n        this.state = {\r\n            heuristicDisabled: false,\r\n            bidirectionalDisabled: false,\r\n            arrowsDisabled: false,\r\n            panelShow: false,\r\n            visualizing: false,\r\n            paused: false,\r\n            useIcon: this.useIcon()\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('click', () => {\r\n            this.algDropDown.current!.hide();\r\n            this.clrDropDown.current!.hide();\r\n            this.mazeDropDown.current!.hide();\r\n            this.tilesDropDown.current!.hide();\r\n        });\r\n        window.addEventListener('resize', () => {\r\n            this.setState({\r\n                useIcon: this.useIcon()\r\n            })\r\n        });\r\n    }\r\n\r\n    useIcon() {\r\n        return window.innerWidth <= 850;\r\n    }\r\n\r\n    onClickAlgDrop() {\r\n        this.clrDropDown.current!.hide();\r\n        this.mazeDropDown.current!.hide();\r\n        this.tilesDropDown.current!.hide();\r\n    }\r\n\r\n    onClickClrDrop() {\r\n        this.algDropDown.current!.hide();\r\n        this.mazeDropDown.current!.hide();\r\n        this.tilesDropDown.current!.hide();\r\n    }\r\n\r\n    onClickMazeDrop() {\r\n        this.clrDropDown.current!.hide();\r\n        this.algDropDown.current!.hide();\r\n        this.tilesDropDown.current!.hide();\r\n    }\r\n\r\n    onClickTilesDrop() {\r\n        this.clrDropDown.current!.hide();\r\n        this.algDropDown.current!.hide();\r\n        this.mazeDropDown.current!.hide();\r\n    }\r\n\r\n    changeVButtonColor(visualizing: boolean) {\r\n        this.setState({\r\n            visualizing: visualizing\r\n        })\r\n    }\r\n\r\n    toggleSettings() {\r\n        this.setState(prevState => ({\r\n            panelShow: !prevState.panelShow\r\n        }));\r\n    }\r\n\r\n    hideSettings() {\r\n        this.setState({\r\n            panelShow: false\r\n        });\r\n    }\r\n\r\n    changeAlgo(algorithm: string) {\r\n        this.setState({\r\n            heuristicDisabled: !PathfinderBuilder.usesHeuristic(algorithm),\r\n            bidirectionalDisabled: !PathfinderBuilder.hasBidirectional(algorithm),\r\n            arrowsDisabled: algorithm === 'dfs'\r\n        });\r\n        this.settingsManager.changeAlgo(algorithm);\r\n    }\r\n\r\n    doPathfinding() {\r\n        this.setState({\r\n            paused: false\r\n        });\r\n        this.visualizer.current!.doDelayedPathfinding();\r\n    }\r\n\r\n    pausePathfinding() {\r\n        this.setState({\r\n            paused: true\r\n        });\r\n        this.visualizer.current!.pausePathfinding();\r\n    }\r\n\r\n    resumePathfinding() {\r\n        this.setState({\r\n            paused: false\r\n        });\r\n        this.visualizer.current!.resumePathfinding();\r\n    }\r\n\r\n    clearPath() {\r\n        this.visualizer.current!.clearPath();\r\n        this.visualizer.current!.clearVisualizationChecked();\r\n    }\r\n\r\n    clearTiles() {\r\n        this.clearPath();\r\n        this.visualizer.current!.clearTilesChecked();\r\n    }\r\n\r\n    resetBoard() {\r\n        this.clearPath();\r\n        this.clearTiles();\r\n        this.visualizer.current!.resetPoints();\r\n    }\r\n\r\n    createMaze() {\r\n        this.visualizer.current!.createTerrain(MAZE);\r\n    }\r\n\r\n    createMazeVSkew() {\r\n        this.visualizer.current!.createTerrain(MAZE_VERTICAL_SKEW);\r\n    }\r\n\r\n    createMazeHSkew() {\r\n        this.visualizer.current!.createTerrain(MAZE_HORIZONTAL_SKEW);\r\n    }\r\n\r\n    createRandomTerrain() {\r\n        this.visualizer.current!.createTerrain(RANDOM_TERRAIN);\r\n    }\r\n\r\n    changeTile(cost: number) {\r\n        this.visualizer.current!.changeTile({\r\n            isSolid: cost === -1,\r\n            pathCost: cost\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const title = 'Pathfinding Visualizer';\r\n        return (\r\n            <div>\r\n                <DraggablePanel title='Grid Settings'\r\n                                show={this.state.panelShow}\r\n                                onClickXButton={() => this.hideSettings()}\r\n                                width={350}\r\n                                height={405}\r\n                >\r\n                    <VisualSettings disabled={this.state.arrowsDisabled}\r\n                                    onChangeViz={() => this.settingsManager.changeVisualize()}\r\n                                    onChangeShowArrows={() => this.settingsManager.changeShowArrows()}\r\n                    />\r\n                    <SpeedSettings onChange={(value: number) => this.settingsManager.changeSpeed(value)}\r\n                                   initialSpeed={this.settingsManager.settings.delayInc}\r\n                    />\r\n                    <AlgorithmSettings disabled={this.state.bidirectionalDisabled}\r\n                                       onChangeBidirectional={() => this.settingsManager.changeBidirectional()}\r\n                    />\r\n                    <HeuristicSettings disabled={this.state.heuristicDisabled}\r\n                                       onClickManhattan={() => this.settingsManager.changeManhattan()}\r\n                                       onClickEuclidean={() => this.settingsManager.changeEuclidean()}\r\n                                       onClickChebyshev={() => this.settingsManager.changeChebyshev()}\r\n                                       onClickOctile={() => this.settingsManager.changeOctile()}\r\n                    />\r\n                </DraggablePanel>\r\n                <TopBar>\r\n                    <a href='https://github.com/JosephPrichard/PathfinderReact' className='title'\r\n                       style={{\r\n                           width: this.state.useIcon ? '70px' : 'auto',\r\n                           height: this.state.useIcon ? '52px' : '100%'\r\n                       }}\r\n                    >\r\n                        {\r\n                            this.state.useIcon ?\r\n                                <img width={'100%'} height={'100%'}\r\n                                     className='icon'\r\n                                     alt={title} src={Icon}/> :\r\n                                title\r\n                        }\r\n                    </a>\r\n                    <div className='top-container'>\r\n                        <AlgorithmDropDown ref={this.algDropDown}\r\n                                           onClick={() => this.onClickAlgDrop()}\r\n                                           onChange={(alg: string) => this.changeAlgo(alg)}\r\n                        />\r\n                        <VisualizeButton active={this.state.visualizing}\r\n                                         paused={this.state.paused}\r\n                                         onPause={() => this.pausePathfinding()}\r\n                                         onResume={() => this.resumePathfinding()}\r\n                                         onStartStop={() => this.doPathfinding()}\r\n                        />\r\n                        <ClearDropDown ref={this.clrDropDown}\r\n                                       onClick={() => this.onClickClrDrop()}\r\n                                       onClickTiles={() => this.clearTiles()}\r\n                                       onClickPath={() => this.clearPath()}\r\n                                       onClickReset={() => this.resetBoard()}\r\n                        />\r\n                        <TilesDropDown ref={this.tilesDropDown}\r\n                                       onClick={() => this.onClickTilesDrop()}\r\n                                       onClickTileType={(cost: number) => this.changeTile(cost)}\r\n                        />\r\n                        <MazeDropDown ref={this.mazeDropDown}\r\n                                      onClick={() => this.onClickMazeDrop()}\r\n                                      onClickMaze={() => this.createMaze()}\r\n                                      onClickMazeHorizontal={() => this.createMazeHSkew()}\r\n                                      onClickMazeVertical={() => this.createMazeVSkew()}\r\n                                      onClickRandomTerrain={() => this.createRandomTerrain()}\r\n                        />\r\n                        <SettingsButton onClick={() => this.toggleSettings()}/>\r\n                    </div>\r\n                </TopBar>\r\n                <PathfindingVisualizer ref={this.visualizer}\r\n                                       onChangeVisualizing={(viz: boolean) => this.changeVButtonColor(viz)}\r\n                                       settings={this.settingsManager.settings}\r\n                                       tileWidth={this.tileWidth}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction isMobile() {\r\n    return /Android|webOS|iPhone|iPad|Mac|Macintosh|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n}\r\n\r\nexport default PathfindingApp;","import React from 'react';\nimport './App.css';\nimport PathfindingApp from './view/PathfindingApp';\n\nclass App extends React.Component\n{\n    render() {\n        return (\n            <PathfindingApp/>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n//reportWebVitals();\n"],"sourceRoot":""}