{"version":3,"sources":["view/navbar/TopBar.tsx","view/navbar/Buttons.tsx","view/navbar/DropDown.tsx","view/utility/DraggablePanel.tsx","view/grid/GridBackground.tsx","pathfinding/core/Components.ts","pathfinding/core/Grid.ts","view/web-content/weight.svg","view/grid/TileFg.tsx","view/grid/WeightFg.tsx","view/grid/GridForeground.tsx","view/grid/StatsPanel.tsx","pathfinding/core/PlusNavigator.ts","pathfinding/core/Navigator.ts","pathfinding/algorithms/Heuristics.ts","pathfinding/structures/Hash.ts","pathfinding/structures/Heap.ts","pathfinding/algorithms/Pathfinder.ts","pathfinding/algorithms/Node.ts","pathfinding/algorithms/AStar.ts","pathfinding/algorithms/BFS.ts","pathfinding/structures/Stack.ts","pathfinding/algorithms/DFS.ts","pathfinding/algorithms/BidirectionalAStar.ts","pathfinding/algorithms/BidirectionalBFS.ts","pathfinding/algorithms/PathfinderBuilder.ts","view/utility/VirtualTimer.ts","pathfinding/algorithms/TerrainGenerator.ts","pathfinding/algorithms/RandomTerrainGenerator.ts","pathfinding/algorithms/MazeGenerator.ts","pathfinding/algorithms/TerrainGeneratorBuilder.ts","view/grid/PathfindingVisualizer.tsx","view/utility/Checkbox.tsx","view/utility/SteppedRangeSlider.tsx","view/utility/RadioButtonGroup.tsx","view/navbar/SettingPanels.tsx","view/SettingsManager.ts","view/PathfindingSettings.ts","view/PathfindingApp.tsx","App.tsx","index.tsx"],"names":["TopBar","bar","React","createRef","window","addEventListener","props","onChangeHeight","current","offsetHeight","this","ref","className","children","Component","SYMBOL_COLOR","DIMENSION","VisualizeButton","width","height","rx","fill","points","x","active","onMouseDown","e","preventDefault","onClick","paused","onResume","onPause","xmlns","getResumeSymbol","getPauseSymbol","onStartStop","getStopSymbol","SettingsButton","AlgorithmDropDown","show","setState","up","display","hide","toggle","stopPropagation","isHidden","state","contentStyle","onChange","key","algText","text","arrowClass","fade","tabIndex","onKeyPress","nativeEvent","style","click","ClearDropDown","onClickPath","onClickTiles","onClickReset","MazeDropDown","onClickMaze","onClickMazeHorizontal","onClickMazeVertical","onClickRandomTerrain","TilesDropDown","cost","onClickTileType","Clickable","DraggablePanel","draggable","draggableContainer","draggableContent","dragging","prevX","prevY","mouseDown","clientY","clientX","touchStart","touch","touches","changedTouches","mouseUp","mouseMove","drag","touchMove","container","top","offsetTop","left","offsetLeft","content","innerHeight","innerWidth","offsetWidth","getPosition","visibleStyle","renderDraggable","draggableStyle","onTouchStart","title","onClickXButton","document","minHeight","ARROW_COLOR","GridBackground","clear","visualization","createEmptyBg","arrows","doGeneration","generation","point","tile","y","visualizeGeneration","prevState","map","arr","slice","visualizeGenerations","generations","doArrowGeneration","point1","point2","newArrow","from","to","i","length","a","index","indexOf","splice","push","addArrowGeneration","addArrowGenerations","renderArrows","tileWidth","offset","arrow","first","second","firstX","firstY","secondX","secondY","offsetX","offsetY","x1","y1","x2","y2","stroke","strokeWidth","markerEnd","renderTiles","tiles","row","renderTile","color","backgroundColor","tilesX","tilesY","id","markerWidth","markerHeight","refX","refY","orient","createTile","isSolid","pathCost","RectGrid","_g2","_g3","mutateDefault","solid","mutate","nodes","data","createEmptyGrid","console","str","log","JSON","stringify","grid","mutateTile","get","TileFg","applyExpandAnimation","expansions","original","tileSize","setTimeout","expansionDuration","time","size","doAnimation","shapeRendering","_extends","Object","assign","target","arguments","source","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","keys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgWeight","_ref","svgRef","titleId","xmlnsXlink","viewBox","enableBackground","xmlSpace","overflow","xlinkHref","transform","d","strokeMiterlimit","cx","cy","r","ForwardRef","WeightFg","showNumber","dominantBaseline","textAnchor","fontSize","SOLID_COLOR","ARROW_PATH_COLOR","pointsEqual","GridForeground","svg","tilePointer","mouseDown0","mouseDown2","draggingInitial","draggingGoal","disable","doTileAnimation","changeTile","bounds","getBoundingRect","onPress","button","onDrag","onTouch","onEndingEvent","xCoordinate","yCoordinate","calculatePoint","initial","goal","drawTile","eraseTile","moveInitial","moveGoal","drawGrid","clone","inBounds","clearTiles","onTilesDragged","drawPath","path","erasePath","Math","floor","resetPoints","end","calcEndPointInView","renderPath","lines","renderPathArrow","renderEndTile","round","topMargin","getBoundingClientRect","onContextMenu","onMouseUp","onMouseMove","onMouseLeave","onTouchMoveCapture","onTouchEnd","onTouchCancel","StatsPanel","textLog","scrollTop","scrollHeight","clientHeight","toFixed","algorithm","readOnly","value","unselectable","onDrop","PlusNavigator","getWidth","getHeight","b","manhattan","abs","euclidean","dx","dy","sqrt","octile","SQRT2","min","chebyshev","max","nullHeuristic","HashSet","undefined","HashTable","Heap","compare","elements","siftUp","val","peek","move","pop","siftDown","pos","parent","swap","right","child","reconstructPath","bottomLeaf","reconstructPathReversed","reverse","Pathfinder","navigator","recentSearch","node","Node","AStarNode","g","fScore","AStarPathfinder","func","heuristic","clearRecentSearch","getGrid","openFrontier","f","closedSet","openSet","root","add","isEmpty","currentNode","currentPoint","currentKey","remove","addRecent","equals","neighbors","neighbor","neighborPoint","neighborKey","has","stepCost","neighborNode","addChild","BFSPathfinder","frontier","visited","shift","next","Stack","DFSPathfinder","BiAStarPathfinder","startOpenFrontier","startOpenSet","endOpenFrontier","endOpenSet","initialRoot","goalRoot","startCurrentNode","startCurrentPoint","startCurrentPointKey","concat","endCurrentNode","endCurrentPoint","endCurrentPointKey","BiBFSPathfinder","startVisited","endVisited","startFrontier","endFrontier","CREATE_NAVIGATOR","CREATE_HEURISTIC","CREATE_PATHFINDER","PathfinderBuilder","toLowerCase","Error","createHeuristic","createNavigator","createPathfinder","VirtualTimer","callback","countDown","timeout","timeStarted","timeRemaining","finished","Date","now","clearTimeout","TerrainGenerator","ignore","shouldIgnore","RandomTerrainGenerator","tileData","topLeft","bottomRight","random","draw","getTerrain","divideWidthNoSkew","divideWidthHSkew","divideWidthVSkew","getMidPoint","range","mid","getRand","MazeGenerator","slant","divideWidth","divide","chamber","widthOf","heightOf","randX","toDraw","edgeBlocked","canDrawHole","randY","drawArr","leftChamber","rightChamber","topChamber","bottomChamber","TerrainGeneratorBuilder","type","calcLength","len","calcCost","PathfindingVisualizer","background","foreground","stats","visualized","visualizing","visualTimeouts","mazeTile","canShowArrows","settings","showArrows","canShowFrontier","visualizeAlg","pausePathfinding","pause","resumePathfinding","resume","doPathfinding","clearPath","pathfinder","getPathfinder","findPath","getRecentGenerations","doDelayedPathfinding","clearVisualization","toggleDisable","onChangeVisualizing","promises","baseIncrement","delayInc","delay","expandVisualization","expandArrows","forEach","promise","Promise","resolve","all","then","algorithmKey","bidirectional","hasBidirectional","makeBidirectional","setAlgorithm","setHeuristic","heuristicKey","setNavigator","navigatorKey","build","t0","performance","t2","getRecentNodes","getAlgorithmName","unshift","createTerrain","mazeType","prevGrid","generator","setDimensions","setGeneratorType","setIgnorePoints","setTileData","generateTerrain","xEnd","yEnd","xFloor","yFloor","yDecimal","ceil","clearTilesChecked","clearVisualizationChecked","w","screen","availWidth","outerWidth","h","availHeight","outerHeight","Checkbox","checked","defaultChecked","disabled","boxStyle","defaultProps","SteppedRangeSlider","Number","currentTarget","default","list","step","sliderStyle","onInput","RadioButtonGroup","Children","toArray","radioButtons","VisualSettings","onChangeViz","onChangeShowArrows","SpeedSettings","onChangeSpeed","speed","speedText","String","initialSpeed","options","AlgorithmSettings","onChangeBidirectional","HeuristicSettings","enable","onClickManhattan","onClickEuclidean","onClickChebyshev","onClickOctile","SettingsManager","changeAlgo","algo","changeVisualize","changeShowArrows","changeBidirectional","changeSpeed","changeManhattan","changeEuclidean","changeChebyshev","changeOctile","PathfindingApp","visualizer","algDropDown","clrDropDown","mazeDropDown","tilesDropDown","settingsManager","onClickAlgDrop","onClickClrDrop","onClickMazeDrop","onClickTilesDrop","changeVButtonColor","toggleSettings","panelShow","hideSettings","heuristicDisabled","usesHeuristic","bidirectionalDisabled","arrowsDisabled","resetBoard","createMaze","createMazeVSkew","createMazeHSkew","createRandomTerrain","mobile","test","userAgent","href","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.10d94bf2.chunk.js","sourcesContent":["import React, {RefObject} from 'react';\r\nimport './Navbar.css'\r\n\r\ninterface IProps {\r\n    onChangeHeight: (height: number) => void\r\n}\r\n\r\nclass TopBar extends React.Component<IProps>\r\n{\r\n    private bar: RefObject<HTMLDivElement> = React.createRef();\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('resize', () => this.props.onChangeHeight(this.bar.current!.offsetHeight));\r\n        this.props.onChangeHeight(this.bar.current!.offsetHeight);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={this.bar} className='top-navbar navbar-expand-sm top-navbar'>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TopBar;","import React from 'react';\r\nimport './Navbar.css'\r\n\r\ninterface VProps {\r\n    active: boolean,\r\n    paused: boolean,\r\n    onStartStop: ()  => void,\r\n    onPause: ()  => void,\r\n    onResume: ()  => void,\r\n}\r\n\r\ninterface ButtonProps {\r\n    onClick: ()  => void\r\n}\r\n\r\nconst SYMBOL_COLOR = 'rgb(230,230,230)';\r\nconst OFFSET = 14;\r\nconst DIMENSION = 47 - 2 * OFFSET;\r\n\r\nexport class VisualizeButton extends React.Component<VProps>\r\n{\r\n    getStopSymbol() {\r\n        return (\r\n            <rect width={DIMENSION}\r\n                  height={DIMENSION}\r\n                  rx={4}\r\n                  fill={SYMBOL_COLOR}\r\n            />\r\n        );\r\n    }\r\n\r\n    getResumeSymbol() {\r\n        const midY = DIMENSION / 2;\r\n        return (\r\n            <polygon\r\n                  points={`${0},${0} ${0},${DIMENSION} ${DIMENSION},${midY}`}\r\n                  className={'track round'}\r\n                  fill={SYMBOL_COLOR}\r\n            />\r\n        );\r\n    }\r\n\r\n    getPauseSymbol() {\r\n        return (\r\n            <svg>\r\n                <rect width={DIMENSION/2.5}\r\n                      height={DIMENSION}\r\n                      rx={3}\r\n                      fill={SYMBOL_COLOR}\r\n                />\r\n                <rect width={DIMENSION/2.5}\r\n                      height={DIMENSION}\r\n                      x={0.2*DIMENSION + DIMENSION/2.5}\r\n                      rx={3}\r\n                      fill={SYMBOL_COLOR}\r\n                />\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        if(this.props.active) {\r\n            return (\r\n                <div className={'half-button-wrapper'}>\r\n                    <button onMouseDown={e => e.preventDefault()}\r\n                            className={'center half-button-left red-button half-viz-button'}\r\n                            onClick={this.props.paused ? this.props.onResume : this.props.onPause}\r\n                    >\r\n                        <svg xmlns='http://www.w3.org/2000/svg'\r\n                             className='svg-icon'\r\n                             width={DIMENSION}\r\n                             height={DIMENSION}\r\n                        >\r\n                            {this.props.paused ? this.getResumeSymbol() : this.getPauseSymbol()}\r\n                        </svg>\r\n                    </button>\r\n                    <button onMouseDown={e => e.preventDefault()}\r\n                            className={'center half-button-right red-button half-viz-button'}\r\n                            onClick={this.props.onStartStop}\r\n                    >\r\n                        <svg xmlns='http://www.w3.org/2000/svg'\r\n                             className='svg-icon'\r\n                             width={DIMENSION}\r\n                             height={DIMENSION}\r\n                        >\r\n                            {this.getStopSymbol()}\r\n                        </svg>\r\n                    </button>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <button onMouseDown={e => e.preventDefault()}\r\n                        className={'button green-button viz-button'}\r\n                        onClick={this.props.onStartStop}\r\n                >\r\n                    Visualize!\r\n                </button>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport class SettingsButton extends React.Component<ButtonProps>\r\n{\r\n    render() {\r\n        return (\r\n            <button onMouseDown={e => e.preventDefault()}\r\n                    className='button settings-button'\r\n                    onClick={this.props.onClick}>\r\n                Settings\r\n            </button>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './Navbar.css'\r\n\r\ninterface AlgProps {\r\n    onClick: () => void,\r\n    onChange: (alg: string) => void\r\n}\r\n\r\ninterface DropDownTextState {\r\n    up: boolean,\r\n    display: string,\r\n    text: string,\r\n    fade: string\r\n}\r\n\r\ninterface ClrProps {\r\n    onClick: () => void,\r\n    onClickPath: () => void,\r\n    onClickTiles: () => void,\r\n    onClickReset: () => void;\r\n}\r\n\r\ninterface DropDownState {\r\n    up: boolean,\r\n    display: string,\r\n    fade: string\r\n}\r\n\r\ninterface MazeProps {\r\n    onClick: () => void,\r\n    onClickMaze: () => void,\r\n    onClickMazeHorizontal: () => void,\r\n    onClickMazeVertical: () => void,\r\n    onClickRandomTerrain: () => void\r\n}\r\n\r\ninterface ClickableProps {\r\n    click: () => void;\r\n}\r\n\r\ninterface TProps {\r\n    onClick: () => void,\r\n    onClickTileType: (cost: number) => void\r\n}\r\n\r\nexport class AlgorithmDropDown extends React.Component<AlgProps, DropDownTextState>\r\n{\r\n    constructor(props: AlgProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            text: 'A* Search',\r\n            fade: 'fade-in'\r\n        };\r\n    }\r\n\r\n    show = () => {\r\n        this.setState({\r\n            up: false,\r\n            display: 'block',\r\n        });\r\n    }\r\n\r\n    hide = () => {\r\n        this.setState({\r\n            display: 'none',\r\n            up: true,\r\n        });\r\n    }\r\n\r\n    toggle = (e: Event) => {\r\n        e.stopPropagation();\r\n        this.props.onClick();\r\n        if(this.isHidden()) {\r\n            this.show();\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    isHidden = () => {\r\n        return this.state.display === 'none';\r\n    }\r\n\r\n    contentStyle = () => {\r\n        return {\r\n            display: this.state.display\r\n        }\r\n    }\r\n\r\n    onChange = (key: string, algText: string) => {\r\n        this.props.onChange(key);\r\n        this.setState({\r\n            text: algText\r\n        });\r\n    }\r\n\r\n    arrowClass = () => {\r\n        return this.state.up ? 'arrowUp' : 'arrowDown';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} className='alg-drop-down drop-down'\r\n                 onMouseDown={e => e.preventDefault()}\r\n                 onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                 onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='alg-drop-down-button drop-down-button'>\r\n                    <span className='alg-drop-down-text drop-down-text'>{this.state.text}</span>\r\n                    <span className={'alg-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div style={this.contentStyle()}\r\n                     className={this.state.fade + ' alg-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={() => this.onChange('a*', 'A* Search')}>A* Search</Clickable>\r\n                    <Clickable click={() => this.onChange('dijkstra', 'Dijkstra')}>Dijkstra's Algorithm</Clickable>\r\n                    <Clickable click={() => this.onChange('best-first', 'Best First')}>Best First Search</Clickable>\r\n                    <Clickable click={() => this.onChange('bfs', 'Breadth First')}>Breadth First Search</Clickable>\r\n                    <Clickable click={() => this.onChange('dfs', 'Depth First')}>Depth First Search</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class ClearDropDown extends React.Component<ClrProps, DropDownState>\r\n{\r\n    constructor(props: ClrProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            fade: 'fade-in'\r\n        };\r\n    }\r\n\r\n    show = () => {\r\n        this.setState({\r\n            up: false,\r\n            display: 'block',\r\n        });\r\n    }\r\n\r\n    hide = () => {\r\n        this.setState({\r\n            display: 'none',\r\n            up: true,\r\n        });\r\n    }\r\n\r\n    toggle = (e: Event) => {\r\n        e.stopPropagation();\r\n        this.props.onClick();\r\n        if(this.isHidden()) {\r\n            this.show();\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    isHidden = () => {\r\n        return this.state.display === 'none';\r\n    }\r\n\r\n    contentStyle = () => {\r\n        return {\r\n            display: this.state.display\r\n        }\r\n    }\r\n\r\n    arrowClass = () => {\r\n        return this.state.up ? 'arrowUpW' : 'arrowDownW';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} className='clr-drop-down drop-down'\r\n                 onMouseDown={e => e.preventDefault()}\r\n                 onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                 onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='clr-drop-down-button drop-down-button'>\r\n                    <span className='clr-drop-down-text drop-down-text'>Reset</span>\r\n                    <span className={'clr-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div style={this.contentStyle()}\r\n                     className={this.state.fade + ' clr-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={this.props.onClickPath}>Clear Path</Clickable>\r\n                    <Clickable click={this.props.onClickTiles}>Clear Tiles</Clickable>\r\n                    <Clickable click={this.props.onClickReset}>Reset Grid</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class MazeDropDown extends React.Component<MazeProps, DropDownState>\r\n{\r\n    constructor(props: MazeProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            fade: 'fade-in'\r\n        };\r\n    }\r\n\r\n    show = () => {\r\n        this.setState({\r\n            up: false,\r\n            display: 'block',\r\n        });\r\n    }\r\n\r\n    hide = () => {\r\n        this.setState({\r\n            display: 'none',\r\n            up: true,\r\n        });\r\n    }\r\n\r\n    toggle = (e: Event) => {\r\n        e.stopPropagation();\r\n        this.props.onClick();\r\n        if(this.isHidden()) {\r\n            this.show();\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    isHidden = () => {\r\n        return this.state.display === 'none';\r\n    }\r\n\r\n    contentStyle = () => {\r\n        return {\r\n            display: this.state.display\r\n        }\r\n    }\r\n\r\n    arrowClass = () => {\r\n        return this.state.up ? 'arrowUpW' : 'arrowDownW';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} className='maze-drop-down drop-down'\r\n                 onMouseDown={e => e.preventDefault()}\r\n                 onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                 onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='maze-drop-down-button drop-down-button'>\r\n                    <span className='maze-drop-down-text drop-down-text'>Terrain</span>\r\n                    <span className={'clr-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div style={this.contentStyle()}\r\n                     className={this.state.fade + ' maze-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={this.props.onClickMaze}>Recursive Maze Division</Clickable>\r\n                    <Clickable click={this.props.onClickMazeHorizontal}>Horizontal Skewed Maze</Clickable>\r\n                    <Clickable click={this.props.onClickMazeVertical}>Vertical Skewed Maze</Clickable>\r\n                    <Clickable click={this.props.onClickRandomTerrain}>Random Terrain</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class TilesDropDown extends React.Component<TProps, DropDownTextState>\r\n{\r\n    constructor(props: TProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            fade: 'fade-in',\r\n            text: 'Wall [∞]'\r\n        };\r\n    }\r\n\r\n    show = () => {\r\n        this.setState({\r\n            up: false,\r\n            display: 'block',\r\n        });\r\n    }\r\n\r\n    hide = () => {\r\n        this.setState({\r\n            display: 'none',\r\n            up: true,\r\n        });\r\n    }\r\n\r\n    toggle = (e: Event) => {\r\n        e.stopPropagation();\r\n        this.props.onClick();\r\n        if(this.isHidden()) {\r\n            this.show();\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    isHidden = () => {\r\n        return this.state.display === 'none';\r\n    }\r\n\r\n    contentStyle = () => {\r\n        return {\r\n            display: this.state.display\r\n        }\r\n    }\r\n\r\n    arrowClass = () => {\r\n        return this.state.up ? 'arrowUpW' : 'arrowDownW';\r\n    }\r\n\r\n    onChange = (cost: number, text: string) => {\r\n        this.props.onClickTileType(cost);\r\n        this.setState({\r\n            text: text\r\n        }, () => this.props.onClickTileType(cost));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} className='tiles-drop-down drop-down'\r\n                 onMouseDown={e => e.preventDefault()}\r\n                 onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                 onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='tiles-drop-down-button drop-down-button'>\r\n                    <span className='tiles-drop-down-text drop-down-text'>{this.state.text}</span>\r\n                    <span className={'clr-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div style={this.contentStyle()}\r\n                     className={this.state.fade + ' tiles-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={() => this.onChange(-1, 'Wall [∞]')}>Wall [∞]</Clickable>\r\n                    <Clickable click={() => this.onChange(2, 'Weight [2]')}>Weight [2]</Clickable>\r\n                    <Clickable click={() => this.onChange(3, 'Weight [3]')}>Weight [3]</Clickable>\r\n                    <Clickable click={() => this.onChange(5, 'Weight [5]')}>Weight [5]</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Clickable extends React.Component<ClickableProps>\r\n{\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} onKeyPress={this.props.click} onClick={this.props.click}>{this.props.children}</div>\r\n        )\r\n    }\r\n}","import React, {RefObject} from 'react';\r\nimport './DraggablePanel.css'\r\n\r\ninterface IProps {\r\n    title: string,\r\n    show: boolean,\r\n    onClickXButton: () => void,\r\n    width: number,\r\n    height: number\r\n}\r\n\r\ninterface IState {\r\n    top: number,\r\n    left: number\r\n}\r\n\r\nclass DraggablePanel extends React.Component<IProps, IState>\r\n{\r\n    //refs are used to access native DOM\r\n    private draggable: RefObject<HTMLDivElement> = React.createRef();\r\n    private draggableContainer: RefObject<HTMLDivElement> = React.createRef();\r\n    private draggableContent: RefObject<HTMLDivElement> = React.createRef();\r\n\r\n    //stores previous mouse location and drag\r\n    private dragging = false;\r\n    private prevX = 0;\r\n    private prevY = 0;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            top: -1,\r\n            left: -1\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        //mouse\r\n        document.addEventListener('mouseup', e => {\r\n            this.mouseUp(e);\r\n        });\r\n        document.addEventListener('mousemove', e => {\r\n            this.mouseMove(e);\r\n        });\r\n        window.addEventListener('mouseleave', e => {\r\n            this.mouseUp(e);\r\n        });\r\n        //touch\r\n        document.addEventListener('touchend', e => {\r\n            this.dragging = false;\r\n        });\r\n        document.addEventListener('touchmove', e => {\r\n            this.touchMove(e);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Start drag and init prev mouse location when mouse is clicked on draggable\r\n     * @param e\r\n     */\r\n    private mouseDown = (e: MouseEvent) => {\r\n        e.preventDefault();\r\n        this.prevY = e.clientY;\r\n        this.prevX = e.clientX;\r\n        this.dragging = true;\r\n    }\r\n\r\n    /**\r\n     * Start drag and init prev touch location when finger is clicked on draggable\r\n     * @param e\r\n     */\r\n    private touchStart = (e: TouchEvent) => {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        this.prevY = touch.clientY;\r\n        this.prevX = touch.clientX;\r\n        this.dragging = true;\r\n    }\r\n\r\n    /**\r\n     * Called when mouse is risen on document stop drag\r\n     * @param e\r\n     */\r\n    private mouseUp = (e: Event) => {\r\n        e.preventDefault();\r\n        this.dragging = false;\r\n    }\r\n\r\n    /**\r\n     * Called when the mouse is moved over the document to calculate the new position of\r\n     * the draggable canvas\r\n     * @param e\r\n     */\r\n    private mouseMove = (e: MouseEvent) => {\r\n        this.drag(e.clientX, e.clientY);\r\n    }\r\n\r\n    /**\r\n     * Called when the touch is moved over the document to calculate the new position of\r\n     * the draggable canvas\r\n     * @param e\r\n     */\r\n    private touchMove = (e: TouchEvent) => {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        this.drag(touch.clientX, touch.clientY);\r\n    }\r\n\r\n    /**\r\n     * Called when user drags over the document to move the panel\r\n     * @param clientX\r\n     * @param clientY\r\n     */\r\n    private drag = (clientX: number, clientY: number) => {\r\n        if(this.dragging) {\r\n            const container = this.draggableContainer.current!;\r\n            let top = (container.offsetTop - (this.prevY - clientY))\r\n            let left = (container.offsetLeft - (this.prevX - clientX));\r\n            const content = this.draggableContent.current!;\r\n            const draggable = this.draggable.current!;\r\n            //stop drag if mouse goes out of bounds\r\n            if(clientY < 0 || clientY > window.innerHeight\r\n                || clientX < 0 || clientX > window.innerWidth) {\r\n                this.dragging = false;\r\n            }\r\n            //check if position is out of bounds and prevent the panel from being dragged there\r\n            if(top < 0) {\r\n                top = 0;\r\n            } else if (top > window.innerHeight - draggable.offsetHeight) {\r\n                top = window.innerHeight - draggable.offsetHeight;\r\n            }\r\n            if(left < -content.offsetWidth/2) {\r\n                left = -content.offsetWidth/2;\r\n            } else if(left > window.innerWidth - content.offsetWidth/2) {\r\n                left = window.innerWidth - content.offsetWidth/2;\r\n            }\r\n            //set new position\r\n            this.setState({\r\n                top: top\r\n            });\r\n            this.setState({\r\n                left: left\r\n            });\r\n            //update previous pos\r\n            this.prevY = clientY;\r\n            this.prevX = clientX;\r\n        }\r\n    }\r\n\r\n    getPosition = () => {\r\n        const left = this.state.left;\r\n        const top = this.state.top;\r\n        if(left === -1 || top === -1) {\r\n            return {};\r\n        }\r\n        return {\r\n            left: left + 'px',\r\n            top: top + 'px',\r\n        };\r\n    }\r\n\r\n    visibleStyle = () => {\r\n        return this.props.show ? 'block' : 'none';\r\n    }\r\n\r\n    draggableStyle() {\r\n        return {\r\n            width: this.props.width,\r\n            display: this.visibleStyle()\r\n        }\r\n    }\r\n\r\n    contentStyle() {\r\n        return {\r\n            width: this.props.width,\r\n            minHeight: this.props.height,\r\n            display: this.visibleStyle()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={this.draggableContainer} className='draggable-container' style={this.getPosition()}>\r\n                {this.renderDraggable()}\r\n                <div ref={this.draggableContent} style={this.contentStyle()} className='draggable-content'>\r\n                    <div className='settings-general'>\r\n                        {this.props.children}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderDraggable = () => {\r\n        return (\r\n            <div style={this.draggableStyle()} className='draggable'\r\n                 ref={this.draggable}\r\n                 onMouseDown={e => this.mouseDown(e.nativeEvent)}\r\n                 onTouchStart={e => this.touchStart(e.nativeEvent)}\r\n            >\r\n                <div className='draggable-title'>{this.props.title}</div>\r\n                <div className='x-button' onClick={this.props.onClickXButton}>X</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DraggablePanel;","import React from 'react';\r\nimport './Grid.css';\r\nimport {Node} from '../../pathfinding/algorithms/Node';\r\nimport {Point} from '../../pathfinding/core/Components';\r\n\r\ninterface Arrow {\r\n    to: Point,\r\n    from: Point\r\n}\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    tilesX: number,\r\n    tilesY: number\r\n}\r\n\r\ninterface IState {\r\n    visualization: string[][],\r\n    arrows: Arrow[]\r\n}\r\n\r\nconst CLOSED_NODE = 'rgb(198, 237, 238)';\r\nconst OPEN_NODE = 'rgb(191, 248, 159)';\r\nconst EMPTY_NODE = 'white';\r\nconst ARROW_COLOR = 'rgb(153,153,153)';\r\n\r\nconst BASE_WIDTH = 27;\r\n\r\nclass GridBackground extends React.Component<IProps,IState>\r\n{\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    /**\r\n     * Constructs a GridBackground with immutable height and width\r\n     * @param props\r\n     */\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.width = this.props.tilesX;\r\n        this.height = this.props.tilesY;\r\n        this.state = {\r\n            visualization: this.createEmptyBg(),\r\n            arrows: []\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a new empty visualization canvas\r\n     */\r\n    createEmptyBg() {\r\n        const visualization = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            const row: string[] = [];\r\n            for(let x = 0; x < this.width; x++) {\r\n                row.push(EMPTY_NODE);\r\n            }\r\n            visualization.push(row);\r\n        }\r\n        return visualization;\r\n    }\r\n\r\n    /**\r\n     * Clear the visualization canvas and update UI\r\n     */\r\n    clear = () => {\r\n        this.setState({\r\n            visualization: this.createEmptyBg(),\r\n            arrows: []\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Perform a generation on a visualization array\r\n     * @param generation\r\n     * @param visualization\r\n     */\r\n    private doGeneration = (generation: Node, visualization: string[][]) => {\r\n        for(const node of generation.children) {\r\n            const point = node.tile.point;\r\n            visualization[point.y][point.x] = OPEN_NODE;\r\n        }\r\n        const point = generation.tile.point;\r\n        visualization[point.y][point.x] = CLOSED_NODE;\r\n        return visualization;\r\n    }\r\n\r\n    /**\r\n     * Visualize generation without updating UI\r\n     * @param generation\r\n     */\r\n    visualizeGeneration = (generation: Node) => {\r\n        this.setState(prevState => ({\r\n            visualization: this.doGeneration(\r\n                generation,\r\n                prevState.visualization.map(\r\n                    (arr) => arr.slice()\r\n                )\r\n            )\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Visualize generation array and update UI\r\n     * @param generations\r\n     */\r\n    visualizeGenerations = (generations: Node[]) => {\r\n        const visualization = this.createEmptyBg();\r\n        for(const generation of generations) {\r\n            this.doGeneration(generation, visualization);\r\n        }\r\n        this.setState({\r\n            visualization: visualization\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Perform an arrow generation on an arrow array\r\n     * @param generation\r\n     * @param arrows\r\n     */\r\n    private doArrowGeneration = (generation: Node, arrows: Arrow[]) => {\r\n        const point = generation.tile.point;\r\n        for(const node of generation.children) {\r\n            const childPoint = node.tile.point;\r\n            const newArrow = {\r\n                from: point,\r\n                to: childPoint,\r\n            };\r\n            //remove a duplicate arrow to indicate replacement\r\n            //in A* for example, we could have re-discovered a better path to a tile\r\n            for(let i = 0; i < arrows.length; i++) {\r\n                const a = arrows[i];\r\n                if(pointsEqual(a.to, newArrow.to)) {\r\n                    const index = arrows.indexOf(a);\r\n                    arrows.splice(index, 1);\r\n                    i--;\r\n                }\r\n            }\r\n            arrows.push(newArrow);\r\n        }\r\n        return arrows;\r\n    }\r\n\r\n    /**\r\n     * Add arrow generation without updating UI\r\n     * @param generation\r\n     */\r\n    addArrowGeneration = (generation: Node) => {\r\n        this.setState(prevState => ({\r\n            arrows: this.doArrowGeneration(\r\n                generation,\r\n                prevState.arrows.slice()\r\n            )\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Add arrow generations and update UI\r\n     * @param generations\r\n     */\r\n    addArrowGenerations = (generations: Node[]) => {\r\n        const arrows: Arrow[] = [];\r\n        for(const generation of generations) {\r\n            this.doArrowGeneration(generation, arrows)\r\n        }\r\n        this.setState({\r\n            arrows: arrows\r\n        });\r\n    }\r\n\r\n    render() {\r\n        // console.timeEnd('time');\r\n        // console.time('time');\r\n        return (\r\n            <div>\r\n                <div className='bg'>\r\n                    {this.renderTiles()}\r\n                </div>\r\n                <svg xmlns='http://www.w3.org/2000/svg' className='grid'>\r\n                    <defs>\r\n                        <marker id='arrowhead' markerWidth='3' markerHeight='3'\r\n                                refX='0' refY='1.5' orient='auto'\r\n                                fill={ARROW_COLOR}\r\n                        >\r\n                            <polygon points='0 0, 3 1.5, 0 3'/>\r\n                        </marker>\r\n                    </defs>\r\n                    {this.renderArrows()}\r\n                </svg>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderArrows = () => {\r\n        const width = this.props.tileWidth;\r\n        const offset = width/2;\r\n        const arrows: JSX.Element[] = [];\r\n        for(let i = 0; i < this.state.arrows.length; i++) {\r\n            //calculate arrow position and dimensions\r\n            const arrow = this.state.arrows[i];\r\n            const first = arrow.from;\r\n            const second = arrow.to;\r\n            const firstX = first.x * width;\r\n            const firstY = first.y * width;\r\n            const secondX = second.x * width;\r\n            const secondY = second.y * width;\r\n            const offsetX = (secondX - firstX)/4;\r\n            const offsetY = (secondY - firstY)/4;\r\n            arrows.push(<line key={'arrow ' + i}\r\n                              x1={firstX + offset + offsetX}\r\n                              y1={firstY + offset + offsetY}\r\n                              x2={secondX + offset - offsetX}\r\n                              y2={secondY + offset - offsetY}\r\n                              stroke={ARROW_COLOR}\r\n                              strokeWidth={2 * this.props.tileWidth/BASE_WIDTH}\r\n                              className='line-arrow'\r\n                              markerEnd='url(#arrowhead)' />);\r\n        }\r\n        return arrows;\r\n    }\r\n\r\n    private renderTiles = () => {\r\n        const tiles: JSX.Element[][] = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            const row: JSX.Element[] = [];\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                };\r\n                row.push(\r\n                    this.renderTile(point, this.state.visualization[point.y][point.x])\r\n                );\r\n            }\r\n            tiles.push(row);\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    private renderTile = (point: Point, color: string) => {\r\n        const width = this.props.tileWidth;\r\n        const top = point.y * this.props.tileWidth;\r\n        const left = point.x * this.props.tileWidth;\r\n        const style = {\r\n            backgroundColor: color,\r\n            width: width + 'px',\r\n            height: width + 'px',\r\n            top: top,\r\n            left: left\r\n        };\r\n        return (\r\n            <div key={point.x + ',' + point.y} style={style} className='tile'/>\r\n        );\r\n    }\r\n}\r\n\r\nfunction pointsEqual(point1: Point, point2: Point) {\r\n    return point1.x === point2.x && point1.y === point2.y;\r\n}\r\n\r\nexport default GridBackground;","/**\r\n * Represents a point in 2d space\r\n * Immutable\r\n */\r\nexport interface Point\r\n{\r\n    readonly x: number;\r\n    readonly y: number;\r\n}\r\n\r\n/**\r\n * Represents the data inside a tile\r\n * Solid tiles cannot be passed while non solid ones can\r\n * pathCost stores how expensive it is to travel to the tile if it isn't solid\r\n * Immutable\r\n */\r\nexport interface TileData\r\n{\r\n    readonly pathCost: number;\r\n    readonly isSolid: boolean;\r\n}\r\n\r\n/**\r\n * Represents a tile on the Grid\r\n */\r\nexport interface Tile\r\n{\r\n    data: TileData;\r\n    readonly point: Point;\r\n}\r\n\r\n/**\r\n * Simple function to create a solid tile with path cost of 1\r\n * @param isSolid\r\n */\r\nexport function createTile(isSolid: boolean) {\r\n    return {\r\n        pathCost: 1,\r\n        isSolid: isSolid\r\n    }\r\n}\r\n\r\n","import {createTile, Point, Tile, TileData} from './Components';\r\n\r\nexport interface Grid\r\n{\r\n    getWidth(): number;\r\n    getHeight(): number;\r\n    inBounds(point: Point): boolean;\r\n    get(point: Point): Tile;\r\n    isSolid(point: Point): boolean;\r\n    mutate(point: Point, data: TileData): void;\r\n    mutateTile(tile: Tile): void;\r\n    mutateDefault(point: Point, solid: boolean): void;\r\n    output(console: Console): void;\r\n    getJson(): string;\r\n    walkable(point: Point): boolean;\r\n    clone(): Grid;\r\n}\r\n\r\n/**\r\n * A square grid system that stores nodes in a matrix\r\n * Uses an x,y system where x corresponds to column of the matrix,\r\n * and y corresponds to the row of the matrix\r\n * TileData.ts should be treated like graph nodes\r\n */\r\nclass RectGrid implements Grid\r\n{\r\n    private readonly tiles: Tile[][];\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    /**\r\n     * Constructs a grid either with empty or predefined tiles\r\n     * @param width of the grid\r\n     * @param height of grid\r\n     * will perform a defensive copy to the grid\r\n     */\r\n    constructor(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.tiles = createEmptyGrid(width, height);\r\n    }\r\n\r\n    getWidth() {\r\n        return this.width;\r\n    }\r\n\r\n    getHeight() {\r\n        return this.height;\r\n    }\r\n\r\n    /**\r\n     * Checks if a given point is in bounds\r\n     * Other functions assume arguments are in bounds, this should be used\r\n     * if there is reasonable doubt about whether a point is in bounds\r\n     * @param point, to check\r\n     */\r\n    inBounds(point: Point) {\r\n        return point.x >= 0 && point.x < this.width && point.y >= 0 && point.y < this.height;\r\n    }\r\n\r\n    /**\r\n     * Retrieves a defensive tile for a position\r\n     * Defensive copy prevents this object from being mutated without calling\r\n     * a mutate function\r\n     * @param point, point to get\r\n     */\r\n    get(point: Point): Tile {\r\n        return {\r\n            point: this.tiles[point.y][point.x].point,\r\n            data: this.tiles[point.y][point.x].data\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Mutates a position's tile to solid or non solid\r\n     * @param point, point to mutate\r\n     * @param data to mutate to\r\n     */\r\n    mutate(point: Point, data: TileData) {\r\n        this.tiles[point.y][point.x].data = data;\r\n    }\r\n\r\n    /**\r\n     * Mutates a a tile by point\r\n     * @param tile to mutate\r\n     */\r\n    mutateTile(tile: Tile) {\r\n        this.tiles[tile.point.y][tile.point.x].data = tile.data;\r\n    }\r\n\r\n    /**\r\n     * Mutate tile at point\r\n     * @param point to mutate at\r\n     * @param solid to determine what default tile to create\r\n     */\r\n    mutateDefault = (point: Point, solid: boolean) => {\r\n        this.mutate(\r\n            point, createTile(solid)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Outputs the grid to a console\r\n     * @param console\r\n     */\r\n    output(console: Console) {\r\n        for(let y = 0; y < this.height; y++) {\r\n            let str = '';\r\n            for(let x = 0; x < this.width; x++) {\r\n                str += this.tiles[y][x].data.isSolid + ', ';\r\n            }\r\n            console.log(str);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns json of tiles\r\n     */\r\n    getJson() {\r\n        return JSON.stringify(this.tiles);\r\n    }\r\n\r\n    /**\r\n     * Determines if a tile can be walked on\r\n     * @param point\r\n     */\r\n    walkable(point: Point) {\r\n        return !this.tiles[point.y][point.x].data.isSolid;\r\n    }\r\n\r\n    isSolid(point: Point) {\r\n        return this.tiles[point.y][point.x].data.isSolid;\r\n    }\r\n\r\n    clone(): Grid {\r\n        const grid = new RectGrid(this.width, this.height);\r\n        for(let y = 0; y < grid.height; y++) {\r\n            for(let x = 0; x < grid.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                }\r\n                grid.mutateTile(this.get(point));\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a 2d matrix of empty nodes\r\n */\r\nfunction createEmptyGrid(width: number, height: number) {\r\n    const nodes: Tile[][] = [];\r\n    for(let y = 0; y < height; y++) {\r\n        const row: Tile[] = [];\r\n        for(let x = 0; x < width; x++) {\r\n            row.push({\r\n                point: {\r\n                    x: x, y: y\r\n                },\r\n                data: createTile(false)\r\n            });\r\n        }\r\n        nodes.push(row);\r\n    }\r\n    return nodes;\r\n}\r\n\r\nexport default RectGrid;","var _g, _g2, _g3;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgWeight(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    width: \"21.875px\",\n    height: \"21.875px\",\n    viewBox: \"0 0 21.875 21.875\",\n    enableBackground: \"new 0 0 21.875 21.875\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Layer_4\",\n    display: \"none\"\n  }, /*#__PURE__*/React.createElement(\"image\", {\n    display: \"inline\",\n    overflow: \"visible\",\n    width: 18,\n    height: 24,\n    xlinkHref: \"../Downloads/yoooo/glyphicons-673-kettlebell.png\",\n    transform: \"matrix(0.8497 0 0 0.8497 3.4233 1.0347)\"\n  }))), _g2 || (_g2 = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Layer_3\"\n  }, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"line\", {\n    fill: \"#420863\",\n    x1: 14.587,\n    y1: 21.873,\n    x2: 14.587,\n    y2: 21.873\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    fill: \"#420863\",\n    x1: 14.587,\n    y1: 21.873,\n    x2: 14.587,\n    y2: 21.873\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    fill: \"#420863\",\n    x1: 14.587,\n    y1: 21.873,\n    x2: 14.587,\n    y2: 21.873\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    fill: \"#420863\",\n    x1: 14.587,\n    y1: 21.873,\n    x2: 14.587,\n    y2: 21.873\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    fill: \"#420863\",\n    x1: 14.587,\n    y1: 21.873,\n    x2: 14.587,\n    y2: 21.873\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    fill: \"#420863\",\n    x1: 14.587,\n    y1: 21.873,\n    x2: 14.587,\n    y2: 21.873\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    fill: \"#420863\",\n    x1: 14.587,\n    y1: 21.873,\n    x2: 14.587,\n    y2: 21.873\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    fill: \"#420863\",\n    x1: 14.587,\n    y1: 21.873,\n    x2: 14.587,\n    y2: 21.873\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    fill: \"#420863\",\n    x1: 14.587,\n    y1: 21.873,\n    x2: 14.587,\n    y2: 21.873\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#420863\",\n    d: \"M6.531,21.38c-1.805-1.345-2.973-3.494-2.973-5.917c0-2.421,1.167-4.569,2.969-5.915\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    fill: \"#420863\",\n    x1: 7.287,\n    y1: 21.875,\n    x2: 7.282,\n    y2: 21.872\n  }), /*#__PURE__*/React.createElement(\"polyline\", {\n    fill: \"#420863\",\n    points: \"15.345,21.376 6.527,21.376 6.527,9.549 15.345,9.549 15.345,21.376  \"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    fill: \"none\",\n    stroke: \"#420863\",\n    strokeWidth: 2,\n    strokeMiterlimit: 10,\n    cx: 11.012,\n    cy: 6.914,\n    r: 5.512\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#420863\",\n    d: \"M15.345,21.378c1.806-1.345,2.974-3.494,2.973-5.917c0-2.421-1.167-4.569-2.968-5.915\"\n  })))), _g3 || (_g3 = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Layer_2\",\n    display: \"none\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    display: \"inline\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    x: 3.778,\n    y: 11.427,\n    transform: \"matrix(-0.7071 0.7071 -0.7071 -0.7071 28.6357 16.3531)\",\n    fill: \"#420863\",\n    width: 14.306,\n    height: 5.361\n  }), /*#__PURE__*/React.createElement(\"rect\", {\n    x: 3.792,\n    y: 5.088,\n    transform: \"matrix(-0.7071 -0.7071 0.7071 -0.7071 13.1915 20.9994)\",\n    fill: \"#420863\",\n    width: 14.305,\n    height: 5.361\n  })))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgWeight);\nexport default __webpack_public_path__ + \"static/media/weight.2e4bdffd.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\r\nimport './Grid.css';\r\nimport {Point} from '../../pathfinding/core/Components';\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    point: Point,\r\n    color: string,\r\n    doAnimation: boolean\r\n}\r\n\r\ninterface IState {\r\n    tileSize: number\r\n}\r\n\r\nclass TileFg extends React.Component<IProps, IState>\r\n{\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const size = this.props.doAnimation ?  0 : this.props.tileWidth;\r\n        this.state = {\r\n            tileSize: size,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.props.doAnimation) {\r\n            this.applyExpandAnimation();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Animation to expand element from half size to full size over a few milliseconds\r\n     * Can be slow to execute so animations should be enabled with caution\r\n     */\r\n    applyExpandAnimation = () => {\r\n        const expansionDuration = 100;\r\n        const expansions = 10;\r\n        const expansionStep = expansionDuration/expansions;\r\n        const overStep = 2;\r\n        const original = this.state.tileSize;\r\n        for(let i = 1; i <= expansions + overStep; i++) {\r\n            const expand = () => this.setState({\r\n                tileSize: original + i * (this.props.tileWidth/(expansions))\r\n            });\r\n            setTimeout(expand, i * expansionStep);\r\n        }\r\n        let time = expansions + overStep + 1;\r\n        for(let i = expansions + overStep - 0.5; i >= expansions; i -= 0.5) {\r\n            const shrink = () => this.setState({\r\n                tileSize: original + i * (this.props.tileWidth/(expansions))\r\n            });\r\n            setTimeout(shrink, time * expansionStep);\r\n            time += 6;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const width = this.state.tileSize;\r\n        const top = this.props.point.y * this.props.tileWidth + (this.props.tileWidth - width)/2;\r\n        const left = this.props.point.x * this.props.tileWidth + (this.props.tileWidth - width)/2;\r\n        const style = {\r\n            fill: this.props.color,\r\n            stroke: 'none',\r\n            display: 'block'\r\n        };\r\n        return (\r\n            <rect x={left} y={top}\r\n                  shapeRendering='crispEdges'\r\n                  width={width} height={width}\r\n                  style={style} className={'svg-tile'}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default TileFg;","import React from 'react';\r\nimport {Point} from '../../pathfinding/core/Components';\r\nimport {ReactComponent as Weight} from '../web-content/weight.svg';\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    point: Point,\r\n    color: string,\r\n    doAnimation: boolean,\r\n    cost: number\r\n}\r\n\r\ninterface IState {\r\n    tileSize: number,\r\n    showNumber: boolean\r\n}\r\n\r\nclass WeightFg extends React.Component<IProps, IState>\r\n{\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const size = this.props.doAnimation ?  0 : this.props.tileWidth;\r\n        this.state = {\r\n            tileSize: size,\r\n            showNumber: !this.props.doAnimation\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.props.doAnimation) {\r\n            this.applyExpandAnimation();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Animation to expand element from half size to full size over a few milliseconds\r\n     * Can be slow to execute so animations should be enabled with caution\r\n     */\r\n    applyExpandAnimation = () => {\r\n        const expansionDuration = 100;\r\n        const expansions = 10;\r\n        const expansionStep = expansionDuration/expansions;\r\n        const overStep = 2;\r\n        const original = this.state.tileSize;\r\n        for(let i = 1; i <= expansions + overStep; i++) {\r\n            const expand = () => this.setState({\r\n                tileSize: original + i * (this.props.tileWidth/(expansions))\r\n            });\r\n            setTimeout(expand, i * expansionStep);\r\n        }\r\n        let time = expansions + overStep + 1;\r\n        for(let i = expansions + overStep - 0.5; i >= expansions; i -= 0.5) {\r\n            const shrink = () => this.setState({\r\n                tileSize: original + i * (this.props.tileWidth/(expansions))\r\n            });\r\n            setTimeout(shrink, time * expansionStep);\r\n            time += 6;\r\n        }\r\n        setTimeout(() => this.setState({\r\n            showNumber: true\r\n        }), expansionDuration);\r\n    }\r\n\r\n    render() {\r\n        const width = this.state.tileSize;\r\n        const top = this.props.point.y * this.props.tileWidth + (this.props.tileWidth - width)/2;\r\n        const left = this.props.point.x * this.props.tileWidth + (this.props.tileWidth - width)/2;\r\n        const style = {\r\n            fill: this.props.color,\r\n            stroke: 'none',\r\n            display: 'block'\r\n        };\r\n        const children: JSX.Element[] = [];\r\n        children.push(\r\n            <Weight width={width} height={width}\r\n                    style={style} className={'svg-tile'}\r\n            />\r\n        );\r\n        if(this.state.showNumber) {\r\n            children.push(\r\n                <text x='50%' y='70%'\r\n                      dominantBaseline='middle'\r\n                      textAnchor='middle'\r\n                      fill={'white'}\r\n                      fontSize={'0.8em'}\r\n                      className={'svg-text'}\r\n                >\r\n                    {this.props.cost}\r\n                </text>\r\n            );\r\n        }\r\n        return (\r\n            <svg x={left} y={top} width={width} height={width}>\r\n                {children}\r\n            </svg>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeightFg;","import React, {RefObject} from 'react';\r\nimport './Grid.css';\r\nimport {createTile, Point, Tile, TileData} from '../../pathfinding/core/Components';\r\nimport RectGrid, {Grid} from '../../pathfinding/core/Grid';\r\nimport TileFg from './TileFg';\r\nimport WeightFg from './WeightFg';\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    tilesX: number,\r\n    tilesY: number,\r\n    onTilesDragged: () => void,\r\n    topMargin: number,\r\n}\r\n\r\ninterface IState {\r\n    grid: Grid,\r\n    initial: Point,\r\n    goal: Point,\r\n    path: Tile[]\r\n}\r\n\r\nconst SOLID_COLOR = 'rgb(45, 48, 54)';\r\nconst INITIAL_COLOR = 'rgb(131, 217, 52)';\r\nconst GOAL_COLOR = 'rgb(203, 75, 14)';\r\nconst ARROW_PATH_COLOR = 'rgb(73, 79, 250)';\r\n\r\nconst BASE_WIDTH = 27;\r\n\r\nclass GridForeground extends React.Component<IProps,IState>\r\n{\r\n    private svg: RefObject<SVGSVGElement> = React.createRef();\r\n\r\n    private tilePointer: TileData;\r\n\r\n    private mouseDown0: boolean = false;\r\n    private mouseDown2: boolean = false;\r\n    private draggingInitial: boolean = false;\r\n    private draggingGoal: boolean = false;\r\n    private disable: boolean = false;\r\n\r\n    private doTileAnimation: boolean = true;\r\n\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    /**\r\n     * Constructs a GridForeground with immutable height and width\r\n     * @param props\r\n     */\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.width = this.props.tilesX;\r\n        this.height = this.props.tilesY;\r\n        const end = this.calcEndPointInView();\r\n        this.tilePointer = createTile(true);\r\n        this.state = {\r\n            grid: new RectGrid(this.width, this.height),\r\n            path: [],\r\n            initial: {\r\n                x: ((end.x)/3) >> 0,\r\n                y: ((end.y)/3) >> 0\r\n            },\r\n            goal: {\r\n                x: ((2*(end.x)/3) >> 0) - 1,\r\n                y: ((2*(end.y)/3) >> 0) - 1\r\n            }\r\n        }\r\n    }\r\n\r\n    changeTile = (data: TileData) => {\r\n        this.tilePointer = data;\r\n    }\r\n\r\n    calcEndPointInView() {\r\n        const xEnd = Math.round(window.innerWidth / this.props.tileWidth);\r\n        const yEnd = Math.round((window.innerHeight - this.props.topMargin - 30) / this.props.tileWidth);\r\n        return {\r\n            x: xEnd, y: yEnd\r\n        }\r\n    }\r\n\r\n    toggleDisable() {\r\n        this.disable = !this.disable;\r\n    }\r\n\r\n    getBoundingRect() {\r\n        return this.svg.current!.getBoundingClientRect();\r\n    }\r\n\r\n    private mouseDown = (e: MouseEvent) => {\r\n        e.preventDefault();\r\n        const bounds = this.getBoundingRect();\r\n        this.onPress(e.clientX - bounds.left, e.clientY - bounds.top, e.button);\r\n    }\r\n\r\n    private mouseUp = (e: MouseEvent) => {\r\n        e.preventDefault();\r\n        if(e.button === 0) {\r\n            this.draggingGoal = false;\r\n            this.draggingInitial = false;\r\n            this.mouseDown0 = false;\r\n        } else if(e.button === 2) {\r\n            this.mouseDown2 = false;\r\n        }\r\n    }\r\n\r\n    private mouseMove = (e: MouseEvent) => {\r\n        const bounds = this.getBoundingRect();\r\n        this.onDrag(e.clientX - bounds.left, e.clientY - bounds.top);\r\n    }\r\n\r\n    private touchStart = (e: TouchEvent) => {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        const bounds = this.getBoundingRect();\r\n        this.onTouch(touch.clientX - bounds.left, touch.clientY - bounds.top);\r\n    }\r\n\r\n    private touchMove = (e: TouchEvent) => {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        const bounds = this.getBoundingRect();\r\n        this.onDrag(touch.clientX - bounds.left, touch.clientY - bounds.top);\r\n    }\r\n\r\n    private onEndingEvent = (e: Event) => {\r\n        e.preventDefault();\r\n        this.draggingGoal = false;\r\n        this.draggingInitial = false;\r\n        this.mouseDown0 = false;\r\n        this.mouseDown2 = false;\r\n    }\r\n\r\n    /**\r\n     * Responds to the event thrown at screen coordinates on press\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     * @param button\r\n     */\r\n    private onPress = (xCoordinate: number, yCoordinate: number, button: number) => {\r\n        const point = this.calculatePoint(xCoordinate,yCoordinate);\r\n        if(button === 0) {\r\n            this.mouseDown0 = true;\r\n            if(pointsEqual(point, this.state.initial)) {\r\n                this.draggingInitial = true;\r\n            } else if(pointsEqual(point, this.state.goal)) {\r\n                this.draggingGoal = true;\r\n            } else if(!this.disable) {\r\n                this.drawTile(point);\r\n            }\r\n        } else if(button === 2) {\r\n            this.mouseDown2 = true;\r\n            if(!pointsEqual(point,this.state.initial) && !pointsEqual(point, this.state.goal) && !this.disable) {\r\n                this.eraseTile(point);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Responds to the event thrown at screen coordinates on touch\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     */\r\n    private onTouch = (xCoordinate: number, yCoordinate: number) => {\r\n        const point = this.calculatePoint(xCoordinate,yCoordinate);\r\n        if(pointsEqual(point, this.state.initial)) {\r\n            this.mouseDown0 = true;\r\n            this.draggingInitial = true;\r\n        } else if(pointsEqual(point, this.state.goal)) {\r\n            this.mouseDown0 = true;\r\n            this.draggingGoal = true;\r\n        } else if(!this.state.grid.isSolid(point)) {\r\n            this.mouseDown0 = true;\r\n            if(!this.disable) {\r\n                this.drawTile(point);\r\n            }\r\n        } else {\r\n            this.mouseDown2 = true;\r\n            if(!pointsEqual(point, this.state.initial) && !pointsEqual(point, this.state.goal) && !this.disable) {\r\n                this.eraseTile(point);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Responds to the event thrown at screen coordinates on drag/move\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     */\r\n    private onDrag = (xCoordinate: number, yCoordinate: number) => {\r\n        const point = this.calculatePoint(xCoordinate,yCoordinate);\r\n        if(this.mouseDown0) {\r\n            if(this.draggingInitial) {\r\n                this.moveInitial(point);\r\n            } else if(this.draggingGoal) {\r\n                this.moveGoal(point);\r\n            } else if(!pointsEqual(point,this.state.initial) && !pointsEqual(point, this.state.goal) && !this.disable) {\r\n                this.drawTile(point);\r\n            }\r\n        } else if(this.mouseDown2) {\r\n            if(!pointsEqual(point, this.state.initial) && !pointsEqual(point, this.state.goal) && !this.disable) {\r\n                this.eraseTile(point);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw an entire new grid on the foreground with disabled animations\r\n     * @param grid\r\n     */\r\n    drawGrid = (grid: Grid) => {\r\n        this.doTileAnimation = false;\r\n        this.setState({\r\n            grid: grid\r\n        }, () => this.doTileAnimation = true)\r\n    }\r\n\r\n    /**\r\n     * Draw tile at point\r\n     * @param point\r\n     */\r\n    drawTile = (point: Point) => {\r\n        const grid = this.state.grid.clone();\r\n        if(grid.inBounds(point)) {\r\n            grid.mutateTile({\r\n                point: point,\r\n                data: this.tilePointer\r\n            });\r\n        }\r\n        this.setState({\r\n            grid: grid\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if a node is visualized, then changes the tile to empty if it isn't\r\n     * @param point\r\n     */\r\n    eraseTile = (point: Point) => {\r\n        const grid = this.state.grid.clone();\r\n        if(grid.inBounds(point)) {\r\n            grid.mutateDefault(point, false);\r\n        }\r\n        this.setState({\r\n            grid: grid\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clear grid in state\r\n     */\r\n    clearTiles = () => {\r\n        const grid = this.state.grid.clone();\r\n        for(let y = 0; y < this.height; y++) {\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                }\r\n                grid.mutateDefault(point, false);\r\n            }\r\n        }\r\n        this.setState({\r\n            grid: grid\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Moves initial to a new point\r\n     * @param point\r\n     */\r\n    moveInitial = (point: Point) => {\r\n        if(this.state.grid.inBounds(point)\r\n            && !this.state.grid.isSolid(point)\r\n            && !pointsEqual(this.state.goal, point)\r\n            && !pointsEqual(this.state.initial, point)\r\n            && !this.disable)\r\n        {\r\n            this.setState({\r\n                initial: point\r\n            }, () => this.props.onTilesDragged());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves goal to a new point\r\n     * @param point\r\n     */\r\n    moveGoal = (point: Point) => {\r\n        if(this.state.grid.inBounds(point)\r\n            && !this.state.grid.isSolid(point)\r\n            && !pointsEqual(this.state.initial, point)\r\n            && !pointsEqual(this.state.goal, point)\r\n            && !this.disable)\r\n        {\r\n            this.setState({\r\n                goal: point\r\n            }, () => this.props.onTilesDragged());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw a path onto the grid\r\n     * @param path\r\n     */\r\n    drawPath = (path: Tile[]) => {\r\n        this.setState({\r\n            path: path.slice()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Erase path from the grid\r\n     */\r\n    erasePath = () => {\r\n        this.setState({\r\n            path: []\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Converts real screen x,y coordinates into\r\n     * a 2d point position on the grid\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     */\r\n    calculatePoint = (xCoordinate: number, yCoordinate: number) => {\r\n        return {\r\n            x: Math.floor(xCoordinate/this.props.tileWidth),\r\n            y: Math.floor(yCoordinate/this.props.tileWidth)\r\n        }\r\n    }\r\n\r\n    resetPoints = () => {\r\n        const end = this.calcEndPointInView();\r\n        this.setState({\r\n            initial: {\r\n                x: ((end.x)/3) >> 0,\r\n                y: ((end.y)/3) >> 0\r\n            },\r\n            goal: {\r\n                x: ((2*(end.x)/3) >> 0) - 1,\r\n                y: ((2*(end.y)/3) >> 0) - 1\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <svg ref={this.svg} xmlns='http://www.w3.org/2000/svg' className='grid'\r\n                 onContextMenu={e => e.preventDefault()}\r\n                 onMouseDown={e => this.mouseDown(e.nativeEvent)}\r\n                 onMouseUp={e => this.mouseUp(e.nativeEvent)}\r\n                 onMouseMove={e => this.mouseMove(e.nativeEvent)}\r\n                 onMouseLeave={e => this.onEndingEvent(e.nativeEvent)}\r\n                 onTouchStart={e => this.touchStart(e.nativeEvent)}\r\n                 onTouchMoveCapture={e => this.touchMove(e.nativeEvent)}\r\n                 onTouchEnd={e => this.onEndingEvent(e.nativeEvent)}\r\n                 onTouchCancel={e => this.onEndingEvent(e.nativeEvent)}\r\n            >\r\n                <defs>\r\n                    <marker id='arrowhead-path' markerWidth='3' markerHeight='3'\r\n                            refX='0' refY='1.5' orient='auto'\r\n                            fill={ARROW_PATH_COLOR}\r\n                    >\r\n                        <polygon points='0 0, 3 1.5, 0 3'/>\r\n                    </marker>\r\n                </defs>\r\n                {this.renderEndTile(this.state.initial, INITIAL_COLOR,'initial')}\r\n                {this.renderEndTile(this.state.goal, GOAL_COLOR,'goal')}\r\n                {this.renderPath()}\r\n                {this.renderTiles()}\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    private renderPath = () => {\r\n        const lines: JSX.Element[] = [];\r\n        for(let i = 0; i < this.state.path.length-1; i++) {\r\n            const first = this.state.path[i].point;\r\n            const second = this.state.path[i+1].point;\r\n            lines.push(this.renderPathArrow(i, first, second));\r\n        }\r\n        return lines;\r\n    }\r\n\r\n    private renderPathArrow = (index: number, first: Point, second: Point) => {\r\n        const width = this.props.tileWidth;\r\n        const offset = width/2;\r\n        const firstX = first.x * width;\r\n        const firstY = first.y * width;\r\n        const secondX = second.x * width;\r\n        const secondY = second.y * width;\r\n        const offsetX = (secondX - firstX)/4;\r\n        const offsetY = (secondY - firstY)/4;\r\n        return (\r\n            <line key={'path ' + index}\r\n                  x1={firstX + offset + offsetX}\r\n                  y1={firstY + offset + offsetY}\r\n                  x2={secondX + offset - offsetX}\r\n                  y2={secondY + offset - offsetY}\r\n                  stroke={ARROW_PATH_COLOR}\r\n                  strokeWidth={2 * this.props.tileWidth/BASE_WIDTH}\r\n                  className='line'\r\n                  markerEnd='url(#arrowhead-path)' />\r\n        );\r\n    }\r\n\r\n    private renderTiles = () => {\r\n        const tiles: JSX.Element[] = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                }\r\n                const cost = this.state.grid.get(point).data.pathCost;\r\n                if(this.state.grid.isSolid(point)) {\r\n                    tiles.push(\r\n                        <TileFg key={point.x + ',' + point.y} point={point}\r\n                                doAnimation={this.doTileAnimation}\r\n                                tileWidth={this.props.tileWidth}\r\n                                color={SOLID_COLOR}\r\n                        />\r\n                    );\r\n                } else if(cost > 1) {\r\n                    tiles.push(\r\n                        <WeightFg key={point.x + ',' + point.y} point={point}\r\n                                  doAnimation={this.doTileAnimation}\r\n                                  tileWidth={this.props.tileWidth}\r\n                                  color={SOLID_COLOR}\r\n                                  cost={cost}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    private renderEndTile = (point: Point, color: string, key: string) => {\r\n        return <TileFg key={key} point={point} doAnimation={false}\r\n                       tileWidth={this.props.tileWidth}\r\n                       color={color}/>\r\n    }\r\n}\r\n\r\nfunction pointsEqual(point1: Point, point2: Point) {\r\n    return point1.x === point2.x && point1.y === point2.y;\r\n}\r\n\r\nexport default GridForeground;","import React, {RefObject} from 'react';\r\nimport './Grid.css';\r\n\r\ninterface IProps {\r\n    algorithm: string,\r\n    length: number,\r\n    cost: number,\r\n    time: number,\r\n    nodes: number\r\n}\r\n\r\nclass StatsPanel extends React.Component<IProps>\r\n{\r\n    private readonly textLog: RefObject<HTMLTextAreaElement> = React.createRef();\r\n\r\n    componentDidUpdate() {\r\n        this.textLog.current!.scrollTop = this.textLog.current!.scrollHeight;\r\n    }\r\n\r\n    getHeight() {\r\n        return this.textLog.current!.clientHeight;\r\n    }\r\n\r\n    render() {\r\n        const time = precise(this.props.time);\r\n        const text = this.props.algorithm === '' ? '' :\r\n            this.props.algorithm +\r\n            ' visited ' +\r\n            this.props.nodes +\r\n            ' nodes in ' +\r\n            time +\r\n            ' ms. Path length = ' +\r\n            this.props.length +\r\n            '. Path cost = ' +\r\n            this.props.cost +\r\n            '. ';\r\n        return(\r\n            <div>\r\n                <textarea tabIndex={-1} ref={this.textLog} readOnly={true}\r\n                          className='stats-text-area no-select'\r\n                          value={text} unselectable={'on'} onDrop={() => false}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction precise(x: number) {\r\n    return x.toFixed(2);\r\n}\r\n\r\nexport default StatsPanel;","import {Point, Tile} from './Components';\r\nimport Navigator, {UNIT} from './Navigator';\r\n\r\n/**\r\n * Concretion of a Plus Navigator for a grid\r\n * Allows movement akin to a 'plus' symbol\r\n */\r\nclass PlusNavigator extends Navigator\r\n{\r\n    /**\r\n     * Adds the neighbors of a point to the left, right, top and down\r\n     * @param point\r\n     */\r\n    neighbors(point: Point): Tile[] {\r\n        const tiles: Tile[] = [];\r\n        if(point.x + UNIT < this.grid.getWidth()) {\r\n            const tile = this.grid.get({\r\n                x: point.x + UNIT,\r\n                y: point.y\r\n            })\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.y + UNIT < this.grid.getHeight()) {\r\n            const tile = this.grid.get({\r\n                x: point.x,\r\n                y: point.y + UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.x - UNIT >= 0) {\r\n            const tile = this.grid.get({\r\n                x: point.x - UNIT,\r\n                y: point.y\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.y - UNIT >= 0) {\r\n            const tile = this.grid.get({\r\n                x: point.x,\r\n                y: point.y - UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    /**\r\n     * Step cost function that works by getting the pathCost stored in the grid\r\n     * from one point a to b\r\n     * @param a\r\n     * @param b to point to travel to\r\n     */\r\n    cost(a: Point, b: Point) {\r\n        return this.grid.get(b).data.pathCost;\r\n    }\r\n\r\n    getType() {\r\n        return 'plus';\r\n    }\r\n}\r\n\r\nexport default PlusNavigator;","import {Grid} from './Grid';\r\nimport {Point, Tile} from './Components';\r\n\r\nexport const UNIT = 1; //number of tiles we can move at once\r\n\r\n/**\r\n * Describes an abstract navigator for a grid\r\n * Provides graph-like traversal for the grid\r\n * Determines where we can travel to from a certain point,\r\n * whether we have reached a destination, and the cost to\r\n * travel to a certain point\r\n */\r\nabstract class Navigator\r\n{\r\n    protected readonly grid: Grid;\r\n\r\n    constructor(grid: Grid) {\r\n        this.grid = grid;\r\n    }\r\n\r\n    getGrid() {\r\n        return this.grid;\r\n    }\r\n\r\n    /**\r\n     * Goal check function: Checks if two points are equal\r\n     * @param a\r\n     * @param b\r\n     */\r\n    equals(a: Point, b: Point) {\r\n        return a.x === b.x && a.y === b.y;\r\n    }\r\n\r\n    /**\r\n     * Step cost function from a to b\r\n     * @param a\r\n     * @param b to point to travel to\r\n     */\r\n    abstract cost(a: Point, b: Point): number;\r\n\r\n    /**\r\n     * Neighbors function: Gets the available neighbors for a point in a grid we can make\r\n     * in a given move\r\n     * @param point\r\n     */\r\n    abstract neighbors(point: Point): Tile[];\r\n\r\n    abstract getType(): string;\r\n}\r\n\r\nexport default Navigator;","import {Point} from '../core/Components';\r\n\r\nexport type HeuristicFunc = (a: Point, b: Point) => number;\r\n\r\nexport function manhattan(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x) ;\r\n    const dy = Math.abs(a.y - b.y);\r\n    return dx + dy;\r\n}\r\n\r\nexport function euclidean(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n}\r\n\r\nexport function octile(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.SQRT2 * Math.min(dx, dy) + Math.abs(dx - dy);\r\n}\r\n\r\nexport function chebyshev(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.max(dx, dy);\r\n}\r\n\r\nexport function nullHeuristic(a: Point, b: Point): number {\r\n    return 0;\r\n}","import {Point} from '../core/Components';\r\n\r\n/**\r\n * A simple data structure that keeps track of whether keys have been added to it\r\n */\r\nexport class HashSet\r\n{\r\n    private map: {[key: string]: boolean | undefined} = {};\r\n\r\n    add(key: string) {\r\n        this.map[key] = true;\r\n    }\r\n\r\n    remove(key: string) {\r\n        this.map[key] = undefined;\r\n    }\r\n\r\n    has(key: string) {\r\n        return this.map[key] !== undefined;\r\n    }\r\n\r\n    clear() {\r\n        this.map = {};\r\n    }\r\n}\r\n\r\n/**\r\n * A simple data structure that stores a type at a key\r\n */\r\nexport class HashTable<Value>\r\n{\r\n    private map: {[key: string]: Value | undefined} = {};\r\n\r\n    add(key: string, data: Value) {\r\n        this.map[key] = data;\r\n    }\r\n\r\n    remove(key: string) {\r\n        this.map[key] = undefined;\r\n    }\r\n\r\n    get(key: string) {\r\n        return this.map[key];\r\n    }\r\n\r\n    has(key: string) {\r\n        return this.map[key] !== undefined;\r\n    }\r\n\r\n    clear() {\r\n        this.map = {};\r\n    }\r\n}\r\n\r\n/**\r\n * Serialize point into a unique string\r\n * @param point\r\n */\r\nexport function stringify(point: Point) {\r\n    return 'x' + point.x + 'y' + point.y;\r\n}","/**\r\n * A compare function to determine if a is 'better' (deserves a higher position) than b\r\n */\r\nexport type Comparator<E> = (a: E, b: E) => boolean\r\n\r\n/**\r\n * Minimalist Implementation of the heap data structure as an array\r\n */\r\nclass Heap<E>\r\n{\r\n    private elements: E[] = [];\r\n    readonly compare: Comparator<E>;\r\n\r\n    constructor(compare: Comparator<E>) {\r\n        this.compare = compare;\r\n    }\r\n\r\n    /**\r\n     * Returns the size of the heap\r\n     */\r\n    getSize() {\r\n        return this.elements.length;\r\n    }\r\n\r\n    /**\r\n     * Checks if heap is empty\r\n     */\r\n    isEmpty() {\r\n        return this.elements.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Add a new element to the heap\r\n     * @param e\r\n     */\r\n    push(e: E) {\r\n        this.elements.push(e);\r\n        this.siftUp(this.elements.length-1); //last element\r\n    }\r\n\r\n    /**\r\n     * Returns the top of the heap without removing it\r\n     * Fails if heap is empty\r\n     */\r\n    peek() {\r\n        return this.elements[0];\r\n    }\r\n\r\n    /**\r\n     * Returns the top of the heap and removes it\r\n     * Fails if heap is empty\r\n     */\r\n    pop() {\r\n        const val = this.peek();\r\n        this.move(this.elements.length - 1, 0);\r\n        this.elements.pop();\r\n        this.siftDown(0);\r\n        return val;\r\n    }\r\n\r\n    /**\r\n     * Clear the heap\r\n     */\r\n    clear() {\r\n        this.elements = [];\r\n    }\r\n\r\n    /**\r\n     * Sifts a new element that is out of order up to the right position\r\n     * @param pos of new element\r\n     */\r\n    private siftUp(pos: number) {\r\n        let parent = ((pos - 1) / 2) >> 0; //integer division\r\n        while(parent >= 0) {\r\n            //if the current position is better than parent\r\n            if(this.compare(this.elements[pos], this.elements[parent])) {\r\n                //then current position with parent and move to next\r\n                this.swap(pos, parent);\r\n                pos = parent;\r\n                parent = ((pos - 1) / 2) >> 0;\r\n            } else {\r\n                //otherwise stop\r\n                parent = -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sifts a new element that is out of order down to the right position\r\n     * @param pos of new element\r\n     */\r\n    private siftDown(pos: number) {\r\n        const left = 2 * pos + 1;\r\n        const right = 2 * pos + 2;\r\n        //stop if the children are out of bounds\r\n        if(left >= this.elements.length) {\r\n            return;\r\n        }\r\n        //find the better child\r\n        const child = (right >= this.elements.length || this.compare(this.elements[left], this.elements[right]))\r\n            ? left : right;\r\n        //continues to sift down if the child is better than the current position\r\n        if(this.compare(this.elements[child], this.elements[pos])) {\r\n            this.swap(child, pos);\r\n            this.siftDown(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Internal move function\r\n     * @param from\r\n     * @param to\r\n     */\r\n    private move(from: number, to: number) {\r\n        this.elements[to] = this.elements[from];\r\n    }\r\n\r\n    /**\r\n     * Internal swap function\r\n     * @param a\r\n     * @param b\r\n     */\r\n    private swap(a: number, b: number) {\r\n        let val = this.elements[a];\r\n        this.elements[a] = this.elements[b];\r\n        this.elements[b] = val;\r\n    }\r\n}\r\n\r\nexport default Heap;","import {Point, Tile} from '../core/Components';\r\nimport Navigator from '../core/Navigator';\r\nimport {Node} from './Node';\r\n\r\n/**\r\n * Pathfinder performs algorithms operations on the grid\r\n * Uses the navigator rank and expand nodes\r\n */\r\nabstract class Pathfinder\r\n{\r\n    protected recentSearch: Node[] = [];\r\n    protected navigator: Navigator;\r\n\r\n    constructor(navigator: Navigator) {\r\n        this.navigator = navigator;\r\n    }\r\n\r\n    setNavigator(navigator: Navigator) {\r\n        this.navigator = navigator;\r\n    }\r\n\r\n    getNavigator() {\r\n        return this.navigator;\r\n    }\r\n\r\n    getRecentNodes() {\r\n        return this.recentSearch.length;\r\n    }\r\n\r\n    clearRecentSearch() {\r\n        this.recentSearch = [];\r\n    }\r\n\r\n    getRecentGenerations() {\r\n        return this.recentSearch.slice();\r\n    }\r\n\r\n    protected addRecent(node: Node) {\r\n        this.recentSearch.push(node);\r\n    }\r\n\r\n    abstract getAlgorithmName(): string;\r\n\r\n    /**\r\n     * Finds the best path between initial and goal on the grid\r\n     * and returns it in an array\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    abstract findPath(initial: Point, goal: Point): Tile[];\r\n}\r\n\r\n/**\r\n * Reconstructs the path from a tree, given the bottomLeaf, and\r\n * returns the shortest path in an array\r\n * @param bottomLeaf bottom of the tree to start from\r\n */\r\nexport function reconstructPath(bottomLeaf: Node): Tile[] {\r\n    return reconstructPathReversed(bottomLeaf).reverse();\r\n}\r\n\r\n/**\r\n * Reconstructs the path from a tree, given the bottomLeaf, and\r\n * returns the shortest path in an array\r\n * @param bottomLeaf bottom of the tree to start from\r\n */\r\nexport function reconstructPathReversed(bottomLeaf: Node): Tile[] {\r\n    const path: Tile[] = [];\r\n    while(bottomLeaf.parent !== null) {\r\n        path.push(bottomLeaf.tile);\r\n        bottomLeaf = bottomLeaf.parent;\r\n    }\r\n    return path;\r\n}\r\n\r\nexport default Pathfinder;","import {Tile} from '../core/Components';\r\n\r\n/**\r\n * Represents a search Tree Node\r\n */\r\nexport class Node\r\n{\r\n    parent: Node | null = null; //parent node\r\n    readonly children: Node[] = [];\r\n    readonly tile: Tile; //stores a graph node\r\n\r\n    constructor(tile: Tile) {\r\n        this.tile = tile;\r\n    }\r\n\r\n    addChild(child: Node) {\r\n        child.parent = this;\r\n        this.children.push(child);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents an heuristic weighted aStar search tree node\r\n */\r\nexport class AStarNode extends Node\r\n{\r\n    readonly g: number; //path cost\r\n    readonly fScore: number; //heuristic\r\n\r\n    constructor(tile: Tile, g: number, fScore: number) {\r\n        super(tile);\r\n        this.g = g;\r\n        this.fScore = fScore;\r\n    }\r\n\r\n    f() {\r\n        return this.fScore;\r\n    }\r\n}\r\n","import {HashSet, HashTable, stringify} from '../structures/Hash';\r\nimport Heap from '../structures/Heap';\r\nimport Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {AStarNode} from './Node';\r\nimport Navigator from '../core/Navigator';\r\nimport {euclidean, HeuristicFunc} from './Heuristics';\r\n\r\nclass AStarPathfinder extends Pathfinder\r\n{\r\n    private readonly heuristic: HeuristicFunc = (a: Point, b: Point) => euclidean(a,b);\r\n\r\n    constructor(navigator: Navigator, func?: HeuristicFunc) {\r\n        super(navigator);\r\n        if(func !== undefined) {\r\n            this.heuristic = func;\r\n        }\r\n    }\r\n\r\n    getAlgorithmName(): string {\r\n        return 'A*';\r\n    }\r\n\r\n    /**\r\n     * Performs aStar algorithm on the grid given an initial and goal point\r\n     * Always returns the shortest path, and performs well on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const openFrontier = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const closedSet = new HashSet();\r\n        const openSet = new HashTable<number>();\r\n        const root = new AStarNode(\r\n            grid.get(initial), 0, 0\r\n        );\r\n        openFrontier.push(root);\r\n        openSet.add(stringify(initial), root.g);\r\n        while (!openFrontier.isEmpty()) {\r\n            const currentNode = openFrontier.pop();\r\n            const currentPoint = currentNode.tile.point;\r\n            const currentKey = stringify(currentPoint);\r\n            openSet.remove(currentKey);\r\n            closedSet.add(currentKey);\r\n            this.addRecent(currentNode);\r\n            if (this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            for (const neighbor of this.navigator.neighbors(currentPoint)) {\r\n                const neighborPoint = neighbor.point;\r\n                const neighborKey = stringify(neighborPoint);\r\n                if(closedSet.has(neighborKey)) {\r\n                    continue;\r\n                }\r\n                const g = currentNode.g + this.stepCost(currentPoint, neighborPoint);\r\n                const f = g + this.heuristic(neighborPoint, goal);\r\n                if (!openSet.has(neighborKey) || g < openSet.get(neighborKey)!) {\r\n                    const neighborNode = new AStarNode(\r\n                        neighbor, g, f\r\n                    );\r\n                    currentNode.addChild(neighborNode);\r\n                    openFrontier.push(neighborNode);\r\n                    openSet.add(neighborKey, neighborNode.g);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * The step-cost function to be used, calculating the cost from\r\n     * currentPoint to neighborPoint. Uses the stepCost function provided by the\r\n     * navigator by default but can be overridden\r\n     * @param currentPoint\r\n     * @param neighborPoint\r\n     */\r\n    stepCost(currentPoint: Point, neighborPoint: Point) {\r\n        return this.navigator.cost(currentPoint, neighborPoint);\r\n    }\r\n}\r\n\r\nexport default AStarPathfinder;","import Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {HashSet, stringify} from '../structures/Hash';\r\nimport {Node} from './Node';\r\n\r\nclass BFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName(): string {\r\n        return 'Breadth First Search';\r\n    }\r\n\r\n    /**\r\n     * Implementation of BFS to find the shortest path from initial to point\r\n     * Doesn't always return the shortest path, and performs poorly on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const frontier: Node[] = []; //fifo, stores nodes on the frontier\r\n        const visited = new HashSet();\r\n        const root = new Node(grid.get(initial));\r\n        frontier.push(root); //enqueue\r\n        visited.add(stringify(initial));\r\n        while(frontier.length !== 0) { //not empty\r\n            const currentNode = frontier.shift()!; //dequeue\r\n            const currentPoint = currentNode.tile.point;\r\n            this.addRecent(currentNode);\r\n            if(this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            for(const neighbor of this.navigator.neighbors(currentPoint)) {\r\n                const neighborKey = stringify(neighbor.point);\r\n                if(!visited.has(neighborKey)) {\r\n                    const neighborNode = new Node(neighbor);\r\n                    currentNode.addChild(neighborNode);\r\n                    frontier.push(neighborNode); //enqueue\r\n                    visited.add(neighborKey);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default BFSPathfinder;","/**\r\n * Stack node\r\n */\r\nclass Node<E>\r\n{\r\n    next: Node<E> | null = null;\r\n    data: E;\r\n\r\n    constructor(data: E) {\r\n        this.data = data;\r\n    }\r\n}\r\n\r\n/**\r\n * Minimalist Implementation of the stack data structure\r\n */\r\nclass Stack<E>\r\n{\r\n    private top: Node<E> | null = null;\r\n    private size: number = 0;\r\n\r\n    peek() {\r\n        return this.top != null ? this.top.data : undefined;\r\n    }\r\n\r\n    push(e: E) {\r\n        const node = new Node(e);\r\n        node.next = this.top;\r\n        this.top = node;\r\n        this.size++;\r\n    }\r\n\r\n    pop() {\r\n        const top = this.peek();\r\n        if(this.top != null) {\r\n            this.top = this.top.next;\r\n            this.size--;\r\n        }\r\n        return top;\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.size === 0;\r\n    }\r\n\r\n    getSize() {\r\n        return this.size;\r\n    }\r\n}\r\n\r\nexport default Stack;","import Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {HashSet, stringify} from '../structures/Hash';\r\nimport {Node} from './Node';\r\nimport Stack from '../structures/Stack';\r\n\r\nclass DFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName(): string {\r\n        return 'Depth First Search';\r\n    }\r\n\r\n    /**\r\n     * Calls DFS between a start and goal point, will typically not find the 'Best' path,\r\n     * and will instead find the best path capable for the algorithm\r\n     * As this algorithm is non optimal it should only be used for educational purposes\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const root = new Node(grid.get(initial));\r\n        const frontier = new Stack<Node>();\r\n        frontier.push(root);\r\n        const visited = new HashSet();\r\n        while(!frontier.isEmpty()) {\r\n            const currentNode = frontier.pop()!;\r\n            const currentPoint = currentNode.tile.point;\r\n            visited.add(stringify(currentPoint));\r\n            this.addRecent(currentNode);\r\n            if(this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            const neighbors = this.navigator.neighbors(currentPoint).reverse();\r\n            for(const neighbor of neighbors){\r\n                const neighborKey = stringify(neighbor.point);\r\n                if(!visited.has(neighborKey)) {\r\n                    const neighborNode = new Node(neighbor);\r\n                    currentNode.addChild(neighborNode);\r\n                    frontier.push(neighborNode);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default DFSPathfinder;\r\n","import {HashSet, HashTable, stringify} from '../structures/Hash';\r\nimport Heap from '../structures/Heap';\r\nimport Pathfinder, {reconstructPath, reconstructPathReversed} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {AStarNode} from './Node';\r\nimport Navigator from '../core/Navigator';\r\nimport {euclidean, HeuristicFunc} from './Heuristics';\r\n\r\nclass BiAStarPathfinder extends Pathfinder\r\n{\r\n    private readonly heuristic: HeuristicFunc = (a: Point, b: Point) => euclidean(a,b);\r\n\r\n    constructor(navigator: Navigator, func?: HeuristicFunc) {\r\n        super(navigator);\r\n        if(func !== undefined) {\r\n            this.heuristic = func;\r\n        }\r\n    }\r\n\r\n    getAlgorithmName(): string {\r\n        return 'Bidirectional A*';\r\n    }\r\n\r\n    /**\r\n     * Performs aStar algorithm on the grid given an initial and goal point\r\n     * Doesn't always returns the shortest path, but performs well on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const closedSet = new HashSet();\r\n        const startOpenFrontier = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const startOpenSet = new HashTable<AStarNode>();\r\n        const endOpenFrontier = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const endOpenSet = new HashTable<AStarNode>();\r\n        const initialRoot = new AStarNode(\r\n            grid.get(initial), 0, 0\r\n        );\r\n        startOpenFrontier.push(initialRoot);\r\n        startOpenSet.add(stringify(initial), initialRoot);\r\n        const goalRoot = new AStarNode(\r\n            grid.get(goal), 0, 0\r\n        );\r\n        endOpenFrontier.push(goalRoot);\r\n        endOpenSet.add(stringify(goal), goalRoot);\r\n        while (!startOpenFrontier.isEmpty() && !endOpenFrontier.isEmpty()) {\r\n            //expand startOpenFrontier\r\n            const startCurrentNode = startOpenFrontier.pop();\r\n            const startCurrentPoint = startCurrentNode.tile.point;\r\n            const startCurrentPointKey = stringify(startCurrentPoint);\r\n            startOpenSet.remove(startCurrentPointKey);\r\n            closedSet.add(startCurrentPointKey);\r\n            this.addRecent(startCurrentNode);\r\n            if(endOpenSet.has(startCurrentPointKey)) {\r\n                if(startCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startCurrentNode.parent\r\n                    ).concat(reconstructPathReversed(\r\n                        endOpenSet.get(startCurrentPointKey)!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            for (const neighbor of this.navigator.neighbors(startCurrentPoint)) {\r\n                const neighborPoint = neighbor.point;\r\n                const neighborKey = stringify(neighborPoint);\r\n                if(closedSet.has(neighborKey)) {\r\n                    continue;\r\n                }\r\n                const g = startCurrentNode.g + this.stepCost(startCurrentPoint, neighborPoint);\r\n                const f = g + this.heuristic(neighborPoint, goal);\r\n                if (!startOpenSet.has(neighborKey) || g < startOpenSet.get(neighborKey)!.g) {\r\n                    const neighborNode = new AStarNode(\r\n                        neighbor, g, f\r\n                    );\r\n                    startCurrentNode.addChild(neighborNode);\r\n                    startOpenFrontier.push(neighborNode);\r\n                    startOpenSet.add(neighborKey, neighborNode);\r\n                }\r\n            }\r\n            //expand endOpenFrontier\r\n            const endCurrentNode = endOpenFrontier.pop();\r\n            const endCurrentPoint = endCurrentNode.tile.point;\r\n            const endCurrentPointKey = stringify(endCurrentPoint);\r\n            endOpenSet.remove(endCurrentPointKey);\r\n            closedSet.add(endCurrentPointKey);\r\n            this.addRecent(endCurrentNode);\r\n            if(startOpenSet.has(endCurrentPointKey)) {\r\n                if(endCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startOpenSet.get(endCurrentPointKey)!\r\n                    ).concat(reconstructPathReversed(\r\n                        endCurrentNode.parent!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            for (const neighbor of this.navigator.neighbors(endCurrentPoint)) {\r\n                const neighborPoint = neighbor.point;\r\n                const neighborKey = stringify(neighborPoint);\r\n                if(closedSet.has(neighborKey)) {\r\n                    continue;\r\n                }\r\n                const g = endCurrentNode.g + this.stepCost(endCurrentPoint, neighborPoint);\r\n                const f = g + this.heuristic(neighborPoint, initial);\r\n                if (!endOpenSet.has(neighborKey) || g < endOpenSet.get(neighborKey)!.g) {\r\n                    const neighborNode = new AStarNode(\r\n                        neighbor, g, f\r\n                    );\r\n                    endCurrentNode.addChild(neighborNode);\r\n                    endOpenFrontier.push(neighborNode);\r\n                    endOpenSet.add(neighborKey, neighborNode);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * The step-cost function to be used, calculating the cost from\r\n     * currentPoint to neighborPoint. Uses the stepCost function provided by the\r\n     * navigator by default but can be overridden\r\n     * @param currentPoint\r\n     * @param neighborPoint\r\n     */\r\n    stepCost(currentPoint: Point, neighborPoint: Point) {\r\n        return this.navigator.cost(currentPoint, neighborPoint);\r\n    }\r\n}\r\n\r\nexport default BiAStarPathfinder;","import Pathfinder, {reconstructPath, reconstructPathReversed} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {HashTable, stringify} from '../structures/Hash';\r\nimport {Node} from './Node';\r\n\r\nclass BiBFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName(): string {\r\n        return 'Bidirectional Breadth First Search';\r\n    }\r\n\r\n    /**\r\n     * Implementation of BFS to find the shortest path from initial to point\r\n     * Doesn't always return the shortest path, and performs poorly on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const startVisited = new HashTable<Node>();\r\n        const endVisited = new HashTable<Node>();\r\n        const startFrontier: Node[] = [];\r\n        const endFrontier: Node[] = [];\r\n        const initialRoot = new Node(grid.get(initial));\r\n        startFrontier.push(initialRoot);\r\n        startVisited.add(stringify(initial), initialRoot);\r\n        const goalRoot = new Node(grid.get(goal));\r\n        endFrontier.push(goalRoot);\r\n        endVisited.add(stringify(goal), goalRoot);\r\n        while(startFrontier.length !== 0 && endFrontier.length !== 0) {\r\n            //expand startQueue\r\n            const startCurrentNode = startFrontier.shift()!;\r\n            const startCurrentPoint = startCurrentNode.tile.point;\r\n            const startCurrentPointKey = stringify(startCurrentPoint);\r\n            this.addRecent(startCurrentNode);\r\n            if(endVisited.has(startCurrentPointKey)) {\r\n                if(startCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startCurrentNode.parent\r\n                    ).concat(reconstructPathReversed(\r\n                        endVisited.get(startCurrentPointKey)!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            for(const neighbor of this.navigator.neighbors(startCurrentPoint)) {\r\n                const neighborKey = stringify(neighbor.point);\r\n                if(!startVisited.has(neighborKey)) {\r\n                    const neighborNode = new Node(neighbor);\r\n                    startCurrentNode.addChild(neighborNode);\r\n                    startFrontier.push(neighborNode);\r\n                    startVisited.add(neighborKey, neighborNode);\r\n                }\r\n            }\r\n            //expand endQueue\r\n            const endCurrentNode = endFrontier.shift()!;\r\n            const endCurrentPoint = endCurrentNode.tile.point;\r\n            const endCurrentPointKey = stringify(endCurrentPoint);\r\n            this.addRecent(endCurrentNode);\r\n            if(startVisited.has(endCurrentPointKey)) {\r\n                if(endCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startVisited.get(endCurrentPointKey)!\r\n                    ).concat(reconstructPathReversed(\r\n                        endCurrentNode.parent\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            for(const neighbor of this.navigator.neighbors(endCurrentPoint)) {\r\n                const neighborKey = stringify(neighbor.point);\r\n                if(!endVisited.has(neighborKey)) {\r\n                    const neighborNode = new Node(neighbor);\r\n                    endCurrentNode.addChild(neighborNode);\r\n                    endFrontier.push(neighborNode);\r\n                    endVisited.add(neighborKey, neighborNode);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default BiBFSPathfinder;","import Navigator from '../core/Navigator';\r\nimport PlusNavigator from '../core/PlusNavigator';\r\nimport {Point} from '../core/Components';\r\nimport {Grid} from '../core/Grid';\r\nimport {chebyshev, euclidean, HeuristicFunc, manhattan, nullHeuristic, octile} from './Heuristics';\r\nimport Pathfinder from './Pathfinder';\r\nimport AStarPathfinder from './AStar';\r\nimport BFSPathfinder from './BFS';\r\nimport DFSPathfinder from './DFS';\r\nimport BiAStarPathfinder from './BidirectionalAStar';\r\nimport BiBFSPathfinder from \"./BidirectionalBFS\";\r\n\r\nconst CREATE_NAVIGATOR: {[key: string]: ((grid: Grid) => Navigator)} = {\r\n    'plus': (grid: Grid) => new PlusNavigator(grid),\r\n}\r\n\r\nconst CREATE_HEURISTIC: {[key: string]: (() => HeuristicFunc)} = {\r\n    'manhattan': () => manhattan,\r\n    'euclidean': () => euclidean,\r\n    'chebyshev': () => chebyshev,\r\n    'octile': () => octile,\r\n    'null': () => nullHeuristic\r\n}\r\n\r\nconst CREATE_PATHFINDER: {[key: string]: ((navigator: Navigator, heuristic: HeuristicFunc) => Pathfinder)} = {\r\n    'dijkstra': (navigator) => {\r\n        return new (class DijkstraPathfinder extends AStarPathfinder {\r\n            getAlgorithmName(): string {\r\n                return 'Dijkstra';\r\n            }\r\n        })(navigator, nullHeuristic);\r\n    },\r\n    'best-first': (navigator, heuristic) => {\r\n        return new (class BestFirstPathfinder extends AStarPathfinder {\r\n            stepCost(currentPoint: Point, neighborPoint: Point) {\r\n                return 0;\r\n            }\r\n            getAlgorithmName(): string {\r\n                return 'Best-First Search';\r\n            }\r\n        })(navigator, heuristic);\r\n    },\r\n    'a*': (navigator, heuristic) => {\r\n        return new AStarPathfinder(navigator, heuristic);\r\n    },\r\n    'bfs': (navigator) => {\r\n        return new BFSPathfinder(navigator);\r\n    },\r\n    'dfs': (navigator) => {\r\n        return new DFSPathfinder(navigator);\r\n    },\r\n    'bi-a*': (navigator, heuristic) => {\r\n        return new BiAStarPathfinder(navigator, heuristic);\r\n    },\r\n    'bi-dijkstra': (navigator) => {\r\n        return new (class BiDijkstraPathfinder extends BiAStarPathfinder {\r\n            getAlgorithmName(): string {\r\n                return 'Bidirectional Dijkstra';\r\n            }\r\n        })(navigator, nullHeuristic);\r\n    },\r\n    'bi-bfs': (navigator) => {\r\n        return new BiBFSPathfinder(navigator);\r\n    }\r\n}\r\n\r\nclass PathfinderBuilder\r\n{\r\n    private navigator: string = 'plus';\r\n    private algorithm: string = 'a*';\r\n    private heuristic: string = 'null';\r\n    private readonly grid: Readonly<Grid>;\r\n\r\n    constructor(grid: Readonly<Grid>) {\r\n        this.grid = grid;\r\n    }\r\n\r\n    setNavigator(navigator: string) {\r\n        navigator = navigator.toLowerCase();\r\n        if(CREATE_NAVIGATOR[navigator] == null) {\r\n            throw new Error('No such navigator pattern exists')\r\n        } else {\r\n            this.navigator = navigator;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setAlgorithm(algorithm: string) {\r\n        algorithm = algorithm.toLowerCase();\r\n        if(CREATE_PATHFINDER[algorithm] == null) {\r\n            throw new Error('No such pathfinding algorithm exists')\r\n        } else {\r\n            this.algorithm = algorithm;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setHeuristic(heuristic: string) {\r\n        heuristic = heuristic.toLowerCase();\r\n        if(CREATE_HEURISTIC[heuristic] == null) {\r\n            throw new Error('No such heuristic function exists')\r\n        } else {\r\n            this.heuristic = heuristic;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Builds a pathfinder with a navigator with the set algorithm, heuristic, and navigator\r\n     */\r\n    build() {\r\n        const createHeuristic = CREATE_HEURISTIC[this.heuristic];\r\n        const createNavigator = CREATE_NAVIGATOR[this.navigator];\r\n        const createPathfinder = CREATE_PATHFINDER[this.algorithm];\r\n        return createPathfinder(createNavigator(this.grid), createHeuristic());\r\n    }\r\n\r\n    static usesHeuristic(algorithm: string) {\r\n        return algorithm === 'a*' || algorithm === 'bi-a*' ||\r\n            algorithm === 'best-first';\r\n    }\r\n\r\n    static hasBidirectional(algorithm: string) {\r\n        return CREATE_PATHFINDER['bi-' + algorithm] != null;\r\n    }\r\n\r\n    static makeBidirectional(algorithm: string) {\r\n        return 'bi-' + algorithm;\r\n    }\r\n}\r\n\r\nexport default PathfinderBuilder;\r\n\r\n","class VirtualTimer\r\n{\r\n    private timeout: NodeJS.Timeout;\r\n    private readonly callback: () => void\r\n    private timeStarted: number;\r\n    private timeRemaining: number;\r\n    private finished: boolean;\r\n\r\n    constructor(callback: () => void, countDown: number) {\r\n        this.callback = callback;\r\n        this.finished = false;\r\n        this.timeStarted = Date.now();\r\n        this.timeRemaining = countDown;\r\n        this.timeout = setTimeout(() => {\r\n            callback();\r\n            this.finished = true;\r\n        }, this.timeRemaining);\r\n    }\r\n\r\n    clear() {\r\n        clearTimeout(this.timeout);\r\n        this.finished = true;\r\n    }\r\n\r\n    pause() {\r\n        if(!this.finished) {\r\n            clearTimeout(this.timeout);\r\n            this.timeRemaining -= Date.now() - this.timeStarted;\r\n        }\r\n    }\r\n\r\n    resume() {\r\n        if(!this.finished) {\r\n            this.timeStarted = Date.now();\r\n            this.timeout = setTimeout(() => {\r\n                this.callback();\r\n                this.finished = true;\r\n            }, this.timeRemaining);\r\n        }\r\n    }\r\n\r\n    isFinished() {\r\n        return this.finished;\r\n    }\r\n\r\n    getNativeTimeout() {\r\n        return this.timeout;\r\n    }\r\n}\r\n\r\nexport default VirtualTimer;","import {createTile, Point, Tile, TileData} from '../core/Components';\r\nimport {Grid} from '../core/Grid';\r\nimport {HashSet, stringify} from '../structures/Hash';\r\n\r\nabstract class TerrainGenerator\r\n{\r\n    protected readonly width: number;\r\n    protected readonly height: number;\r\n    protected readonly ignore: HashSet;\r\n    protected readonly data: TileData;\r\n\r\n    protected constructor(width: number, height: number, data?: TileData, ignore?: Point[]) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.ignore = new HashSet();\r\n        if(data !== undefined) {\r\n            this.data = data;\r\n        } else {\r\n            this.data = createTile(true);\r\n        }\r\n        if(ignore !== undefined) {\r\n            for(const i of ignore) {\r\n                this.ignore.add(stringify(i));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws a tile to the grid\r\n     * @param grid\r\n     * @param tile\r\n     */\r\n    protected draw(grid: Grid, tile: Tile) {\r\n        if(!this.shouldIgnore(tile.point)) {\r\n            grid.mutateTile(tile);\r\n        }\r\n    }\r\n\r\n    protected getTerrain() {\r\n        return this.data;\r\n    }\r\n\r\n    protected shouldIgnore(point: Point) {\r\n        return this.ignore.has(stringify(point));\r\n    }\r\n\r\n    abstract generateTerrain(topLeft?: Point, bottomRight?: Point): Grid;\r\n}\r\n\r\nexport default TerrainGenerator;","import TerrainGenerator from './TerrainGenerator';\r\nimport {Point, TileData} from '../core/Components';\r\nimport RectGrid, {Grid} from '../core/Grid';\r\n\r\nclass RandomTerrainGenerator extends TerrainGenerator\r\n{\r\n    constructor(width: number, height: number, tileData?: TileData, ignore?: Point[]) {\r\n        super(width, height, tileData, ignore);\r\n    }\r\n\r\n    /**\r\n     * Performs a random terrain generation algorithm where each tile has a 1/4\r\n     * chance of being solid\r\n     * @param topLeft optional parameter to specify what point the terrain should start from\r\n     *  This should not be further up/left than (1,1)\r\n     * @param bottomRight optional parameter to specify how far down and right the terrain will go\r\n     *  This should not be further right/down than (width-2,height-2)\r\n     */\r\n    generateTerrain(topLeft?: Point, bottomRight?: Point): Grid {\r\n        const grid = new RectGrid(this.width, this.height);\r\n        if(topLeft === undefined) {\r\n            topLeft = {\r\n                x: 1, y: 1\r\n            }\r\n        }\r\n        if(bottomRight === undefined) {\r\n            bottomRight = {\r\n                x: grid.getWidth()-2,\r\n                y: grid.getHeight()-2\r\n            }\r\n        }\r\n        for(let x = topLeft.x - 1; x <= bottomRight.x + 1; x++) {\r\n            for(let y = topLeft.y - 1; y <= bottomRight.y + 1; y++) {\r\n                if(getRand(0, 3) === 0) {\r\n                    this.draw(grid,{\r\n                        point: {\r\n                            x: x, y: y\r\n                        },\r\n                        data: this.getTerrain()\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n}\r\n\r\n/**\r\n * Generate a random number between min and max, inclusive for min and max\r\n * @param min\r\n * @param max\r\n */\r\nfunction getRand(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max+1-min) + min);\r\n}\r\n\r\nexport default RandomTerrainGenerator;","import RectGrid, {Grid} from '../core/Grid';\r\nimport {Point, Tile, createTile, TileData} from '../core/Components';\r\nimport TerrainGenerator from './TerrainGenerator';\r\n\r\nconst LIMIT = 2;\r\n\r\nexport const NO_SKEW = 0;\r\nexport const VERTICAL_SKEW = 1;\r\nexport const HORIZONTAL_SKEW = 2;\r\n\r\ninterface Chamber {\r\n    topLeft: Point; //min\r\n    bottomRight: Point; //max\r\n}\r\n\r\nclass MazeGenerator extends TerrainGenerator\r\n{\r\n    private readonly divideWidth: (width: number, height: number) => boolean;\r\n\r\n    constructor(width: number, height: number, tileData?: TileData, ignore?: Point[], slant?: number) {\r\n        super(width, height, tileData, ignore);\r\n        if(slant === undefined || slant === NO_SKEW) {\r\n            this.divideWidth = divideWidthNoSkew;\r\n        } else if(slant === VERTICAL_SKEW) {\r\n            this.divideWidth = divideWidthVSkew;\r\n        } else if(slant === HORIZONTAL_SKEW) {\r\n            this.divideWidth = divideWidthHSkew;\r\n        } else {\r\n            throw new Error(\"Invalid recursive maze division skew type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs the recursive division maze generation algorithm on a new empty grid\r\n     * by bisecting parts until the maze can no longer be bisected\r\n     * Params must be within bounds and create a chamber\r\n     * @param topLeft optional parameter to specify what point the maze should start from\r\n     *  This should not be further up/left than (1,1)\r\n     * @param bottomRight optional parameter to specify how far down and right the maze will go\r\n     *  This should not be further right/down than (width-2,height-2)\r\n     */\r\n    generateTerrain(topLeft?: Point, bottomRight?: Point) {\r\n        const grid = new RectGrid(this.width, this.height);\r\n        if(topLeft === undefined) {\r\n            topLeft = {\r\n                x: 1, y: 1\r\n            }\r\n        }\r\n        if(bottomRight === undefined) {\r\n            bottomRight = {\r\n                x: grid.getWidth()-2,\r\n                y: grid.getHeight()-2\r\n            }\r\n        }\r\n        for(let x = topLeft.x - 1; x <= bottomRight.x + 1; x++) {\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: x, y: topLeft.y - 1\r\n                },\r\n                data: this.getTerrain()\r\n            });\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: x, y: bottomRight.y + 1\r\n                },\r\n                data: this.getTerrain()\r\n            });\r\n        }\r\n        for(let y = topLeft.y - 1; y <= bottomRight.y + 1; y++) {\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: topLeft.x - 1, y: y\r\n                },\r\n                data: this.getTerrain()\r\n            });\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: bottomRight.x + 1, y: y\r\n                },\r\n                data: this.getTerrain()\r\n            });\r\n        }\r\n        this.divide(grid,{\r\n            topLeft: topLeft,\r\n            bottomRight: bottomRight,\r\n        });\r\n        return grid;\r\n    }\r\n\r\n    /**\r\n     * Draws a list of tiles to the grid\r\n     * @param grid\r\n     * @param tiles\r\n     */\r\n    private drawArr(grid: Grid, tiles: Tile[]) {\r\n        for(const tile of tiles) {\r\n            this.draw(grid, tile);\r\n        }\r\n    }\r\n\r\n    private canDrawHole(tile: Tile) {\r\n        return tile.data.pathCost === 1 && !tile.data.isSolid;\r\n    }\r\n\r\n    /**\r\n     * Create a line between a region, with an open hole, in a chamber,\r\n     * and call bisection algorithm on it, and call division algorithms on\r\n     * its split chambers until no chambers can be bisected\r\n     * @param grid\r\n     * @param chamber\r\n     */\r\n    divide(grid: Grid, chamber: Chamber) {\r\n        const width = widthOf(chamber);\r\n        const height = heightOf(chamber);\r\n        const min = chamber.topLeft;\r\n        const max = chamber.bottomRight;\r\n        if(this.divideWidth(width,height)) {\r\n            if(width > LIMIT) {\r\n                //calculate axis\r\n                const randX = getMidPoint(\r\n                    min.x, max.x\r\n                );\r\n                //create axis wall\r\n                const toDraw: Tile[] = [];\r\n                for(let y = min.y; y <= max.y; y++) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: y\r\n                        },\r\n                        data: this.getTerrain()\r\n                    });\r\n                }\r\n                //create holes in axis wall\r\n                let edgeBlocked = false;\r\n                if(this.canDrawHole(grid.get({\r\n                    x: randX, y: min.y-1\r\n                }))) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: min.y\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(this.canDrawHole(grid.get({\r\n                    x: randX, y: max.y+1\r\n                }))) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: max.y\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(!edgeBlocked) {\r\n                    const randY = getRand(\r\n                        min.y, max.y,\r\n                    );\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                }\r\n                this.drawArr(grid, toDraw);\r\n                //create children chambers and recurse\r\n                const leftChamber = {\r\n                    topLeft: chamber.topLeft,\r\n                    bottomRight: {\r\n                        x: randX-1,\r\n                        y: chamber.bottomRight.y\r\n                    },\r\n                };\r\n                const rightChamber = {\r\n                    topLeft: {\r\n                        x: randX+1,\r\n                        y: chamber.topLeft.y\r\n                    },\r\n                    bottomRight: chamber.bottomRight,\r\n                };\r\n                this.divide(grid, leftChamber);\r\n                this.divide(grid, rightChamber);\r\n            }\r\n        } else {\r\n            if(height > LIMIT) {\r\n                //calculate axis\r\n                const randY = getMidPoint(\r\n                    min.y, max.y\r\n                );\r\n                //draw axis wall\r\n                const toDraw: Tile[] = [];\r\n                for(let x = min.x; x <= max.x; x++) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: x, y: randY\r\n                        },\r\n                        data: this.getTerrain()\r\n                    });\r\n                }\r\n                //create holes in axis wall\r\n                let edgeBlocked = false;\r\n                if(this.canDrawHole(grid.get({\r\n                    x: min.x-1, y: randY\r\n                }))) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: min.x, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(this.canDrawHole(grid.get({\r\n                    x: max.x+1, y: randY\r\n                }))) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: max.x, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(!edgeBlocked) {\r\n                    const randX = getRand(\r\n                        min.x, max.x,\r\n                    );\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                }\r\n                this.drawArr(grid, toDraw);\r\n                //create children chambers and recurse\r\n                const topChamber = {\r\n                    topLeft: chamber.topLeft,\r\n                    bottomRight: {\r\n                        x: chamber.bottomRight.x,\r\n                        y: randY-1\r\n                    },\r\n                };\r\n                const bottomChamber = {\r\n                    topLeft: {\r\n                        x: chamber.topLeft.x,\r\n                        y: randY+1\r\n                    },\r\n                    bottomRight: chamber.bottomRight,\r\n                };\r\n                this.divide(grid, topChamber);\r\n                this.divide(grid, bottomChamber);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction divideWidthNoSkew(width: number, height: number) {\r\n    return width >= height;\r\n}\r\n\r\nfunction divideWidthHSkew(width: number, height: number) {\r\n    return width >= height * 2;\r\n}\r\n\r\nfunction divideWidthVSkew(width: number, height: number) {\r\n    return width * 2 >= height;\r\n}\r\n\r\nfunction widthOf(chamber: Chamber) {\r\n    return chamber.bottomRight.x - chamber.topLeft.x + 1;\r\n}\r\n\r\nfunction heightOf(chamber: Chamber) {\r\n    return chamber.bottomRight.y - chamber.topLeft.y + 1;\r\n}\r\n\r\n/**\r\n * Returns the 'midpoint' to be used\r\n * @param min\r\n * @param max\r\n */\r\nfunction getMidPoint(min: number, max: number) {\r\n    const range = max - min;\r\n    if(range >= 20) {\r\n        return ((min+max)/2) >> 0;\r\n    } else if(range > 5) {\r\n        const mid = ((min+max)/2) >> 0;\r\n        const points = [mid, mid+1];\r\n        return points[getRand(0,points.length-1)];\r\n    } else {\r\n        return getRand(min+1,max-1);\r\n    }\r\n}\r\n\r\n/**\r\n * Generate a random number between min and max-1 then increment the number\r\n * if it is larger than or equal to excluded, inclusive for min and max\r\n * @param min\r\n * @param max\r\n * @param excluded\r\n */\r\nfunction getRandEx(min: number, max: number, excluded: number) {\r\n    let rand = getRand(min, max-1);\r\n    return rand >= excluded ? ++rand : rand;\r\n}\r\n\r\n/**\r\n * Generate a random number between min and max, inclusive for min and max\r\n * @param min\r\n * @param max\r\n */\r\nfunction getRand(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max+1-min) + min);\r\n}\r\n\r\nexport default MazeGenerator;","import RandomTerrainGenerator from './RandomTerrainGenerator';\r\nimport MazeGenerator from './MazeGenerator';\r\nimport {createTile, Point, TileData} from '../core/Components';\r\n\r\nexport const MAZE = 0;\r\nexport const MAZE_VERTICAL_SKEW = 1;\r\nexport const MAZE_HORIZONTAL_SKEW = 2;\r\nexport const RANDOM_TERRAIN = 3;\r\n\r\nclass TerrainGeneratorBuilder\r\n{\r\n    private width: number = 0;\r\n    private height: number = 0;\r\n    private type: number = MAZE;\r\n    private ignore: Point[] = [];\r\n    private data: TileData = createTile(true);\r\n\r\n    setDimensions(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n\r\n    setGeneratorType(type: number) {\r\n        this.type = type;\r\n        return this;\r\n    }\r\n\r\n    setIgnorePoints(ignore: Point[]) {\r\n        this.ignore = ignore.slice();\r\n        return this;\r\n    }\r\n\r\n    setTileData(data: TileData) {\r\n        this.data = data;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Builds a terrain generator with the specified type\r\n     */\r\n    build() {\r\n       if(this.type >= RANDOM_TERRAIN) {\r\n           return new RandomTerrainGenerator(this.width, this.height, this.data, this.ignore);\r\n       } else {\r\n           return new MazeGenerator(this.width, this.height, this.data, this.ignore, this.type);\r\n       }\r\n    }\r\n}\r\n\r\nexport default TerrainGeneratorBuilder;","import React, {RefObject} from 'react';\r\nimport './Grid.css';\r\nimport GridBackground from './GridBackground';\r\nimport GridForeground from './GridForeground';\r\nimport StatsPanel from './StatsPanel';\r\nimport {Node} from '../../pathfinding/algorithms/Node';\r\nimport PathfindingSettings from '../PathfindingSettings';\r\nimport PathfinderBuilder from '../../pathfinding/algorithms/PathfinderBuilder';\r\nimport Pathfinder from '../../pathfinding/algorithms/Pathfinder';\r\nimport {createTile, Point, Tile, TileData} from '../../pathfinding/core/Components';\r\nimport {euclidean} from '../../pathfinding/algorithms/Heuristics';\r\nimport VirtualTimer from '../utility/VirtualTimer';\r\nimport TerrainGeneratorBuilder from '../../pathfinding/algorithms/TerrainGeneratorBuilder';\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    settings: Readonly<PathfindingSettings>,\r\n    topMargin: number,\r\n    onChangeVisualizing: (visualizing: boolean) => void;\r\n}\r\n\r\ninterface IState {\r\n    tilesX: number,\r\n    tilesY: number,\r\n    time: number,\r\n    length: number,\r\n    cost: number,\r\n    nodes: number,\r\n    algorithm: string\r\n}\r\n\r\nclass PathfindingVisualizer extends React.Component<IProps,IState>\r\n{\r\n    //references to expose background and foreground grids to parent\r\n    private background: RefObject<GridBackground> = React.createRef();\r\n    private foreground: RefObject<GridForeground> = React.createRef();\r\n    private stats: RefObject<StatsPanel> = React.createRef();\r\n\r\n    private visualized = false;\r\n    private visualizing = false;\r\n    private visualTimeouts: VirtualTimer[]  = [];\r\n    private generations: Node[] = [];\r\n\r\n    private mazeTile: TileData = createTile(true);\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const w = window.screen.availWidth - (window.outerWidth - window.innerWidth);\r\n        const h = window.screen.availHeight - (window.outerHeight - window.innerHeight);\r\n        const tilesX = Math.floor(w / this.props.tileWidth) + 1;\r\n        const tilesY = Math.floor((h - this.props.topMargin - 30) / this.props.tileWidth) + 1;\r\n        this.state = {\r\n            tilesX: tilesX,\r\n            tilesY: tilesY,\r\n            time: -1,\r\n            length: -1,\r\n            cost: -1,\r\n            nodes: -1,\r\n            algorithm: ''\r\n        }\r\n    }\r\n\r\n    changeTile = (data: TileData) => {\r\n        //uncomment this to enable weighted mazes\r\n        // this.mazeTile = data;\r\n        this.foreground.current!.changeTile(data);\r\n    }\r\n\r\n    canShowArrows = () => {\r\n        const settings = this.props.settings;\r\n        return settings.showArrows && settings.algorithm !== 'dfs';\r\n    }\r\n\r\n    canShowFrontier = () => {\r\n        const settings = this.props.settings;\r\n        return settings.visualizeAlg;\r\n    }\r\n\r\n    /**\r\n     * Pause the delayed pathfinding algorithm being performed\r\n     */\r\n    pausePathfinding = () => {\r\n        for(const timeout of this.visualTimeouts) {\r\n            timeout.pause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resume the delayed pathfinding algorithm being performed\r\n     * Will reset the timeouts to the last time the timeout was paused/started\r\n     * if not properly called while the timeout is paused\r\n     */\r\n    resumePathfinding = () => {\r\n        for(const timeout of this.visualTimeouts) {\r\n            timeout.resume();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs the pathfinding algorithm on the grid and visualizes it\r\n     */\r\n    doPathfinding = () => {\r\n        this.clearPath();\r\n        const settings = this.props.settings;\r\n        const pathfinder = this.getPathfinder(settings);\r\n        const path = this.findPath(pathfinder);\r\n        this.generations = pathfinder.getRecentGenerations();\r\n        if(this.canShowArrows()) {\r\n            this.addArrowGenerations(this.generations);\r\n        }\r\n        if(this.canShowFrontier()) {\r\n            this.visualizeGenerations(this.generations);\r\n        }\r\n        this.drawPath(path);\r\n    }\r\n\r\n    /**\r\n     * Performs the pathfinding algorithm on the grid and visualizes it with delays between successive\r\n     * node generations\r\n     * If the visualizer is currently visualizing, the visualization stops instead\r\n     */\r\n    doDelayedPathfinding = () => {\r\n        this.clearVisualization();\r\n        this.clearPath();\r\n        const settings = this.props.settings;\r\n        this.visualized = false;\r\n        const foreground = this.foreground.current!;\r\n        foreground.toggleDisable();\r\n        if(!this.visualizing) { //start visualization if not visualizing\r\n            this.visualizing = true;\r\n            this.props.onChangeVisualizing(this.visualizing);\r\n            const pathfinder = this.getPathfinder(settings);\r\n            const path = this.findPath(pathfinder);\r\n            const promises: Promise<VirtualTimer>[] = []; //to call function when timeouts finish\r\n            this.visualTimeouts = [];\r\n            const baseIncrement = settings.delayInc;\r\n            let delay = 0;\r\n            const visualizeAlg = this.canShowFrontier();\r\n            const showArrows = this.canShowArrows();\r\n            if(showArrows || visualizeAlg) {\r\n                const expandVisualization = visualizeAlg ? this.visualizeGeneration : () => {};\r\n                const expandArrows = showArrows ? this.addArrowGeneration : () => {};\r\n                this.generations = pathfinder.getRecentGenerations();\r\n                this.generations.forEach((generation) => {\r\n                    const promise = new Promise<VirtualTimer>((resolve) => {\r\n                        //each generation gets a higher timeout\r\n                        const timeout = new VirtualTimer(() => {\r\n                            expandArrows(generation);\r\n                            expandVisualization(generation);\r\n                            resolve(timeout);\r\n                        }, delay);\r\n                        this.visualTimeouts.push(timeout);\r\n                    });\r\n                    promises.push(promise);\r\n                    delay += baseIncrement;\r\n                });\r\n            }\r\n            //call functions when timeouts finish\r\n            Promise.all(promises).then(() => {\r\n                this.drawPath(path);\r\n                foreground.toggleDisable();\r\n                this.visualizing = false;\r\n                this.visualized = true;\r\n                this.props.onChangeVisualizing(this.visualizing);\r\n            });\r\n        } else { //stop visualizing if visualizing\r\n            for (const timeout of this.visualTimeouts) {\r\n                timeout.clear();\r\n            }\r\n            this.visualizing = false;\r\n            this.props.onChangeVisualizing(this.visualizing);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the pathfinder for the settings\r\n     * @param settings\r\n     */\r\n    private getPathfinder = (settings: PathfindingSettings) => {\r\n        const algorithmKey = settings.algorithm;\r\n        const algorithm = settings.bidirectional && PathfinderBuilder.hasBidirectional(algorithmKey) ?\r\n            PathfinderBuilder.makeBidirectional(algorithmKey) : algorithmKey;\r\n        return new PathfinderBuilder(this.foreground.current!.state.grid)\r\n            .setAlgorithm(algorithm)\r\n            .setHeuristic(settings.heuristicKey)\r\n            .setNavigator(settings.navigatorKey)\r\n            .build();\r\n    }\r\n\r\n    /**\r\n     * Find path with a given pathfinder, includes benchmarking\r\n     * @param pathfinder\r\n     */\r\n    private findPath = (pathfinder: Pathfinder) => {\r\n        const foreground = this.foreground.current!;\r\n        const t0 = performance.now();\r\n        const path = pathfinder.findPath(foreground.state.initial, foreground.state.goal);\r\n        const t1 = performance.now();\r\n        const t2 = (t1 - t0);\r\n        this.setState({\r\n            time: t2,\r\n            nodes: pathfinder.getRecentNodes(),\r\n            length: calcLength(foreground.state.initial, path),\r\n            cost: calcCost(foreground.state.grid.get(foreground.state.initial), path),\r\n            algorithm: pathfinder.getAlgorithmName()\r\n        });\r\n        return path;\r\n    }\r\n\r\n    /**\r\n     * Draw path on the grid and change length on ui\r\n     * @param path\r\n     */\r\n    private drawPath = (path: Tile[]) => {\r\n        const foreground = this.foreground.current!\r\n        path.unshift(this.foreground.current!.state.grid.get(foreground.state.initial));\r\n        this.foreground.current!.drawPath(path);\r\n    }\r\n\r\n    /**\r\n     * Called when child foreground moves a tile\r\n     */\r\n    private onTilesDragged = () => {\r\n        if(this.visualized) {\r\n            this.clearVisualization();\r\n            this.doPathfinding();\r\n            this.visualized = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create terrain on the grid foreground\r\n     */\r\n    createTerrain = (mazeType: number) => {\r\n        if(this.visualizing) {\r\n            return;\r\n        }\r\n        this.clearTiles();\r\n        this.clearPath();\r\n        this.clearVisualization();\r\n        const foreground = this.foreground.current!;\r\n        const end = this.calcEndPointInView();\r\n        foreground.setState({\r\n            initial: {\r\n                x: 1, y:1\r\n            },\r\n            goal: {\r\n                x: end.x-2, y: end.y-2\r\n            }\r\n        },() => {\r\n            const prevGrid = foreground.state.grid;\r\n            const generator = new TerrainGeneratorBuilder()\r\n                .setDimensions(\r\n                    prevGrid.getWidth(),\r\n                    prevGrid.getHeight()\r\n                )\r\n                .setGeneratorType(mazeType)\r\n                .setIgnorePoints([foreground.state.initial, foreground.state.goal])\r\n                .setTileData(this.mazeTile)\r\n                .build();\r\n            const topLeft = {\r\n                x: 1, y: 1\r\n            };\r\n            const bottomRight = {\r\n                x: end.x-2, y: end.y-2\r\n            };\r\n            const grid = generator.generateTerrain(topLeft, bottomRight);\r\n            foreground.drawGrid(grid);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Calculate the end/goal point in view of the screen\r\n     */\r\n    calcEndPointInView = () => {\r\n        const xEnd = window.innerWidth / this.props.tileWidth;\r\n        const yEnd = (window.innerHeight - this.props.topMargin\r\n            - this.stats.current!.getHeight()) / this.props.tileWidth;\r\n        const xFloor = Math.floor(xEnd);\r\n        const yFloor = Math.floor(yEnd);\r\n        const xDecimal = xEnd - xFloor;\r\n        const yDecimal = yEnd - yFloor;\r\n        return {\r\n            x: xDecimal > 0.05 ? Math.ceil(xEnd) : xFloor,\r\n            y: yDecimal > 0.05 ? Math.ceil(yEnd) : yFloor\r\n        }\r\n    }\r\n\r\n    resetPoints = () => {\r\n        if(!this.visualizing) {\r\n            this.foreground.current!.resetPoints();\r\n        }\r\n    }\r\n\r\n    clearPath = () => {\r\n        this.foreground.current!.erasePath();\r\n    }\r\n\r\n    clearTiles = () => {\r\n        this.foreground.current!.clearTiles();\r\n    }\r\n\r\n    clearTilesChecked = () => {\r\n        if(!this.visualizing) {\r\n            this.foreground.current!.clearTiles();\r\n        }\r\n    }\r\n\r\n    clearVisualization = () => {\r\n        this.visualized = false;\r\n        this.background.current!.clear();\r\n    }\r\n\r\n    clearVisualizationChecked = () => {\r\n        if(!this.visualizing) {\r\n            this.visualized = false;\r\n            this.background.current!.clear();\r\n        }\r\n    }\r\n\r\n    private visualizeGenerations = (generations: Node[]) => {\r\n        this.background.current!.visualizeGenerations(generations);\r\n        this.visualized = true;\r\n    }\r\n\r\n    private visualizeGeneration = (generation: Node) => {\r\n        this.background.current!.visualizeGeneration(generation);\r\n    }\r\n\r\n    private addArrowGenerations = (generations: Node[]) => {\r\n        this.background.current!.addArrowGenerations(generations);\r\n    }\r\n\r\n    private addArrowGeneration = (generation: Node) => {\r\n        this.background.current!.addArrowGeneration(generation);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <StatsPanel ref={this.stats} algorithm={this.state.algorithm}\r\n                            length={this.state.length} cost={this.state.cost}\r\n                            time={this.state.time} nodes={this.state.nodes}/>\r\n                <GridBackground ref={this.background} tileWidth={this.props.tileWidth}\r\n                                tilesX={this.state.tilesX} tilesY={this.state.tilesY}/>\r\n                <GridForeground ref={this.foreground} topMargin={this.props.topMargin}\r\n                                onTilesDragged={this.onTilesDragged} tileWidth={this.props.tileWidth}\r\n                                tilesX={this.state.tilesX} tilesY={this.state.tilesY}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction calcLength(initial: Point, path: Tile[]) {\r\n    if(path.length === 0) {\r\n        return 0;\r\n    }\r\n    let len = euclidean(initial, path[0].point);\r\n    for (let i = 0; i < path.length - 1; i++) {\r\n        len += euclidean(path[i].point, path[i + 1].point);\r\n    }\r\n    return +(len).toFixed(3);\r\n}\r\n\r\nfunction calcCost(initial: Tile, path: Tile[]) {\r\n    if(path.length === 0) {\r\n        return 0;\r\n    }\r\n    let len = euclidean(initial.point, path[0].point) * path[0].data.pathCost;\r\n    for (let i = 0; i < path.length - 1; i++) {\r\n        len += euclidean(path[i].point, path[i + 1].point) * path[i + 1].data.pathCost;\r\n    }\r\n    return +(len).toFixed(3);\r\n}\r\n\r\nexport default PathfindingVisualizer;","import React from 'react';\r\n\r\ninterface IProps {\r\n    boxStyle: string,\r\n    defaultChecked: boolean,\r\n    disabled?: boolean,\r\n    onChange: (checked: boolean) => void\r\n}\r\n\r\ninterface IState {\r\n    checked: boolean\r\n}\r\n\r\nclass Checkbox extends React.Component<IProps,IState>\r\n{\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            checked: this.props.defaultChecked\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger callback and change checkbox state\r\n     */\r\n    onChange = () => {\r\n        this.setState(prevState => ({\r\n            checked: !prevState.checked\r\n        }), () => this.props.onChange(this.state.checked));\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <input checked={this.state.checked} type='checkbox' disabled={this.props.disabled}\r\n                       className={this.props.boxStyle} onKeyPress={this.onChange} onChange={this.onChange}\r\n                >\r\n                </input>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Checkbox;","import React from 'react';\r\n\r\ninterface IProps {\r\n    min: number,\r\n    max: number,\r\n    default: number,\r\n    step: number,\r\n    sliderStyle: string,\r\n    onChange: (val: number) => void\r\n}\r\n\r\ninterface IState {\r\n    value: number\r\n}\r\n\r\nclass SteppedRangeSlider extends React.Component<IProps, IState>\r\n{\r\n    private mouseUp = true;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            value: this.props.default\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger callback when slider value is changed\r\n     * @param e\r\n     */\r\n    onChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n        if(!this.mouseUp) { //to prevent firefox from resetting on release\r\n            const val = Number(e.currentTarget.value);\r\n            this.setState({\r\n                value: val\r\n            }, () => this.props.onChange(val));\r\n        }\r\n    }\r\n\r\n    onMouseUp = () => {\r\n        this.mouseUp = true;\r\n    }\r\n\r\n    onMouseDown = () => {\r\n        this.mouseUp = false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <input type='range' list='step-list'\r\n                   value={this.state.value}\r\n                   min={this.props.min} max={this.props.max}\r\n                   step={this.props.step} className={this.props.sliderStyle}\r\n                   onInput={this.onChange}\r\n                   onMouseUp={this.onMouseUp}\r\n                   onMouseDown={this.onMouseDown}\r\n                   onTouchEnd={this.onMouseUp}\r\n                   onTouchStart={this.onMouseDown}\r\n            >\r\n            </input>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SteppedRangeSlider;","import React from 'react';\r\n\r\ninterface IProps {\r\n    boxStyle: string,\r\n    defaultChecked: number,\r\n    disabled: boolean,\r\n    onChange: (() => void)[]\r\n}\r\n\r\ninterface IState {\r\n    checked: boolean[];\r\n}\r\n\r\nclass RadioButtonGroup extends React.Component<IProps, IState>\r\n{\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const checked: boolean[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            checked.push(i === this.props.defaultChecked);\r\n        }\r\n        this.state = {\r\n            checked: checked\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set all radio buttons to checked aside from the index\r\n     * of the one that was changed\r\n     * Trigger callback\r\n     * @param index\r\n     */\r\n    private onChange = (index: number) => {\r\n        const checked: boolean[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            checked.push(i === index);\r\n        }\r\n        this.setState({\r\n            checked: checked\r\n        }, () => this.props.onChange[index]());\r\n    }\r\n\r\n    render() {\r\n        const children = React.Children.toArray(this.props.children);\r\n        const radioButtons: JSX.Element[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            radioButtons.push(\r\n                <div key={i}>\r\n                    <input checked={this.state.checked[i]} type='radio' disabled={this.props.disabled}\r\n                           className={this.props.boxStyle}\r\n                           onChange={() => this.onChange(i)}\r\n                    >\r\n                    </input>\r\n                    {children[i]}\r\n                </div>\r\n            );\r\n        }\r\n        return radioButtons;\r\n    };\r\n}\r\n\r\nexport default RadioButtonGroup;","import React from 'react';\r\nimport './Navbar.css'\r\nimport Checkbox from '../utility/Checkbox';\r\nimport SteppedRangeSlider from '../utility/SteppedRangeSlider';\r\nimport RadioButtonGroup from '../utility/RadioButtonGroup';\r\n\r\ninterface VisualProps {\r\n    onChangeViz: () => void,\r\n    onChangeShowArrows: () => void,\r\n    disabled: boolean\r\n}\r\n\r\ninterface SpeedProps {\r\n    onChange: (value: number) => void,\r\n    initialSpeed: number\r\n}\r\n\r\ninterface SpeedState {\r\n    speedText: string\r\n}\r\n\r\ninterface AlgorithmProps {\r\n    onChangeBidirectional: (checked: boolean) => void,\r\n    disabled: boolean\r\n}\r\n\r\ninterface HeuristicProps {\r\n    onClickManhattan: () => void,\r\n    onClickEuclidean: () => void,\r\n    onClickChebyshev: () => void,\r\n    onClickOctile: () => void,\r\n    disabled: boolean\r\n}\r\n\r\nconst SPEED_STEP = 2;\r\nconst SPEED_INITIAL = 4;\r\nconst MAX = 18;\r\n\r\nexport class VisualSettings extends React.Component<VisualProps>\r\n{\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Visualization</div>\r\n                <Checkbox defaultChecked={true} boxStyle='box'\r\n                          onChange={this.props.onChangeViz}>\r\n                    Show Frontier\r\n                </Checkbox>\r\n                <Checkbox defaultChecked={true} boxStyle='box'\r\n                          onChange={this.props.onChangeShowArrows}\r\n                          disabled={this.props.disabled}>\r\n                    Show Tree\r\n                </Checkbox>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class SpeedSettings extends React.Component<SpeedProps, SpeedState>\r\n{\r\n    constructor(props: SpeedProps) {\r\n        super(props);\r\n        this.state = {\r\n            speedText: String(this.props.initialSpeed)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback function to be called when slider is changed\r\n     * Call another callback and change text\r\n     * @param value\r\n     */\r\n    onChangeSpeed = (value: number) => {\r\n        const speed = SPEED_INITIAL + SPEED_STEP * value;\r\n        this.setState({\r\n            speedText: String(speed)\r\n        })\r\n        this.props.onChange(speed);\r\n    }\r\n\r\n    render() {\r\n        const options: JSX.Element[] = [];\r\n        for(let i = 1; i <= MAX; i++) {\r\n            options.push(<option key={'option ' + i}>{i}</option>);\r\n        }\r\n        return (\r\n            <div className='slider-container'>\r\n                <div className='slider-text'>\r\n                    Speed: <div className='speed-text'> {this.state.speedText} </div>\r\n                </div>\r\n                    <SteppedRangeSlider min={1} max={MAX} step={1}\r\n                                        default={(this.props.initialSpeed - SPEED_INITIAL) / SPEED_STEP}\r\n                                        sliderStyle='slider speed-slider'\r\n                                        onChange={this.onChangeSpeed}\r\n                />\r\n                <datalist id='step-list'>\r\n                    {options}\r\n                </datalist>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class AlgorithmSettings extends React.Component<AlgorithmProps>\r\n{\r\n    constructor(props: AlgorithmProps) {\r\n        super(props);\r\n        this.state = {\r\n            disabled: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Algorithm</div>\r\n                <Checkbox defaultChecked={false} boxStyle='box'\r\n                          disabled={this.props.disabled}\r\n                          onChange={this.props.onChangeBidirectional}>\r\n                    Bidirectional\r\n                </Checkbox>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class HeuristicSettings extends React.Component<HeuristicProps>\r\n{\r\n    constructor(props: HeuristicProps) {\r\n        super(props);\r\n        this.state = {\r\n            disabled: false\r\n        }\r\n    }\r\n\r\n    disable = () => {\r\n        this.setState({\r\n            disabled: true\r\n        })\r\n    }\r\n\r\n    enable = () => {\r\n        this.setState({\r\n            disabled: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Heuristic</div>\r\n                <RadioButtonGroup boxStyle='box'\r\n                                  defaultChecked={1}\r\n                                  disabled={this.props.disabled}\r\n                                  onChange={[\r\n                                      this.props.onClickManhattan, this.props.onClickEuclidean,\r\n                                      this.props.onClickChebyshev, this.props.onClickOctile\r\n                                  ]}\r\n                >\r\n                    {[<span key='Manhattan'>Manhattan</span>, <span key='Euclidean'>Euclidean</span>,\r\n                        <span key='Chebyshev'>Chebyshev</span>, <span key='Octile<'>Octile</span>]}\r\n                </RadioButtonGroup>\r\n            </div>\r\n        )\r\n    }\r\n}","import PathfindingSettings, {getDefaultSettings} from './PathfindingSettings';\r\n\r\nclass SettingsManager\r\n{\r\n    settings: PathfindingSettings = getDefaultSettings();\r\n\r\n    changeAlgo = (algo: string) => {\r\n        this.settings.algorithm = algo;\r\n    }\r\n\r\n    changeVisualize = () => {\r\n        this.settings.visualizeAlg = !this.settings.visualizeAlg;\r\n    }\r\n\r\n    changeShowArrows = () => {\r\n        this.settings.showArrows = !this.settings.showArrows;\r\n    }\r\n\r\n    changeBidirectional = () => {\r\n        this.settings.bidirectional = !this.settings.bidirectional;\r\n    }\r\n\r\n    changeSpeed = (value: number) => {\r\n        this.settings.delayInc = value;\r\n    }\r\n\r\n    changeManhattan = () => {\r\n        this.settings.heuristicKey = 'manhattan';\r\n    }\r\n\r\n    changeEuclidean = () => {\r\n        this.settings.heuristicKey = 'euclidean';\r\n    }\r\n\r\n    changeChebyshev = () => {\r\n        this.settings.heuristicKey = 'chebyshev';\r\n    }\r\n\r\n    changeOctile = () => {\r\n        this.settings.heuristicKey = 'octile';\r\n    }\r\n}\r\n\r\nexport default SettingsManager;","interface PathfindingSettings\r\n{\r\n    visualizeAlg: boolean,\r\n    showArrows: boolean,\r\n    delayInc: number,\r\n    algorithm: string,\r\n    heuristicKey: string,\r\n    navigatorKey: string,\r\n    bidirectional: boolean\r\n}\r\n\r\nexport function getDefaultSettings(): PathfindingSettings {\r\n    return {\r\n        visualizeAlg: true,\r\n        showArrows: true,\r\n        delayInc: 8,\r\n        algorithm: 'a*',\r\n        heuristicKey: 'euclidean',\r\n        navigatorKey: 'plus',\r\n        bidirectional: false\r\n    }\r\n}\r\n\r\nexport default PathfindingSettings;","import React, {RefObject} from 'react';\r\nimport TopBar from './navbar/TopBar';\r\nimport {VisualizeButton, SettingsButton} from './navbar/Buttons';\r\nimport {AlgorithmDropDown, ClearDropDown, MazeDropDown, TilesDropDown} from './navbar/DropDown';\r\nimport DraggablePanel from './utility/DraggablePanel';\r\nimport PathfindingVisualizer from './grid/PathfindingVisualizer';\r\nimport {VisualSettings, SpeedSettings, AlgorithmSettings, HeuristicSettings} from './navbar/SettingPanels';\r\nimport SettingsManager from './SettingsManager';\r\nimport PathfinderBuilder from '../pathfinding/algorithms/PathfinderBuilder';\r\nimport {MAZE, MAZE_HORIZONTAL_SKEW, MAZE_VERTICAL_SKEW, RANDOM_TERRAIN} from '../pathfinding/algorithms/TerrainGeneratorBuilder';\r\n\r\ninterface IProps {}\r\n\r\ninterface IState {\r\n    heuristicDisabled: boolean,\r\n    bidirectionalDisabled: boolean,\r\n    arrowsDisabled: boolean,\r\n\r\n    panelShow: boolean,\r\n\r\n    topMargin: number,\r\n\r\n    visualizing: boolean,\r\n    paused: boolean\r\n}\r\n\r\nclass PathfindingApp extends React.Component<IProps, IState>\r\n{\r\n    //expose visualizer to parent to connect to button siblings\r\n    private visualizer: RefObject<PathfindingVisualizer> = React.createRef();\r\n\r\n    //drop down refs needed to invoke behavior between dropdowns\r\n    private algDropDown: RefObject<AlgorithmDropDown> = React.createRef();\r\n    private clrDropDown: RefObject<ClearDropDown> = React.createRef();\r\n    private mazeDropDown: RefObject<MazeDropDown> = React.createRef();\r\n    private tilesDropDown: RefObject<TilesDropDown> = React.createRef();\r\n\r\n    private settingsManager: SettingsManager = new SettingsManager();\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            heuristicDisabled: false,\r\n            bidirectionalDisabled: false,\r\n            arrowsDisabled: false,\r\n            panelShow: false,\r\n            topMargin: 75,\r\n            visualizing: false,\r\n            paused: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('click', e => {\r\n            this.algDropDown.current!.hide();\r\n            this.clrDropDown.current!.hide();\r\n            this.mazeDropDown.current!.hide();\r\n            this.tilesDropDown.current!.hide();\r\n        });\r\n    }\r\n\r\n    onClickAlgDrop = () => {\r\n        this.clrDropDown.current!.hide();\r\n        this.mazeDropDown.current!.hide();\r\n        this.tilesDropDown.current!.hide();\r\n    }\r\n\r\n    onClickClrDrop = () => {\r\n        this.algDropDown.current!.hide();\r\n        this.mazeDropDown.current!.hide();\r\n        this.tilesDropDown.current!.hide();\r\n    }\r\n\r\n    onClickMazeDrop = () => {\r\n        this.clrDropDown.current!.hide();\r\n        this.algDropDown.current!.hide();\r\n        this.tilesDropDown.current!.hide();\r\n    }\r\n\r\n    onClickTilesDrop = () => {\r\n        this.clrDropDown.current!.hide();\r\n        this.algDropDown.current!.hide();\r\n        this.mazeDropDown.current!.hide();\r\n    }\r\n\r\n    changeVButtonColor = (visualizing: boolean) => {\r\n        this.setState({\r\n            visualizing: visualizing\r\n        })\r\n    }\r\n\r\n    toggleSettings = () => {\r\n        this.setState(prevState => ({\r\n            panelShow: !prevState.panelShow\r\n        }));\r\n    }\r\n\r\n    hideSettings = () => {\r\n        this.setState({\r\n            panelShow: false\r\n        });\r\n    }\r\n\r\n    changeAlgo = (algorithm: string) => {\r\n        this.setState({\r\n            heuristicDisabled: !PathfinderBuilder.usesHeuristic(algorithm),\r\n            bidirectionalDisabled: !PathfinderBuilder.hasBidirectional(algorithm),\r\n            arrowsDisabled: algorithm === 'dfs'\r\n        });\r\n        this.settingsManager.changeAlgo(algorithm);\r\n    }\r\n\r\n    doPathfinding = () => {\r\n        this.setState({\r\n            paused: false\r\n        });\r\n        this.visualizer.current!.doDelayedPathfinding();\r\n    }\r\n\r\n    pausePathfinding = () => {\r\n        this.setState({\r\n            paused: true\r\n        });\r\n        this.visualizer.current!.pausePathfinding();\r\n    }\r\n\r\n    resumePathfinding = () => {\r\n        this.setState({\r\n            paused: false\r\n        });\r\n        this.visualizer.current!.resumePathfinding();\r\n    }\r\n\r\n    clearPath = () => {\r\n        this.visualizer.current!.clearPath();\r\n        this.visualizer.current!.clearVisualizationChecked();\r\n    }\r\n\r\n    clearTiles = () => {\r\n        this.clearPath();\r\n        this.visualizer.current!.clearTilesChecked();\r\n    }\r\n\r\n    resetBoard = () => {\r\n        this.clearPath();\r\n        this.clearTiles();\r\n        this.visualizer.current!.resetPoints();\r\n    }\r\n\r\n    createMaze = () => {\r\n        this.visualizer.current!.createTerrain(MAZE);\r\n    }\r\n\r\n    createMazeVSkew = () => {\r\n        this.visualizer.current!.createTerrain(MAZE_VERTICAL_SKEW);\r\n    }\r\n\r\n    createMazeHSkew = () => {\r\n        this.visualizer.current!.createTerrain(MAZE_HORIZONTAL_SKEW);\r\n    }\r\n\r\n    createRandomTerrain = () => {\r\n        this.visualizer.current!.createTerrain(RANDOM_TERRAIN);\r\n    }\r\n\r\n    onChangeHeight = (height: number) => {\r\n        this.setState({\r\n            topMargin: height\r\n        });\r\n    }\r\n\r\n    changeTile = (cost: number) => {\r\n        this.visualizer.current!.changeTile({\r\n            isSolid: cost === -1,\r\n            pathCost: cost\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const mobile = isMobile();\r\n        const tileWidth =  mobile ? 47 : Math.round(window.screen.availWidth / 57);\r\n        if(mobile) {\r\n            this.settingsManager.changeSpeed(16);\r\n        }\r\n        return (\r\n            <div>\r\n                <DraggablePanel title='Grid Settings'\r\n                                show={this.state.panelShow}\r\n                                onClickXButton={this.hideSettings}\r\n                                width={350}\r\n                                height={430}\r\n                >\r\n                    <VisualSettings disabled={this.state.arrowsDisabled}\r\n                                    onChangeViz={this.settingsManager.changeVisualize}\r\n                                    onChangeShowArrows={this.settingsManager.changeShowArrows}\r\n                    />\r\n                    <SpeedSettings onChange={this.settingsManager.changeSpeed}\r\n                                   initialSpeed={this.settingsManager.settings.delayInc}\r\n                    />\r\n                    <AlgorithmSettings disabled={this.state.bidirectionalDisabled}\r\n                                       onChangeBidirectional={this.settingsManager.changeBidirectional}\r\n                    />\r\n                    <HeuristicSettings disabled={this.state.heuristicDisabled}\r\n                                       onClickManhattan={this.settingsManager.changeManhattan}\r\n                                       onClickEuclidean={this.settingsManager.changeEuclidean}\r\n                                       onClickChebyshev={this.settingsManager.changeChebyshev}\r\n                                       onClickOctile={this.settingsManager.changeOctile}\r\n                    />\r\n                </DraggablePanel>\r\n                <TopBar onChangeHeight={this.onChangeHeight}>\r\n                    <a href='https://github.com/JosephPrichard/PathfinderReact' className='title'>\r\n                        Pathfinding Visualizer\r\n                    </a>\r\n                    <div className='top-container'>\r\n                        <AlgorithmDropDown ref={this.algDropDown}\r\n                                           onClick={this.onClickAlgDrop}\r\n                                           onChange={this.changeAlgo}\r\n                        />\r\n                        <VisualizeButton active={this.state.visualizing}\r\n                                         paused={this.state.paused}\r\n                                         onPause={this.pausePathfinding}\r\n                                         onResume={this.resumePathfinding}\r\n                                         onStartStop={this.doPathfinding}\r\n                        />\r\n                        <ClearDropDown ref={this.clrDropDown}\r\n                                       onClick={this.onClickClrDrop}\r\n                                       onClickTiles={this.clearTiles}\r\n                                       onClickPath={this.clearPath}\r\n                                       onClickReset={this.resetBoard}\r\n                        />\r\n                        <TilesDropDown ref={this.tilesDropDown}\r\n                                       onClick={this.onClickTilesDrop}\r\n                                       onClickTileType={this.changeTile}\r\n                        />\r\n                        <MazeDropDown ref={this.mazeDropDown}\r\n                                      onClick={this.onClickMazeDrop}\r\n                                      onClickMaze={this.createMaze}\r\n                                      onClickMazeHorizontal={this.createMazeHSkew}\r\n                                      onClickMazeVertical={this.createMazeVSkew}\r\n                                      onClickRandomTerrain={this.createRandomTerrain}\r\n                        />\r\n                        <SettingsButton onClick={this.toggleSettings}/>\r\n                    </div>\r\n                </TopBar>\r\n                <PathfindingVisualizer ref={this.visualizer}\r\n                                       onChangeVisualizing={this.changeVButtonColor}\r\n                                       topMargin={this.state.topMargin}\r\n                                       settings={this.settingsManager.settings}\r\n                                       tileWidth={tileWidth}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction isMobile() {\r\n    return /Android|webOS|iPhone|iPad|Mac|Macintosh|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n}\r\n\r\nexport default PathfindingApp;","import React from 'react';\nimport './App.css';\nimport PathfindingApp from './view/PathfindingApp';\n\nclass App extends React.Component\n{\n    render() {\n        return (\n            <PathfindingApp/>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n//reportWebVitals();\n"],"sourceRoot":""}