{"version":3,"sources":["common/components/navbar/TopBar.tsx","common/components/navbar/Buttons.tsx","common/components/navbar/DropDown.tsx","common/components/navbar/DropDownComponents.tsx","common/components/panel/Checkbox.tsx","common/components/panel/SteppedRangeSlider.tsx","common/components/panel/RadioButtonGroup.tsx","common/components/navbar/SettingPanels.tsx","common/components/panel/DraggablePanel.tsx","common/components/grid/GridBackground.tsx","common/pathfinding/core/Components.ts","common/pathfinding/core/Grid.ts","common/components/grid/TileFg.tsx","common/components/grid/SolidFg.tsx","images/weight.svg","common/components/grid/WeightFg.tsx","common/components/grid/GridForeground.tsx","common/components/grid/StatsPanel.tsx","common/components/grid/GridStaticTiles.tsx","common/pathfinding/core/PlusNavigator.ts","common/pathfinding/core/Navigator.ts","common/pathfinding/algorithms/Heuristics.ts","common/pathfinding/algorithms/Pathfinder.ts","common/pathfinding/algorithms/Node.ts","common/pathfinding/structures/Hash.ts","common/pathfinding/structures/Heap.ts","common/pathfinding/algorithms/AStarPathfinder.ts","common/pathfinding/algorithms/BFSPathfinder.ts","common/pathfinding/structures/Stack.ts","common/pathfinding/algorithms/DFSPathfinder.ts","common/pathfinding/algorithms/BiAStarPathfinder.ts","common/pathfinding/algorithms/BiBFSPathfinder.ts","common/pathfinding/algorithms/PathfinderBuilder.ts","common/pathfinding/algorithms/TerrainGenerator.ts","common/pathfinding/algorithms/TerrainRandomGenerator.ts","common/pathfinding/algorithms/TerrainMazeGenerator.ts","common/pathfinding/algorithms/TerrainGeneratorBuilder.ts","common/utils/VirtualTimer.ts","common/components/grid/PathfindingVisualizer.tsx","common/utils/SettingsManager.ts","common/utils/PathfindingSettings.ts","images/react.png","common/components/PathfindingApp.tsx","App.tsx","index.tsx"],"names":["TopBar","bar","React","createRef","ref","this","style","width","window","screen","availWidth","className","props","children","Component","SYMBOL_COLOR","DIMENSION","VisualizeButton","height","rx","fill","points","x","active","onMouseDown","e","preventDefault","onClick","paused","onResume","onPause","xmlns","getResumeSymbol","getPauseSymbol","onStartStop","getStopSymbol","SettingsButton","DropDown","setState","up","display","stopPropagation","isHidden","show","hide","state","Clickable","tabIndex","onKeyPress","click","AlgorithmDropDown","text","fade","key","algText","onChange","toggle","nativeEvent","arrowClass","contentStyle","ClearDropDown","onClickPath","onClickTiles","onClickReset","MazeDropDown","onClickMaze","onClickMazeHorizontal","onClickMazeVertical","onClickRandomTerrain","TilesDropDown","cost","onClickTileType","Checkbox","checked","defaultChecked","prevState","type","disabled","boxStyle","defaultProps","SteppedRangeSlider","mouseUp","value","default","val","Number","currentTarget","list","min","max","step","sliderStyle","onInput","onMouseUp","onTouchEnd","onTouchStart","RadioButtonGroup","i","length","push","index","Children","toArray","radioButtons","VisualSettings","onChangeViz","onChangeShowArrows","SpeedSettings","speedText","String","initialSpeed","speed","options","onChangeSpeed","id","AlgorithmSettings","onChangeBidirectional","HeuristicSettings","onClickManhattan","onClickEuclidean","onClickChebyshev","onClickOctile","DraggablePanel","draggable","draggableContainer","draggableContent","dragging","prevX","prevY","mouseDown","clientY","clientX","touchStart","touch","touches","changedTouches","mouseMove","drag","touchMove","top","left","document","addEventListener","container","current","offsetTop","offsetLeft","content","innerHeight","innerWidth","offsetHeight","offsetWidth","visibleStyle","minHeight","getPosition","renderDraggable","draggableStyle","title","onClickXButton","ARROW_COLOR","VIZ_TILE_CLASS","clone","array","map","arr","slice","GridBackground","tileWidth","tileClass","tilesX","tilesY","visualization","createEmptyBg","arrows","y","row","generation","doGeneration","generations","doArrowGeneration","renderViz","markerWidth","markerHeight","refX","refY","orient","renderArrows","offset","arrow","first","from","second","to","firstX","firstY","secondX","secondY","offsetX","offsetY","x1","y1","x2","y2","stroke","strokeWidth","markerEnd","tiles","point","viz","renderTile","color","backgroundColor","tile","point1","point2","newArrow","a","indexOf","splice","createTileData","isSolid","pathCost","RectGrid","nodes","data","createEmptyGrid","solid","mutate","console","str","log","JSON","stringify","grid","mutateTile","get","TileFg","nextProps","prevPoint","nextPoint","size","position","borderColor","SolidFg","doTileAnimation","tileSize","WeightFg","backgroundImage","Weight","ARROW_PATH_COLOR","pointsEqual","isControlKey","button","GridForeground","svg","tilePointer","drawing","erasing","draggingInitial","draggingGoal","disable","initialKey","goalKey","end","calcEndPointInView","path","initial","goal","Math","round","topMargin","getBoundingClientRect","bounds","getBoundingRect","onPress","onDrag","xCoordinate","yCoordinate","calculatePoint","isEmpty","drawTile","eraseTile","moveInitial","moveGoal","inBounds","mutateDefault","canMoveEndPoint","onTilesDragged","floor","renderEndTile","renderPath","onContextMenu","onMouseMove","onMouseLeave","onEndingEvent","onTouchMoveCapture","onTouchCancel","renderTilesTable","lines","renderPathArrow","renderWeightText","fontSize","paddingTop","textAlign","cursor","StatsPanel","textLog","scrollTop","scrollHeight","clientHeight","time","toFixed","algorithm","readOnly","unselectable","onDrop","GridStaticTiles","renderTiles","PlusNavigator","getWidth","getHeight","b","manhattan","abs","euclidean","dx","dy","sqrt","octile","SQRT2","chebyshev","nullHeuristic","reconstructPath","bottomLeaf","reconstructPathReversed","reverse","parent","Pathfinder","navigator","recentSearch","node","Node","child","AStarNode","g","fScore","HashSet","undefined","HashTable","Heap","compare","elements","siftUp","peek","move","pop","siftDown","pos","swap","right","AStarPathfinder","func","heuristicFunc","p","getNavigator","getGrid","clearRecentSearch","openFrontier","f","closedSet","openSet","root","add","currentNode","currentPoint","currentKey","remove","addRecent","equals","neighbors","neighbor","neighborPoint","neighborKey","has","stepCost","heuristic","neighborNode","addChild","BFSPathfinder","frontier","visited","shift","next","Stack","DFSPathfinder","BiAStarPathfinder","startOpenFrontier","startOpenSet","endOpenFrontier","endOpenSet","initialRoot","goalRoot","startCurrentNode","startCurrentPointKey","concat","doAStarExpansion","endCurrentNode","endCurrentPointKey","structures","endPoint","BiBFSPathfinder","startVisited","endVisited","startFrontier","endFrontier","doBFSExpansion","CREATE_NAVIGATOR","CREATE_HEURISTIC","CREATE_PATHFINDER","PathfinderBuilder","toLowerCase","Error","createHeuristic","createNavigator","createPathfinder","TerrainGenerator","ignore","shouldIgnore","TerrainRandomGenerator","tileData","topLeft","bottomRight","random","draw","getTerrain","divideWidthNoSkew","divideWidthHSkew","divideWidthVSkew","canDrawHole","getMidPoint","range","mid","getRand","TerrainMazeGenerator","slant","divideWidth","getSolid","divide","chamber","widthOf","heightOf","randX","toDraw","edgeBlocked","randY","drawArr","leftChamber","rightChamber","topChamber","bottomChamber","TerrainGeneratorBuilder","VirtualTimer","callback","countDown","timeout","timeStarted","timeRemaining","finished","Date","now","setTimeout","clearTimeout","calcLength","len","calcCost","PathfindingVisualizer","background","foreground","visualized","visualizing","visualTimeouts","wasPaused","mazeTile","clearPath","erasePath","w","outerWidth","h","availHeight","outerHeight","isPaused","pausePathfinding","resumePathfinding","nextState","changeTile","settings","showArrows","visualizeAlg","pause","resume","pathfinder","getPathfinder","findPath","getRecentGenerations","canShowArrows","addArrowGenerations","canShowFrontier","visualizeGenerations","drawPath","clearVisualization","toggleDisable","clear","onChangeVisualizing","promises","baseIncrement","delayInc","expand","delay","visualizeGenerationAndArrows","visualizeGeneration","addArrowGeneration","generationSet","forEach","promise","Promise","resolve","all","then","algorithmKey","bidirectional","hasBidirectional","makeBidirectional","setAlgorithm","setHeuristic","heuristicKey","setNavigator","navigatorKey","build","t0","performance","t2","getRecentNodes","getAlgorithmName","unshift","doPathfinding","mazeType","useMazeTile","clearTiles","newState","prevGrid","generator","setDimensions","setGeneratorType","setIgnorePoints","setTileData","generateTerrain","drawGrid","xEnd","yEnd","xFloor","yFloor","yDecimal","ceil","resetPoints","SettingsManager","algo","PathfindingApp","visualizer","algDropDown","clrDropDown","mazeDropDown","tilesDropDown","settingsManager","mobile","test","userAgent","changeSpeed","heuristicDisabled","bidirectionalDisabled","arrowsDisabled","panelShow","useIcon","usesHeuristic","changeAlgo","doDelayedPathfinding","clearVisualizationChecked","clearTilesChecked","createTerrain","icon","alt","src","Icon","hideSettings","changeVisualize","changeShowArrows","changeBidirectional","changeManhattan","changeEuclidean","changeChebyshev","changeOctile","href","onClickAlgDrop","alg","onClickClrDrop","resetBoard","onClickTilesDrop","onClickMazeDrop","createMaze","createMazeHSkew","createMazeVSkew","createRandomTerrain","toggleSettings","changeVButtonColor","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8a3196ca.chunk.js","sourcesContent":["import React, {RefObject} from 'react';\r\n\r\nclass TopBar extends React.Component\r\n{\r\n    private bar: RefObject<HTMLDivElement> = React.createRef();\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                ref={this.bar}\r\n                style={{\r\n                    width: window.screen.availWidth\r\n                }}\r\n                className='top-navbar'\r\n            >\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TopBar;","import React from 'react';\r\n\r\ninterface VProps {\r\n    active: boolean,\r\n    paused: boolean,\r\n    onStartStop: ()  => void,\r\n    onPause: ()  => void,\r\n    onResume: ()  => void,\r\n}\r\n\r\ninterface ButtonProps {\r\n    onClick: ()  => void\r\n}\r\n\r\nconst SYMBOL_COLOR = 'rgb(230,230,230)';\r\nconst OFFSET = 14;\r\nconst DIMENSION = 47 - 2 * OFFSET;\r\n\r\nexport class VisualizeButton extends React.Component<VProps>\r\n{\r\n    getStopSymbol() {\r\n        return (\r\n            <rect\r\n                width={DIMENSION}\r\n                height={DIMENSION}\r\n                rx={4}\r\n                fill={SYMBOL_COLOR}\r\n            />\r\n        );\r\n    }\r\n\r\n    getResumeSymbol() {\r\n        const midY = DIMENSION / 2;\r\n        return (\r\n            <polygon\r\n                points={`${0},${0} ${0},${DIMENSION} ${DIMENSION},${midY}`}\r\n                className={'track round'}\r\n                fill={SYMBOL_COLOR}\r\n            />\r\n        );\r\n    }\r\n\r\n    getPauseSymbol() {\r\n        return (\r\n            <svg>\r\n                <rect\r\n                    width={DIMENSION/2.5}\r\n                    height={DIMENSION}\r\n                    rx={3}\r\n                    fill={SYMBOL_COLOR}\r\n                />\r\n                <rect\r\n                    width={DIMENSION/2.5}\r\n                    height={DIMENSION}\r\n                    x={0.2*DIMENSION + DIMENSION/2.5}\r\n                    rx={3}\r\n                    fill={SYMBOL_COLOR}\r\n                />\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        if(this.props.active) {\r\n            return (\r\n                <div className={'half-button-wrapper'}>\r\n                    <button\r\n                        onMouseDown={e => e.preventDefault()}\r\n                        className={'center half-button-left red-button half-viz-button'}\r\n                        onClick={this.props.paused ? this.props.onResume : this.props.onPause}\r\n                    >\r\n                        <svg\r\n                            xmlns='http://www.w3.org/2000/svg'\r\n                            className='svg-icon'\r\n                            width={DIMENSION}\r\n                            height={DIMENSION}\r\n                        >\r\n                            {this.props.paused ? this.getResumeSymbol() : this.getPauseSymbol()}\r\n                        </svg>\r\n                    </button>\r\n                    <button\r\n                        onMouseDown={e => e.preventDefault()}\r\n                        className={'center half-button-right red-button half-viz-button'}\r\n                        onClick={this.props.onStartStop}\r\n                    >\r\n                        <svg\r\n                            xmlns='http://www.w3.org/2000/svg'\r\n                            className='svg-icon'\r\n                            width={DIMENSION}\r\n                            height={DIMENSION}\r\n                        >\r\n                            {this.getStopSymbol()}\r\n                        </svg>\r\n                    </button>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <button\r\n                    onMouseDown={e => e.preventDefault()}\r\n                    className={'button green-button viz-button'}\r\n                    onClick={this.props.onStartStop}\r\n                >\r\n                    Visualize!\r\n                </button>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport class SettingsButton extends React.Component<ButtonProps>\r\n{\r\n    render() {\r\n        return (\r\n            <button\r\n                onMouseDown={e => e.preventDefault()}\r\n                className='button settings-button'\r\n                onClick={this.props.onClick}\r\n            >\r\n                Settings\r\n            </button>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport interface DropDownProps {\r\n    onClick: () => void,\r\n}\r\n\r\nexport interface DropDownState {\r\n    up: boolean,\r\n    display: string,\r\n    fade: string\r\n}\r\n\r\nabstract class DropDown<IProps extends DropDownProps, IState extends DropDownState>\r\n    extends React.Component<IProps, IState>\r\n{\r\n    protected constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    show() {\r\n        this.setState({\r\n            up: false,\r\n            display: 'block',\r\n        });\r\n    }\r\n\r\n    hide() {\r\n        this.setState({\r\n            display: 'none',\r\n            up: true,\r\n        });\r\n    }\r\n\r\n    toggle(e: Event) {\r\n        e.stopPropagation();\r\n        this.props.onClick();\r\n        if(this.isHidden()) {\r\n            this.show();\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    isHidden() {\r\n        return this.state.display === 'none';\r\n    }\r\n\r\n    contentStyle() {\r\n        return {\r\n            display: this.state.display\r\n        }\r\n    }\r\n}\r\n\r\nexport default DropDown;","import React from 'react';\r\nimport DropDown, {DropDownProps, DropDownState} from './DropDown';\r\n\r\ninterface AlgProps extends DropDownProps {\r\n    onChange: (alg: string) => void\r\n}\r\n\r\ninterface DropDownTextState extends DropDownState {\r\n    text: string,\r\n}\r\n\r\ninterface ClrProps extends DropDownProps {\r\n    onClickPath: () => void,\r\n    onClickTiles: () => void,\r\n    onClickReset: () => void;\r\n}\r\n\r\ninterface MazeProps extends DropDownProps {\r\n    onClickMaze: () => void,\r\n    onClickMazeHorizontal: () => void,\r\n    onClickMazeVertical: () => void,\r\n    onClickRandomTerrain: () => void\r\n}\r\n\r\ninterface TileProps extends DropDownProps {\r\n    onClickTileType: (cost: number) => void\r\n}\r\n\r\ninterface ClickableProps {\r\n    click: () => void;\r\n}\r\n\r\nclass Clickable extends React.Component<ClickableProps>\r\n{\r\n    render() {\r\n        return (\r\n            <div\r\n                tabIndex={0}\r\n                onKeyPress={this.props.click}\r\n                onClick={this.props.click}\r\n            >\r\n                {this.props.children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport class AlgorithmDropDown extends DropDown<AlgProps, DropDownTextState>\r\n{\r\n    constructor(props: AlgProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            text: 'A* Search',\r\n            fade: 'fade-in'\r\n        };\r\n    }\r\n\r\n    onChange(key: string, algText: string) {\r\n        this.props.onChange(key);\r\n        this.setState({\r\n            text: algText\r\n        });\r\n    }\r\n\r\n    arrowClass() {\r\n        return this.state.up ? 'arrowUp' : 'arrowDown';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                tabIndex={0}\r\n                className='alg-drop-down drop-down'\r\n                onMouseDown={e => e.preventDefault()}\r\n                onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='alg-drop-down-button drop-down-button'>\r\n                    <span className='alg-drop-down-text drop-down-text'>{this.state.text}</span>\r\n                    <span className={'alg-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div\r\n                    style={this.contentStyle()}\r\n                    className={this.state.fade + ' alg-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={() => this.onChange('a*', 'A* Search')}>A* Search</Clickable>\r\n                    <Clickable click={() => this.onChange('dijkstra', 'Dijkstra')}>Dijkstra's Algorithm</Clickable>\r\n                    <Clickable click={() => this.onChange('best-first', 'Best First')}>Best First Search</Clickable>\r\n                    <Clickable click={() => this.onChange('bfs', 'Breadth First')}>Breadth First Search</Clickable>\r\n                    <Clickable click={() => this.onChange('dfs', 'Depth First')}>Depth First Search</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class ClearDropDown extends DropDown<ClrProps, DropDownState>\r\n{\r\n    constructor(props: ClrProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            fade: 'fade-in'\r\n        };\r\n    }\r\n\r\n    arrowClass() {\r\n        return this.state.up ? 'arrowUpW' : 'arrowDownW';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                tabIndex={0}\r\n                className='clr-drop-down drop-down'\r\n                onMouseDown={e => e.preventDefault()}\r\n                onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='clr-drop-down-button drop-down-button'>\r\n                    <span className='clr-drop-down-text drop-down-text'>Reset</span>\r\n                    <span className={'clr-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div\r\n                    style={this.contentStyle()}\r\n                    className={this.state.fade + ' clr-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={this.props.onClickPath}>Clear Path</Clickable>\r\n                    <Clickable click={this.props.onClickTiles}>Clear Tiles</Clickable>\r\n                    <Clickable click={this.props.onClickReset}>Reset Grid</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class MazeDropDown extends DropDown<MazeProps, DropDownState>\r\n{\r\n    constructor(props: MazeProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            fade: 'fade-in'\r\n        };\r\n    }\r\n\r\n    arrowClass() {\r\n        return this.state.up ? 'arrowUpW' : 'arrowDownW';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                tabIndex={0} className='maze-drop-down drop-down'\r\n                onMouseDown={e => e.preventDefault()}\r\n                onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='maze-drop-down-button drop-down-button'>\r\n                    <span className='maze-drop-down-text drop-down-text'>Terrain</span>\r\n                    <span className={'clr-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div\r\n                    style={this.contentStyle()}\r\n                    className={this.state.fade + ' maze-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={this.props.onClickMaze}>Recursive Maze Division</Clickable>\r\n                    <Clickable click={this.props.onClickMazeHorizontal}>Horizontal Skewed Maze</Clickable>\r\n                    <Clickable click={this.props.onClickMazeVertical}>Vertical Skewed Maze</Clickable>\r\n                    <Clickable click={this.props.onClickRandomTerrain}>Random Terrain</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class TilesDropDown extends DropDown<TileProps, DropDownTextState>\r\n{\r\n    constructor(props: TileProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            fade: 'fade-in',\r\n            text: 'Wall [∞]'\r\n        };\r\n    }\r\n\r\n    arrowClass() {\r\n        return this.state.up ? 'arrowUpW' : 'arrowDownW';\r\n    }\r\n\r\n    onChange(cost: number, text: string) {\r\n        this.props.onClickTileType(cost);\r\n        this.setState({\r\n            text: text\r\n        }, () => this.props.onClickTileType(cost));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                tabIndex={0}\r\n                className='tiles-drop-down drop-down'\r\n                onMouseDown={e => e.preventDefault()}\r\n                onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='tiles-drop-down-button drop-down-button'>\r\n                    <span className='tiles-drop-down-text drop-down-text'>{this.state.text}</span>\r\n                    <span className={'clr-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div\r\n                    style={this.contentStyle()}\r\n                    className={this.state.fade + ' tiles-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={() => this.onChange(-1, 'Wall [∞]')}>Wall [∞]</Clickable>\r\n                    <Clickable click={() => this.onChange(2, 'Weight [2]')}>Weight [2]</Clickable>\r\n                    <Clickable click={() => this.onChange(3, 'Weight [3]')}>Weight [3]</Clickable>\r\n                    <Clickable click={() => this.onChange(5, 'Weight [5]')}>Weight [5]</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\ninterface IProps {\r\n    boxStyle: string,\r\n    defaultChecked: boolean,\r\n    disabled?: boolean,\r\n    onChange: (checked: boolean) => void\r\n}\r\n\r\ninterface IState {\r\n    checked: boolean\r\n}\r\n\r\nclass Checkbox extends React.Component<IProps,IState>\r\n{\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            checked: this.props.defaultChecked\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger callback and change checkbox state\r\n     */\r\n    onChange() {\r\n        this.setState(prevState => ({\r\n            checked: !prevState.checked\r\n        }), () => this.props.onChange(this.state.checked));\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <input\r\n                    checked={this.state.checked}\r\n                    type='checkbox'\r\n                    disabled={this.props.disabled}\r\n                    className={this.props.boxStyle}\r\n                    onKeyPress={() => this.onChange()}\r\n                    onChange={() => this.onChange()}\r\n                />\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Checkbox;","import React from 'react';\r\n\r\ninterface IProps {\r\n    min: number,\r\n    max: number,\r\n    default: number,\r\n    step: number,\r\n    sliderStyle: string,\r\n    onChange: (val: number) => void\r\n}\r\n\r\ninterface IState {\r\n    value: number\r\n}\r\n\r\nclass SteppedRangeSlider extends React.Component<IProps, IState>\r\n{\r\n    private mouseUp = true;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            value: this.props.default\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger callback when slider value is changed\r\n     * @param e\r\n     */\r\n    onChange(e: React.FormEvent<HTMLInputElement>) {\r\n        if(!this.mouseUp) { //to prevent firefox from resetting on release\r\n            const val = Number(e.currentTarget.value);\r\n            this.setState({\r\n                value: val\r\n            }, () => this.props.onChange(val));\r\n        }\r\n    }\r\n\r\n    onMouseUp() {\r\n        this.mouseUp = true;\r\n    }\r\n\r\n    onMouseDown() {\r\n        this.mouseUp = false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <input\r\n                type='range'\r\n                list='step-list'\r\n                value={this.state.value}\r\n                min={this.props.min}\r\n                max={this.props.max}\r\n                step={this.props.step}\r\n                className={this.props.sliderStyle}\r\n                onInput={e => this.onChange(e)}\r\n                onMouseUp={() => this.onMouseUp()}\r\n                onMouseDown={() => this.onMouseDown()}\r\n                onTouchEnd={() => this.onMouseUp()}\r\n                onTouchStart={() => this.onMouseDown()}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default SteppedRangeSlider;","import React from 'react';\r\n\r\ninterface IProps {\r\n    boxStyle: string,\r\n    defaultChecked: number,\r\n    disabled: boolean,\r\n    onChange: (() => void)[]\r\n}\r\n\r\ninterface IState {\r\n    checked: boolean[];\r\n}\r\n\r\nclass RadioButtonGroup extends React.Component<IProps, IState>\r\n{\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const checked: boolean[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            checked.push(i === this.props.defaultChecked);\r\n        }\r\n        this.state = {\r\n            checked: checked\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set all radio buttons to checked aside from the index\r\n     * of the one that was changed\r\n     * Trigger callback\r\n     * @param index\r\n     */\r\n    onChange (index: number) {\r\n        const checked: boolean[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            checked.push(i === index);\r\n        }\r\n        this.setState({\r\n            checked: checked\r\n        }, () => this.props.onChange[index]());\r\n    }\r\n\r\n    render() {\r\n        const children = React.Children.toArray(this.props.children);\r\n        const radioButtons: JSX.Element[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            radioButtons.push(\r\n                <div key={i}>\r\n                    <input\r\n                        checked={this.state.checked[i]}\r\n                        type='radio'\r\n                        disabled={this.props.disabled}\r\n                        className={this.props.boxStyle}\r\n                        onChange={() => this.onChange(i)}\r\n                    />\r\n                    {children[i]}\r\n                </div>\r\n            );\r\n        }\r\n        return radioButtons;\r\n    };\r\n}\r\n\r\nexport default RadioButtonGroup;","import React from 'react';\r\nimport Checkbox from '../panel/Checkbox';\r\nimport SteppedRangeSlider from '../panel/SteppedRangeSlider';\r\nimport RadioButtonGroup from '../panel/RadioButtonGroup';\r\n\r\ninterface VisualProps {\r\n    onChangeViz: () => void,\r\n    onChangeShowArrows: () => void,\r\n    disabled: boolean\r\n}\r\n\r\ninterface SpeedProps {\r\n    onChange: (value: number) => void,\r\n    initialSpeed: number\r\n}\r\n\r\ninterface SpeedState {\r\n    speedText: string\r\n}\r\n\r\ninterface AlgorithmProps {\r\n    onChangeBidirectional: (checked: boolean) => void,\r\n    disabled: boolean\r\n}\r\n\r\ninterface HeuristicProps {\r\n    onClickManhattan: () => void,\r\n    onClickEuclidean: () => void,\r\n    onClickChebyshev: () => void,\r\n    onClickOctile: () => void,\r\n    disabled: boolean\r\n}\r\n\r\nconst SPEED_STEP = 5;\r\nconst SPEED_INITIAL = 10;\r\nconst MAX = 20;\r\n\r\nexport class VisualSettings extends React.Component<VisualProps>\r\n{\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Visualization</div>\r\n                <Checkbox\r\n                    defaultChecked={true}\r\n                    boxStyle='box'\r\n                    onChange={this.props.onChangeViz}\r\n                >\r\n                    Show Frontier\r\n                </Checkbox>\r\n                <Checkbox\r\n                    defaultChecked={true}\r\n                    boxStyle='box'\r\n                    onChange={this.props.onChangeShowArrows}\r\n                    disabled={this.props.disabled}\r\n                >\r\n                    Show Tree\r\n                </Checkbox>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class SpeedSettings extends React.Component<SpeedProps, SpeedState>\r\n{\r\n    constructor(props: SpeedProps) {\r\n        super(props);\r\n        this.state = {\r\n            speedText: String(this.props.initialSpeed)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback function to be called when slider is changed\r\n     * Call another callback and change text\r\n     * @param value\r\n     */\r\n    onChangeSpeed(value: number) {\r\n        const speed = SPEED_INITIAL + SPEED_STEP * value;\r\n        this.setState({\r\n            speedText: String(speed)\r\n        })\r\n        this.props.onChange(speed);\r\n    }\r\n\r\n    render() {\r\n        const options: JSX.Element[] = [];\r\n        for(let i = 1; i <= MAX; i++) {\r\n            options.push(<option key={'option ' + i}>{i}</option>);\r\n        }\r\n        return (\r\n            <div className='slider-container'>\r\n                <div className='slider-text'>\r\n                    Speed: <div className='speed-text'> {this.state.speedText} </div>\r\n                </div>\r\n                <SteppedRangeSlider\r\n                    min={1}\r\n                    max={MAX}\r\n                    step={1}\r\n                    default={(this.props.initialSpeed - SPEED_INITIAL) / SPEED_STEP}\r\n                    sliderStyle='slider speed-slider'\r\n                    onChange={(value: number) => this.onChangeSpeed(value)}\r\n                />\r\n                <datalist id='step-list'>\r\n                    {options}\r\n                </datalist>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class AlgorithmSettings extends React.Component<AlgorithmProps>\r\n{\r\n    constructor(props: AlgorithmProps) {\r\n        super(props);\r\n        this.state = {\r\n            disabled: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Algorithm</div>\r\n                <Checkbox\r\n                    defaultChecked={false}\r\n                    boxStyle='box'\r\n                    disabled={this.props.disabled}\r\n                    onChange={this.props.onChangeBidirectional}\r\n                >\r\n                    Bidirectional\r\n                </Checkbox>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class HeuristicSettings extends React.Component<HeuristicProps>\r\n{\r\n    constructor(props: HeuristicProps) {\r\n        super(props);\r\n        this.state = {\r\n            disabled: false\r\n        }\r\n    }\r\n\r\n    disable() {\r\n        this.setState({\r\n            disabled: true\r\n        })\r\n    }\r\n\r\n    enable() {\r\n        this.setState({\r\n            disabled: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Heuristic</div>\r\n                <RadioButtonGroup\r\n                    boxStyle='box'\r\n                    defaultChecked={0}\r\n                    disabled={this.props.disabled}\r\n                    onChange={[\r\n                        this.props.onClickManhattan, this.props.onClickEuclidean,\r\n                        this.props.onClickChebyshev, this.props.onClickOctile\r\n                    ]}\r\n                >\r\n                    {[\r\n                        <span key='Manhattan'>Manhattan</span>,\r\n                        <span key='Euclidean'>Euclidean</span>,\r\n                        <span key='Chebyshev'>Chebyshev</span>,\r\n                        <span key='Octile<'>Octile</span>\r\n                    ]}\r\n                </RadioButtonGroup>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {RefObject} from 'react';\r\n\r\ninterface IProps {\r\n    title: string,\r\n    show: boolean,\r\n    onClickXButton: () => void,\r\n    width: number,\r\n    height: number\r\n}\r\n\r\ninterface IState {\r\n    top: number,\r\n    left: number\r\n}\r\n\r\nclass DraggablePanel extends React.Component<IProps, IState>\r\n{\r\n    //refs are used to access native DOM\r\n    private draggable: RefObject<HTMLDivElement> = React.createRef();\r\n    private draggableContainer: RefObject<HTMLDivElement> = React.createRef();\r\n    private draggableContent: RefObject<HTMLDivElement> = React.createRef();\r\n\r\n    //stores previous mouse location and drag\r\n    private dragging = false;\r\n    private prevX = 0;\r\n    private prevY = 0;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            top: -1,\r\n            left: -1\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        //mouse\r\n        document.addEventListener('mouseup', e => {\r\n            this.mouseUp(e);\r\n        });\r\n        document.addEventListener('mousemove', e => {\r\n            this.mouseMove(e);\r\n        });\r\n        window.addEventListener('mouseleave', e => {\r\n            this.mouseUp(e);\r\n        });\r\n        //touch\r\n        document.addEventListener('touchend', () => {\r\n            this.dragging = false;\r\n        });\r\n        document.addEventListener('touchmove', e => {\r\n            this.touchMove(e);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Start drag and init prev mouse location when mouse is clicked on draggable\r\n     * @param e\r\n     */\r\n    mouseDown = (e: MouseEvent) => {\r\n        e.preventDefault();\r\n        this.prevY = e.clientY;\r\n        this.prevX = e.clientX;\r\n        this.dragging = true;\r\n    }\r\n\r\n    /**\r\n     * Start drag and init prev touch location when finger is clicked on draggable\r\n     * @param e\r\n     */\r\n    touchStart = (e: TouchEvent) => {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        this.prevY = touch.clientY;\r\n        this.prevX = touch.clientX;\r\n        this.dragging = true;\r\n    }\r\n\r\n    /**\r\n     * Called when mouse is risen on document stop drag\r\n     * @param e\r\n     */\r\n    mouseUp = (e: Event) => {\r\n        e.preventDefault();\r\n        this.dragging = false;\r\n    }\r\n\r\n    /**\r\n     * Called when the mouse is moved over the document to calculate the new position of\r\n     * the draggable canvas\r\n     * @param e\r\n     */\r\n    mouseMove = (e: MouseEvent) => {\r\n        this.drag(e.clientX, e.clientY);\r\n    }\r\n\r\n    /**\r\n     * Called when the touch is moved over the document to calculate the new position of\r\n     * the draggable canvas\r\n     * @param e\r\n     */\r\n    touchMove = (e: TouchEvent) => {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        this.drag(touch.clientX, touch.clientY);\r\n    }\r\n\r\n    /**\r\n     * Called when user drags over the document to move the panel\r\n     * @param clientX\r\n     * @param clientY\r\n     */\r\n    drag(clientX: number, clientY: number) {\r\n        if(this.dragging) {\r\n            const container = this.draggableContainer.current!;\r\n            let top = (container.offsetTop - (this.prevY - clientY))\r\n            let left = (container.offsetLeft - (this.prevX - clientX));\r\n            const content = this.draggableContent.current!;\r\n            const draggable = this.draggable.current!;\r\n            //stop drag if mouse goes out of bounds\r\n            if(clientY < 0 || clientY > window.innerHeight\r\n                || clientX < 0 || clientX > window.innerWidth) {\r\n                this.dragging = false;\r\n            }\r\n            //check if position is out of bounds and prevent the panel from being dragged there\r\n            if(top < 0) {\r\n                top = 0;\r\n            } else if (top > window.innerHeight - draggable.offsetHeight) {\r\n                top = window.innerHeight - draggable.offsetHeight;\r\n            }\r\n            if(left < -content.offsetWidth/2) {\r\n                left = -content.offsetWidth/2;\r\n            } else if(left > window.innerWidth - content.offsetWidth/2) {\r\n                left = window.innerWidth - content.offsetWidth/2;\r\n            }\r\n            //set new position\r\n            this.setState({\r\n                top: top,\r\n                left: left\r\n            });\r\n            //update previous pos\r\n            this.prevY = clientY;\r\n            this.prevX = clientX;\r\n        }\r\n    }\r\n\r\n    getPosition() {\r\n        const left = this.state.left;\r\n        const top = this.state.top;\r\n        if(left === -1 || top === -1) {\r\n            return {};\r\n        }\r\n        return {\r\n            left: left + 'px',\r\n            top: top + 'px',\r\n        };\r\n    }\r\n\r\n    visibleStyle()  {\r\n        return this.props.show ? 'block' : 'none';\r\n    }\r\n\r\n    draggableStyle() {\r\n        return {\r\n            width: this.props.width,\r\n            display: this.visibleStyle()\r\n        }\r\n    }\r\n\r\n    contentStyle() {\r\n        return {\r\n            width: this.props.width,\r\n            minHeight: this.props.height,\r\n            display: this.visibleStyle()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                ref={this.draggableContainer}\r\n                className='draggable-container'\r\n                style={this.getPosition()}\r\n            >\r\n                {this.renderDraggable()}\r\n                <div\r\n                    ref={this.draggableContent}\r\n                    style={this.contentStyle()}\r\n                    className='draggable-content'\r\n                >\r\n                    <div className='settings-general'>\r\n                        {this.props.children}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderDraggable() {\r\n        return (\r\n            <div\r\n                style={this.draggableStyle()}\r\n                className='draggable'\r\n                ref={this.draggable}\r\n                onMouseDown={e => this.mouseDown(e.nativeEvent)}\r\n                onTouchStart={e => this.touchStart(e.nativeEvent)}\r\n            >\r\n                <div className='draggable-title'>{this.props.title}</div>\r\n                <div\r\n                    className='x-button'\r\n                    tabIndex={0}\r\n                    onKeyPress={this.props.onClickXButton}\r\n                    onClick={this.props.onClickXButton}\r\n                    onMouseDown={e => {\r\n                        e.stopPropagation();\r\n                        e.preventDefault();\r\n                    }}\r\n                >\r\n                    <div className='x-text'>\r\n                        X\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DraggablePanel;","import React from 'react';\r\nimport {Node} from '../../pathfinding/algorithms/Node';\r\nimport {Point} from '../../pathfinding/core/Components';\r\n\r\ninterface Arrow {\r\n    to: Point,\r\n    from: Point\r\n}\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    tilesX: number,\r\n    tilesY: number\r\n}\r\n\r\ninterface IState {\r\n    visualization: string[][],\r\n    arrows: Arrow[]\r\n}\r\n\r\nconst CLOSED_NODE = 'rgb(198, 237, 238)';\r\nconst OPEN_NODE = 'rgb(191, 248, 159)';\r\nconst ARROW_COLOR = 'rgb(153,153,153)';\r\nconst EMPTY_NODE = 'e';\r\nconst TILE_CLASS = 'tile';\r\nconst VIZ_TILE_CLASS = 'tile-viz';\r\n\r\nconst BASE_WIDTH = 27;\r\n\r\nclass GridBackground extends React.Component<IProps,IState>\r\n{\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n    private readonly tileWidth: number;\r\n\r\n    private tileClass: string = VIZ_TILE_CLASS;\r\n\r\n    /**\r\n     * Constructs a GridBackground with immutable height and width\r\n     * @param props\r\n     */\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.width = this.props.tilesX;\r\n        this.height = this.props.tilesY;\r\n        this.tileWidth = this.props.tileWidth;\r\n        this.state = {\r\n            visualization: this.createEmptyBg(),\r\n            arrows: []\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a new empty visualization canvas\r\n     */\r\n    createEmptyBg() {\r\n        const visualization = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            const row: string[] = [];\r\n            for(let x = 0; x < this.width; x++) {\r\n                row.push(EMPTY_NODE);\r\n            }\r\n            visualization.push(row);\r\n        }\r\n        return visualization;\r\n    }\r\n\r\n    /**\r\n     * Clear the visualization canvas and update UI\r\n     */\r\n    clear() {\r\n        this.setState({\r\n            visualization: this.createEmptyBg(),\r\n            arrows: []\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Perform a generation on a visualization array\r\n     * @param generation\r\n     * @param visualization\r\n     */\r\n    static doGeneration(generation: Node, visualization: string[][]) {\r\n        for(const node of generation.children) {\r\n            const point = node.tile.point;\r\n            visualization[point.y][point.x] = OPEN_NODE;\r\n        }\r\n        const point = generation.tile.point;\r\n        visualization[point.y][point.x] = CLOSED_NODE;\r\n        return visualization;\r\n    }\r\n\r\n    /**\r\n     * Visualize generation and update UI\r\n     * @param generation\r\n     */\r\n    visualizeGeneration(generation: Node) {\r\n        this.setState(prevState => ({\r\n            visualization: GridBackground.doGeneration(\r\n                generation,\r\n                clone(prevState.visualization)\r\n            )\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Visualize generation array and update UI\r\n     * @param generations\r\n     */\r\n    visualizeGenerations(generations: Node[]) {\r\n        this.tileClass = TILE_CLASS;\r\n        const visualization = this.createEmptyBg();\r\n        for(const generation of generations) {\r\n            GridBackground.doGeneration(generation, visualization);\r\n        }\r\n        this.setState({\r\n            visualization: visualization\r\n        }, () => this.tileClass = VIZ_TILE_CLASS);\r\n    }\r\n\r\n    /**\r\n     * Perform an arrow generation on an arrow array\r\n     * @param generation\r\n     * @param arrows\r\n     */\r\n    static doArrowGeneration(generation: Node, arrows: Arrow[]) {\r\n        const point = generation.tile.point;\r\n        for(const node of generation.children) {\r\n            const childPoint = node.tile.point;\r\n            const newArrow = {\r\n                from: point,\r\n                to: childPoint,\r\n            };\r\n            //remove a duplicate arrow to indicate replacement\r\n            //in A* for example, we could have re-discovered a better path to a tile\r\n            for(let i = 0; i < arrows.length; i++) {\r\n                const a = arrows[i];\r\n                if(pointsEqual(a.to, newArrow.to)) {\r\n                    const index = arrows.indexOf(a);\r\n                    arrows.splice(index, 1);\r\n                    i--;\r\n                }\r\n            }\r\n            arrows.push(newArrow);\r\n        }\r\n        return arrows;\r\n    }\r\n\r\n    /**\r\n     * Add arrow generation without updating UI\r\n     * @param generation\r\n     */\r\n    addArrowGeneration(generation: Node) {\r\n        this.setState(prevState => ({\r\n            arrows: GridBackground.doArrowGeneration(\r\n                generation,\r\n                prevState.arrows.slice()\r\n            )\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Add arrow generations and update UI\r\n     * @param generations\r\n     */\r\n    addArrowGenerations(generations: Node[]) {\r\n        const arrows: Arrow[] = [];\r\n        for(const generation of generations) {\r\n            GridBackground.doArrowGeneration(generation, arrows)\r\n        }\r\n        this.setState({\r\n            arrows: arrows\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Visualize both generation and arrows and update UI\r\n     * @param generation\r\n     */\r\n    visualizeGenerationAndArrows(generation: Node) {\r\n        this.setState(prevState => ({\r\n            visualization: GridBackground.doGeneration(\r\n                generation,\r\n                clone(prevState.visualization)\r\n            ),\r\n            arrows: GridBackground.doArrowGeneration(\r\n                generation,\r\n                prevState.arrows.slice()\r\n            )\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        // console.timeEnd('time');\r\n        // console.time('time');\r\n        return (\r\n            <div>\r\n                <div className='bg'>\r\n                    {this.renderViz()}\r\n                </div>\r\n                <svg\r\n                    xmlns='http://www.w3.org/2000/svg'\r\n                    className='bg-grid'\r\n                >\r\n                    <defs>\r\n                        <marker\r\n                            id='arrowhead'\r\n                            markerWidth='3'\r\n                            markerHeight='3'\r\n                            refX='0'\r\n                            refY='1.5'\r\n                            orient='auto'\r\n                            fill={ARROW_COLOR}\r\n                        >\r\n                            <polygon points='0 0, 3 1.5, 0 3'/>\r\n                        </marker>\r\n                    </defs>\r\n                    {this.renderArrows()}\r\n                </svg>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderArrows() {\r\n        const width = this.tileWidth;\r\n        const offset = width/2;\r\n        const arrows: JSX.Element[] = [];\r\n        for(let i = 0; i < this.state.arrows.length; i++) {\r\n            //calculate arrow position and dimensions\r\n            const arrow = this.state.arrows[i];\r\n            const first = arrow.from;\r\n            const second = arrow.to;\r\n            const firstX = first.x * width;\r\n            const firstY = first.y * width;\r\n            const secondX = second.x * width;\r\n            const secondY = second.y * width;\r\n            const offsetX = (secondX - firstX)/4;\r\n            const offsetY = (secondY - firstY)/4;\r\n            arrows.push(\r\n                <line\r\n                    key={'arrow ' + i}\r\n                    x1={firstX + offset + offsetX}\r\n                    y1={firstY + offset + offsetY}\r\n                    x2={secondX + offset - offsetX}\r\n                    y2={secondY + offset - offsetY}\r\n                    stroke={ARROW_COLOR}\r\n                    strokeWidth={2 * this.tileWidth/BASE_WIDTH}\r\n                    className='line-arrow'\r\n                    markerEnd='url(#arrowhead)'\r\n                />\r\n            );\r\n        }\r\n        return arrows;\r\n    }\r\n\r\n    renderViz() {\r\n        const tiles: JSX.Element[][] = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            const row: JSX.Element[] = [];\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                };\r\n                const viz = this.state.visualization[point.y][point.x];\r\n                if(viz !== EMPTY_NODE) {\r\n                    row.push(\r\n                        this.renderTile(point, viz)\r\n                    );\r\n                }\r\n            }\r\n            tiles.push(row);\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    renderTile(point: Point, color: string) {\r\n        const width = this.tileWidth;\r\n        const top = point.y * width;\r\n        const left = point.x * width;\r\n        const style = {\r\n            backgroundColor: color,\r\n            width: width + 'px',\r\n            height: width + 'px',\r\n            top: top,\r\n            left: left\r\n        };\r\n        return (\r\n            <div\r\n                key={point.x + ',' + point.y}\r\n                style={style}\r\n                className={this.tileClass}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction clone(array: string[][]) {\r\n    return array.map(\r\n        (arr) => arr.slice()\r\n    );\r\n}\r\n\r\nfunction pointsEqual(point1: Point, point2: Point) {\r\n    return point1.x === point2.x && point1.y === point2.y;\r\n}\r\n\r\nexport default GridBackground;","/**\r\n * Represents a point in 2d space\r\n * Immutable\r\n */\r\nexport interface Point\r\n{\r\n    readonly x: number;\r\n    readonly y: number;\r\n}\r\n\r\n/**\r\n * Represents the data inside a tile\r\n * Solid tiles cannot be passed while non solid ones can\r\n * pathCost stores how expensive it is to travel to the tile if it isn't solid\r\n * Immutable\r\n */\r\nexport interface TileData\r\n{\r\n    readonly pathCost: number;\r\n    readonly isSolid: boolean;\r\n}\r\n\r\n/**\r\n * Represents a tile on the Grid\r\n */\r\nexport interface Tile\r\n{\r\n    data: TileData;\r\n    readonly point: Point;\r\n}\r\n\r\n/**\r\n * Simple function to create a solid tile with path cost of 1\r\n * @param isSolid\r\n */\r\nexport function createTileData(isSolid: boolean): TileData {\r\n    return {\r\n        pathCost: 1,\r\n        isSolid: isSolid\r\n    }\r\n}\r\n\r\n","import {createTileData, Point, Tile, TileData} from './Components';\r\n\r\nexport interface Grid\r\n{\r\n    getWidth(): number;\r\n    getHeight(): number;\r\n    inBounds(point: Point): boolean;\r\n    get(point: Point): Tile;\r\n    isSolid(point: Point): boolean;\r\n    mutate(point: Point, data: TileData): void;\r\n    mutateTile(tile: Tile): void;\r\n    mutateDefault(point: Point, solid: boolean): void;\r\n    output(console: Console): void;\r\n    getJson(): string;\r\n    walkable(point: Point): boolean;\r\n    isEmpty(point: Point): boolean;\r\n    clone(): Grid;\r\n}\r\n\r\n/**\r\n * A square grid system that stores nodes in a matrix\r\n * Uses an x,y system where x corresponds to column of the matrix,\r\n * and y corresponds to the row of the matrix\r\n * TileData.ts should be treated like graph nodes\r\n */\r\nclass RectGrid implements Grid\r\n{\r\n    private readonly tiles: Tile[][];\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    /**\r\n     * Constructs a grid either with empty or predefined tiles\r\n     * @param width of the grid\r\n     * @param height of grid\r\n     * will perform a defensive copy to the grid\r\n     */\r\n    constructor(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.tiles = createEmptyGrid(width, height);\r\n    }\r\n\r\n    getWidth() {\r\n        return this.width;\r\n    }\r\n\r\n    getHeight() {\r\n        return this.height;\r\n    }\r\n\r\n    /**\r\n     * Checks if a given point is in bounds\r\n     * Other functions assume arguments are in bounds, this should be used\r\n     * if there is reasonable doubt about whether a point is in bounds\r\n     * @param point, to check\r\n     */\r\n    inBounds(point: Point) {\r\n        return point.x >= 0 && point.x < this.width && point.y >= 0 && point.y < this.height;\r\n    }\r\n\r\n    /**\r\n     * Retrieves a defensive tile for a position\r\n     * Defensive copy prevents this object from being mutated without calling\r\n     * a mutate function\r\n     * @param point, point to get\r\n     */\r\n    get(point: Point) {\r\n        return {\r\n            point: this.tiles[point.y][point.x].point,\r\n            data: this.tiles[point.y][point.x].data\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Mutates a position's tile to solid or non solid\r\n     * @param point, point to mutate\r\n     * @param data to mutate to\r\n     */\r\n    mutate(point: Point, data: TileData) {\r\n        this.tiles[point.y][point.x].data = data;\r\n    }\r\n\r\n    /**\r\n     * Mutates a a tile by point\r\n     * @param tile to mutate\r\n     */\r\n    mutateTile(tile: Tile) {\r\n        this.tiles[tile.point.y][tile.point.x].data = tile.data;\r\n    }\r\n\r\n    /**\r\n     * Mutate tile at point\r\n     * @param point to mutate at\r\n     * @param solid to determine what default tile to create\r\n     */\r\n    mutateDefault(point: Point, solid: boolean) {\r\n        this.mutate(\r\n            point, createTileData(solid)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Outputs the grid to a console\r\n     * @param console\r\n     */\r\n    output(console: Console) {\r\n        for(let y = 0; y < this.height; y++) {\r\n            let str = '';\r\n            for(let x = 0; x < this.width; x++) {\r\n                str += this.tiles[y][x].data.isSolid + ', ';\r\n            }\r\n            console.log(str);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns json of tiles\r\n     */\r\n    getJson() {\r\n        return JSON.stringify(this.tiles);\r\n    }\r\n\r\n    /**\r\n     * Determines if a tile can be walked on\r\n     * @param point\r\n     */\r\n    walkable(point: Point) {\r\n        return !this.tiles[point.y][point.x].data.isSolid;\r\n    }\r\n\r\n    /**\r\n     * Determines if a tile isSolid\r\n     * @param point\r\n     */\r\n    isSolid(point: Point) {\r\n        return this.tiles[point.y][point.x].data.isSolid;\r\n    }\r\n\r\n    /**\r\n     * Determines if a tile is \"empty\"\r\n     *  Meaning it isn't solid and it has a pathCost of 1\r\n     * @param point\r\n     */\r\n    isEmpty(point: Point) {\r\n        const data = this.tiles[point.y][point.x].data;\r\n        return data.pathCost === 1 && !data.isSolid\r\n    }\r\n\r\n    clone() {\r\n        const grid = new RectGrid(this.width, this.height);\r\n        for(let y = 0; y < grid.height; y++) {\r\n            for(let x = 0; x < grid.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                }\r\n                grid.mutateTile(this.get(point));\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a 2d matrix of empty nodes\r\n */\r\nfunction createEmptyGrid(width: number, height: number) {\r\n    const nodes: Tile[][] = [];\r\n    for(let y = 0; y < height; y++) {\r\n        const row: Tile[] = [];\r\n        for(let x = 0; x < width; x++) {\r\n            row.push({\r\n                point: {\r\n                    x: x, y: y\r\n                },\r\n                data: createTileData(false)\r\n            });\r\n        }\r\n        nodes.push(row);\r\n    }\r\n    return nodes;\r\n}\r\n\r\nexport default RectGrid;","import React from 'react';\r\nimport {Point} from '../../pathfinding/core/Components';\r\n\r\ninterface TileProps {\r\n    tileWidth: number,\r\n    point: Point,\r\n    color: string,\r\n}\r\n\r\nclass TileFg extends React.Component<TileProps>\r\n{\r\n    shouldComponentUpdate(nextProps: Readonly<TileProps>) {\r\n        const prevPoint = this.props.point;\r\n        const nextPoint = nextProps.point;\r\n        return prevPoint.y !== nextPoint.y ||\r\n            prevPoint.x !== nextPoint.x;\r\n    }\r\n\r\n    render() {\r\n        const size = this.props.tileWidth\r\n        const top = this.props.point.y * this.props.tileWidth;\r\n        const left = this.props.point.x * this.props.tileWidth;\r\n        return (\r\n            <div\r\n                style={{\r\n                    position: 'absolute',\r\n                    width: size,\r\n                    height: size,\r\n                    top: top,\r\n                    left: left,\r\n                    backgroundColor: this.props.color,\r\n                    display: 'block',\r\n                    borderColor: this.props.color\r\n                }}\r\n                className={'svg-tile tile-fg'}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default TileFg;","import React from 'react';\r\nimport {Point} from '../../pathfinding/core/Components';\r\n\r\ninterface SolidProps {\r\n    tileSize: number,\r\n    point: Point,\r\n    doTileAnimation: boolean\r\n}\r\n\r\nclass SolidFg extends React.Component<SolidProps>\r\n{\r\n    private readonly doTileAnimation: boolean;\r\n\r\n    constructor(props: SolidProps) {\r\n        super(props)\r\n        this.doTileAnimation = this.props.doTileAnimation;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                style={{\r\n                    position: 'absolute',\r\n                    left: this.props.point.x * this.props.tileSize,\r\n                    top: this.props.point.y * this.props.tileSize,\r\n                    width: this.props.tileSize,\r\n                    height: this.props.tileSize\r\n                }}\r\n                className={this.doTileAnimation ? 'solid-animation' : 'solid'}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default SolidFg;","export default __webpack_public_path__ + \"static/media/weight.cae5804e.svg\";","import React from 'react';\r\nimport {Point} from '../../pathfinding/core/Components';\r\nimport Weight from '../../../images/weight.svg';\r\n\r\ninterface WeightProps {\r\n    tileSize: number,\r\n    point: Point,\r\n    doTileAnimation: boolean\r\n}\r\n\r\nclass WeightFg extends React.Component<WeightProps>\r\n{\r\n    private readonly doTileAnimation: boolean;\r\n\r\n    constructor(props: WeightProps) {\r\n        super(props)\r\n        this.doTileAnimation = this.props.doTileAnimation;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                style={{\r\n                    left: this.props.point.x * this.props.tileSize,\r\n                    top: this.props.point.y * this.props.tileSize,\r\n                    width: this.props.tileSize,\r\n                    height: this.props.tileSize,\r\n                    backgroundImage: `url(${Weight})`,\r\n                    position: 'absolute'\r\n                }}\r\n                className={this.doTileAnimation ? 'weight-animation' : 'weight'}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeightFg;","import React, {RefObject} from 'react';\r\nimport {createTileData, Point, Tile, TileData} from '../../pathfinding/core/Components';\r\nimport RectGrid, {Grid} from '../../pathfinding/core/Grid';\r\nimport TileFg from './TileFg';\r\nimport SolidFg from './SolidFg';\r\nimport WeightFg from './WeightFg';\r\n\r\ninterface IProps {\r\n    tileSize: number,\r\n    tilesX: number,\r\n    tilesY: number,\r\n    onTilesDragged: () => void,\r\n    topMargin: number\r\n}\r\n\r\ninterface IState {\r\n    grid: Grid,\r\n    initial: Point,\r\n    goal: Point,\r\n    path: Tile[]\r\n}\r\n\r\nconst INITIAL_COLOR = 'rgb(131, 217, 52)';\r\nconst GOAL_COLOR = 'rgb(203, 75, 14)';\r\nconst ARROW_PATH_COLOR = 'rgb(73, 79, 250)';\r\n\r\nconst BASE_WIDTH = 27;\r\n\r\nclass GridForeground extends React.Component<IProps,IState>\r\n{\r\n    private svg: RefObject<SVGSVGElement> = React.createRef();\r\n\r\n    private tilePointer: TileData;\r\n\r\n    private drawing: boolean = false;\r\n    private erasing: boolean = false;\r\n    private draggingInitial: boolean = false;\r\n    private draggingGoal: boolean = false;\r\n    private disable: boolean = false;\r\n\r\n    private doTileAnimation: boolean = true;\r\n\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    private initialKey: number = 0;\r\n    private goalKey: number = 0;\r\n\r\n    /**\r\n     * Constructs a GridForeground with immutable height and width\r\n     * @param props\r\n     */\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.width = this.props.tilesX;\r\n        this.height = this.props.tilesY;\r\n        const end = this.calcEndPointInView();\r\n        this.tilePointer = createTileData(true);\r\n        this.state = {\r\n            grid: new RectGrid(this.width, this.height),\r\n            path: [],\r\n            initial: {\r\n                x: ((end.x)/3) >> 0,\r\n                y: ((end.y)/3) >> 0\r\n            },\r\n            goal: {\r\n                x: ((2*(end.x)/3) >> 0) - 1,\r\n                y: ((2*(end.y)/3) >> 0) - 1\r\n            }\r\n        }\r\n    }\r\n\r\n    changeTile(data: TileData) {\r\n        this.tilePointer = data;\r\n    }\r\n\r\n    calcEndPointInView() {\r\n        const xEnd = Math.round(window.innerWidth / this.props.tileSize);\r\n        const yEnd = Math.round((window.innerHeight - this.props.topMargin - 30) / this.props.tileSize);\r\n        return {\r\n            x: xEnd, y: yEnd\r\n        }\r\n    }\r\n\r\n    toggleDisable() {\r\n        this.disable = !this.disable;\r\n    }\r\n\r\n    getBoundingRect() {\r\n        return this.svg.current!.getBoundingClientRect();\r\n    }\r\n\r\n    mouseDown(e: MouseEvent) {\r\n        e.preventDefault();\r\n        const bounds = this.getBoundingRect();\r\n        this.onPress(e.clientX - bounds.left, e.clientY - bounds.top, e.button);\r\n    }\r\n\r\n    mouseUp(e: MouseEvent) {\r\n        e.preventDefault();\r\n        if(isControlKey(e.button)) {\r\n            this.draggingGoal = false;\r\n            this.draggingInitial = false;\r\n            this.drawing = false;\r\n            this.erasing = false;\r\n        }\r\n    }\r\n\r\n    mouseMove(e: MouseEvent) {\r\n        const bounds = this.getBoundingRect();\r\n        this.onDrag(e.clientX - bounds.left, e.clientY - bounds.top);\r\n    }\r\n\r\n    touchStart(e: TouchEvent) {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        const bounds = this.getBoundingRect();\r\n        this.onPress(touch.clientX - bounds.left, touch.clientY - bounds.top, 0);\r\n    }\r\n\r\n    touchMove(e: TouchEvent) {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        const bounds = this.getBoundingRect();\r\n        this.onDrag(touch.clientX - bounds.left, touch.clientY - bounds.top);\r\n    }\r\n\r\n    onEndingEvent(e: Event) {\r\n        e.preventDefault();\r\n        this.draggingGoal = false;\r\n        this.draggingInitial = false;\r\n        this.drawing = false;\r\n        this.erasing = false;\r\n    }\r\n\r\n    /**\r\n     * Responds to the event thrown at screen coordinates on press\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     * @param button\r\n     */\r\n    onPress(xCoordinate: number, yCoordinate: number, button: number) {\r\n        const point = this.calculatePoint(xCoordinate,yCoordinate);\r\n        if(isControlKey(button)) {\r\n            if(pointsEqual(point, this.state.initial)) {\r\n                this.draggingInitial = true;\r\n            } else if(pointsEqual(point, this.state.goal)) {\r\n                this.draggingGoal = true;\r\n            } else if(!this.disable) {\r\n                if(this.state.grid.isEmpty(point)) {\r\n                    this.drawing = true;\r\n                    this.drawTile(point);\r\n                } else {\r\n                    this.erasing = true;\r\n                    this.eraseTile(point);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Responds to the event thrown at screen coordinates on drag/move\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     */\r\n    onDrag(xCoordinate: number, yCoordinate: number) {\r\n        const point = this.calculatePoint(xCoordinate,yCoordinate);\r\n        if(this.draggingInitial) {\r\n            this.moveInitial(point);\r\n        } else if(this.draggingGoal) {\r\n            this.moveGoal(point);\r\n        } else if(!pointsEqual(point, this.state.initial)\r\n            && !pointsEqual(point, this.state.goal) && !this.disable)\r\n        {\r\n            if(this.drawing) {\r\n                this.drawTile(point);\r\n            } else if(this.erasing) {\r\n                this.eraseTile(point);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw an entire new grid on the foreground with disabled animations\r\n     * @param grid\r\n     */\r\n    drawGrid(grid: Grid) {\r\n        this.doTileAnimation = false;\r\n        this.setState({\r\n            grid: grid\r\n        }, () => this.doTileAnimation = true)\r\n    }\r\n\r\n    /**\r\n     * Draw tile at point\r\n     * @param point\r\n     */\r\n    drawTile(point: Point) {\r\n        const grid = this.state.grid.clone();\r\n        if(grid.inBounds(point)) {\r\n            grid.mutateTile({\r\n                point: point,\r\n                data: this.tilePointer\r\n            });\r\n        }\r\n        this.setState({\r\n            grid: grid\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if a node is visualized, then changes the tile to empty if it isn't\r\n     * @param point\r\n     */\r\n    eraseTile(point: Point) {\r\n        const grid = this.state.grid.clone();\r\n        if(grid.inBounds(point)) {\r\n            grid.mutateDefault(point, false);\r\n        }\r\n        this.setState({\r\n            grid: grid\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clear grid in state\r\n     */\r\n    clearTiles() {\r\n        const grid = this.state.grid.clone();\r\n        for(let y = 0; y < this.height; y++) {\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                }\r\n                grid.mutateDefault(point, false);\r\n            }\r\n        }\r\n        this.setState({\r\n            grid: grid\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Moves initial to a new point\r\n     * @param point\r\n     */\r\n    moveInitial(point: Point) {\r\n        if(this.canMoveEndPoint(point)) {\r\n            this.initialKey++;\r\n            this.setState({\r\n                initial: point\r\n            }, () => this.props.onTilesDragged());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves goal to a new point\r\n     * @param point\r\n     */\r\n    moveGoal(point: Point) {\r\n        if(this.canMoveEndPoint(point)) {\r\n            this.goalKey++;\r\n            this.setState({\r\n                goal: point\r\n            }, () => this.props.onTilesDragged());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if we can move any of the end points (goal or initial) to that point\r\n     * @param point\r\n     */\r\n    canMoveEndPoint(point: Point) {\r\n        return this.state.grid.inBounds(point)\r\n            && this.state.grid.isEmpty(point)\r\n            && !pointsEqual(this.state.initial, point)\r\n            && !pointsEqual(this.state.goal, point)\r\n            && !this.disable;\r\n    }\r\n\r\n    /**\r\n     * Draw a path onto the grid\r\n     * @param path\r\n     */\r\n    drawPath(path: Tile[]) {\r\n        this.setState({\r\n            path: path.slice()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Erase path from the grid\r\n     */\r\n    erasePath() {\r\n        this.setState({\r\n            path: []\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Converts real screen x,y coordinates into\r\n     * a 2d point position on the grid\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     */\r\n    calculatePoint(xCoordinate: number, yCoordinate: number) {\r\n        return {\r\n            x: Math.floor(xCoordinate/this.props.tileSize),\r\n            y: Math.floor(yCoordinate/this.props.tileSize)\r\n        }\r\n    }\r\n\r\n    resetPoints() {\r\n        this.initialKey++;\r\n        this.goalKey++;\r\n        const end = this.calcEndPointInView();\r\n        this.setState({\r\n            initial: {\r\n                x: ((end.x)/3) >> 0,\r\n                y: ((end.y)/3) >> 0\r\n            },\r\n            goal: {\r\n                x: ((2*(end.x)/3) >> 0) - 1,\r\n                y: ((2*(end.y)/3) >> 0) - 1\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        // console.timeEnd('time');\r\n        // console.time('time');\r\n        return (\r\n            <div>\r\n                <div className='endpoint-tiles-table'>\r\n                    {this.renderEndTile(this.state.initial, INITIAL_COLOR,'initial' + this.initialKey)}\r\n                    {this.renderEndTile(this.state.goal, GOAL_COLOR,'goal' + this.goalKey)}\r\n                </div>\r\n                <svg\r\n                    ref={this.svg}\r\n                    xmlns='http://www.w3.org/2000/svg'\r\n                    className='arrow-grid'\r\n                >\r\n                    <defs>\r\n                        <marker\r\n                            id='arrowhead-path'\r\n                            markerWidth='3'\r\n                            markerHeight='3'\r\n                            refX='0'\r\n                            refY='1.5'\r\n                            orient='auto'\r\n                            fill={ARROW_PATH_COLOR}\r\n                        >\r\n                            <polygon points='0 0, 3 1.5, 0 3'/>\r\n                        </marker>\r\n                    </defs>\r\n                    {this.renderPath()}\r\n                </svg>\r\n                <div\r\n                    className='tiles-table'\r\n                    onContextMenu={e => e.preventDefault()}\r\n                    onMouseDown={e => this.mouseDown(e.nativeEvent)}\r\n                    onMouseUp={e => this.mouseUp(e.nativeEvent)}\r\n                    onMouseMove={e => this.mouseMove(e.nativeEvent)}\r\n                    onMouseLeave={e => this.onEndingEvent(e.nativeEvent)}\r\n                    onTouchStart={e => this.touchStart(e.nativeEvent)}\r\n                    onTouchMoveCapture={e => this.touchMove(e.nativeEvent)}\r\n                    onTouchEnd={e => this.onEndingEvent(e.nativeEvent)}\r\n                    onTouchCancel={e => this.onEndingEvent(e.nativeEvent)}\r\n                >\r\n                    {this.renderTilesTable()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderPath() {\r\n        const lines: JSX.Element[] = [];\r\n        for(let i = 0; i < this.state.path.length-1; i++) {\r\n            const first = this.state.path[i].point;\r\n            const second = this.state.path[i+1].point;\r\n            lines.push(this.renderPathArrow(i, first, second));\r\n        }\r\n        return lines;\r\n    }\r\n\r\n    renderPathArrow(index: number, first: Point, second: Point) {\r\n        const width = this.props.tileSize;\r\n        const offset = width/2;\r\n        const firstX = first.x * width;\r\n        const firstY = first.y * width;\r\n        const secondX = second.x * width;\r\n        const secondY = second.y * width;\r\n        const offsetX = (secondX - firstX)/4;\r\n        const offsetY = (secondY - firstY)/4;\r\n        return (\r\n            <line\r\n                key={'path ' + index}\r\n                x1={firstX + offset + offsetX}\r\n                y1={firstY + offset + offsetY}\r\n                x2={secondX + offset - offsetX}\r\n                y2={secondY + offset - offsetY}\r\n                stroke={ARROW_PATH_COLOR}\r\n                strokeWidth={2 * this.props.tileSize/BASE_WIDTH}\r\n                className='line'\r\n                markerEnd='url(#arrowhead-path)'\r\n            />\r\n        );\r\n    }\r\n\r\n    renderTilesTable() {\r\n        const tiles: JSX.Element[] = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                }\r\n                const cost = this.state.grid.get(point).data.pathCost;\r\n                if(this.state.grid.isSolid(point)) {\r\n                    //render a solid tile div\r\n                    tiles.push(\r\n                        <SolidFg\r\n                            key={x + ',' + y}\r\n                            point={point}\r\n                            tileSize={this.props.tileSize}\r\n                            doTileAnimation={this.doTileAnimation}\r\n                        />\r\n                    );\r\n                } else if(cost > 1) {\r\n                    //render a weight svg\r\n                    tiles.push(\r\n                        <WeightFg\r\n                            key={x + ',' + y}\r\n                            point={point}\r\n                            tileSize={this.props.tileSize}\r\n                            doTileAnimation={this.doTileAnimation}\r\n                        />\r\n                    );\r\n                    //render a div containing the cost as text\r\n                    tiles.push(\r\n                        this.renderWeightText(\r\n                            point,\r\n                            cost,\r\n                            x + ',' + y + ' text'\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    renderWeightText(point: Point, cost: number, key: string) {\r\n        return (\r\n            <div\r\n                key={key}\r\n                style={{\r\n                    left: point.x * this.props.tileSize,\r\n                    top: point.y * this.props.tileSize,\r\n                    width: this.props.tileSize,\r\n                    height: this.props.tileSize,\r\n                    position: 'absolute',\r\n                    color: 'white',\r\n                    fontSize: this.props.tileSize / 2.1,\r\n                    paddingTop: this.props.tileSize / 3.70,\r\n                    textAlign: 'center',\r\n                    cursor: 'default'\r\n                }}\r\n            >\r\n                {cost}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderEndTile(point: Point, color: string, key: string) {\r\n        return (\r\n            <TileFg\r\n                key={key}\r\n                point={point}\r\n                tileWidth={this.props.tileSize}\r\n                color={color}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction pointsEqual(point1: Point, point2: Point) {\r\n    return point1.x === point2.x && point1.y === point2.y;\r\n}\r\n\r\nfunction isControlKey(button: number) {\r\n    //right or left mouse\r\n    return button === 0 || button === 2;\r\n}\r\n\r\nexport default GridForeground;","import React, {RefObject} from 'react';\r\n\r\ninterface IProps {\r\n    algorithm: string,\r\n    length: number,\r\n    cost: number,\r\n    time: number,\r\n    nodes: number\r\n}\r\n\r\nclass StatsPanel extends React.Component<IProps>\r\n{\r\n    private readonly textLog: RefObject<HTMLTextAreaElement> = React.createRef();\r\n\r\n    componentDidUpdate() {\r\n        this.textLog.current!.scrollTop = this.textLog.current!.scrollHeight;\r\n    }\r\n\r\n    getHeight() {\r\n        //top border: 1\r\n        return this.textLog.current!.clientHeight + 1;\r\n    }\r\n\r\n    render() {\r\n        const time = precise(this.props.time);\r\n        const text = this.props.algorithm === '' ? '' :\r\n            this.props.algorithm +\r\n            ' visited ' +\r\n            this.props.nodes +\r\n            ' nodes in ' +\r\n            time +\r\n            ' ms. Path length = ' +\r\n            this.props.length +\r\n            '. Path cost = ' +\r\n            this.props.cost +\r\n            '. ';\r\n        return(\r\n            <textarea\r\n                tabIndex={-1}\r\n                ref={this.textLog}\r\n                readOnly={true}\r\n                className='stats-text-area no-select'\r\n                value={text}\r\n                unselectable={'on'}\r\n                onDrop={() => false}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction precise(x: number) {\r\n    return x.toFixed(2);\r\n}\r\n\r\nexport default StatsPanel;","import React from 'react';\r\nimport {Point} from '../../pathfinding/core/Components';\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    tilesX: number,\r\n    tilesY: number\r\n}\r\n\r\nclass GridStaticTiles extends React.Component<IProps>\r\n{\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n    private readonly tileWidth: number;\r\n\r\n    /**\r\n     * Constructs a GridBackground with immutable height and width\r\n     * @param props\r\n     */\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.width = this.props.tilesX;\r\n        this.height = this.props.tilesY;\r\n        this.tileWidth = this.props.tileWidth;\r\n    }\r\n\r\n    //should only render once, and never again\r\n    componentDidUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='bg'>\r\n                    {this.renderTiles()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderTiles() {\r\n        const tiles: JSX.Element[][] = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            const row: JSX.Element[] = [];\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                };\r\n                row.push(\r\n                    this.renderTile(point)\r\n                );\r\n            }\r\n            tiles.push(row);\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    renderTile(point: Point) {\r\n        const width = this.tileWidth;\r\n        const top = point.y * this.tileWidth;\r\n        const left = point.x * this.tileWidth;\r\n        const style = {\r\n            backgroundColor: 'white',\r\n            width: width + 'px',\r\n            height: width + 'px',\r\n            top: top,\r\n            left: left\r\n        };\r\n        return (\r\n            <div\r\n                key={point.x + ',' + point.y}\r\n                style={style}\r\n                className='tile'\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default GridStaticTiles;","import {Point, Tile} from './Components';\r\nimport Navigator, {UNIT} from './Navigator';\r\n\r\n/**\r\n * Concretion of a Plus Navigator for a grid\r\n * Allows movement akin to a 'plus' symbol\r\n */\r\nclass PlusNavigator extends Navigator\r\n{\r\n    /**\r\n     * Adds the neighbors of a point to the left, right, top and down\r\n     * @param point\r\n     */\r\n    neighbors(point: Point) {\r\n        const tiles: Tile[] = [];\r\n        if(point.x + UNIT < this.grid.getWidth()) {\r\n            const tile = this.grid.get({\r\n                x: point.x + UNIT,\r\n                y: point.y\r\n            })\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.y + UNIT < this.grid.getHeight()) {\r\n            const tile = this.grid.get({\r\n                x: point.x,\r\n                y: point.y + UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.x - UNIT >= 0) {\r\n            const tile = this.grid.get({\r\n                x: point.x - UNIT,\r\n                y: point.y\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.y - UNIT >= 0) {\r\n            const tile = this.grid.get({\r\n                x: point.x,\r\n                y: point.y - UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    /**\r\n     * Step cost function that works by getting the pathCost stored in the grid\r\n     * from one point a to b\r\n     * @param a\r\n     * @param b to point to travel to\r\n     */\r\n    cost(a: Point, b: Point) {\r\n        return this.grid.get(b).data.pathCost;\r\n    }\r\n\r\n    getType() {\r\n        return 'plus';\r\n    }\r\n}\r\n\r\nexport default PlusNavigator;","import {Grid} from './Grid';\r\nimport {Point, Tile} from './Components';\r\n\r\nexport const UNIT = 1; //number of tiles we can move at once\r\n\r\n/**\r\n * Describes an abstract navigator for a grid\r\n * Provides graph-like traversal for the grid\r\n * Determines where we can travel to from a certain point,\r\n * whether we have reached a destination, and the cost to\r\n * travel to a certain point\r\n */\r\nabstract class Navigator\r\n{\r\n    protected readonly grid: Grid;\r\n\r\n    constructor(grid: Grid) {\r\n        this.grid = grid;\r\n    }\r\n\r\n    getGrid() {\r\n        return this.grid;\r\n    }\r\n\r\n    /**\r\n     * Goal check function: Checks if two points are equal\r\n     * @param a\r\n     * @param b\r\n     */\r\n    equals(a: Point, b: Point) {\r\n        return a.x === b.x && a.y === b.y;\r\n    }\r\n\r\n    /**\r\n     * Step cost function from a to b\r\n     * @param a\r\n     * @param b to point to travel to\r\n     */\r\n    abstract cost(a: Point, b: Point): number;\r\n\r\n    /**\r\n     * Neighbors function: Gets the available neighbors for a point in a grid we can make\r\n     * in a given move\r\n     * @param point\r\n     */\r\n    abstract neighbors(point: Point): Tile[];\r\n\r\n    abstract getType(): string;\r\n}\r\n\r\nexport default Navigator;","import {Point} from '../core/Components';\r\n\r\nexport type HeuristicFunc = (a: Point, b: Point) => number;\r\n\r\nexport function manhattan(a: Point, b: Point) {\r\n    const dx = Math.abs(a.x - b.x) ;\r\n    const dy = Math.abs(a.y - b.y);\r\n    return dx + dy;\r\n}\r\n\r\nexport function euclidean(a: Point, b: Point) {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n}\r\n\r\nexport function octile(a: Point, b: Point) {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.SQRT2 * Math.min(dx, dy) + Math.abs(dx - dy);\r\n}\r\n\r\nexport function chebyshev(a: Point, b: Point) {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.max(dx, dy);\r\n}\r\n\r\nexport function nullHeuristic() {\r\n    return 0;\r\n}","import {Point, Tile} from '../core/Components';\r\nimport Navigator from '../core/Navigator';\r\nimport {Node} from './Node';\r\n\r\n/**\r\n * Pathfinder performs algorithms operations on the grid\r\n * Uses the navigator rank and expand nodes\r\n */\r\nabstract class Pathfinder\r\n{\r\n    protected recentSearch: Node[] = [];\r\n    protected navigator: Navigator;\r\n\r\n    constructor(navigator: Navigator) {\r\n        this.navigator = navigator;\r\n    }\r\n\r\n    setNavigator(navigator: Navigator) {\r\n        this.navigator = navigator;\r\n    }\r\n\r\n    getNavigator() {\r\n        return this.navigator;\r\n    }\r\n\r\n    getRecentNodes() {\r\n        return this.recentSearch.length;\r\n    }\r\n\r\n    clearRecentSearch() {\r\n        this.recentSearch = [];\r\n    }\r\n\r\n    getRecentGenerations() {\r\n        return this.recentSearch.slice();\r\n    }\r\n\r\n    protected addRecent(node: Node) {\r\n        this.recentSearch.push(node);\r\n    }\r\n\r\n    abstract getAlgorithmName(): string;\r\n\r\n    /**\r\n     * Finds the best path between initial and goal on the grid\r\n     * and returns it in an array\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    abstract findPath(initial: Point, goal: Point): Tile[];\r\n}\r\n\r\n/**\r\n * Reconstructs the path from a tree, given the bottomLeaf, and\r\n * returns the shortest path in an array\r\n * @param bottomLeaf bottom of the tree to start from\r\n */\r\nexport function reconstructPath(bottomLeaf: Node) {\r\n    return reconstructPathReversed(bottomLeaf).reverse();\r\n}\r\n\r\n/**\r\n * Reconstructs the path from a tree, given the bottomLeaf, and\r\n * returns the shortest path in an array\r\n * @param bottomLeaf bottom of the tree to start from\r\n */\r\nexport function reconstructPathReversed(bottomLeaf: Node) {\r\n    const path: Tile[] = [];\r\n    while(bottomLeaf.parent !== null) {\r\n        path.push(bottomLeaf.tile);\r\n        bottomLeaf = bottomLeaf.parent;\r\n    }\r\n    return path;\r\n}\r\n\r\nexport default Pathfinder;","import {Tile} from '../core/Components';\r\n\r\n/**\r\n * Represents a search Tree Node\r\n */\r\nexport class Node\r\n{\r\n    parent: Node | null = null; //parent node\r\n    readonly children: Node[] = [];\r\n    readonly tile: Tile; //stores a graph node\r\n\r\n    constructor(tile: Tile) {\r\n        this.tile = tile;\r\n    }\r\n\r\n    addChild(child: Node) {\r\n        child.parent = this;\r\n        this.children.push(child);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents an heuristic weighted aStar search tree node\r\n */\r\nexport class AStarNode extends Node\r\n{\r\n    readonly g: number; //path cost\r\n    readonly fScore: number; //heuristic\r\n\r\n    constructor(tile: Tile, g: number, fScore: number) {\r\n        super(tile);\r\n        this.g = g;\r\n        this.fScore = fScore;\r\n    }\r\n\r\n    f() {\r\n        return this.fScore;\r\n    }\r\n}\r\n","import {Point} from '../core/Components';\r\n\r\n/**\r\n * A simple data structure that keeps track of whether keys have been added to it\r\n */\r\nexport class HashSet\r\n{\r\n    private map: {[key: string]: boolean | undefined} = {};\r\n\r\n    add(key: string) {\r\n        this.map[key] = true;\r\n    }\r\n\r\n    remove(key: string) {\r\n        this.map[key] = undefined;\r\n    }\r\n\r\n    has(key: string) {\r\n        return this.map[key] !== undefined;\r\n    }\r\n\r\n    clear() {\r\n        this.map = {};\r\n    }\r\n}\r\n\r\n/**\r\n * A simple data structure that stores a type at a key\r\n */\r\nexport class HashTable<Value>\r\n{\r\n    private map: {[key: string]: Value | undefined} = {};\r\n\r\n    add(key: string, data: Value) {\r\n        this.map[key] = data;\r\n    }\r\n\r\n    remove(key: string) {\r\n        this.map[key] = undefined;\r\n    }\r\n\r\n    get(key: string) {\r\n        return this.map[key];\r\n    }\r\n\r\n    has(key: string) {\r\n        return this.map[key] !== undefined;\r\n    }\r\n\r\n    clear() {\r\n        this.map = {};\r\n    }\r\n}\r\n\r\n/**\r\n * Serialize point into a unique string\r\n * @param point\r\n */\r\nexport function stringify(point: Point) {\r\n    return 'x' + point.x + 'y' + point.y;\r\n}","/**\r\n * A compare function to determine if a is 'better' (deserves a higher position) than b\r\n */\r\nexport type Comparator<E> = (a: E, b: E) => boolean\r\n\r\n/**\r\n * Minimalist Implementation of the heap data structure as an array\r\n */\r\nclass Heap<E>\r\n{\r\n    private elements: E[] = [];\r\n    readonly compare: Comparator<E>;\r\n\r\n    constructor(compare: Comparator<E>) {\r\n        this.compare = compare;\r\n    }\r\n\r\n    /**\r\n     * Returns the size of the heap\r\n     */\r\n    getSize() {\r\n        return this.elements.length;\r\n    }\r\n\r\n    /**\r\n     * Checks if heap is empty\r\n     */\r\n    isEmpty() {\r\n        return this.elements.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Add a new element to the heap\r\n     * @param e\r\n     */\r\n    push(e: E) {\r\n        this.elements.push(e);\r\n        this.siftUp(this.elements.length-1); //last element\r\n    }\r\n\r\n    /**\r\n     * Returns the top of the heap without removing it\r\n     * Fails if heap is empty\r\n     */\r\n    peek() {\r\n        return this.elements[0];\r\n    }\r\n\r\n    /**\r\n     * Returns the top of the heap and removes it\r\n     * Fails if heap is empty\r\n     */\r\n    pop() {\r\n        const val = this.peek();\r\n        this.move(this.elements.length - 1, 0);\r\n        this.elements.pop();\r\n        this.siftDown(0);\r\n        return val;\r\n    }\r\n\r\n    /**\r\n     * Clear the heap\r\n     */\r\n    clear() {\r\n        this.elements = [];\r\n    }\r\n\r\n    /**\r\n     * Sifts a new element that is out of order up to the right position\r\n     * @param pos of new element\r\n     */\r\n    private siftUp(pos: number) {\r\n        let parent = ((pos - 1) / 2) >> 0; //integer division\r\n        while(parent >= 0) {\r\n            //if the current position is better than parent\r\n            if(this.compare(this.elements[pos], this.elements[parent])) {\r\n                //then current position with parent and move to next\r\n                this.swap(pos, parent);\r\n                pos = parent;\r\n                parent = ((pos - 1) / 2) >> 0;\r\n            } else {\r\n                //otherwise stop\r\n                parent = -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sifts a new element that is out of order down to the right position\r\n     * @param pos of new element\r\n     */\r\n    private siftDown(pos: number) {\r\n        const left = 2 * pos + 1;\r\n        const right = 2 * pos + 2;\r\n        //stop if the children are out of bounds\r\n        if(left >= this.elements.length) {\r\n            return;\r\n        }\r\n        //find the better child\r\n        const child = (right >= this.elements.length || this.compare(this.elements[left], this.elements[right]))\r\n            ? left : right;\r\n        //continues to sift down if the child is better than the current position\r\n        if(this.compare(this.elements[child], this.elements[pos])) {\r\n            this.swap(child, pos);\r\n            this.siftDown(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Internal move function\r\n     * @param from\r\n     * @param to\r\n     */\r\n    private move(from: number, to: number) {\r\n        this.elements[to] = this.elements[from];\r\n    }\r\n\r\n    /**\r\n     * Internal swap function\r\n     * @param a\r\n     * @param b\r\n     */\r\n    private swap(a: number, b: number) {\r\n        let val = this.elements[a];\r\n        this.elements[a] = this.elements[b];\r\n        this.elements[b] = val;\r\n    }\r\n}\r\n\r\nexport default Heap;","import Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {euclidean, HeuristicFunc} from './Heuristics';\r\nimport {AStarNode} from './Node';\r\nimport {Point, Tile} from '../core/Components';\r\nimport Navigator from '../core/Navigator';\r\nimport {HashSet, HashTable, stringify} from '../structures/Hash';\r\nimport Heap from '../structures/Heap';\r\n\r\nclass AStarPathfinder extends Pathfinder\r\n{\r\n    private readonly heuristicFunc: HeuristicFunc = (a: Point, b: Point) => euclidean(a,b);\r\n    private readonly p: number; //tie breaker\r\n\r\n    constructor(navigator: Navigator, func?: HeuristicFunc) {\r\n        super(navigator);\r\n        const grid = this.getNavigator().getGrid();\r\n        //minimum cost of taking one step / expected maximum path length\r\n        this.p = 1/(grid.getWidth() * grid.getHeight());\r\n        if(func !== undefined) {\r\n            this.heuristicFunc = func;\r\n        }\r\n    }\r\n\r\n    getAlgorithmName() {\r\n        return 'A*';\r\n    }\r\n\r\n    /**\r\n     * Performs aStar algorithm on the grid given an initial and goal point\r\n     * Always returns the shortest path, and performs well on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point) {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const openFrontier = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const closedSet = new HashSet();\r\n        const openSet = new HashTable<number>();\r\n        const root = new AStarNode(\r\n            grid.get(initial), 0, 0\r\n        );\r\n        openFrontier.push(root);\r\n        openSet.add(stringify(initial), root.g);\r\n        while (!openFrontier.isEmpty()) {\r\n            const currentNode = openFrontier.pop();\r\n            const currentPoint = currentNode.tile.point;\r\n            const currentKey = stringify(currentPoint);\r\n            openSet.remove(currentKey);\r\n            closedSet.add(currentKey);\r\n            this.addRecent(currentNode);\r\n            if (this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            for (const neighbor of this.navigator.neighbors(currentPoint)) {\r\n                const neighborPoint = neighbor.point;\r\n                const neighborKey = stringify(neighborPoint);\r\n                if(closedSet.has(neighborKey)) {\r\n                    continue;\r\n                }\r\n                const g = currentNode.g + this.stepCost(currentPoint, neighborPoint);\r\n                const f = g + this.heuristic(neighborPoint, goal);\r\n                if (!openSet.has(neighborKey) || g < openSet.get(neighborKey)!) {\r\n                    const neighborNode = new AStarNode(\r\n                        neighbor, g, f\r\n                    );\r\n                    currentNode.addChild(neighborNode);\r\n                    openFrontier.push(neighborNode);\r\n                    openSet.add(neighborKey, neighborNode.g);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Heuristic function used to estimate distance between points a and b\r\n     * Includes tie breaker to prevent exploring lots of identical paths\r\n     * @param a\r\n     * @param b\r\n     */\r\n    heuristic(a: Point, b: Point) {\r\n        return this.heuristicFunc(a, b) * (1 + this.p);\r\n    }\r\n\r\n    /**\r\n     * The step-cost function to be used, calculating the cost from\r\n     * currentPoint to neighborPoint. Uses the stepCost function provided by the\r\n     * navigator by default but can be overridden\r\n     * @param currentPoint\r\n     * @param neighborPoint\r\n     */\r\n    stepCost(currentPoint: Point, neighborPoint: Point) {\r\n        return this.navigator.cost(currentPoint, neighborPoint);\r\n    }\r\n}\r\n\r\nexport default AStarPathfinder;","import Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {Node} from './Node';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {HashSet, stringify} from '../structures/Hash';\r\n\r\nclass BFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName() {\r\n        return 'Breadth First Search';\r\n    }\r\n\r\n    /**\r\n     * Implementation of BFS to find the shortest path from initial to point\r\n     * Doesn't always return the shortest path, and performs poorly on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point) {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const frontier: Node[] = []; //fifo, stores nodes on the frontier\r\n        const visited = new HashSet();\r\n        const root = new Node(grid.get(initial));\r\n        frontier.push(root); //enqueue\r\n        visited.add(stringify(initial));\r\n        while(frontier.length !== 0) { //not empty\r\n            const currentNode = frontier.shift()!; //dequeue\r\n            const currentPoint = currentNode.tile.point;\r\n            this.addRecent(currentNode);\r\n            if(this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            for(const neighbor of this.navigator.neighbors(currentPoint)) {\r\n                const neighborKey = stringify(neighbor.point);\r\n                if(!visited.has(neighborKey)) {\r\n                    const neighborNode = new Node(neighbor);\r\n                    currentNode.addChild(neighborNode);\r\n                    frontier.push(neighborNode); //enqueue\r\n                    visited.add(neighborKey);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default BFSPathfinder;","/**\r\n * Stack node\r\n */\r\nclass Node<E>\r\n{\r\n    next: Node<E> | null = null;\r\n    data: E;\r\n\r\n    constructor(data: E) {\r\n        this.data = data;\r\n    }\r\n}\r\n\r\n/**\r\n * Minimalist Implementation of the stack data structure\r\n */\r\nclass Stack<E>\r\n{\r\n    private top: Node<E> | null = null;\r\n    private size: number = 0;\r\n\r\n    peek() {\r\n        return this.top != null ? this.top.data : undefined;\r\n    }\r\n\r\n    push(e: E) {\r\n        const node = new Node(e);\r\n        node.next = this.top;\r\n        this.top = node;\r\n        this.size++;\r\n    }\r\n\r\n    pop() {\r\n        const top = this.peek();\r\n        if(this.top != null) {\r\n            this.top = this.top.next;\r\n            this.size--;\r\n        }\r\n        return top;\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.size === 0;\r\n    }\r\n\r\n    getSize() {\r\n        return this.size;\r\n    }\r\n}\r\n\r\nexport default Stack;","import Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {Node} from './Node';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {HashSet, stringify} from '../structures/Hash';\r\nimport Stack from '../structures/Stack';\r\n\r\nclass DFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName() {\r\n        return 'Depth First Search';\r\n    }\r\n\r\n    /**\r\n     * Calls DFS between a start and goal point, will typically not find the 'Best' path,\r\n     * and will instead find the best path capable for the algorithm\r\n     * As this algorithm is non optimal it should only be used for educational purposes\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point) {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const root = new Node(grid.get(initial));\r\n        const frontier = new Stack<Node>();\r\n        frontier.push(root);\r\n        const visited = new HashSet();\r\n        while(!frontier.isEmpty()) {\r\n            const currentNode = frontier.pop()!;\r\n            const currentPoint = currentNode.tile.point;\r\n            visited.add(stringify(currentPoint));\r\n            this.addRecent(currentNode);\r\n            if(this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            const neighbors = this.navigator.neighbors(currentPoint).reverse();\r\n            for(const neighbor of neighbors){\r\n                const neighborKey = stringify(neighbor.point);\r\n                if(!visited.has(neighborKey)) {\r\n                    const neighborNode = new Node(neighbor);\r\n                    currentNode.addChild(neighborNode);\r\n                    frontier.push(neighborNode);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default DFSPathfinder;\r\n","import Pathfinder, {reconstructPath, reconstructPathReversed} from './Pathfinder';\r\nimport {euclidean, HeuristicFunc} from './Heuristics';\r\nimport {AStarNode} from './Node';\r\nimport {Point, Tile} from '../core/Components';\r\nimport Navigator from '../core/Navigator';\r\nimport {HashSet, HashTable, stringify} from '../structures/Hash';\r\nimport Heap from '../structures/Heap';\r\n\r\ninterface ControlStructures {\r\n    openSet: HashTable<AStarNode>,\r\n    closedSet: HashSet,\r\n    openFrontier: Heap<AStarNode>\r\n}\r\n\r\nclass BiAStarPathfinder extends Pathfinder\r\n{\r\n    private readonly heuristic: HeuristicFunc = (a: Point, b: Point) => euclidean(a,b);\r\n\r\n    constructor(navigator: Navigator, func?: HeuristicFunc) {\r\n        super(navigator);\r\n        if(func !== undefined) {\r\n            this.heuristic = func;\r\n        }\r\n    }\r\n\r\n    getAlgorithmName() {\r\n        return 'Bidirectional A*';\r\n    }\r\n\r\n    /**\r\n     * Performs aStar algorithm on the grid given an initial and goal point\r\n     * Doesn't always returns the shortest path, but performs well on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point) {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const closedSet = new HashSet();\r\n        const startOpenFrontier = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const startOpenSet = new HashTable<AStarNode>();\r\n        const endOpenFrontier = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const endOpenSet = new HashTable<AStarNode>();\r\n        const initialRoot = new AStarNode(\r\n            grid.get(initial), 0, 0\r\n        );\r\n        startOpenFrontier.push(initialRoot);\r\n        startOpenSet.add(stringify(initial), initialRoot);\r\n        const goalRoot = new AStarNode(\r\n            grid.get(goal), 0, 0\r\n        );\r\n        endOpenFrontier.push(goalRoot);\r\n        endOpenSet.add(stringify(goal), goalRoot);\r\n        while (!startOpenFrontier.isEmpty() && !endOpenFrontier.isEmpty()) {\r\n            //expand startOpenFrontier\r\n            const startCurrentNode = startOpenFrontier.pop();\r\n            const startCurrentPoint = startCurrentNode.tile.point;\r\n            const startCurrentPointKey = stringify(startCurrentPoint);\r\n            startOpenSet.remove(startCurrentPointKey);\r\n            closedSet.add(startCurrentPointKey);\r\n            this.addRecent(startCurrentNode);\r\n            if(endOpenSet.has(startCurrentPointKey)) {\r\n                if(startCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startCurrentNode.parent\r\n                    ).concat(reconstructPathReversed(\r\n                        endOpenSet.get(startCurrentPointKey)!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            this.doAStarExpansion({\r\n                openFrontier: startOpenFrontier,\r\n                openSet: startOpenSet,\r\n                closedSet: closedSet\r\n            }, startCurrentNode, goal);\r\n            //expand endOpenFrontier\r\n            const endCurrentNode = endOpenFrontier.pop();\r\n            const endCurrentPoint = endCurrentNode.tile.point;\r\n            const endCurrentPointKey = stringify(endCurrentPoint);\r\n            endOpenSet.remove(endCurrentPointKey);\r\n            closedSet.add(endCurrentPointKey);\r\n            this.addRecent(endCurrentNode);\r\n            if(startOpenSet.has(endCurrentPointKey)) {\r\n                if(endCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startOpenSet.get(endCurrentPointKey)!\r\n                    ).concat(reconstructPathReversed(\r\n                        endCurrentNode.parent!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            this.doAStarExpansion({\r\n                openFrontier: endOpenFrontier,\r\n                openSet: endOpenSet,\r\n                closedSet: closedSet\r\n            }, endCurrentNode, initial);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    private doAStarExpansion(structures: ControlStructures, currentNode: AStarNode, endPoint: Point) {\r\n        const currentPoint = currentNode.tile.point;\r\n        for (const neighbor of this.navigator.neighbors(currentPoint)) {\r\n            const neighborPoint = neighbor.point;\r\n            const neighborKey = stringify(neighborPoint);\r\n            if(structures.closedSet.has(neighborKey)) {\r\n                continue;\r\n            }\r\n            const g = currentNode.g + this.stepCost(currentPoint, neighborPoint);\r\n            const f = g + this.heuristic(neighborPoint, endPoint);\r\n            if (!structures.openSet.has(neighborKey) || g < structures.openSet.get(neighborKey)!.g) {\r\n                const neighborNode = new AStarNode(\r\n                    neighbor, g, f\r\n                );\r\n                currentNode.addChild(neighborNode);\r\n                structures.openFrontier.push(neighborNode);\r\n                structures.openSet.add(neighborKey, neighborNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The step-cost function to be used, calculating the cost from\r\n     * currentPoint to neighborPoint. Uses the stepCost function provided by the\r\n     * navigator by default but can be overridden\r\n     * @param currentPoint\r\n     * @param neighborPoint\r\n     */\r\n    stepCost(currentPoint: Point, neighborPoint: Point) {\r\n        return this.navigator.cost(currentPoint, neighborPoint);\r\n    }\r\n}\r\n\r\nexport default BiAStarPathfinder;","import Pathfinder, {reconstructPath, reconstructPathReversed} from './Pathfinder';\r\nimport {Node} from './Node';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {HashTable, stringify} from '../structures/Hash';\r\n\r\ninterface ControlStructures {\r\n    frontier: Node[],\r\n    visited: HashTable<Node>\r\n}\r\n\r\nclass BiBFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName() {\r\n        return 'Bidirectional Breadth First Search';\r\n    }\r\n\r\n    /**\r\n     * Implementation of BFS to find the shortest path from initial to point\r\n     * Doesn't always return the shortest path, and performs poorly on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point) {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const startVisited = new HashTable<Node>();\r\n        const endVisited = new HashTable<Node>();\r\n        const startFrontier: Node[] = [];\r\n        const endFrontier: Node[] = [];\r\n        const initialRoot = new Node(grid.get(initial));\r\n        startFrontier.push(initialRoot);\r\n        startVisited.add(stringify(initial), initialRoot);\r\n        const goalRoot = new Node(grid.get(goal));\r\n        endFrontier.push(goalRoot);\r\n        endVisited.add(stringify(goal), goalRoot);\r\n        while(startFrontier.length !== 0 && endFrontier.length !== 0) {\r\n            //expand startQueue\r\n            const startCurrentNode = startFrontier.shift()!;\r\n            const startCurrentPoint = startCurrentNode.tile.point;\r\n            const startCurrentPointKey = stringify(startCurrentPoint);\r\n            this.addRecent(startCurrentNode);\r\n            if(endVisited.has(startCurrentPointKey)) {\r\n                if(startCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startCurrentNode.parent\r\n                    ).concat(reconstructPathReversed(\r\n                        endVisited.get(startCurrentPointKey)!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            this.doBFSExpansion({\r\n                frontier: startFrontier,\r\n                visited: startVisited\r\n            }, startCurrentNode);\r\n            //expand endQueue\r\n            const endCurrentNode = endFrontier.shift()!;\r\n            const endCurrentPoint = endCurrentNode.tile.point;\r\n            const endCurrentPointKey = stringify(endCurrentPoint);\r\n            this.addRecent(endCurrentNode);\r\n            if(startVisited.has(endCurrentPointKey)) {\r\n                if(endCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startVisited.get(endCurrentPointKey)!\r\n                    ).concat(reconstructPathReversed(\r\n                        endCurrentNode.parent\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            this.doBFSExpansion({\r\n                frontier: endFrontier,\r\n                visited: endVisited\r\n            }, endCurrentNode);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    private doBFSExpansion(structures: ControlStructures, currentNode: Node) {\r\n        const currentPoint = currentNode.tile.point;\r\n        for(const neighbor of this.navigator.neighbors(currentPoint)) {\r\n            const neighborKey = stringify(neighbor.point);\r\n            if(!structures.visited.has(neighborKey)) {\r\n                const neighborNode = new Node(neighbor);\r\n                currentNode.addChild(neighborNode);\r\n                structures.frontier.push(neighborNode);\r\n                structures.visited.add(neighborKey, neighborNode);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default BiBFSPathfinder;","import Navigator from '../core/Navigator';\r\nimport PlusNavigator from '../core/PlusNavigator';\r\nimport {Point} from '../core/Components';\r\nimport {Grid} from '../core/Grid';\r\nimport {\r\n    chebyshev,\r\n    euclidean,\r\n    HeuristicFunc,\r\n    manhattan,\r\n    nullHeuristic,\r\n    octile\r\n} from './Heuristics';\r\nimport Pathfinder from './Pathfinder';\r\nimport AStarPathfinder from './AStarPathfinder';\r\nimport BFSPathfinder from './BFSPathfinder';\r\nimport DFSPathfinder from './DFSPathfinder';\r\nimport BiAStarPathfinder from './BiAStarPathfinder';\r\nimport BiBFSPathfinder from \"./BiBFSPathfinder\";\r\n\r\nconst CREATE_NAVIGATOR: {[key: string]: ((grid: Grid) => Navigator)} = {\r\n    'plus': (grid: Grid) => new PlusNavigator(grid),\r\n}\r\n\r\nconst CREATE_HEURISTIC: {[key: string]: (() => HeuristicFunc)} = {\r\n    'manhattan': () => manhattan,\r\n    'euclidean': () => euclidean,\r\n    'chebyshev': () => chebyshev,\r\n    'octile': () => octile,\r\n    'null': () => nullHeuristic\r\n}\r\n\r\nconst CREATE_PATHFINDER: {[key: string]: ((navigator: Navigator, heuristic: HeuristicFunc) => Pathfinder)} = {\r\n    'dijkstra': (navigator) => {\r\n        return new (class DijkstraPathfinder extends AStarPathfinder {\r\n            getAlgorithmName() {\r\n                return 'Dijkstra';\r\n            }\r\n        })(navigator, nullHeuristic);\r\n    },\r\n    'best-first': (navigator, heuristic) => {\r\n        return new (class BestFirstPathfinder extends AStarPathfinder {\r\n            stepCost(currentPoint: Point, neighborPoint: Point) {\r\n                return 0;\r\n            }\r\n            getAlgorithmName() {\r\n                return 'Best-First Search';\r\n            }\r\n        })(navigator, heuristic);\r\n    },\r\n    'a*': (navigator, heuristic) => {\r\n        return new AStarPathfinder(navigator, heuristic);\r\n    },\r\n    'bfs': (navigator) => {\r\n        return new BFSPathfinder(navigator);\r\n    },\r\n    'dfs': (navigator) => {\r\n        return new DFSPathfinder(navigator);\r\n    },\r\n    'bi-a*': (navigator, heuristic) => {\r\n        return new BiAStarPathfinder(navigator, heuristic);\r\n    },\r\n    'bi-dijkstra': (navigator) => {\r\n        return new (class BiDijkstraPathfinder extends BiAStarPathfinder {\r\n            getAlgorithmName() {\r\n                return 'Bidirectional Dijkstra';\r\n            }\r\n        })(navigator, nullHeuristic);\r\n    },\r\n    'bi-bfs': (navigator) => {\r\n        return new BiBFSPathfinder(navigator);\r\n    }\r\n}\r\n\r\nclass PathfinderBuilder\r\n{\r\n    private navigator: string = 'plus';\r\n    private algorithm: string = 'a*';\r\n    private heuristic: string = 'null';\r\n    private readonly grid: Readonly<Grid>;\r\n\r\n    constructor(grid: Readonly<Grid>) {\r\n        this.grid = grid;\r\n    }\r\n\r\n    setNavigator(navigator: string) {\r\n        navigator = navigator.toLowerCase();\r\n        if(CREATE_NAVIGATOR[navigator] == null) {\r\n            throw new Error('No such navigator pattern exists')\r\n        } else {\r\n            this.navigator = navigator;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setAlgorithm(algorithm: string) {\r\n        algorithm = algorithm.toLowerCase();\r\n        if(CREATE_PATHFINDER[algorithm] == null) {\r\n            throw new Error('No such pathfinding algorithm exists')\r\n        } else {\r\n            this.algorithm = algorithm;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setHeuristic(heuristic: string) {\r\n        heuristic = heuristic.toLowerCase();\r\n        if(CREATE_HEURISTIC[heuristic] == null) {\r\n            throw new Error('No such heuristic function exists')\r\n        } else {\r\n            this.heuristic = heuristic;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Builds a pathfinder with a navigator with the set algorithm, heuristic, and navigator\r\n     */\r\n    build() {\r\n        const createHeuristic = CREATE_HEURISTIC[this.heuristic];\r\n        const createNavigator = CREATE_NAVIGATOR[this.navigator];\r\n        const createPathfinder = CREATE_PATHFINDER[this.algorithm];\r\n        return createPathfinder(createNavigator(this.grid), createHeuristic());\r\n    }\r\n\r\n    static usesHeuristic(algorithm: string) {\r\n        return algorithm === 'a*' || algorithm === 'bi-a*' ||\r\n            algorithm === 'best-first';\r\n    }\r\n\r\n    static hasBidirectional(algorithm: string) {\r\n        return CREATE_PATHFINDER['bi-' + algorithm] != null;\r\n    }\r\n\r\n    static makeBidirectional(algorithm: string) {\r\n        return 'bi-' + algorithm;\r\n    }\r\n}\r\n\r\nexport default PathfinderBuilder;\r\n\r\n","import {createTileData, Point, Tile, TileData} from '../core/Components';\r\nimport {Grid} from '../core/Grid';\r\nimport {HashSet, stringify} from '../structures/Hash';\r\n\r\nabstract class TerrainGenerator\r\n{\r\n    protected readonly width: number;\r\n    protected readonly height: number;\r\n    protected readonly ignore: HashSet;\r\n    protected readonly data: TileData;\r\n\r\n    protected constructor(width: number, height: number, data?: TileData, ignore?: Point[]) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.ignore = new HashSet();\r\n        if(data !== undefined) {\r\n            this.data = data;\r\n        } else {\r\n            this.data = createTileData(true);\r\n        }\r\n        if(ignore !== undefined) {\r\n            for(const i of ignore) {\r\n                this.ignore.add(stringify(i));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws a tile to the grid\r\n     * @param grid\r\n     * @param tile\r\n     */\r\n    protected draw(grid: Grid, tile: Tile) {\r\n        if(!this.shouldIgnore(tile.point)) {\r\n            grid.mutateTile(tile);\r\n        }\r\n    }\r\n\r\n    protected getTerrain() {\r\n        return this.data;\r\n    }\r\n\r\n    protected getSolid() {\r\n        return {\r\n            pathCost: 1,\r\n            isSolid: true\r\n        }\r\n    }\r\n\r\n    protected shouldIgnore(point: Point) {\r\n        return this.ignore.has(stringify(point));\r\n    }\r\n\r\n    abstract generateTerrain(topLeft?: Point, bottomRight?: Point): Grid;\r\n}\r\n\r\nexport default TerrainGenerator;","import TerrainGenerator from './TerrainGenerator';\r\nimport {Point, TileData} from '../core/Components';\r\nimport RectGrid, {Grid} from '../core/Grid';\r\n\r\nclass TerrainRandomGenerator extends TerrainGenerator\r\n{\r\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\r\n    constructor(width: number, height: number, tileData?: TileData, ignore?: Point[]) {\r\n        super(width, height, tileData, ignore);\r\n    }\r\n\r\n    /**\r\n     * Performs a random terrain generation algorithm where each tile has a 1/4\r\n     * chance of being solid\r\n     * @param topLeft optional parameter to specify what point the terrain should start from\r\n     *  This should not be further up/left than (1,1)\r\n     * @param bottomRight optional parameter to specify how far down and right the terrain will go\r\n     *  This should not be further right/down than (width-2,height-2)\r\n     */\r\n    generateTerrain(topLeft?: Point, bottomRight?: Point) {\r\n        const grid = new RectGrid(this.width, this.height);\r\n        if(topLeft === undefined) {\r\n            topLeft = {\r\n                x: 1, y: 1\r\n            }\r\n        }\r\n        if(bottomRight === undefined) {\r\n            bottomRight = {\r\n                x: grid.getWidth()-2,\r\n                y: grid.getHeight()-2\r\n            }\r\n        }\r\n        for(let x = topLeft.x - 1; x <= bottomRight.x + 1; x++) {\r\n            for(let y = topLeft.y - 1; y <= bottomRight.y + 1; y++) {\r\n                if(getRand(0, 3) === 0) {\r\n                    this.draw(grid,{\r\n                        point: {\r\n                            x: x, y: y\r\n                        },\r\n                        data: this.getTerrain()\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n}\r\n\r\n/**\r\n * Generate a random number between min and max, inclusive for min and max\r\n * @param min\r\n * @param max\r\n */\r\nfunction getRand(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max+1-min) + min);\r\n}\r\n\r\nexport default TerrainRandomGenerator;","import TerrainGenerator from './TerrainGenerator';\r\nimport RectGrid, {Grid} from '../core/Grid';\r\nimport {createTileData, Point, Tile, TileData} from '../core/Components';\r\n\r\nconst LIMIT = 2;\r\n\r\nexport const NO_SKEW = 0;\r\nexport const VERTICAL_SKEW = 1;\r\nexport const HORIZONTAL_SKEW = 2;\r\n\r\ninterface Chamber {\r\n    topLeft: Point; //min\r\n    bottomRight: Point; //max\r\n}\r\n\r\nclass TerrainMazeGenerator extends TerrainGenerator\r\n{\r\n    private readonly divideWidth: (width: number, height: number) => boolean;\r\n\r\n    constructor(width: number, height: number, tileData?: TileData, ignore?: Point[], slant?: number) {\r\n        super(width, height, tileData, ignore);\r\n        if(slant === undefined || slant === NO_SKEW) {\r\n            this.divideWidth = divideWidthNoSkew;\r\n        } else if(slant === VERTICAL_SKEW) {\r\n            this.divideWidth = divideWidthVSkew;\r\n        } else if(slant === HORIZONTAL_SKEW) {\r\n            this.divideWidth = divideWidthHSkew;\r\n        } else {\r\n            throw new Error(\"Invalid recursive maze division skew type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs the recursive division maze generation algorithm on a new empty grid\r\n     * by bisecting parts until the maze can no longer be bisected\r\n     * Params must be within bounds and create a chamber\r\n     * @param topLeft optional parameter to specify what point the maze should start from\r\n     *  This should not be further up/left than (1,1)\r\n     * @param bottomRight optional parameter to specify how far down and right the maze will go\r\n     *  This should not be further right/down than (width-2,height-2)\r\n     */\r\n    generateTerrain(topLeft?: Point, bottomRight?: Point) {\r\n        const grid = new RectGrid(this.width, this.height);\r\n        if(topLeft === undefined) {\r\n            topLeft = {\r\n                x: 1, y: 1\r\n            }\r\n        }\r\n        if(bottomRight === undefined) {\r\n            bottomRight = {\r\n                x: grid.getWidth()-2,\r\n                y: grid.getHeight()-2\r\n            }\r\n        }\r\n        for(let x = topLeft.x - 1; x <= bottomRight.x + 1; x++) {\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: x, y: topLeft.y - 1\r\n                },\r\n                data: this.getSolid()\r\n            });\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: x, y: bottomRight.y + 1\r\n                },\r\n                data: this.getSolid()\r\n            });\r\n        }\r\n        for(let y = topLeft.y - 1; y <= bottomRight.y + 1; y++) {\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: topLeft.x - 1, y: y\r\n                },\r\n                data: this.getSolid()\r\n            });\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: bottomRight.x + 1, y: y\r\n                },\r\n                data: this.getSolid()\r\n            });\r\n        }\r\n        this.divide(grid,{\r\n            topLeft: topLeft,\r\n            bottomRight: bottomRight,\r\n        });\r\n        return grid;\r\n    }\r\n\r\n    /**\r\n     * Draws a list of tiles to the grid\r\n     * @param grid\r\n     * @param tiles\r\n     */\r\n    private drawArr(grid: Grid, tiles: Tile[]) {\r\n        for(const tile of tiles) {\r\n            this.draw(grid, tile);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a line between a region, with an open hole, in a chamber,\r\n     * and call bisection algorithm on it, and call division algorithms on\r\n     * its split chambers until no chambers can be bisected\r\n     * @param grid\r\n     * @param chamber\r\n     */\r\n    divide(grid: Grid, chamber: Chamber) {\r\n        const width = widthOf(chamber);\r\n        const height = heightOf(chamber);\r\n        const min = chamber.topLeft;\r\n        const max = chamber.bottomRight;\r\n        if(this.divideWidth(width,height)) {\r\n            if(width > LIMIT) {\r\n                //calculate axis\r\n                const randX = getMidPoint(\r\n                    min.x, max.x\r\n                );\r\n                //create axis wall\r\n                const toDraw: Tile[] = [];\r\n                for(let y = min.y; y <= max.y; y++) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: y\r\n                        },\r\n                        data: this.getTerrain()\r\n                    });\r\n                }\r\n                //create holes in axis wall\r\n                let edgeBlocked = false;\r\n                if(canDrawHole(grid.get({\r\n                    x: randX, y: min.y-1\r\n                }))) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: min.y\r\n                        },\r\n                        data: createTileData(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(canDrawHole(grid.get({\r\n                    x: randX, y: max.y+1\r\n                }))) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: max.y\r\n                        },\r\n                        data: createTileData(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(!edgeBlocked) {\r\n                    const randY = getRand(\r\n                        min.y, max.y,\r\n                    );\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: randY\r\n                        },\r\n                        data: createTileData(false)\r\n                    });\r\n                }\r\n                this.drawArr(grid, toDraw);\r\n                //create children chambers and recurse\r\n                const leftChamber = {\r\n                    topLeft: chamber.topLeft,\r\n                    bottomRight: {\r\n                        x: randX-1,\r\n                        y: chamber.bottomRight.y\r\n                    },\r\n                };\r\n                const rightChamber = {\r\n                    topLeft: {\r\n                        x: randX+1,\r\n                        y: chamber.topLeft.y\r\n                    },\r\n                    bottomRight: chamber.bottomRight,\r\n                };\r\n                this.divide(grid, leftChamber);\r\n                this.divide(grid, rightChamber);\r\n            }\r\n        } else {\r\n            if(height > LIMIT) {\r\n                //calculate axis\r\n                const randY = getMidPoint(\r\n                    min.y, max.y\r\n                );\r\n                //draw axis wall\r\n                const toDraw: Tile[] = [];\r\n                for(let x = min.x; x <= max.x; x++) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: x, y: randY\r\n                        },\r\n                        data: this.getTerrain()\r\n                    });\r\n                }\r\n                //create holes in axis wall\r\n                let edgeBlocked = false;\r\n                if(canDrawHole(grid.get({\r\n                    x: min.x-1, y: randY\r\n                }))) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: min.x, y: randY\r\n                        },\r\n                        data: createTileData(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(canDrawHole(grid.get({\r\n                    x: max.x+1, y: randY\r\n                }))) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: max.x, y: randY\r\n                        },\r\n                        data: createTileData(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(!edgeBlocked) {\r\n                    const randX = getRand(\r\n                        min.x, max.x,\r\n                    );\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: randY\r\n                        },\r\n                        data: createTileData(false)\r\n                    });\r\n                }\r\n                this.drawArr(grid, toDraw);\r\n                //create children chambers and recurse\r\n                const topChamber = {\r\n                    topLeft: chamber.topLeft,\r\n                    bottomRight: {\r\n                        x: chamber.bottomRight.x,\r\n                        y: randY-1\r\n                    },\r\n                };\r\n                const bottomChamber = {\r\n                    topLeft: {\r\n                        x: chamber.topLeft.x,\r\n                        y: randY+1\r\n                    },\r\n                    bottomRight: chamber.bottomRight,\r\n                };\r\n                this.divide(grid, topChamber);\r\n                this.divide(grid, bottomChamber);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction divideWidthNoSkew(width: number, height: number) {\r\n    return width >= height;\r\n}\r\n\r\nfunction divideWidthHSkew(width: number, height: number) {\r\n    return width >= height * 2;\r\n}\r\n\r\nfunction divideWidthVSkew(width: number, height: number) {\r\n    return width * 2 >= height;\r\n}\r\n\r\nfunction widthOf(chamber: Chamber) {\r\n    return chamber.bottomRight.x - chamber.topLeft.x + 1;\r\n}\r\n\r\nfunction heightOf(chamber: Chamber) {\r\n    return chamber.bottomRight.y - chamber.topLeft.y + 1;\r\n}\r\n\r\nfunction canDrawHole(tile: Tile) {\r\n    return tile.data.pathCost === 1 && !tile.data.isSolid;\r\n}\r\n\r\n/**\r\n * Returns the 'midpoint' to be used\r\n * @param min\r\n * @param max\r\n */\r\nfunction getMidPoint(min: number, max: number) {\r\n    const range = max - min;\r\n    if(range >= 20) {\r\n        return ((min+max)/2) >> 0;\r\n    } else if(range > 5) {\r\n        const mid = ((min+max)/2) >> 0;\r\n        const points = [mid, mid+1];\r\n        return points[getRand(0,points.length-1)];\r\n    } else {\r\n        return getRand(min+1,max-1);\r\n    }\r\n}\r\n\r\n/**\r\n * Generate a random number between min and max, inclusive for min and max\r\n * @param min\r\n * @param max\r\n */\r\nfunction getRand(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max+1-min) + min);\r\n}\r\n\r\nexport default TerrainMazeGenerator;","import TerrainRandomGenerator from './TerrainRandomGenerator';\r\nimport TerrainMazeGenerator from './TerrainMazeGenerator';\r\nimport {createTileData, Point, TileData} from '../core/Components';\r\n\r\nexport const MAZE = 0;\r\nexport const MAZE_VERTICAL_SKEW = 1;\r\nexport const MAZE_HORIZONTAL_SKEW = 2;\r\nexport const RANDOM_TERRAIN = 3;\r\n\r\nclass TerrainGeneratorBuilder\r\n{\r\n    private width: number = 0;\r\n    private height: number = 0;\r\n    private type: number = MAZE;\r\n    private ignore: Point[] = [];\r\n    private data: TileData = createTileData(true);\r\n\r\n    setDimensions(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n\r\n    setGeneratorType(type: number) {\r\n        this.type = type;\r\n        return this;\r\n    }\r\n\r\n    setIgnorePoints(ignore: Point[]) {\r\n        this.ignore = ignore.slice();\r\n        return this;\r\n    }\r\n\r\n    setTileData(data: TileData) {\r\n        this.data = data;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Builds a terrain generator with the specified type\r\n     */\r\n    build() {\r\n       if(this.type >= RANDOM_TERRAIN) {\r\n           return new TerrainRandomGenerator(this.width, this.height, this.data, this.ignore);\r\n       } else {\r\n           return new TerrainMazeGenerator(this.width, this.height, this.data, this.ignore, this.type);\r\n       }\r\n    }\r\n}\r\n\r\nexport default TerrainGeneratorBuilder;","class VirtualTimer\r\n{\r\n    private timeout: NodeJS.Timeout;\r\n    private readonly callback: () => void\r\n    private timeStarted: number;\r\n    private timeRemaining: number;\r\n    private finished: boolean;\r\n\r\n    constructor(callback: () => void, countDown: number) {\r\n        this.callback = callback;\r\n        this.finished = false;\r\n        this.timeStarted = Date.now();\r\n        this.timeRemaining = countDown;\r\n        this.timeout = setTimeout(() => {\r\n            callback();\r\n            this.finished = true;\r\n        }, this.timeRemaining);\r\n    }\r\n\r\n    clear() {\r\n        clearTimeout(this.timeout);\r\n        this.finished = true;\r\n    }\r\n\r\n    pause() {\r\n        if(!this.finished) {\r\n            clearTimeout(this.timeout);\r\n            this.timeRemaining -= Date.now() - this.timeStarted;\r\n        }\r\n    }\r\n\r\n    resume() {\r\n        if(!this.finished) {\r\n            this.timeStarted = Date.now();\r\n            this.timeout = setTimeout(() => {\r\n                this.callback();\r\n                this.finished = true;\r\n            }, this.timeRemaining);\r\n        }\r\n    }\r\n\r\n    isFinished() {\r\n        return this.finished;\r\n    }\r\n\r\n    getNativeTimeout() {\r\n        return this.timeout;\r\n    }\r\n}\r\n\r\nexport default VirtualTimer;","import React, {RefObject} from 'react';\r\nimport GridBackground from './GridBackground';\r\nimport GridForeground from './GridForeground';\r\nimport StatsPanel from './StatsPanel';\r\nimport GridStaticTiles from './GridStaticTiles';\r\nimport {Node} from '../../pathfinding/algorithms/Node';\r\nimport PathfinderBuilder from '../../pathfinding/algorithms/PathfinderBuilder';\r\nimport Pathfinder from '../../pathfinding/algorithms/Pathfinder';\r\nimport {euclidean} from '../../pathfinding/algorithms/Heuristics';\r\nimport TerrainGeneratorBuilder, {RANDOM_TERRAIN} from '../../pathfinding/algorithms/TerrainGeneratorBuilder';\r\nimport {createTileData, Point, Tile, TileData} from '../../pathfinding/core/Components';\r\nimport {HashSet, stringify} from '../../pathfinding/structures/Hash';\r\nimport PathfindingSettings from '../../utils/PathfindingSettings';\r\nimport VirtualTimer from '../../utils/VirtualTimer';\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    settings: Readonly<PathfindingSettings>,\r\n    onChangeVisualizing: (visualizing: boolean) => void;\r\n}\r\n\r\ninterface IState {\r\n    time: number,\r\n    length: number,\r\n    cost: number,\r\n    nodes: number,\r\n    algorithm: string\r\n}\r\n\r\nclass PathfindingVisualizer extends React.Component<IProps,IState>\r\n{\r\n    //references to expose background and foreground grids to parent\r\n    private background: RefObject<GridBackground> = React.createRef();\r\n    private foreground: RefObject<GridForeground> = React.createRef();\r\n\r\n    private visualized = false;\r\n    private visualizing = false;\r\n    private visualTimeouts: VirtualTimer[]  = [];\r\n    private generations: Node[] = [];\r\n    private paused = false;\r\n    private wasPaused = false; //paused before alt tab?\r\n\r\n    private mazeTile: TileData = createTileData(true);\r\n\r\n    private readonly tilesX: number;\r\n    private readonly tilesY: number;\r\n    private readonly tileWidth: number\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const w = window.screen.availWidth - (window.outerWidth - window.innerWidth);\r\n        const h = window.screen.availHeight - (window.outerHeight - window.innerHeight);\r\n        this.tileWidth = this.props.tileWidth;\r\n        this.tilesX = Math.floor(w / this.tileWidth) + 1;\r\n        this.tilesY = Math.floor((h - 75 - 30) / this.tileWidth) + 1;\r\n        this.state = {\r\n            time: -1,\r\n            length: -1,\r\n            cost: -1,\r\n            nodes: -1,\r\n            algorithm: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('blur', () => {\r\n            this.wasPaused = this.isPaused();\r\n            if(!this.wasPaused) {\r\n                this.pausePathfinding();\r\n            }\r\n        });\r\n        window.addEventListener('focus', () => {\r\n            if(this.isPaused() && !this.wasPaused) {\r\n                this.resumePathfinding();\r\n            }\r\n        });\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps: Readonly<IProps>, nextState: Readonly<IState>) {\r\n        const prevState = this.state;\r\n        return prevState.time !== nextState.time ||\r\n            prevState.length !== nextState.length ||\r\n            prevState.cost !== nextState.cost ||\r\n            prevState.nodes !== nextState.nodes ||\r\n            prevState.algorithm !== nextState.algorithm;\r\n    }\r\n\r\n    changeTile(data: TileData) {\r\n        this.mazeTile = data; //enables weighted mazes\r\n        this.foreground.current!.changeTile(data);\r\n    }\r\n\r\n    canShowArrows() {\r\n        const settings = this.props.settings;\r\n        return settings.showArrows && settings.algorithm !== 'dfs';\r\n    }\r\n\r\n    canShowFrontier() {\r\n        const settings = this.props.settings;\r\n        return settings.visualizeAlg;\r\n    }\r\n\r\n    isPaused() {\r\n        return this.paused;\r\n    }\r\n\r\n    /**\r\n     * Pause the delayed pathfinding algorithm being performed\r\n     */\r\n    pausePathfinding() {\r\n        this.paused = true;\r\n        for(const timeout of this.visualTimeouts) {\r\n            timeout.pause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resume the delayed pathfinding algorithm being performed\r\n     * Will reset the timeouts to the last time the timeout was paused/started\r\n     * if not properly called while the timeout is paused\r\n     */\r\n    resumePathfinding() {\r\n        this.paused = false;\r\n        for(const timeout of this.visualTimeouts) {\r\n            timeout.resume();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs the pathfinding algorithm on the grid and visualizes it\r\n     */\r\n    doPathfinding() {\r\n        this.clearPath();\r\n        const settings = this.props.settings;\r\n        const pathfinder = this.getPathfinder(settings);\r\n        const path = this.findPath(pathfinder);\r\n        this.generations = pathfinder.getRecentGenerations();\r\n        if(this.canShowArrows()) {\r\n            this.addArrowGenerations(this.generations);\r\n        }\r\n        if(this.canShowFrontier()) {\r\n            this.visualizeGenerations(this.generations);\r\n        }\r\n        this.drawPath(path);\r\n    }\r\n\r\n    /**\r\n     * Performs the pathfinding algorithm on the grid and visualizes it with delays between successive\r\n     * node generations\r\n     * If the visualizer is currently visualizing, the visualization stops instead\r\n     */\r\n    doDelayedPathfinding() {\r\n        this.paused = false;\r\n        this.clearVisualization();\r\n        this.clearPath();\r\n        const settings = this.props.settings;\r\n        this.visualized = false;\r\n        const foreground = this.foreground.current!;\r\n        foreground.toggleDisable();\r\n        if(!this.visualizing) { //start visualization if not visualizing\r\n            this.visualizing = true;\r\n            this.props.onChangeVisualizing(this.visualizing);\r\n            const pathfinder = this.getPathfinder(settings);\r\n            const path = this.findPath(pathfinder);\r\n            const promises: Promise<VirtualTimer>[] = []; //to call function when timeouts finish\r\n            this.visualTimeouts = [];\r\n            const baseIncrement = settings.delayInc;\r\n            const visualizeAlg = this.canShowFrontier();\r\n            const showArrows = this.canShowArrows();\r\n            if(showArrows || visualizeAlg) {\r\n                let delay = 0;\r\n                let expand: (generation: Node) => void;\r\n                if(visualizeAlg && showArrows) {\r\n                    expand = (generation: Node) => this.visualizeGenerationAndArrows(generation);\r\n                } else if(visualizeAlg) {\r\n                    expand = (generation: Node) => this.visualizeGeneration(generation);\r\n                } else if(showArrows) {\r\n                    expand = (generation: Node) => this.addArrowGeneration(generation);\r\n                } else {\r\n                    expand = () => {};\r\n                }\r\n                this.generations = pathfinder.getRecentGenerations();\r\n                const generationSet = new HashSet(); //to keep track of rediscovered nodes\r\n                this.generations.forEach((generation) => {\r\n                    const promise = new Promise<VirtualTimer>((resolve) => {\r\n                        //each generation gets a higher timeout\r\n                        const timeout = new VirtualTimer(() => {\r\n                            expand(generation);\r\n                            resolve(timeout);\r\n                        }, delay);\r\n                        this.visualTimeouts.push(timeout);\r\n                    });\r\n                    promises.push(promise);\r\n                    if(!generationSet.has(stringify(generation.tile.point))) {\r\n                        //rediscovered nodes shouldn't add a delay to visualization\r\n                        delay += baseIncrement;\r\n                    }\r\n                    generationSet.add(stringify(generation.tile.point));\r\n                });\r\n            }\r\n            //call functions when timeouts finish\r\n            Promise.all(promises).then(() => {\r\n                this.drawPath(path);\r\n                foreground.toggleDisable();\r\n                this.visualizing = false;\r\n                this.visualized = true;\r\n                this.props.onChangeVisualizing(this.visualizing);\r\n            });\r\n        } else { //stop visualizing if currently visualizing\r\n            for (const timeout of this.visualTimeouts) {\r\n                timeout.clear();\r\n            }\r\n            this.visualizing = false;\r\n            this.props.onChangeVisualizing(this.visualizing);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the pathfinder for the settings\r\n     * @param settings\r\n     */\r\n    getPathfinder(settings: PathfindingSettings) {\r\n        const algorithmKey = settings.algorithm;\r\n        const algorithm = settings.bidirectional && PathfinderBuilder.hasBidirectional(algorithmKey) ?\r\n            PathfinderBuilder.makeBidirectional(algorithmKey) : algorithmKey;\r\n        return new PathfinderBuilder(this.foreground.current!.state.grid)\r\n            .setAlgorithm(algorithm)\r\n            .setHeuristic(settings.heuristicKey)\r\n            .setNavigator(settings.navigatorKey)\r\n            .build();\r\n    }\r\n\r\n    /**\r\n     * Find path with a given pathfinder, includes benchmarking\r\n     * @param pathfinder\r\n     */\r\n     findPath(pathfinder: Pathfinder) {\r\n        const foreground = this.foreground.current!;\r\n        const t0 = performance.now();\r\n        const path = pathfinder.findPath(foreground.state.initial, foreground.state.goal);\r\n        const t1 = performance.now();\r\n        const t2 = t1 - t0;\r\n        this.setState({\r\n            time: t2,\r\n            nodes: pathfinder.getRecentNodes(),\r\n            length: calcLength(foreground.state.initial, path),\r\n            cost: calcCost(foreground.state.grid.get(foreground.state.initial), path),\r\n            algorithm: pathfinder.getAlgorithmName()\r\n        });\r\n        return path;\r\n    }\r\n\r\n    /**\r\n     * Draw path on the grid and change length on ui\r\n     * @param path\r\n     */\r\n    drawPath(path: Tile[]) {\r\n        const foreground = this.foreground.current!\r\n        path.unshift(this.foreground.current!.state.grid.get(foreground.state.initial));\r\n        this.foreground.current!.drawPath(path);\r\n    }\r\n\r\n    /**\r\n     * Called when child foreground moves a tile\r\n     */\r\n    onTilesDragged() {\r\n        if(this.visualized) {\r\n            this.clearVisualization();\r\n            this.doPathfinding();\r\n            this.visualized = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create terrain on the grid foreground\r\n     */\r\n    createTerrain(mazeType: number, useMazeTile: boolean) {\r\n        if(this.visualizing) {\r\n            return;\r\n        }\r\n        this.clearTiles();\r\n        this.clearPath();\r\n        this.clearVisualization();\r\n        const foreground = this.foreground.current!;\r\n        const end = this.calcEndPointInView();\r\n        const newState = (mazeType !== RANDOM_TERRAIN) ? {\r\n            initial: {\r\n                x: 1, y: 1\r\n            },\r\n            goal: {\r\n                x: end.x-2, y: end.y-2\r\n            }\r\n        } : {\r\n            initial: {\r\n                x: 1, y: ((end.y-1) / 2) >> 0\r\n            },\r\n            goal: {\r\n                x: end.x-2, y: ((end.y-1) / 2) >> 0\r\n            }\r\n        };\r\n        foreground.setState(newState,() => {\r\n            const prevGrid = foreground.state.grid;\r\n            const generator = new TerrainGeneratorBuilder()\r\n                .setDimensions(\r\n                    prevGrid.getWidth(),\r\n                    prevGrid.getHeight()\r\n                )\r\n                .setGeneratorType(mazeType)\r\n                .setIgnorePoints([foreground.state.initial, foreground.state.goal])\r\n                .setTileData(useMazeTile ? this.mazeTile : getSolid())\r\n                .build();\r\n            const topLeft = {\r\n                x: 1, y: 1\r\n            };\r\n            const bottomRight = {\r\n                x: end.x-2, y: end.y-2\r\n            };\r\n            const grid = generator.generateTerrain(topLeft, bottomRight);\r\n            foreground.drawGrid(grid);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Calculate the end/goal point in common of the screen\r\n     */\r\n    calcEndPointInView() {\r\n        const xEnd = window.innerWidth / this.tileWidth;\r\n        const yEnd = (window.innerHeight - 75 - 30) / this.tileWidth;\r\n        const xFloor = Math.floor(xEnd);\r\n        const yFloor = Math.floor(yEnd);\r\n        const xDecimal = xEnd - xFloor;\r\n        const yDecimal = yEnd - yFloor;\r\n        let x = xDecimal > 0.05 ? Math.ceil(xEnd) : xFloor;\r\n        let y = yDecimal > 0.05 ? Math.ceil(yEnd) : yFloor;\r\n        if(x > this.tilesX) {\r\n            x = this.tilesX\r\n        }\r\n        if(y > this.tilesY) {\r\n            y = this.tilesY\r\n        }\r\n        return {\r\n            x: x, y: y\r\n        }\r\n    }\r\n\r\n    resetPoints() {\r\n        if(!this.visualizing) {\r\n            this.foreground.current!.resetPoints();\r\n        }\r\n    }\r\n\r\n    clearPath = () => {\r\n        this.foreground.current!.erasePath();\r\n    }\r\n\r\n    clearTiles() {\r\n        this.foreground.current!.clearTiles();\r\n    }\r\n\r\n    clearTilesChecked() {\r\n        if(!this.visualizing) {\r\n            this.foreground.current!.clearTiles();\r\n        }\r\n    }\r\n\r\n    clearVisualization() {\r\n        this.visualized = false;\r\n        this.background.current!.clear();\r\n    }\r\n\r\n    clearVisualizationChecked() {\r\n        if(!this.visualizing) {\r\n            this.visualized = false;\r\n            this.background.current!.clear();\r\n        }\r\n    }\r\n\r\n    visualizeGenerations(generations: Node[]) {\r\n        this.background.current!.visualizeGenerations(generations);\r\n        this.visualized = true;\r\n    }\r\n\r\n    visualizeGeneration(generation: Node) {\r\n        this.background.current!.visualizeGeneration(generation);\r\n    }\r\n\r\n    addArrowGenerations(generations: Node[]) {\r\n        this.background.current!.addArrowGenerations(generations);\r\n    }\r\n\r\n    addArrowGeneration(generation: Node) {\r\n        this.background.current!.addArrowGeneration(generation);\r\n    }\r\n\r\n    visualizeGenerationAndArrows(generation: Node) {\r\n        this.background.current!.visualizeGenerationAndArrows(generation);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <StatsPanel\r\n                    algorithm={this.state.algorithm}\r\n                    length={this.state.length}\r\n                    cost={this.state.cost}\r\n                    time={this.state.time}\r\n                    nodes={this.state.nodes}\r\n                />\r\n                <div>\r\n                    <GridStaticTiles\r\n                        tileWidth={this.tileWidth}\r\n                        tilesX={this.tilesX}\r\n                        tilesY={this.tilesY}\r\n                    />\r\n                    <GridBackground\r\n                        ref={this.background}\r\n                        tileWidth={this.tileWidth}\r\n                        tilesX={this.tilesX}\r\n                        tilesY={this.tilesY}\r\n                    />\r\n                    <GridForeground\r\n                        ref={this.foreground}\r\n                        topMargin={75}\r\n                        onTilesDragged={() => this.onTilesDragged()}\r\n                        tileSize={this.tileWidth}\r\n                        tilesX={this.tilesX}\r\n                        tilesY={this.tilesY}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction getSolid() {\r\n    return {\r\n        pathCost: 1,\r\n        isSolid: true\r\n    }\r\n}\r\n\r\nfunction calcLength(initial: Point, path: Tile[]) {\r\n    if(path.length === 0) {\r\n        return 0;\r\n    }\r\n    let len = euclidean(initial, path[0].point);\r\n    for (let i = 0; i < path.length - 1; i++) {\r\n        len += euclidean(path[i].point, path[i + 1].point);\r\n    }\r\n    return +(len).toFixed(3);\r\n}\r\n\r\nfunction calcCost(initial: Tile, path: Tile[]) {\r\n    if(path.length === 0) {\r\n        return 0;\r\n    }\r\n    let len = euclidean(initial.point, path[0].point) * path[0].data.pathCost;\r\n    for (let i = 0; i < path.length - 1; i++) {\r\n        len += euclidean(path[i].point, path[i + 1].point) * path[i + 1].data.pathCost;\r\n    }\r\n    return +(len).toFixed(3);\r\n}\r\n\r\nexport default PathfindingVisualizer;","import PathfindingSettings, {getDefaultSettings} from './PathfindingSettings';\r\n\r\nclass SettingsManager\r\n{\r\n    settings: PathfindingSettings = getDefaultSettings();\r\n\r\n    changeAlgo(algo: string) {\r\n        this.settings.algorithm = algo;\r\n    }\r\n\r\n    changeVisualize() {\r\n        this.settings.visualizeAlg = !this.settings.visualizeAlg;\r\n    }\r\n\r\n    changeShowArrows() {\r\n        this.settings.showArrows = !this.settings.showArrows;\r\n    }\r\n\r\n    changeBidirectional() {\r\n        this.settings.bidirectional = !this.settings.bidirectional;\r\n    }\r\n\r\n    changeSpeed(value: number) {\r\n        this.settings.delayInc = value;\r\n    }\r\n\r\n    changeManhattan() {\r\n        this.settings.heuristicKey = 'manhattan';\r\n    }\r\n\r\n    changeEuclidean() {\r\n        this.settings.heuristicKey = 'euclidean';\r\n    }\r\n\r\n    changeChebyshev() {\r\n        this.settings.heuristicKey = 'chebyshev';\r\n    }\r\n\r\n    changeOctile() {\r\n        this.settings.heuristicKey = 'octile';\r\n    }\r\n}\r\n\r\nexport default SettingsManager;","interface PathfindingSettings\r\n{\r\n    visualizeAlg: boolean,\r\n    showArrows: boolean,\r\n    delayInc: number,\r\n    algorithm: string,\r\n    heuristicKey: string,\r\n    navigatorKey: string,\r\n    bidirectional: boolean,\r\n}\r\n\r\nexport function getDefaultSettings(): PathfindingSettings {\r\n    return {\r\n        visualizeAlg: true,\r\n        showArrows: true,\r\n        delayInc: 25,\r\n        algorithm: 'a*',\r\n        heuristicKey: 'manhattan',\r\n        navigatorKey: 'plus',\r\n        bidirectional: false,\r\n    }\r\n}\r\n\r\nexport default PathfindingSettings;","export default __webpack_public_path__ + \"static/media/react.93a4bdf1.png\";","import React, {RefObject} from 'react';\r\nimport TopBar from './navbar/TopBar';\r\nimport {SettingsButton, VisualizeButton} from './navbar/Buttons';\r\nimport {\r\n    AlgorithmDropDown,\r\n    ClearDropDown,\r\n    MazeDropDown,\r\n    TilesDropDown\r\n} from './navbar/DropDownComponents';\r\nimport {\r\n    AlgorithmSettings,\r\n    HeuristicSettings, \r\n    SpeedSettings,\r\n    VisualSettings\r\n} from './navbar/SettingPanels';\r\nimport DraggablePanel from './panel/DraggablePanel';\r\nimport PathfindingVisualizer from './grid/PathfindingVisualizer';\r\nimport SettingsManager from '../utils/SettingsManager';\r\nimport PathfinderBuilder from '../pathfinding/algorithms/PathfinderBuilder';\r\nimport {\r\n    MAZE,\r\n    MAZE_HORIZONTAL_SKEW,\r\n    MAZE_VERTICAL_SKEW,\r\n    RANDOM_TERRAIN\r\n} from '../pathfinding/algorithms/TerrainGeneratorBuilder';\r\nimport Icon from '../../images/react.png';\r\n\r\ninterface IProps {}\r\n\r\ninterface IState {\r\n    heuristicDisabled: boolean,\r\n    bidirectionalDisabled: boolean,\r\n    arrowsDisabled: boolean,\r\n\r\n    panelShow: boolean,\r\n\r\n    visualizing: boolean,\r\n    paused: boolean,\r\n\r\n    useIcon: boolean\r\n}\r\n\r\nclass PathfindingApp extends React.Component<IProps, IState>\r\n{\r\n    //expose visualizer to parent to connect to button siblings\r\n    private visualizer: RefObject<PathfindingVisualizer> = React.createRef();\r\n\r\n    //drop down refs needed to invoke behavior between dropdowns\r\n    private algDropDown: RefObject<AlgorithmDropDown> = React.createRef();\r\n    private clrDropDown: RefObject<ClearDropDown> = React.createRef();\r\n    private mazeDropDown: RefObject<MazeDropDown> = React.createRef();\r\n    private tilesDropDown: RefObject<TilesDropDown> = React.createRef();\r\n\r\n    private settingsManager: SettingsManager = new SettingsManager();\r\n\r\n    private readonly tileWidth: number;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const speed = this.settingsManager.settings.delayInc;\r\n        const mobile = isMobile();\r\n        this.tileWidth =  mobile ? 47 : Math.round(window.screen.availWidth / 57);\r\n        if(mobile) {\r\n            this.settingsManager.changeSpeed(speed + 20);\r\n        } else if(window.screen.availWidth > 2500) {\r\n            this.settingsManager.changeSpeed(speed + 10);\r\n        }\r\n        this.state = {\r\n            heuristicDisabled: false,\r\n            bidirectionalDisabled: false,\r\n            arrowsDisabled: false,\r\n            panelShow: false,\r\n            visualizing: false,\r\n            paused: false,\r\n            useIcon: this.useIcon()\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('click', () => {\r\n            this.algDropDown.current!.hide();\r\n            this.clrDropDown.current!.hide();\r\n            this.mazeDropDown.current!.hide();\r\n            this.tilesDropDown.current!.hide();\r\n        });\r\n        window.addEventListener('resize', () => {\r\n            this.setState({\r\n                useIcon: this.useIcon()\r\n            })\r\n        });\r\n    }\r\n\r\n    useIcon() {\r\n        return window.innerWidth <= 850;\r\n    }\r\n\r\n    onClickAlgDrop() {\r\n        this.clrDropDown.current!.hide();\r\n        this.mazeDropDown.current!.hide();\r\n        this.tilesDropDown.current!.hide();\r\n    }\r\n\r\n    onClickClrDrop() {\r\n        this.algDropDown.current!.hide();\r\n        this.mazeDropDown.current!.hide();\r\n        this.tilesDropDown.current!.hide();\r\n    }\r\n\r\n    onClickMazeDrop() {\r\n        this.clrDropDown.current!.hide();\r\n        this.algDropDown.current!.hide();\r\n        this.tilesDropDown.current!.hide();\r\n    }\r\n\r\n    onClickTilesDrop() {\r\n        this.clrDropDown.current!.hide();\r\n        this.algDropDown.current!.hide();\r\n        this.mazeDropDown.current!.hide();\r\n    }\r\n\r\n    changeVButtonColor(visualizing: boolean) {\r\n        this.setState({\r\n            visualizing: visualizing\r\n        })\r\n    }\r\n\r\n    toggleSettings() {\r\n        this.setState(prevState => ({\r\n            panelShow: !prevState.panelShow\r\n        }));\r\n    }\r\n\r\n    hideSettings() {\r\n        this.setState({\r\n            panelShow: false\r\n        });\r\n    }\r\n\r\n    changeAlgo(algorithm: string) {\r\n        this.setState({\r\n            heuristicDisabled: !PathfinderBuilder.usesHeuristic(algorithm),\r\n            bidirectionalDisabled: !PathfinderBuilder.hasBidirectional(algorithm),\r\n            arrowsDisabled: algorithm === 'dfs'\r\n        });\r\n        this.settingsManager.changeAlgo(algorithm);\r\n    }\r\n\r\n    doPathfinding() {\r\n        this.setState({\r\n            paused: false\r\n        });\r\n        this.visualizer.current!.doDelayedPathfinding();\r\n    }\r\n\r\n    pausePathfinding() {\r\n        this.setState({\r\n            paused: true\r\n        });\r\n        this.visualizer.current!.pausePathfinding();\r\n    }\r\n\r\n    resumePathfinding() {\r\n        this.setState({\r\n            paused: false\r\n        });\r\n        this.visualizer.current!.resumePathfinding();\r\n    }\r\n\r\n    clearPath() {\r\n        this.visualizer.current!.clearPath();\r\n        this.visualizer.current!.clearVisualizationChecked();\r\n    }\r\n\r\n    clearTiles() {\r\n        this.clearPath();\r\n        this.visualizer.current!.clearTilesChecked();\r\n    }\r\n\r\n    resetBoard() {\r\n        this.clearPath();\r\n        this.clearTiles();\r\n        this.visualizer.current!.resetPoints();\r\n    }\r\n\r\n    createMaze() {\r\n        this.visualizer.current!.createTerrain(MAZE, false);\r\n    }\r\n\r\n    createMazeVSkew() {\r\n        this.visualizer.current!.createTerrain(MAZE_VERTICAL_SKEW, false);\r\n    }\r\n\r\n    createMazeHSkew() {\r\n        this.visualizer.current!.createTerrain(MAZE_HORIZONTAL_SKEW, false);\r\n    }\r\n\r\n    createRandomTerrain() {\r\n        this.visualizer.current!.createTerrain(RANDOM_TERRAIN, true);\r\n    }\r\n\r\n    changeTile(cost: number) {\r\n        this.visualizer.current!.changeTile({\r\n            isSolid: cost === -1,\r\n            pathCost: cost\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const title: string = 'Pathfinding Visualizer';\r\n        const icon = this.state.useIcon ?\r\n            <img\r\n                width={'100%'} height={'100%'}\r\n                className='icon'\r\n                alt={title} src={Icon}\r\n            /> :\r\n            title;\r\n        return (\r\n            <div>\r\n                <DraggablePanel\r\n                    title='Grid Settings'\r\n                    show={this.state.panelShow}\r\n                    onClickXButton={() => this.hideSettings()}\r\n                    width={350}\r\n                    height={405}\r\n                >\r\n                    <VisualSettings\r\n                        disabled={this.state.arrowsDisabled}\r\n                        onChangeViz={() => this.settingsManager.changeVisualize()}\r\n                        onChangeShowArrows={() => this.settingsManager.changeShowArrows()}\r\n                    />\r\n                    <SpeedSettings\r\n                        onChange={(value: number) => this.settingsManager.changeSpeed(value)}\r\n                        initialSpeed={this.settingsManager.settings.delayInc}\r\n                    />\r\n                    <AlgorithmSettings\r\n                        disabled={this.state.bidirectionalDisabled}\r\n                        onChangeBidirectional={() => this.settingsManager.changeBidirectional()}\r\n                    />\r\n                    <HeuristicSettings\r\n                        disabled={this.state.heuristicDisabled}\r\n                        onClickManhattan={() => this.settingsManager.changeManhattan()}\r\n                        onClickEuclidean={() => this.settingsManager.changeEuclidean()}\r\n                        onClickChebyshev={() => this.settingsManager.changeChebyshev()}\r\n                        onClickOctile={() => this.settingsManager.changeOctile()}\r\n                    />\r\n                </DraggablePanel>\r\n                <TopBar>\r\n                    <a href='https://github.com/JosephPrichard/PathfinderReact' className='title'\r\n                       style={{\r\n                           width: this.state.useIcon ? 70 : 'auto',\r\n                           height: this.state.useIcon ? 52 : '100%'\r\n                       }}\r\n                    >\r\n                        {icon}\r\n                    </a>\r\n                    <div className='top-container'>\r\n                        <AlgorithmDropDown\r\n                            ref={this.algDropDown}\r\n                            onClick={() => this.onClickAlgDrop()}\r\n                            onChange={(alg: string) => this.changeAlgo(alg)}\r\n                        />\r\n                        <VisualizeButton\r\n                            active={this.state.visualizing}\r\n                            paused={this.state.paused}\r\n                            onPause={() => this.pausePathfinding()}\r\n                            onResume={() => this.resumePathfinding()}\r\n                            onStartStop={() => this.doPathfinding()}\r\n                        />\r\n                        <ClearDropDown\r\n                            ref={this.clrDropDown}\r\n                            onClick={() => this.onClickClrDrop()}\r\n                            onClickTiles={() => this.clearTiles()}\r\n                            onClickPath={() => this.clearPath()}\r\n                            onClickReset={() => this.resetBoard()}\r\n                        />\r\n                        <TilesDropDown\r\n                            ref={this.tilesDropDown}\r\n                            onClick={() => this.onClickTilesDrop()}\r\n                            onClickTileType={(cost: number) => this.changeTile(cost)}\r\n                        />\r\n                        <MazeDropDown\r\n                            ref={this.mazeDropDown}\r\n                            onClick={() => this.onClickMazeDrop()}\r\n                            onClickMaze={() => this.createMaze()}\r\n                            onClickMazeHorizontal={() => this.createMazeHSkew()}\r\n                            onClickMazeVertical={() => this.createMazeVSkew()}\r\n                            onClickRandomTerrain={() => this.createRandomTerrain()}\r\n                        />\r\n                        <SettingsButton onClick={() => this.toggleSettings()}/>\r\n                    </div>\r\n                </TopBar>\r\n                <PathfindingVisualizer\r\n                    ref={this.visualizer}\r\n                    onChangeVisualizing={(viz: boolean) => this.changeVButtonColor(viz)}\r\n                    settings={this.settingsManager.settings}\r\n                    tileWidth={this.tileWidth}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction isMobile() {\r\n    return /Android|webOS|iPhone|iPad|Mac|Macintosh|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n}\r\n\r\nexport default PathfindingApp;","import React from 'react';\r\nimport './styles/Grid.css';\r\nimport './styles/Utility.css';\r\nimport './styles/Navbar.css';\r\nimport PathfindingApp from './common/components/PathfindingApp';\r\n\r\nclass App extends React.Component\r\n{\r\n    render() {\r\n        return (\r\n            <PathfindingApp/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n//import reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n//reportWebVitals();\r\n"],"sourceRoot":""}