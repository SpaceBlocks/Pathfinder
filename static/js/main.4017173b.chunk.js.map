{"version":3,"sources":["view/navbar/TopBar.tsx","view/navbar/Buttons.tsx","view/navbar/DropDown.tsx","view/navbar/DropDownComponents.tsx","view/utility/DraggablePanel.tsx","view/grid/GridBackground.tsx","pathfinding/core/Components.ts","pathfinding/core/Grid.ts","view/web-content/weight.svg","view/grid/TileFg.tsx","view/grid/SolidFg.tsx","view/grid/WeightFg.tsx","view/grid/GridForeground.tsx","view/grid/StatsPanel.tsx","pathfinding/core/PlusNavigator.ts","pathfinding/core/Navigator.ts","pathfinding/algorithms/Heuristics.ts","pathfinding/structures/Hash.ts","pathfinding/structures/Heap.ts","pathfinding/algorithms/Pathfinder.ts","pathfinding/algorithms/Node.ts","pathfinding/algorithms/AStar.ts","pathfinding/algorithms/BFS.ts","pathfinding/structures/Stack.ts","pathfinding/algorithms/DFS.ts","pathfinding/algorithms/BidirectionalAStar.ts","pathfinding/algorithms/BidirectionalBFS.ts","pathfinding/algorithms/PathfinderBuilder.ts","view/utility/VirtualTimer.ts","pathfinding/algorithms/TerrainGenerator.ts","pathfinding/algorithms/RandomTerrainGenerator.ts","pathfinding/algorithms/MazeGenerator.ts","pathfinding/algorithms/TerrainGeneratorBuilder.ts","view/grid/PathfindingVisualizer.tsx","view/utility/Checkbox.tsx","view/utility/SteppedRangeSlider.tsx","view/utility/RadioButtonGroup.tsx","view/navbar/SettingPanels.tsx","view/SettingsManager.ts","view/PathfindingSettings.ts","view/PathfindingApp.tsx","App.tsx","index.tsx"],"names":["TopBar","bar","React","createRef","window","addEventListener","props","onChangeHeight","current","offsetHeight","this","ref","className","children","Component","SYMBOL_COLOR","DIMENSION","VisualizeButton","width","height","rx","fill","points","x","active","onMouseDown","e","preventDefault","onClick","paused","onResume","onPause","xmlns","getResumeSymbol","getPauseSymbol","onStartStop","getStopSymbol","SettingsButton","DropDown","show","setState","up","display","hide","toggle","stopPropagation","isHidden","state","contentStyle","Clickable","tabIndex","onKeyPress","click","AlgorithmDropDown","onChange","key","algText","text","arrowClass","fade","nativeEvent","style","ClearDropDown","onClickPath","onClickTiles","onClickReset","MazeDropDown","onClickMaze","onClickMazeHorizontal","onClickMazeVertical","onClickRandomTerrain","TilesDropDown","cost","onClickTileType","DraggablePanel","draggable","draggableContainer","draggableContent","dragging","prevX","prevY","mouseDown","clientY","clientX","touchStart","touch","touches","changedTouches","mouseUp","mouseMove","drag","touchMove","container","top","offsetTop","left","offsetLeft","content","innerHeight","innerWidth","offsetWidth","getPosition","visibleStyle","renderDraggable","draggableStyle","onTouchStart","title","onClickXButton","document","minHeight","ARROW_COLOR","GridBackground","clear","visualization","createEmptyBg","arrows","doGeneration","generation","point","tile","y","visualizeGeneration","prevState","map","arr","slice","visualizeGenerations","generations","doArrowGeneration","point1","point2","newArrow","from","to","i","length","a","index","indexOf","splice","push","addArrowGeneration","addArrowGenerations","renderArrows","tileWidth","offset","arrow","first","second","firstX","firstY","secondX","secondY","offsetX","offsetY","x1","y1","x2","y2","stroke","strokeWidth","markerEnd","renderTiles","tiles","row","renderTile","color","backgroundColor","tilesX","tilesY","id","markerWidth","markerHeight","refX","refY","orient","createTile","isSolid","pathCost","RectGrid","_g","_g2","_g3","mutateDefault","solid","mutate","nodes","data","createEmptyGrid","console","str","log","JSON","stringify","grid","mutateTile","get","TileFg","applyExpandAnimation","expansionDuration","expansions","expansionStep","original","tileSize","setTimeout","time","SolidFg","size","doAnimation","dimensions","getDimensions","shapeRendering","getStyle","_extends","Object","assign","target","arguments","source","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","keys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgWeight","_ref","svgRef","titleId","xmlnsXlink","viewBox","enableBackground","xmlSpace","overflow","xlinkHref","transform","d","strokeMiterlimit","cx","cy","r","ForwardRef","WeightFg","showNumber","dominantBaseline","textAnchor","fontSize","SOLID_COLOR","ARROW_PATH_COLOR","pointsEqual","GridForeground","svg","tilePointer","mouseDown0","mouseDown2","draggingInitial","draggingGoal","disable","doTileAnimation","changeTile","bounds","getBoundingRect","onPress","button","onDrag","onTouch","onEndingEvent","xCoordinate","yCoordinate","calculatePoint","initial","goal","drawTile","eraseTile","moveInitial","moveGoal","drawGrid","clone","inBounds","clearTiles","canMoveEndPoint","onTilesDragged","drawPath","path","erasePath","Math","floor","resetPoints","end","calcEndPointInView","renderPath","lines","renderPathArrow","renderEndTile","round","topMargin","getBoundingClientRect","onContextMenu","onMouseUp","onMouseMove","onMouseLeave","onTouchMoveCapture","onTouchEnd","onTouchCancel","StatsPanel","textLog","scrollTop","scrollHeight","clientHeight","toFixed","algorithm","readOnly","value","unselectable","onDrop","PlusNavigator","getWidth","getHeight","b","manhattan","abs","euclidean","dx","dy","sqrt","octile","SQRT2","min","chebyshev","max","nullHeuristic","HashSet","undefined","HashTable","Heap","compare","elements","siftUp","val","peek","move","pop","siftDown","pos","parent","swap","right","child","reconstructPath","bottomLeaf","reconstructPathReversed","reverse","Pathfinder","navigator","recentSearch","node","Node","AStarNode","g","fScore","AStarPathfinder","func","heuristic","clearRecentSearch","getGrid","openFrontier","f","closedSet","openSet","root","add","isEmpty","currentNode","currentPoint","currentKey","remove","addRecent","equals","neighbors","neighbor","neighborPoint","neighborKey","has","stepCost","neighborNode","addChild","BFSPathfinder","frontier","visited","shift","next","Stack","DFSPathfinder","BiAStarPathfinder","startOpenFrontier","startOpenSet","endOpenFrontier","endOpenSet","initialRoot","goalRoot","startCurrentNode","startCurrentPointKey","concat","doAStarExpansion","endCurrentNode","endCurrentPointKey","structures","endPoint","BiBFSPathfinder","startVisited","endVisited","startFrontier","endFrontier","doBFSExpansion","CREATE_NAVIGATOR","CREATE_HEURISTIC","CREATE_PATHFINDER","PathfinderBuilder","toLowerCase","Error","createHeuristic","createNavigator","createPathfinder","VirtualTimer","callback","countDown","timeout","timeStarted","timeRemaining","finished","Date","now","clearTimeout","TerrainGenerator","ignore","shouldIgnore","RandomTerrainGenerator","tileData","topLeft","bottomRight","random","draw","getTerrain","divideWidthNoSkew","divideWidthHSkew","divideWidthVSkew","canDrawHole","getMidPoint","range","mid","getRand","MazeGenerator","slant","divideWidth","divide","chamber","widthOf","heightOf","randX","toDraw","edgeBlocked","randY","drawArr","leftChamber","rightChamber","topChamber","bottomChamber","TerrainGeneratorBuilder","type","calcLength","len","calcCost","PathfindingVisualizer","background","foreground","stats","visualized","visualizing","visualTimeouts","mazeTile","canShowArrows","settings","showArrows","canShowFrontier","visualizeAlg","pausePathfinding","pause","resumePathfinding","resume","doPathfinding","clearPath","pathfinder","getPathfinder","findPath","getRecentGenerations","doDelayedPathfinding","clearVisualization","toggleDisable","onChangeVisualizing","promises","baseIncrement","delayInc","delay","expandVisualization","expandArrows","forEach","promise","Promise","resolve","all","then","algorithmKey","bidirectional","hasBidirectional","makeBidirectional","setAlgorithm","setHeuristic","heuristicKey","setNavigator","navigatorKey","build","t0","performance","t2","getRecentNodes","getAlgorithmName","unshift","createTerrain","mazeType","newState","prevGrid","generator","setDimensions","setGeneratorType","setIgnorePoints","setTileData","generateTerrain","xEnd","yEnd","xFloor","yFloor","yDecimal","ceil","clearTilesChecked","clearVisualizationChecked","w","screen","availWidth","outerWidth","h","availHeight","outerHeight","Checkbox","checked","defaultChecked","disabled","boxStyle","defaultProps","SteppedRangeSlider","Number","currentTarget","default","list","step","sliderStyle","onInput","RadioButtonGroup","Children","toArray","radioButtons","VisualSettings","onChangeViz","onChangeShowArrows","SpeedSettings","onChangeSpeed","speed","speedText","String","initialSpeed","options","AlgorithmSettings","onChangeBidirectional","HeuristicSettings","enable","onClickManhattan","onClickEuclidean","onClickChebyshev","onClickOctile","SettingsManager","changeAlgo","algo","changeVisualize","changeShowArrows","changeBidirectional","changeSpeed","changeManhattan","changeEuclidean","changeChebyshev","changeOctile","PathfindingApp","visualizer","algDropDown","clrDropDown","mazeDropDown","tilesDropDown","settingsManager","onClickAlgDrop","onClickClrDrop","onClickMazeDrop","onClickTilesDrop","changeVButtonColor","toggleSettings","panelShow","hideSettings","heuristicDisabled","usesHeuristic","bidirectionalDisabled","arrowsDisabled","resetBoard","createMaze","createMazeVSkew","createMazeHSkew","createRandomTerrain","mobile","test","userAgent","href","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4017173b.chunk.js","sourcesContent":["import React, {RefObject} from 'react';\r\nimport './Navbar.css'\r\n\r\ninterface IProps {\r\n    onChangeHeight: (height: number) => void\r\n}\r\n\r\nclass TopBar extends React.Component<IProps>\r\n{\r\n    private bar: RefObject<HTMLDivElement> = React.createRef();\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('resize', () => this.props.onChangeHeight(this.bar.current!.offsetHeight));\r\n        this.props.onChangeHeight(this.bar.current!.offsetHeight);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={this.bar} className='top-navbar'>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TopBar;","import React from 'react';\r\nimport './Navbar.css'\r\n\r\ninterface VProps {\r\n    active: boolean,\r\n    paused: boolean,\r\n    onStartStop: ()  => void,\r\n    onPause: ()  => void,\r\n    onResume: ()  => void,\r\n}\r\n\r\ninterface ButtonProps {\r\n    onClick: ()  => void\r\n}\r\n\r\nconst SYMBOL_COLOR = 'rgb(230,230,230)';\r\nconst OFFSET = 14;\r\nconst DIMENSION = 47 - 2 * OFFSET;\r\n\r\nexport class VisualizeButton extends React.Component<VProps>\r\n{\r\n    getStopSymbol() {\r\n        return (\r\n            <rect width={DIMENSION}\r\n                  height={DIMENSION}\r\n                  rx={4}\r\n                  fill={SYMBOL_COLOR}\r\n            />\r\n        );\r\n    }\r\n\r\n    getResumeSymbol() {\r\n        const midY = DIMENSION / 2;\r\n        return (\r\n            <polygon\r\n                  points={`${0},${0} ${0},${DIMENSION} ${DIMENSION},${midY}`}\r\n                  className={'track round'}\r\n                  fill={SYMBOL_COLOR}\r\n            />\r\n        );\r\n    }\r\n\r\n    getPauseSymbol() {\r\n        return (\r\n            <svg>\r\n                <rect width={DIMENSION/2.5}\r\n                      height={DIMENSION}\r\n                      rx={3}\r\n                      fill={SYMBOL_COLOR}\r\n                />\r\n                <rect width={DIMENSION/2.5}\r\n                      height={DIMENSION}\r\n                      x={0.2*DIMENSION + DIMENSION/2.5}\r\n                      rx={3}\r\n                      fill={SYMBOL_COLOR}\r\n                />\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        if(this.props.active) {\r\n            return (\r\n                <div className={'half-button-wrapper'}>\r\n                    <button onMouseDown={e => e.preventDefault()}\r\n                            className={'center half-button-left red-button half-viz-button'}\r\n                            onClick={this.props.paused ? this.props.onResume : this.props.onPause}\r\n                    >\r\n                        <svg xmlns='http://www.w3.org/2000/svg'\r\n                             className='svg-icon'\r\n                             width={DIMENSION}\r\n                             height={DIMENSION}\r\n                        >\r\n                            {this.props.paused ? this.getResumeSymbol() : this.getPauseSymbol()}\r\n                        </svg>\r\n                    </button>\r\n                    <button onMouseDown={e => e.preventDefault()}\r\n                            className={'center half-button-right red-button half-viz-button'}\r\n                            onClick={this.props.onStartStop}\r\n                    >\r\n                        <svg xmlns='http://www.w3.org/2000/svg'\r\n                             className='svg-icon'\r\n                             width={DIMENSION}\r\n                             height={DIMENSION}\r\n                        >\r\n                            {this.getStopSymbol()}\r\n                        </svg>\r\n                    </button>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <button onMouseDown={e => e.preventDefault()}\r\n                        className={'button green-button viz-button'}\r\n                        onClick={this.props.onStartStop}\r\n                >\r\n                    Visualize!\r\n                </button>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport class SettingsButton extends React.Component<ButtonProps>\r\n{\r\n    render() {\r\n        return (\r\n            <button onMouseDown={e => e.preventDefault()}\r\n                    className='button settings-button'\r\n                    onClick={this.props.onClick}>\r\n                Settings\r\n            </button>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport interface DropDownProps {\r\n    onClick: () => void,\r\n}\r\n\r\nexport interface DropDownState {\r\n    up: boolean,\r\n    display: string,\r\n    fade: string\r\n}\r\n\r\nabstract class DropDown<IProps extends DropDownProps, IState extends DropDownState>\r\n    extends React.Component<IProps, IState>\r\n{\r\n    protected constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    show = () => {\r\n        this.setState({\r\n            up: false,\r\n            display: 'block',\r\n        });\r\n    }\r\n\r\n    hide = () => {\r\n        this.setState({\r\n            display: 'none',\r\n            up: true,\r\n        });\r\n    }\r\n\r\n    toggle = (e: Event) => {\r\n        e.stopPropagation();\r\n        this.props.onClick();\r\n        if(this.isHidden()) {\r\n            this.show();\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    isHidden = () => {\r\n        return this.state.display === 'none';\r\n    }\r\n\r\n    contentStyle = () => {\r\n        return {\r\n            display: this.state.display\r\n        }\r\n    }\r\n}\r\n\r\nexport default DropDown;","import React from 'react';\r\nimport './Navbar.css'\r\nimport DropDown, {DropDownProps, DropDownState} from './DropDown';\r\n\r\ninterface AlgProps extends DropDownProps {\r\n    onChange: (alg: string) => void\r\n}\r\n\r\ninterface DropDownTextState extends DropDownState {\r\n    text: string,\r\n}\r\n\r\ninterface ClrProps extends DropDownProps {\r\n    onClickPath: () => void,\r\n    onClickTiles: () => void,\r\n    onClickReset: () => void;\r\n}\r\n\r\ninterface MazeProps extends DropDownProps {\r\n    onClickMaze: () => void,\r\n    onClickMazeHorizontal: () => void,\r\n    onClickMazeVertical: () => void,\r\n    onClickRandomTerrain: () => void\r\n}\r\n\r\ninterface TileProps extends DropDownProps {\r\n    onClickTileType: (cost: number) => void\r\n}\r\n\r\ninterface ClickableProps {\r\n    click: () => void;\r\n}\r\n\r\nclass Clickable extends React.Component<ClickableProps>\r\n{\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} onKeyPress={this.props.click} onClick={this.props.click}>{this.props.children}</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport class AlgorithmDropDown extends DropDown<AlgProps, DropDownTextState>\r\n{\r\n    constructor(props: AlgProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            text: 'A* Search',\r\n            fade: 'fade-in'\r\n        };\r\n    }\r\n\r\n    onChange = (key: string, algText: string) => {\r\n        this.props.onChange(key);\r\n        this.setState({\r\n            text: algText\r\n        });\r\n    }\r\n\r\n    arrowClass = () => {\r\n        return this.state.up ? 'arrowUp' : 'arrowDown';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} className='alg-drop-down drop-down'\r\n                 onMouseDown={e => e.preventDefault()}\r\n                 onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                 onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='alg-drop-down-button drop-down-button'>\r\n                    <span className='alg-drop-down-text drop-down-text'>{this.state.text}</span>\r\n                    <span className={'alg-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div style={this.contentStyle()}\r\n                     className={this.state.fade + ' alg-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={() => this.onChange('a*', 'A* Search')}>A* Search</Clickable>\r\n                    <Clickable click={() => this.onChange('dijkstra', 'Dijkstra')}>Dijkstra's Algorithm</Clickable>\r\n                    <Clickable click={() => this.onChange('best-first', 'Best First')}>Best First Search</Clickable>\r\n                    <Clickable click={() => this.onChange('bfs', 'Breadth First')}>Breadth First Search</Clickable>\r\n                    <Clickable click={() => this.onChange('dfs', 'Depth First')}>Depth First Search</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class ClearDropDown extends DropDown<ClrProps, DropDownState>\r\n{\r\n    constructor(props: ClrProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            fade: 'fade-in'\r\n        };\r\n    }\r\n\r\n    arrowClass = () => {\r\n        return this.state.up ? 'arrowUpW' : 'arrowDownW';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} className='clr-drop-down drop-down'\r\n                 onMouseDown={e => e.preventDefault()}\r\n                 onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                 onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='clr-drop-down-button drop-down-button'>\r\n                    <span className='clr-drop-down-text drop-down-text'>Reset</span>\r\n                    <span className={'clr-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div style={this.contentStyle()}\r\n                     className={this.state.fade + ' clr-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={this.props.onClickPath}>Clear Path</Clickable>\r\n                    <Clickable click={this.props.onClickTiles}>Clear Tiles</Clickable>\r\n                    <Clickable click={this.props.onClickReset}>Reset Grid</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class MazeDropDown extends DropDown<MazeProps, DropDownState>\r\n{\r\n    constructor(props: MazeProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            fade: 'fade-in'\r\n        };\r\n    }\r\n\r\n    arrowClass = () => {\r\n        return this.state.up ? 'arrowUpW' : 'arrowDownW';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} className='maze-drop-down drop-down'\r\n                 onMouseDown={e => e.preventDefault()}\r\n                 onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                 onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='maze-drop-down-button drop-down-button'>\r\n                    <span className='maze-drop-down-text drop-down-text'>Terrain</span>\r\n                    <span className={'clr-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div style={this.contentStyle()}\r\n                     className={this.state.fade + ' maze-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={this.props.onClickMaze}>Recursive Maze Division</Clickable>\r\n                    <Clickable click={this.props.onClickMazeHorizontal}>Horizontal Skewed Maze</Clickable>\r\n                    <Clickable click={this.props.onClickMazeVertical}>Vertical Skewed Maze</Clickable>\r\n                    <Clickable click={this.props.onClickRandomTerrain}>Random Terrain</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class TilesDropDown extends DropDown<TileProps, DropDownTextState>\r\n{\r\n    constructor(props: TileProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            fade: 'fade-in',\r\n            text: 'Wall [∞]'\r\n        };\r\n    }\r\n\r\n    arrowClass = () => {\r\n        return this.state.up ? 'arrowUpW' : 'arrowDownW';\r\n    }\r\n\r\n    onChange = (cost: number, text: string) => {\r\n        this.props.onClickTileType(cost);\r\n        this.setState({\r\n            text: text\r\n        }, () => this.props.onClickTileType(cost));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div tabIndex={0} className='tiles-drop-down drop-down'\r\n                 onMouseDown={e => e.preventDefault()}\r\n                 onKeyPress={(e) => this.toggle(e.nativeEvent)}\r\n                 onClick={(e) => this.toggle(e.nativeEvent)}\r\n            >\r\n                <div className='tiles-drop-down-button drop-down-button'>\r\n                    <span className='tiles-drop-down-text drop-down-text'>{this.state.text}</span>\r\n                    <span className={'clr-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div style={this.contentStyle()}\r\n                     className={this.state.fade + ' tiles-drop-down-content drop-down-content'}\r\n                >\r\n                    <Clickable click={() => this.onChange(-1, 'Wall [∞]')}>Wall [∞]</Clickable>\r\n                    <Clickable click={() => this.onChange(2, 'Weight [2]')}>Weight [2]</Clickable>\r\n                    <Clickable click={() => this.onChange(3, 'Weight [3]')}>Weight [3]</Clickable>\r\n                    <Clickable click={() => this.onChange(5, 'Weight [5]')}>Weight [5]</Clickable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {RefObject} from 'react';\r\nimport './DraggablePanel.css'\r\n\r\ninterface IProps {\r\n    title: string,\r\n    show: boolean,\r\n    onClickXButton: () => void,\r\n    width: number,\r\n    height: number\r\n}\r\n\r\ninterface IState {\r\n    top: number,\r\n    left: number\r\n}\r\n\r\nclass DraggablePanel extends React.Component<IProps, IState>\r\n{\r\n    //refs are used to access native DOM\r\n    private draggable: RefObject<HTMLDivElement> = React.createRef();\r\n    private draggableContainer: RefObject<HTMLDivElement> = React.createRef();\r\n    private draggableContent: RefObject<HTMLDivElement> = React.createRef();\r\n\r\n    //stores previous mouse location and drag\r\n    private dragging = false;\r\n    private prevX = 0;\r\n    private prevY = 0;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            top: -1,\r\n            left: -1\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        //mouse\r\n        document.addEventListener('mouseup', e => {\r\n            this.mouseUp(e);\r\n        });\r\n        document.addEventListener('mousemove', e => {\r\n            this.mouseMove(e);\r\n        });\r\n        window.addEventListener('mouseleave', e => {\r\n            this.mouseUp(e);\r\n        });\r\n        //touch\r\n        document.addEventListener('touchend', () => {\r\n            this.dragging = false;\r\n        });\r\n        document.addEventListener('touchmove', e => {\r\n            this.touchMove(e);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Start drag and init prev mouse location when mouse is clicked on draggable\r\n     * @param e\r\n     */\r\n    private mouseDown = (e: MouseEvent) => {\r\n        e.preventDefault();\r\n        this.prevY = e.clientY;\r\n        this.prevX = e.clientX;\r\n        this.dragging = true;\r\n    }\r\n\r\n    /**\r\n     * Start drag and init prev touch location when finger is clicked on draggable\r\n     * @param e\r\n     */\r\n    private touchStart = (e: TouchEvent) => {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        this.prevY = touch.clientY;\r\n        this.prevX = touch.clientX;\r\n        this.dragging = true;\r\n    }\r\n\r\n    /**\r\n     * Called when mouse is risen on document stop drag\r\n     * @param e\r\n     */\r\n    private mouseUp = (e: Event) => {\r\n        e.preventDefault();\r\n        this.dragging = false;\r\n    }\r\n\r\n    /**\r\n     * Called when the mouse is moved over the document to calculate the new position of\r\n     * the draggable canvas\r\n     * @param e\r\n     */\r\n    private mouseMove = (e: MouseEvent) => {\r\n        this.drag(e.clientX, e.clientY);\r\n    }\r\n\r\n    /**\r\n     * Called when the touch is moved over the document to calculate the new position of\r\n     * the draggable canvas\r\n     * @param e\r\n     */\r\n    private touchMove = (e: TouchEvent) => {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        this.drag(touch.clientX, touch.clientY);\r\n    }\r\n\r\n    /**\r\n     * Called when user drags over the document to move the panel\r\n     * @param clientX\r\n     * @param clientY\r\n     */\r\n    private drag = (clientX: number, clientY: number) => {\r\n        if(this.dragging) {\r\n            const container = this.draggableContainer.current!;\r\n            let top = (container.offsetTop - (this.prevY - clientY))\r\n            let left = (container.offsetLeft - (this.prevX - clientX));\r\n            const content = this.draggableContent.current!;\r\n            const draggable = this.draggable.current!;\r\n            //stop drag if mouse goes out of bounds\r\n            if(clientY < 0 || clientY > window.innerHeight\r\n                || clientX < 0 || clientX > window.innerWidth) {\r\n                this.dragging = false;\r\n            }\r\n            //check if position is out of bounds and prevent the panel from being dragged there\r\n            if(top < 0) {\r\n                top = 0;\r\n            } else if (top > window.innerHeight - draggable.offsetHeight) {\r\n                top = window.innerHeight - draggable.offsetHeight;\r\n            }\r\n            if(left < -content.offsetWidth/2) {\r\n                left = -content.offsetWidth/2;\r\n            } else if(left > window.innerWidth - content.offsetWidth/2) {\r\n                left = window.innerWidth - content.offsetWidth/2;\r\n            }\r\n            //set new position\r\n            this.setState({\r\n                top: top\r\n            });\r\n            this.setState({\r\n                left: left\r\n            });\r\n            //update previous pos\r\n            this.prevY = clientY;\r\n            this.prevX = clientX;\r\n        }\r\n    }\r\n\r\n    getPosition = () => {\r\n        const left = this.state.left;\r\n        const top = this.state.top;\r\n        if(left === -1 || top === -1) {\r\n            return {};\r\n        }\r\n        return {\r\n            left: left + 'px',\r\n            top: top + 'px',\r\n        };\r\n    }\r\n\r\n    visibleStyle = () => {\r\n        return this.props.show ? 'block' : 'none';\r\n    }\r\n\r\n    draggableStyle() {\r\n        return {\r\n            width: this.props.width,\r\n            display: this.visibleStyle()\r\n        }\r\n    }\r\n\r\n    contentStyle() {\r\n        return {\r\n            width: this.props.width,\r\n            minHeight: this.props.height,\r\n            display: this.visibleStyle()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={this.draggableContainer} className='draggable-container' style={this.getPosition()}>\r\n                {this.renderDraggable()}\r\n                <div ref={this.draggableContent} style={this.contentStyle()} className='draggable-content'>\r\n                    <div className='settings-general'>\r\n                        {this.props.children}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderDraggable = () => {\r\n        return (\r\n            <div style={this.draggableStyle()} className='draggable'\r\n                 ref={this.draggable}\r\n                 onMouseDown={e => this.mouseDown(e.nativeEvent)}\r\n                 onTouchStart={e => this.touchStart(e.nativeEvent)}\r\n            >\r\n                <div className='draggable-title'>{this.props.title}</div>\r\n                <div className='x-button' onClick={this.props.onClickXButton}>X</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DraggablePanel;","import React from 'react';\r\nimport './Grid.css';\r\nimport {Node} from '../../pathfinding/algorithms/Node';\r\nimport {Point} from '../../pathfinding/core/Components';\r\n\r\ninterface Arrow {\r\n    to: Point,\r\n    from: Point\r\n}\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    tilesX: number,\r\n    tilesY: number\r\n}\r\n\r\ninterface IState {\r\n    visualization: string[][],\r\n    arrows: Arrow[]\r\n}\r\n\r\nconst CLOSED_NODE = 'rgb(198, 237, 238)';\r\nconst OPEN_NODE = 'rgb(191, 248, 159)';\r\nconst EMPTY_NODE = 'white';\r\nconst ARROW_COLOR = 'rgb(153,153,153)';\r\n\r\nconst BASE_WIDTH = 27;\r\n\r\nclass GridBackground extends React.Component<IProps,IState>\r\n{\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    /**\r\n     * Constructs a GridBackground with immutable height and width\r\n     * @param props\r\n     */\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.width = this.props.tilesX;\r\n        this.height = this.props.tilesY;\r\n        this.state = {\r\n            visualization: this.createEmptyBg(),\r\n            arrows: []\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a new empty visualization canvas\r\n     */\r\n    createEmptyBg() {\r\n        const visualization = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            const row: string[] = [];\r\n            for(let x = 0; x < this.width; x++) {\r\n                row.push(EMPTY_NODE);\r\n            }\r\n            visualization.push(row);\r\n        }\r\n        return visualization;\r\n    }\r\n\r\n    /**\r\n     * Clear the visualization canvas and update UI\r\n     */\r\n    clear = () => {\r\n        this.setState({\r\n            visualization: this.createEmptyBg(),\r\n            arrows: []\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Perform a generation on a visualization array\r\n     * @param generation\r\n     * @param visualization\r\n     */\r\n    private doGeneration = (generation: Node, visualization: string[][]) => {\r\n        for(const node of generation.children) {\r\n            const point = node.tile.point;\r\n            visualization[point.y][point.x] = OPEN_NODE;\r\n        }\r\n        const point = generation.tile.point;\r\n        visualization[point.y][point.x] = CLOSED_NODE;\r\n        return visualization;\r\n    }\r\n\r\n    /**\r\n     * Visualize generation without updating UI\r\n     * @param generation\r\n     */\r\n    visualizeGeneration = (generation: Node) => {\r\n        this.setState(prevState => ({\r\n            visualization: this.doGeneration(\r\n                generation,\r\n                prevState.visualization.map(\r\n                    (arr) => arr.slice()\r\n                )\r\n            )\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Visualize generation array and update UI\r\n     * @param generations\r\n     */\r\n    visualizeGenerations = (generations: Node[]) => {\r\n        const visualization = this.createEmptyBg();\r\n        for(const generation of generations) {\r\n            this.doGeneration(generation, visualization);\r\n        }\r\n        this.setState({\r\n            visualization: visualization\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Perform an arrow generation on an arrow array\r\n     * @param generation\r\n     * @param arrows\r\n     */\r\n    private doArrowGeneration = (generation: Node, arrows: Arrow[]) => {\r\n        const point = generation.tile.point;\r\n        for(const node of generation.children) {\r\n            const childPoint = node.tile.point;\r\n            const newArrow = {\r\n                from: point,\r\n                to: childPoint,\r\n            };\r\n            //remove a duplicate arrow to indicate replacement\r\n            //in A* for example, we could have re-discovered a better path to a tile\r\n            for(let i = 0; i < arrows.length; i++) {\r\n                const a = arrows[i];\r\n                if(pointsEqual(a.to, newArrow.to)) {\r\n                    const index = arrows.indexOf(a);\r\n                    arrows.splice(index, 1);\r\n                    i--;\r\n                }\r\n            }\r\n            arrows.push(newArrow);\r\n        }\r\n        return arrows;\r\n    }\r\n\r\n    /**\r\n     * Add arrow generation without updating UI\r\n     * @param generation\r\n     */\r\n    addArrowGeneration = (generation: Node) => {\r\n        this.setState(prevState => ({\r\n            arrows: this.doArrowGeneration(\r\n                generation,\r\n                prevState.arrows.slice()\r\n            )\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Add arrow generations and update UI\r\n     * @param generations\r\n     */\r\n    addArrowGenerations = (generations: Node[]) => {\r\n        const arrows: Arrow[] = [];\r\n        for(const generation of generations) {\r\n            this.doArrowGeneration(generation, arrows)\r\n        }\r\n        this.setState({\r\n            arrows: arrows\r\n        });\r\n    }\r\n\r\n    render() {\r\n        // console.timeEnd('time');\r\n        // console.time('time');\r\n        return (\r\n            <div>\r\n                <div className='bg'>\r\n                    {this.renderTiles()}\r\n                </div>\r\n                <svg xmlns='http://www.w3.org/2000/svg' className='grid'>\r\n                    <defs>\r\n                        <marker id='arrowhead' markerWidth='3' markerHeight='3'\r\n                                refX='0' refY='1.5' orient='auto'\r\n                                fill={ARROW_COLOR}\r\n                        >\r\n                            <polygon points='0 0, 3 1.5, 0 3'/>\r\n                        </marker>\r\n                    </defs>\r\n                    {this.renderArrows()}\r\n                </svg>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderArrows = () => {\r\n        const width = this.props.tileWidth;\r\n        const offset = width/2;\r\n        const arrows: JSX.Element[] = [];\r\n        for(let i = 0; i < this.state.arrows.length; i++) {\r\n            //calculate arrow position and dimensions\r\n            const arrow = this.state.arrows[i];\r\n            const first = arrow.from;\r\n            const second = arrow.to;\r\n            const firstX = first.x * width;\r\n            const firstY = first.y * width;\r\n            const secondX = second.x * width;\r\n            const secondY = second.y * width;\r\n            const offsetX = (secondX - firstX)/4;\r\n            const offsetY = (secondY - firstY)/4;\r\n            arrows.push(<line key={'arrow ' + i}\r\n                              x1={firstX + offset + offsetX}\r\n                              y1={firstY + offset + offsetY}\r\n                              x2={secondX + offset - offsetX}\r\n                              y2={secondY + offset - offsetY}\r\n                              stroke={ARROW_COLOR}\r\n                              strokeWidth={2 * this.props.tileWidth/BASE_WIDTH}\r\n                              className='line-arrow'\r\n                              markerEnd='url(#arrowhead)' />);\r\n        }\r\n        return arrows;\r\n    }\r\n\r\n    private renderTiles = () => {\r\n        const tiles: JSX.Element[][] = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            const row: JSX.Element[] = [];\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                };\r\n                row.push(\r\n                    this.renderTile(point, this.state.visualization[point.y][point.x])\r\n                );\r\n            }\r\n            tiles.push(row);\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    private renderTile = (point: Point, color: string) => {\r\n        const width = this.props.tileWidth;\r\n        const top = point.y * this.props.tileWidth;\r\n        const left = point.x * this.props.tileWidth;\r\n        const style = {\r\n            backgroundColor: color,\r\n            width: width + 'px',\r\n            height: width + 'px',\r\n            top: top,\r\n            left: left\r\n        };\r\n        return (\r\n            <div key={point.x + ',' + point.y} style={style} className='tile'/>\r\n        );\r\n    }\r\n}\r\n\r\nfunction pointsEqual(point1: Point, point2: Point) {\r\n    return point1.x === point2.x && point1.y === point2.y;\r\n}\r\n\r\nexport default GridBackground;","/**\r\n * Represents a point in 2d space\r\n * Immutable\r\n */\r\nexport interface Point\r\n{\r\n    readonly x: number;\r\n    readonly y: number;\r\n}\r\n\r\n/**\r\n * Represents the data inside a tile\r\n * Solid tiles cannot be passed while non solid ones can\r\n * pathCost stores how expensive it is to travel to the tile if it isn't solid\r\n * Immutable\r\n */\r\nexport interface TileData\r\n{\r\n    readonly pathCost: number;\r\n    readonly isSolid: boolean;\r\n}\r\n\r\n/**\r\n * Represents a tile on the Grid\r\n */\r\nexport interface Tile\r\n{\r\n    data: TileData;\r\n    readonly point: Point;\r\n}\r\n\r\n/**\r\n * Simple function to create a solid tile with path cost of 1\r\n * @param isSolid\r\n */\r\nexport function createTile(isSolid: boolean) {\r\n    return {\r\n        pathCost: 1,\r\n        isSolid: isSolid\r\n    }\r\n}\r\n\r\n","import {createTile, Point, Tile, TileData} from './Components';\r\n\r\nexport interface Grid\r\n{\r\n    getWidth(): number;\r\n    getHeight(): number;\r\n    inBounds(point: Point): boolean;\r\n    get(point: Point): Tile;\r\n    isSolid(point: Point): boolean;\r\n    mutate(point: Point, data: TileData): void;\r\n    mutateTile(tile: Tile): void;\r\n    mutateDefault(point: Point, solid: boolean): void;\r\n    output(console: Console): void;\r\n    getJson(): string;\r\n    walkable(point: Point): boolean;\r\n    clone(): Grid;\r\n}\r\n\r\n/**\r\n * A square grid system that stores nodes in a matrix\r\n * Uses an x,y system where x corresponds to column of the matrix,\r\n * and y corresponds to the row of the matrix\r\n * TileData.ts should be treated like graph nodes\r\n */\r\nclass RectGrid implements Grid\r\n{\r\n    private readonly tiles: Tile[][];\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    /**\r\n     * Constructs a grid either with empty or predefined tiles\r\n     * @param width of the grid\r\n     * @param height of grid\r\n     * will perform a defensive copy to the grid\r\n     */\r\n    constructor(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.tiles = createEmptyGrid(width, height);\r\n    }\r\n\r\n    getWidth() {\r\n        return this.width;\r\n    }\r\n\r\n    getHeight() {\r\n        return this.height;\r\n    }\r\n\r\n    /**\r\n     * Checks if a given point is in bounds\r\n     * Other functions assume arguments are in bounds, this should be used\r\n     * if there is reasonable doubt about whether a point is in bounds\r\n     * @param point, to check\r\n     */\r\n    inBounds(point: Point) {\r\n        return point.x >= 0 && point.x < this.width && point.y >= 0 && point.y < this.height;\r\n    }\r\n\r\n    /**\r\n     * Retrieves a defensive tile for a position\r\n     * Defensive copy prevents this object from being mutated without calling\r\n     * a mutate function\r\n     * @param point, point to get\r\n     */\r\n    get(point: Point): Tile {\r\n        return {\r\n            point: this.tiles[point.y][point.x].point,\r\n            data: this.tiles[point.y][point.x].data\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Mutates a position's tile to solid or non solid\r\n     * @param point, point to mutate\r\n     * @param data to mutate to\r\n     */\r\n    mutate(point: Point, data: TileData) {\r\n        this.tiles[point.y][point.x].data = data;\r\n    }\r\n\r\n    /**\r\n     * Mutates a a tile by point\r\n     * @param tile to mutate\r\n     */\r\n    mutateTile(tile: Tile) {\r\n        this.tiles[tile.point.y][tile.point.x].data = tile.data;\r\n    }\r\n\r\n    /**\r\n     * Mutate tile at point\r\n     * @param point to mutate at\r\n     * @param solid to determine what default tile to create\r\n     */\r\n    mutateDefault = (point: Point, solid: boolean) => {\r\n        this.mutate(\r\n            point, createTile(solid)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Outputs the grid to a console\r\n     * @param console\r\n     */\r\n    output(console: Console) {\r\n        for(let y = 0; y < this.height; y++) {\r\n            let str = '';\r\n            for(let x = 0; x < this.width; x++) {\r\n                str += this.tiles[y][x].data.isSolid + ', ';\r\n            }\r\n            console.log(str);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns json of tiles\r\n     */\r\n    getJson() {\r\n        return JSON.stringify(this.tiles);\r\n    }\r\n\r\n    /**\r\n     * Determines if a tile can be walked on\r\n     * @param point\r\n     */\r\n    walkable(point: Point) {\r\n        return !this.tiles[point.y][point.x].data.isSolid;\r\n    }\r\n\r\n    isSolid(point: Point) {\r\n        return this.tiles[point.y][point.x].data.isSolid;\r\n    }\r\n\r\n    clone(): Grid {\r\n        const grid = new RectGrid(this.width, this.height);\r\n        for(let y = 0; y < grid.height; y++) {\r\n            for(let x = 0; x < grid.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                }\r\n                grid.mutateTile(this.get(point));\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a 2d matrix of empty nodes\r\n */\r\nfunction createEmptyGrid(width: number, height: number) {\r\n    const nodes: Tile[][] = [];\r\n    for(let y = 0; y < height; y++) {\r\n        const row: Tile[] = [];\r\n        for(let x = 0; x < width; x++) {\r\n            row.push({\r\n                point: {\r\n                    x: x, y: y\r\n                },\r\n                data: createTile(false)\r\n            });\r\n        }\r\n        nodes.push(row);\r\n    }\r\n    return nodes;\r\n}\r\n\r\nexport default RectGrid;","var _g, _g2, _g3;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgWeight(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    width: \"21.875px\",\n    height: \"21.875px\",\n    viewBox: \"0 0 21.875 21.875\",\n    enableBackground: \"new 0 0 21.875 21.875\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Layer_4\",\n    display: \"none\"\n  }, /*#__PURE__*/React.createElement(\"image\", {\n    display: \"inline\",\n    overflow: \"visible\",\n    width: 18,\n    height: 24,\n    xlinkHref: \"../Downloads/yoooo/glyphicons-673-kettlebell.png\",\n    transform: \"matrix(0.8497 0 0 0.8497 3.4233 1.0347)\"\n  }))), _g2 || (_g2 = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Layer_3\"\n  }, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"line\", {\n    fill: \"#420863\",\n    x1: 14.587,\n    y1: 21.873,\n    x2: 14.587,\n    y2: 21.873\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    fill: \"#420863\",\n    x1: 14.587,\n    y1: 21.873,\n    x2: 14.587,\n    y2: 21.873\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    fill: \"#420863\",\n    x1: 14.587,\n    y1: 21.873,\n    x2: 14.587,\n    y2: 21.873\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    fill: \"#420863\",\n    x1: 14.587,\n    y1: 21.873,\n    x2: 14.587,\n    y2: 21.873\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    fill: \"#420863\",\n    x1: 14.587,\n    y1: 21.873,\n    x2: 14.587,\n    y2: 21.873\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    fill: \"#420863\",\n    x1: 14.587,\n    y1: 21.873,\n    x2: 14.587,\n    y2: 21.873\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    fill: \"#420863\",\n    x1: 14.587,\n    y1: 21.873,\n    x2: 14.587,\n    y2: 21.873\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    fill: \"#420863\",\n    x1: 14.587,\n    y1: 21.873,\n    x2: 14.587,\n    y2: 21.873\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    fill: \"#420863\",\n    x1: 14.587,\n    y1: 21.873,\n    x2: 14.587,\n    y2: 21.873\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#420863\",\n    d: \"M6.531,21.38c-1.805-1.345-2.973-3.494-2.973-5.917c0-2.421,1.167-4.569,2.969-5.915\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    fill: \"#420863\",\n    x1: 7.287,\n    y1: 21.875,\n    x2: 7.282,\n    y2: 21.872\n  }), /*#__PURE__*/React.createElement(\"polyline\", {\n    fill: \"#420863\",\n    points: \"15.345,21.376 6.527,21.376 6.527,9.549 15.345,9.549 15.345,21.376  \"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    fill: \"none\",\n    stroke: \"#420863\",\n    strokeWidth: 2,\n    strokeMiterlimit: 10,\n    cx: 11.012,\n    cy: 6.914,\n    r: 5.512\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#420863\",\n    d: \"M15.345,21.378c1.806-1.345,2.974-3.494,2.973-5.917c0-2.421-1.167-4.569-2.968-5.915\"\n  })))), _g3 || (_g3 = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Layer_2\",\n    display: \"none\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    display: \"inline\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    x: 3.778,\n    y: 11.427,\n    transform: \"matrix(-0.7071 0.7071 -0.7071 -0.7071 28.6357 16.3531)\",\n    fill: \"#420863\",\n    width: 14.306,\n    height: 5.361\n  }), /*#__PURE__*/React.createElement(\"rect\", {\n    x: 3.792,\n    y: 5.088,\n    transform: \"matrix(-0.7071 -0.7071 0.7071 -0.7071 13.1915 20.9994)\",\n    fill: \"#420863\",\n    width: 14.305,\n    height: 5.361\n  })))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgWeight);\nexport default __webpack_public_path__ + \"static/media/weight.2e4bdffd.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\r\nimport './Grid.css';\r\nimport {Point} from '../../pathfinding/core/Components';\r\n\r\nexport interface TileProps {\r\n    tileWidth: number,\r\n    point: Point,\r\n    color: string,\r\n    doAnimation: boolean\r\n}\r\n\r\nexport interface TileState {\r\n    tileSize: number\r\n}\r\n\r\nabstract class TileFg<IProps extends TileProps, IState extends TileState>\r\n    extends React.Component<IProps, IState>\r\n{\r\n    protected constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    /**\r\n     * Animation to expand element from half size to full size over a few milliseconds\r\n     * Can be slow to execute so animations should be enabled with caution\r\n     * @param expansionDuration in milliseconds\r\n     */\r\n    protected applyExpandAnimation = (expansionDuration: number) => {\r\n        const expansions = 10;\r\n        const expansionStep = expansionDuration/expansions;\r\n        const overStep = 2;\r\n        const original = this.state.tileSize;\r\n        for(let i = 1; i <= expansions + overStep; i++) {\r\n            const expand = () => this.setState({\r\n                tileSize: original + i * (this.props.tileWidth/(expansions))\r\n            });\r\n            setTimeout(expand, i * expansionStep);\r\n        }\r\n        let time = expansions + overStep + 1;\r\n        for(let i = expansions + overStep - 0.5; i >= expansions; i -= 0.5) {\r\n            const shrink = () => this.setState({\r\n                tileSize: original + i * (this.props.tileWidth/(expansions))\r\n            });\r\n            setTimeout(shrink, time * expansionStep);\r\n            time += 6;\r\n        }\r\n    }\r\n\r\n    protected getStyle() {\r\n        return {\r\n            fill: this.props.color,\r\n            stroke: 'none',\r\n            display: 'block'\r\n        };\r\n    }\r\n\r\n    protected getDimensions() {\r\n        const width = this.state.tileSize;\r\n        const top = this.props.point.y * this.props.tileWidth + (this.props.tileWidth - width)/2;\r\n        const left = this.props.point.x * this.props.tileWidth + (this.props.tileWidth - width)/2;\r\n        return {\r\n            width: width,\r\n            top: top,\r\n            left: left\r\n        }\r\n    }\r\n}\r\n\r\nexport default TileFg;","import React from 'react';\r\nimport './Grid.css';\r\nimport TileFg, {TileProps, TileState} from './TileFg';\r\n\r\nclass SolidFg extends TileFg<TileProps, TileState>\r\n{\r\n    constructor(props: TileProps) {\r\n        super(props);\r\n        const size = this.props.doAnimation ?  0 : this.props.tileWidth;\r\n        this.state = {\r\n            tileSize: size\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.props.doAnimation) {\r\n            this.applyExpandAnimation(100);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const dimensions = this.getDimensions();\r\n        return (\r\n            <rect x={dimensions.left} y={dimensions.top}\r\n                  shapeRendering='crispEdges'\r\n                  width={dimensions.width} height={dimensions.width}\r\n                  style={this.getStyle()} className={'svg-tile'}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default SolidFg;","import React from 'react';\r\nimport {ReactComponent as Weight} from '../web-content/weight.svg';\r\nimport TileFg, {TileProps, TileState} from './TileFg';\r\n\r\ninterface IProps extends TileProps{\r\n    cost: number\r\n}\r\n\r\ninterface IState extends TileState {\r\n    showNumber: boolean\r\n}\r\n\r\nclass WeightFg extends TileFg<IProps, IState>\r\n{\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const size = this.props.doAnimation ?  0 : this.props.tileWidth;\r\n        this.state = {\r\n            tileSize: size,\r\n            showNumber: !this.props.doAnimation\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.props.doAnimation) {\r\n            const expansionDuration = 100;\r\n            this.applyExpandAnimation(100);\r\n            setTimeout(() => this.setState({\r\n                showNumber: true\r\n            }), expansionDuration);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const dimensions = this.getDimensions();\r\n        const children: JSX.Element[] = [];\r\n        children.push(\r\n            <Weight width={dimensions.width} height={dimensions.width}\r\n                    style={this.getStyle()} className={'svg-tile'}\r\n            />\r\n        );\r\n        if(this.state.showNumber) {\r\n            children.push(\r\n                <text x='50%' y='70%'\r\n                      dominantBaseline='middle'\r\n                      textAnchor='middle'\r\n                      fill={'white'}\r\n                      fontSize={'0.8em'}\r\n                      className={'svg-text'}\r\n                >\r\n                    {this.props.cost}\r\n                </text>\r\n            );\r\n        }\r\n        return (\r\n            <svg x={dimensions.left} y={dimensions.top}\r\n                 width={dimensions.width} height={dimensions.width}>\r\n                {children}\r\n            </svg>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeightFg;","import React, {RefObject} from 'react';\r\nimport './Grid.css';\r\nimport {createTile, Point, Tile, TileData} from '../../pathfinding/core/Components';\r\nimport RectGrid, {Grid} from '../../pathfinding/core/Grid';\r\nimport SolidFg from './SolidFg';\r\nimport WeightFg from './WeightFg';\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    tilesX: number,\r\n    tilesY: number,\r\n    onTilesDragged: () => void,\r\n    topMargin: number,\r\n}\r\n\r\ninterface IState {\r\n    grid: Grid,\r\n    initial: Point,\r\n    goal: Point,\r\n    path: Tile[]\r\n}\r\n\r\nconst SOLID_COLOR = 'rgb(45, 48, 54)';\r\nconst INITIAL_COLOR = 'rgb(131, 217, 52)';\r\nconst GOAL_COLOR = 'rgb(203, 75, 14)';\r\nconst ARROW_PATH_COLOR = 'rgb(73, 79, 250)';\r\n\r\nconst BASE_WIDTH = 27;\r\n\r\nclass GridForeground extends React.Component<IProps,IState>\r\n{\r\n    private svg: RefObject<SVGSVGElement> = React.createRef();\r\n\r\n    private tilePointer: TileData;\r\n\r\n    private mouseDown0: boolean = false;\r\n    private mouseDown2: boolean = false;\r\n    private draggingInitial: boolean = false;\r\n    private draggingGoal: boolean = false;\r\n    private disable: boolean = false;\r\n\r\n    private doTileAnimation: boolean = true;\r\n\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    /**\r\n     * Constructs a GridForeground with immutable height and width\r\n     * @param props\r\n     */\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.width = this.props.tilesX;\r\n        this.height = this.props.tilesY;\r\n        const end = this.calcEndPointInView();\r\n        this.tilePointer = createTile(true);\r\n        this.state = {\r\n            grid: new RectGrid(this.width, this.height),\r\n            path: [],\r\n            initial: {\r\n                x: ((end.x)/3) >> 0,\r\n                y: ((end.y)/3) >> 0\r\n            },\r\n            goal: {\r\n                x: ((2*(end.x)/3) >> 0) - 1,\r\n                y: ((2*(end.y)/3) >> 0) - 1\r\n            }\r\n        }\r\n    }\r\n\r\n    changeTile = (data: TileData) => {\r\n        this.tilePointer = data;\r\n    }\r\n\r\n    calcEndPointInView() {\r\n        const xEnd = Math.round(window.innerWidth / this.props.tileWidth);\r\n        const yEnd = Math.round((window.innerHeight - this.props.topMargin - 30) / this.props.tileWidth);\r\n        return {\r\n            x: xEnd, y: yEnd\r\n        }\r\n    }\r\n\r\n    toggleDisable() {\r\n        this.disable = !this.disable;\r\n    }\r\n\r\n    getBoundingRect() {\r\n        return this.svg.current!.getBoundingClientRect();\r\n    }\r\n\r\n    private mouseDown = (e: MouseEvent) => {\r\n        e.preventDefault();\r\n        const bounds = this.getBoundingRect();\r\n        this.onPress(e.clientX - bounds.left, e.clientY - bounds.top, e.button);\r\n    }\r\n\r\n    private mouseUp = (e: MouseEvent) => {\r\n        e.preventDefault();\r\n        if(e.button === 0) {\r\n            this.draggingGoal = false;\r\n            this.draggingInitial = false;\r\n            this.mouseDown0 = false;\r\n        } else if(e.button === 2) {\r\n            this.mouseDown2 = false;\r\n        }\r\n    }\r\n\r\n    private mouseMove = (e: MouseEvent) => {\r\n        const bounds = this.getBoundingRect();\r\n        this.onDrag(e.clientX - bounds.left, e.clientY - bounds.top);\r\n    }\r\n\r\n    private touchStart = (e: TouchEvent) => {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        const bounds = this.getBoundingRect();\r\n        this.onTouch(touch.clientX - bounds.left, touch.clientY - bounds.top);\r\n    }\r\n\r\n    private touchMove = (e: TouchEvent) => {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        const bounds = this.getBoundingRect();\r\n        this.onDrag(touch.clientX - bounds.left, touch.clientY - bounds.top);\r\n    }\r\n\r\n    private onEndingEvent = (e: Event) => {\r\n        e.preventDefault();\r\n        this.draggingGoal = false;\r\n        this.draggingInitial = false;\r\n        this.mouseDown0 = false;\r\n        this.mouseDown2 = false;\r\n    }\r\n\r\n    /**\r\n     * Responds to the event thrown at screen coordinates on press\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     * @param button\r\n     */\r\n    private onPress = (xCoordinate: number, yCoordinate: number, button: number) => {\r\n        const point = this.calculatePoint(xCoordinate,yCoordinate);\r\n        if(button === 0) {\r\n            this.mouseDown0 = true;\r\n            if(pointsEqual(point, this.state.initial)) {\r\n                this.draggingInitial = true;\r\n            } else if(pointsEqual(point, this.state.goal)) {\r\n                this.draggingGoal = true;\r\n            } else if(!this.disable) {\r\n                this.drawTile(point);\r\n            }\r\n        } else if(button === 2) {\r\n            this.mouseDown2 = true;\r\n            if(!pointsEqual(point,this.state.initial) && !pointsEqual(point, this.state.goal) && !this.disable) {\r\n                this.eraseTile(point);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Responds to the event thrown at screen coordinates on touch\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     */\r\n    private onTouch = (xCoordinate: number, yCoordinate: number) => {\r\n        const point = this.calculatePoint(xCoordinate,yCoordinate);\r\n        if(pointsEqual(point, this.state.initial)) {\r\n            this.mouseDown0 = true;\r\n            this.draggingInitial = true;\r\n        } else if(pointsEqual(point, this.state.goal)) {\r\n            this.mouseDown0 = true;\r\n            this.draggingGoal = true;\r\n        } else if(!this.state.grid.isSolid(point)) {\r\n            this.mouseDown0 = true;\r\n            if(!this.disable) {\r\n                this.drawTile(point);\r\n            }\r\n        } else {\r\n            this.mouseDown2 = true;\r\n            if(!pointsEqual(point, this.state.initial) && !pointsEqual(point, this.state.goal) && !this.disable) {\r\n                this.eraseTile(point);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Responds to the event thrown at screen coordinates on drag/move\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     */\r\n    private onDrag = (xCoordinate: number, yCoordinate: number) => {\r\n        const point = this.calculatePoint(xCoordinate,yCoordinate);\r\n        if(this.mouseDown0) {\r\n            if(this.draggingInitial) {\r\n                this.moveInitial(point);\r\n            } else if(this.draggingGoal) {\r\n                this.moveGoal(point);\r\n            } else if(!pointsEqual(point,this.state.initial) && !pointsEqual(point, this.state.goal) && !this.disable) {\r\n                this.drawTile(point);\r\n            }\r\n        } else if(this.mouseDown2) {\r\n            if(!pointsEqual(point, this.state.initial) && !pointsEqual(point, this.state.goal) && !this.disable) {\r\n                this.eraseTile(point);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw an entire new grid on the foreground with disabled animations\r\n     * @param grid\r\n     */\r\n    drawGrid = (grid: Grid) => {\r\n        this.doTileAnimation = false;\r\n        this.setState({\r\n            grid: grid\r\n        }, () => this.doTileAnimation = true)\r\n    }\r\n\r\n    /**\r\n     * Draw tile at point\r\n     * @param point\r\n     */\r\n    drawTile = (point: Point) => {\r\n        const grid = this.state.grid.clone();\r\n        if(grid.inBounds(point)) {\r\n            grid.mutateTile({\r\n                point: point,\r\n                data: this.tilePointer\r\n            });\r\n        }\r\n        this.setState({\r\n            grid: grid\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if a node is visualized, then changes the tile to empty if it isn't\r\n     * @param point\r\n     */\r\n    eraseTile = (point: Point) => {\r\n        const grid = this.state.grid.clone();\r\n        if(grid.inBounds(point)) {\r\n            grid.mutateDefault(point, false);\r\n        }\r\n        this.setState({\r\n            grid: grid\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clear grid in state\r\n     */\r\n    clearTiles = () => {\r\n        const grid = this.state.grid.clone();\r\n        for(let y = 0; y < this.height; y++) {\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                }\r\n                grid.mutateDefault(point, false);\r\n            }\r\n        }\r\n        this.setState({\r\n            grid: grid\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Moves initial to a new point\r\n     * @param point\r\n     */\r\n    moveInitial = (point: Point) => {\r\n        if(this.canMoveEndPoint(point)) {\r\n            this.setState({\r\n                initial: point\r\n            }, () => this.props.onTilesDragged());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves goal to a new point\r\n     * @param point\r\n     */\r\n    moveGoal = (point: Point) => {\r\n        if(this.canMoveEndPoint(point)) {\r\n            this.setState({\r\n                goal: point\r\n            }, () => this.props.onTilesDragged());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if we can move any of the end points (goal or initial) to that point\r\n     * @param point\r\n     */\r\n    canMoveEndPoint = (point: Point) => {\r\n        return this.state.grid.inBounds(point)\r\n            && !this.state.grid.isSolid(point)\r\n            && !pointsEqual(this.state.initial, point)\r\n            && !pointsEqual(this.state.goal, point)\r\n            && !this.disable;\r\n    }\r\n\r\n    /**\r\n     * Draw a path onto the grid\r\n     * @param path\r\n     */\r\n    drawPath = (path: Tile[]) => {\r\n        this.setState({\r\n            path: path.slice()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Erase path from the grid\r\n     */\r\n    erasePath = () => {\r\n        this.setState({\r\n            path: []\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Converts real screen x,y coordinates into\r\n     * a 2d point position on the grid\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     */\r\n    calculatePoint = (xCoordinate: number, yCoordinate: number) => {\r\n        return {\r\n            x: Math.floor(xCoordinate/this.props.tileWidth),\r\n            y: Math.floor(yCoordinate/this.props.tileWidth)\r\n        }\r\n    }\r\n\r\n    resetPoints = () => {\r\n        const end = this.calcEndPointInView();\r\n        this.setState({\r\n            initial: {\r\n                x: ((end.x)/3) >> 0,\r\n                y: ((end.y)/3) >> 0\r\n            },\r\n            goal: {\r\n                x: ((2*(end.x)/3) >> 0) - 1,\r\n                y: ((2*(end.y)/3) >> 0) - 1\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <svg ref={this.svg} xmlns='http://www.w3.org/2000/svg' className='grid'\r\n                 onContextMenu={e => e.preventDefault()}\r\n                 onMouseDown={e => this.mouseDown(e.nativeEvent)}\r\n                 onMouseUp={e => this.mouseUp(e.nativeEvent)}\r\n                 onMouseMove={e => this.mouseMove(e.nativeEvent)}\r\n                 onMouseLeave={e => this.onEndingEvent(e.nativeEvent)}\r\n                 onTouchStart={e => this.touchStart(e.nativeEvent)}\r\n                 onTouchMoveCapture={e => this.touchMove(e.nativeEvent)}\r\n                 onTouchEnd={e => this.onEndingEvent(e.nativeEvent)}\r\n                 onTouchCancel={e => this.onEndingEvent(e.nativeEvent)}\r\n            >\r\n                <defs>\r\n                    <marker id='arrowhead-path' markerWidth='3' markerHeight='3'\r\n                            refX='0' refY='1.5' orient='auto'\r\n                            fill={ARROW_PATH_COLOR}\r\n                    >\r\n                        <polygon points='0 0, 3 1.5, 0 3'/>\r\n                    </marker>\r\n                </defs>\r\n                {this.renderEndTile(this.state.initial, INITIAL_COLOR,'initial')}\r\n                {this.renderEndTile(this.state.goal, GOAL_COLOR,'goal')}\r\n                {this.renderPath()}\r\n                {this.renderTiles()}\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    private renderPath = () => {\r\n        const lines: JSX.Element[] = [];\r\n        for(let i = 0; i < this.state.path.length-1; i++) {\r\n            const first = this.state.path[i].point;\r\n            const second = this.state.path[i+1].point;\r\n            lines.push(this.renderPathArrow(i, first, second));\r\n        }\r\n        return lines;\r\n    }\r\n\r\n    private renderPathArrow = (index: number, first: Point, second: Point) => {\r\n        const width = this.props.tileWidth;\r\n        const offset = width/2;\r\n        const firstX = first.x * width;\r\n        const firstY = first.y * width;\r\n        const secondX = second.x * width;\r\n        const secondY = second.y * width;\r\n        const offsetX = (secondX - firstX)/4;\r\n        const offsetY = (secondY - firstY)/4;\r\n        return (\r\n            <line key={'path ' + index}\r\n                  x1={firstX + offset + offsetX}\r\n                  y1={firstY + offset + offsetY}\r\n                  x2={secondX + offset - offsetX}\r\n                  y2={secondY + offset - offsetY}\r\n                  stroke={ARROW_PATH_COLOR}\r\n                  strokeWidth={2 * this.props.tileWidth/BASE_WIDTH}\r\n                  className='line'\r\n                  markerEnd='url(#arrowhead-path)' />\r\n        );\r\n    }\r\n\r\n    private renderTiles = () => {\r\n        const tiles: JSX.Element[] = [];\r\n        for(let y = 0; y < this.height; y++) {\r\n            for(let x = 0; x < this.width; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                }\r\n                const cost = this.state.grid.get(point).data.pathCost;\r\n                if(this.state.grid.isSolid(point)) {\r\n                    tiles.push(\r\n                        <SolidFg key={point.x + ',' + point.y} point={point}\r\n                                 doAnimation={this.doTileAnimation}\r\n                                 tileWidth={this.props.tileWidth}\r\n                                 color={SOLID_COLOR}\r\n                        />\r\n                    );\r\n                } else if(cost > 1) {\r\n                    tiles.push(\r\n                        <WeightFg key={point.x + ',' + point.y} point={point}\r\n                                  doAnimation={this.doTileAnimation}\r\n                                  tileWidth={this.props.tileWidth}\r\n                                  color={SOLID_COLOR}\r\n                                  cost={cost}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    private renderEndTile = (point: Point, color: string, key: string) => {\r\n        return <SolidFg key={key} point={point} doAnimation={false}\r\n                        tileWidth={this.props.tileWidth}\r\n                        color={color}/>\r\n    }\r\n}\r\n\r\nfunction pointsEqual(point1: Point, point2: Point) {\r\n    return point1.x === point2.x && point1.y === point2.y;\r\n}\r\n\r\nexport default GridForeground;","import React, {RefObject} from 'react';\r\nimport './Grid.css';\r\n\r\ninterface IProps {\r\n    algorithm: string,\r\n    length: number,\r\n    cost: number,\r\n    time: number,\r\n    nodes: number\r\n}\r\n\r\nclass StatsPanel extends React.Component<IProps>\r\n{\r\n    private readonly textLog: RefObject<HTMLTextAreaElement> = React.createRef();\r\n\r\n    componentDidUpdate() {\r\n        this.textLog.current!.scrollTop = this.textLog.current!.scrollHeight;\r\n    }\r\n\r\n    getHeight() {\r\n        //top border: 1\r\n        return this.textLog.current!.clientHeight + 1;\r\n    }\r\n\r\n    render() {\r\n        const time = precise(this.props.time);\r\n        const text = this.props.algorithm === '' ? '' :\r\n            this.props.algorithm +\r\n            ' visited ' +\r\n            this.props.nodes +\r\n            ' nodes in ' +\r\n            time +\r\n            ' ms. Path length = ' +\r\n            this.props.length +\r\n            '. Path cost = ' +\r\n            this.props.cost +\r\n            '. ';\r\n        return(\r\n            <textarea tabIndex={-1} ref={this.textLog} readOnly={true}\r\n                      className='stats-text-area no-select'\r\n                      value={text} unselectable={'on'} onDrop={() => false}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction precise(x: number) {\r\n    return x.toFixed(2);\r\n}\r\n\r\nexport default StatsPanel;","import {Point, Tile} from './Components';\r\nimport Navigator, {UNIT} from './Navigator';\r\n\r\n/**\r\n * Concretion of a Plus Navigator for a grid\r\n * Allows movement akin to a 'plus' symbol\r\n */\r\nclass PlusNavigator extends Navigator\r\n{\r\n    /**\r\n     * Adds the neighbors of a point to the left, right, top and down\r\n     * @param point\r\n     */\r\n    neighbors(point: Point): Tile[] {\r\n        const tiles: Tile[] = [];\r\n        if(point.x + UNIT < this.grid.getWidth()) {\r\n            const tile = this.grid.get({\r\n                x: point.x + UNIT,\r\n                y: point.y\r\n            })\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.y + UNIT < this.grid.getHeight()) {\r\n            const tile = this.grid.get({\r\n                x: point.x,\r\n                y: point.y + UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.x - UNIT >= 0) {\r\n            const tile = this.grid.get({\r\n                x: point.x - UNIT,\r\n                y: point.y\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.y - UNIT >= 0) {\r\n            const tile = this.grid.get({\r\n                x: point.x,\r\n                y: point.y - UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    /**\r\n     * Step cost function that works by getting the pathCost stored in the grid\r\n     * from one point a to b\r\n     * @param a\r\n     * @param b to point to travel to\r\n     */\r\n    cost(a: Point, b: Point) {\r\n        return this.grid.get(b).data.pathCost;\r\n    }\r\n\r\n    getType() {\r\n        return 'plus';\r\n    }\r\n}\r\n\r\nexport default PlusNavigator;","import {Grid} from './Grid';\r\nimport {Point, Tile} from './Components';\r\n\r\nexport const UNIT = 1; //number of tiles we can move at once\r\n\r\n/**\r\n * Describes an abstract navigator for a grid\r\n * Provides graph-like traversal for the grid\r\n * Determines where we can travel to from a certain point,\r\n * whether we have reached a destination, and the cost to\r\n * travel to a certain point\r\n */\r\nabstract class Navigator\r\n{\r\n    protected readonly grid: Grid;\r\n\r\n    constructor(grid: Grid) {\r\n        this.grid = grid;\r\n    }\r\n\r\n    getGrid() {\r\n        return this.grid;\r\n    }\r\n\r\n    /**\r\n     * Goal check function: Checks if two points are equal\r\n     * @param a\r\n     * @param b\r\n     */\r\n    equals(a: Point, b: Point) {\r\n        return a.x === b.x && a.y === b.y;\r\n    }\r\n\r\n    /**\r\n     * Step cost function from a to b\r\n     * @param a\r\n     * @param b to point to travel to\r\n     */\r\n    abstract cost(a: Point, b: Point): number;\r\n\r\n    /**\r\n     * Neighbors function: Gets the available neighbors for a point in a grid we can make\r\n     * in a given move\r\n     * @param point\r\n     */\r\n    abstract neighbors(point: Point): Tile[];\r\n\r\n    abstract getType(): string;\r\n}\r\n\r\nexport default Navigator;","import {Point} from '../core/Components';\r\n\r\nexport type HeuristicFunc = (a: Point, b: Point) => number;\r\n\r\nexport function manhattan(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x) ;\r\n    const dy = Math.abs(a.y - b.y);\r\n    return dx + dy;\r\n}\r\n\r\nexport function euclidean(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n}\r\n\r\nexport function octile(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.SQRT2 * Math.min(dx, dy) + Math.abs(dx - dy);\r\n}\r\n\r\nexport function chebyshev(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.max(dx, dy);\r\n}\r\n\r\nexport function nullHeuristic(): number {\r\n    return 0;\r\n}","import {Point} from '../core/Components';\r\n\r\n/**\r\n * A simple data structure that keeps track of whether keys have been added to it\r\n */\r\nexport class HashSet\r\n{\r\n    private map: {[key: string]: boolean | undefined} = {};\r\n\r\n    add(key: string) {\r\n        this.map[key] = true;\r\n    }\r\n\r\n    remove(key: string) {\r\n        this.map[key] = undefined;\r\n    }\r\n\r\n    has(key: string) {\r\n        return this.map[key] !== undefined;\r\n    }\r\n\r\n    clear() {\r\n        this.map = {};\r\n    }\r\n}\r\n\r\n/**\r\n * A simple data structure that stores a type at a key\r\n */\r\nexport class HashTable<Value>\r\n{\r\n    private map: {[key: string]: Value | undefined} = {};\r\n\r\n    add(key: string, data: Value) {\r\n        this.map[key] = data;\r\n    }\r\n\r\n    remove(key: string) {\r\n        this.map[key] = undefined;\r\n    }\r\n\r\n    get(key: string) {\r\n        return this.map[key];\r\n    }\r\n\r\n    has(key: string) {\r\n        return this.map[key] !== undefined;\r\n    }\r\n\r\n    clear() {\r\n        this.map = {};\r\n    }\r\n}\r\n\r\n/**\r\n * Serialize point into a unique string\r\n * @param point\r\n */\r\nexport function stringify(point: Point) {\r\n    return 'x' + point.x + 'y' + point.y;\r\n}","/**\r\n * A compare function to determine if a is 'better' (deserves a higher position) than b\r\n */\r\nexport type Comparator<E> = (a: E, b: E) => boolean\r\n\r\n/**\r\n * Minimalist Implementation of the heap data structure as an array\r\n */\r\nclass Heap<E>\r\n{\r\n    private elements: E[] = [];\r\n    readonly compare: Comparator<E>;\r\n\r\n    constructor(compare: Comparator<E>) {\r\n        this.compare = compare;\r\n    }\r\n\r\n    /**\r\n     * Returns the size of the heap\r\n     */\r\n    getSize() {\r\n        return this.elements.length;\r\n    }\r\n\r\n    /**\r\n     * Checks if heap is empty\r\n     */\r\n    isEmpty() {\r\n        return this.elements.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Add a new element to the heap\r\n     * @param e\r\n     */\r\n    push(e: E) {\r\n        this.elements.push(e);\r\n        this.siftUp(this.elements.length-1); //last element\r\n    }\r\n\r\n    /**\r\n     * Returns the top of the heap without removing it\r\n     * Fails if heap is empty\r\n     */\r\n    peek() {\r\n        return this.elements[0];\r\n    }\r\n\r\n    /**\r\n     * Returns the top of the heap and removes it\r\n     * Fails if heap is empty\r\n     */\r\n    pop() {\r\n        const val = this.peek();\r\n        this.move(this.elements.length - 1, 0);\r\n        this.elements.pop();\r\n        this.siftDown(0);\r\n        return val;\r\n    }\r\n\r\n    /**\r\n     * Clear the heap\r\n     */\r\n    clear() {\r\n        this.elements = [];\r\n    }\r\n\r\n    /**\r\n     * Sifts a new element that is out of order up to the right position\r\n     * @param pos of new element\r\n     */\r\n    private siftUp(pos: number) {\r\n        let parent = ((pos - 1) / 2) >> 0; //integer division\r\n        while(parent >= 0) {\r\n            //if the current position is better than parent\r\n            if(this.compare(this.elements[pos], this.elements[parent])) {\r\n                //then current position with parent and move to next\r\n                this.swap(pos, parent);\r\n                pos = parent;\r\n                parent = ((pos - 1) / 2) >> 0;\r\n            } else {\r\n                //otherwise stop\r\n                parent = -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sifts a new element that is out of order down to the right position\r\n     * @param pos of new element\r\n     */\r\n    private siftDown(pos: number) {\r\n        const left = 2 * pos + 1;\r\n        const right = 2 * pos + 2;\r\n        //stop if the children are out of bounds\r\n        if(left >= this.elements.length) {\r\n            return;\r\n        }\r\n        //find the better child\r\n        const child = (right >= this.elements.length || this.compare(this.elements[left], this.elements[right]))\r\n            ? left : right;\r\n        //continues to sift down if the child is better than the current position\r\n        if(this.compare(this.elements[child], this.elements[pos])) {\r\n            this.swap(child, pos);\r\n            this.siftDown(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Internal move function\r\n     * @param from\r\n     * @param to\r\n     */\r\n    private move(from: number, to: number) {\r\n        this.elements[to] = this.elements[from];\r\n    }\r\n\r\n    /**\r\n     * Internal swap function\r\n     * @param a\r\n     * @param b\r\n     */\r\n    private swap(a: number, b: number) {\r\n        let val = this.elements[a];\r\n        this.elements[a] = this.elements[b];\r\n        this.elements[b] = val;\r\n    }\r\n}\r\n\r\nexport default Heap;","import {Point, Tile} from '../core/Components';\r\nimport Navigator from '../core/Navigator';\r\nimport {Node} from './Node';\r\n\r\n/**\r\n * Pathfinder performs algorithms operations on the grid\r\n * Uses the navigator rank and expand nodes\r\n */\r\nabstract class Pathfinder\r\n{\r\n    protected recentSearch: Node[] = [];\r\n    protected navigator: Navigator;\r\n\r\n    constructor(navigator: Navigator) {\r\n        this.navigator = navigator;\r\n    }\r\n\r\n    setNavigator(navigator: Navigator) {\r\n        this.navigator = navigator;\r\n    }\r\n\r\n    getNavigator() {\r\n        return this.navigator;\r\n    }\r\n\r\n    getRecentNodes() {\r\n        return this.recentSearch.length;\r\n    }\r\n\r\n    clearRecentSearch() {\r\n        this.recentSearch = [];\r\n    }\r\n\r\n    getRecentGenerations() {\r\n        return this.recentSearch.slice();\r\n    }\r\n\r\n    protected addRecent(node: Node) {\r\n        this.recentSearch.push(node);\r\n    }\r\n\r\n    abstract getAlgorithmName(): string;\r\n\r\n    /**\r\n     * Finds the best path between initial and goal on the grid\r\n     * and returns it in an array\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    abstract findPath(initial: Point, goal: Point): Tile[];\r\n}\r\n\r\n/**\r\n * Reconstructs the path from a tree, given the bottomLeaf, and\r\n * returns the shortest path in an array\r\n * @param bottomLeaf bottom of the tree to start from\r\n */\r\nexport function reconstructPath(bottomLeaf: Node): Tile[] {\r\n    return reconstructPathReversed(bottomLeaf).reverse();\r\n}\r\n\r\n/**\r\n * Reconstructs the path from a tree, given the bottomLeaf, and\r\n * returns the shortest path in an array\r\n * @param bottomLeaf bottom of the tree to start from\r\n */\r\nexport function reconstructPathReversed(bottomLeaf: Node): Tile[] {\r\n    const path: Tile[] = [];\r\n    while(bottomLeaf.parent !== null) {\r\n        path.push(bottomLeaf.tile);\r\n        bottomLeaf = bottomLeaf.parent;\r\n    }\r\n    return path;\r\n}\r\n\r\nexport default Pathfinder;","import {Tile} from '../core/Components';\r\n\r\n/**\r\n * Represents a search Tree Node\r\n */\r\nexport class Node\r\n{\r\n    parent: Node | null = null; //parent node\r\n    readonly children: Node[] = [];\r\n    readonly tile: Tile; //stores a graph node\r\n\r\n    constructor(tile: Tile) {\r\n        this.tile = tile;\r\n    }\r\n\r\n    addChild(child: Node) {\r\n        child.parent = this;\r\n        this.children.push(child);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents an heuristic weighted aStar search tree node\r\n */\r\nexport class AStarNode extends Node\r\n{\r\n    readonly g: number; //path cost\r\n    readonly fScore: number; //heuristic\r\n\r\n    constructor(tile: Tile, g: number, fScore: number) {\r\n        super(tile);\r\n        this.g = g;\r\n        this.fScore = fScore;\r\n    }\r\n\r\n    f() {\r\n        return this.fScore;\r\n    }\r\n}\r\n","import {HashSet, HashTable, stringify} from '../structures/Hash';\r\nimport Heap from '../structures/Heap';\r\nimport Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {AStarNode} from './Node';\r\nimport Navigator from '../core/Navigator';\r\nimport {euclidean, HeuristicFunc} from './Heuristics';\r\n\r\nclass AStarPathfinder extends Pathfinder\r\n{\r\n    private readonly heuristic: HeuristicFunc = (a: Point, b: Point) => euclidean(a,b);\r\n\r\n    constructor(navigator: Navigator, func?: HeuristicFunc) {\r\n        super(navigator);\r\n        if(func !== undefined) {\r\n            this.heuristic = func;\r\n        }\r\n    }\r\n\r\n    getAlgorithmName(): string {\r\n        return 'A*';\r\n    }\r\n\r\n    /**\r\n     * Performs aStar algorithm on the grid given an initial and goal point\r\n     * Always returns the shortest path, and performs well on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const openFrontier = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const closedSet = new HashSet();\r\n        const openSet = new HashTable<number>();\r\n        const root = new AStarNode(\r\n            grid.get(initial), 0, 0\r\n        );\r\n        openFrontier.push(root);\r\n        openSet.add(stringify(initial), root.g);\r\n        while (!openFrontier.isEmpty()) {\r\n            const currentNode = openFrontier.pop();\r\n            const currentPoint = currentNode.tile.point;\r\n            const currentKey = stringify(currentPoint);\r\n            openSet.remove(currentKey);\r\n            closedSet.add(currentKey);\r\n            this.addRecent(currentNode);\r\n            if (this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            for (const neighbor of this.navigator.neighbors(currentPoint)) {\r\n                const neighborPoint = neighbor.point;\r\n                const neighborKey = stringify(neighborPoint);\r\n                if(closedSet.has(neighborKey)) {\r\n                    continue;\r\n                }\r\n                const g = currentNode.g + this.stepCost(currentPoint, neighborPoint);\r\n                const f = g + this.heuristic(neighborPoint, goal);\r\n                if (!openSet.has(neighborKey) || g < openSet.get(neighborKey)!) {\r\n                    const neighborNode = new AStarNode(\r\n                        neighbor, g, f\r\n                    );\r\n                    currentNode.addChild(neighborNode);\r\n                    openFrontier.push(neighborNode);\r\n                    openSet.add(neighborKey, neighborNode.g);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * The step-cost function to be used, calculating the cost from\r\n     * currentPoint to neighborPoint. Uses the stepCost function provided by the\r\n     * navigator by default but can be overridden\r\n     * @param currentPoint\r\n     * @param neighborPoint\r\n     */\r\n    stepCost(currentPoint: Point, neighborPoint: Point) {\r\n        return this.navigator.cost(currentPoint, neighborPoint);\r\n    }\r\n}\r\n\r\nexport default AStarPathfinder;","import Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {HashSet, stringify} from '../structures/Hash';\r\nimport {Node} from './Node';\r\n\r\nclass BFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName(): string {\r\n        return 'Breadth First Search';\r\n    }\r\n\r\n    /**\r\n     * Implementation of BFS to find the shortest path from initial to point\r\n     * Doesn't always return the shortest path, and performs poorly on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const frontier: Node[] = []; //fifo, stores nodes on the frontier\r\n        const visited = new HashSet();\r\n        const root = new Node(grid.get(initial));\r\n        frontier.push(root); //enqueue\r\n        visited.add(stringify(initial));\r\n        while(frontier.length !== 0) { //not empty\r\n            const currentNode = frontier.shift()!; //dequeue\r\n            const currentPoint = currentNode.tile.point;\r\n            this.addRecent(currentNode);\r\n            if(this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            for(const neighbor of this.navigator.neighbors(currentPoint)) {\r\n                const neighborKey = stringify(neighbor.point);\r\n                if(!visited.has(neighborKey)) {\r\n                    const neighborNode = new Node(neighbor);\r\n                    currentNode.addChild(neighborNode);\r\n                    frontier.push(neighborNode); //enqueue\r\n                    visited.add(neighborKey);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default BFSPathfinder;","/**\r\n * Stack node\r\n */\r\nclass Node<E>\r\n{\r\n    next: Node<E> | null = null;\r\n    data: E;\r\n\r\n    constructor(data: E) {\r\n        this.data = data;\r\n    }\r\n}\r\n\r\n/**\r\n * Minimalist Implementation of the stack data structure\r\n */\r\nclass Stack<E>\r\n{\r\n    private top: Node<E> | null = null;\r\n    private size: number = 0;\r\n\r\n    peek() {\r\n        return this.top != null ? this.top.data : undefined;\r\n    }\r\n\r\n    push(e: E) {\r\n        const node = new Node(e);\r\n        node.next = this.top;\r\n        this.top = node;\r\n        this.size++;\r\n    }\r\n\r\n    pop() {\r\n        const top = this.peek();\r\n        if(this.top != null) {\r\n            this.top = this.top.next;\r\n            this.size--;\r\n        }\r\n        return top;\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.size === 0;\r\n    }\r\n\r\n    getSize() {\r\n        return this.size;\r\n    }\r\n}\r\n\r\nexport default Stack;","import Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {HashSet, stringify} from '../structures/Hash';\r\nimport {Node} from './Node';\r\nimport Stack from '../structures/Stack';\r\n\r\nclass DFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName(): string {\r\n        return 'Depth First Search';\r\n    }\r\n\r\n    /**\r\n     * Calls DFS between a start and goal point, will typically not find the 'Best' path,\r\n     * and will instead find the best path capable for the algorithm\r\n     * As this algorithm is non optimal it should only be used for educational purposes\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const root = new Node(grid.get(initial));\r\n        const frontier = new Stack<Node>();\r\n        frontier.push(root);\r\n        const visited = new HashSet();\r\n        while(!frontier.isEmpty()) {\r\n            const currentNode = frontier.pop()!;\r\n            const currentPoint = currentNode.tile.point;\r\n            visited.add(stringify(currentPoint));\r\n            this.addRecent(currentNode);\r\n            if(this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            const neighbors = this.navigator.neighbors(currentPoint).reverse();\r\n            for(const neighbor of neighbors){\r\n                const neighborKey = stringify(neighbor.point);\r\n                if(!visited.has(neighborKey)) {\r\n                    const neighborNode = new Node(neighbor);\r\n                    currentNode.addChild(neighborNode);\r\n                    frontier.push(neighborNode);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default DFSPathfinder;\r\n","import {HashSet, HashTable, stringify} from '../structures/Hash';\r\nimport Heap from '../structures/Heap';\r\nimport Pathfinder, {reconstructPath, reconstructPathReversed} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {AStarNode} from './Node';\r\nimport Navigator from '../core/Navigator';\r\nimport {euclidean, HeuristicFunc} from './Heuristics';\r\n\r\ninterface ControlStructures {\r\n    openSet: HashTable<AStarNode>,\r\n    closedSet: HashSet,\r\n    openFrontier: Heap<AStarNode>\r\n}\r\n\r\nclass BiAStarPathfinder extends Pathfinder\r\n{\r\n    private readonly heuristic: HeuristicFunc = (a: Point, b: Point) => euclidean(a,b);\r\n\r\n    constructor(navigator: Navigator, func?: HeuristicFunc) {\r\n        super(navigator);\r\n        if(func !== undefined) {\r\n            this.heuristic = func;\r\n        }\r\n    }\r\n\r\n    getAlgorithmName(): string {\r\n        return 'Bidirectional A*';\r\n    }\r\n\r\n    /**\r\n     * Performs aStar algorithm on the grid given an initial and goal point\r\n     * Doesn't always returns the shortest path, but performs well on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const closedSet = new HashSet();\r\n        const startOpenFrontier = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const startOpenSet = new HashTable<AStarNode>();\r\n        const endOpenFrontier = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const endOpenSet = new HashTable<AStarNode>();\r\n        const initialRoot = new AStarNode(\r\n            grid.get(initial), 0, 0\r\n        );\r\n        startOpenFrontier.push(initialRoot);\r\n        startOpenSet.add(stringify(initial), initialRoot);\r\n        const goalRoot = new AStarNode(\r\n            grid.get(goal), 0, 0\r\n        );\r\n        endOpenFrontier.push(goalRoot);\r\n        endOpenSet.add(stringify(goal), goalRoot);\r\n        while (!startOpenFrontier.isEmpty() && !endOpenFrontier.isEmpty()) {\r\n            //expand startOpenFrontier\r\n            const startCurrentNode = startOpenFrontier.pop();\r\n            const startCurrentPoint = startCurrentNode.tile.point;\r\n            const startCurrentPointKey = stringify(startCurrentPoint);\r\n            startOpenSet.remove(startCurrentPointKey);\r\n            closedSet.add(startCurrentPointKey);\r\n            this.addRecent(startCurrentNode);\r\n            if(endOpenSet.has(startCurrentPointKey)) {\r\n                if(startCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startCurrentNode.parent\r\n                    ).concat(reconstructPathReversed(\r\n                        endOpenSet.get(startCurrentPointKey)!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            this.doAStarExpansion({\r\n                openFrontier: startOpenFrontier,\r\n                openSet: startOpenSet,\r\n                closedSet: closedSet\r\n            }, startCurrentNode, goal);\r\n            //expand endOpenFrontier\r\n            const endCurrentNode = endOpenFrontier.pop();\r\n            const endCurrentPoint = endCurrentNode.tile.point;\r\n            const endCurrentPointKey = stringify(endCurrentPoint);\r\n            endOpenSet.remove(endCurrentPointKey);\r\n            closedSet.add(endCurrentPointKey);\r\n            this.addRecent(endCurrentNode);\r\n            if(startOpenSet.has(endCurrentPointKey)) {\r\n                if(endCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startOpenSet.get(endCurrentPointKey)!\r\n                    ).concat(reconstructPathReversed(\r\n                        endCurrentNode.parent!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            this.doAStarExpansion({\r\n                openFrontier: endOpenFrontier,\r\n                openSet: endOpenSet,\r\n                closedSet: closedSet\r\n            }, endCurrentNode, initial);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    private doAStarExpansion(structures: ControlStructures, currentNode: AStarNode, endPoint: Point) {\r\n        const currentPoint = currentNode.tile.point;\r\n        for (const neighbor of this.navigator.neighbors(currentPoint)) {\r\n            const neighborPoint = neighbor.point;\r\n            const neighborKey = stringify(neighborPoint);\r\n            if(structures.closedSet.has(neighborKey)) {\r\n                continue;\r\n            }\r\n            const g = currentNode.g + this.stepCost(currentPoint, neighborPoint);\r\n            const f = g + this.heuristic(neighborPoint, endPoint);\r\n            if (!structures.openSet.has(neighborKey) || g < structures.openSet.get(neighborKey)!.g) {\r\n                const neighborNode = new AStarNode(\r\n                    neighbor, g, f\r\n                );\r\n                currentNode.addChild(neighborNode);\r\n                structures.openFrontier.push(neighborNode);\r\n                structures.openSet.add(neighborKey, neighborNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The step-cost function to be used, calculating the cost from\r\n     * currentPoint to neighborPoint. Uses the stepCost function provided by the\r\n     * navigator by default but can be overridden\r\n     * @param currentPoint\r\n     * @param neighborPoint\r\n     */\r\n    stepCost(currentPoint: Point, neighborPoint: Point) {\r\n        return this.navigator.cost(currentPoint, neighborPoint);\r\n    }\r\n}\r\n\r\nexport default BiAStarPathfinder;","import Pathfinder, {reconstructPath, reconstructPathReversed} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {HashTable, stringify} from '../structures/Hash';\r\nimport {Node} from './Node';\r\n\r\ninterface ControlStructures {\r\n    frontier: Node[],\r\n    visited: HashTable<Node>\r\n}\r\n\r\nclass BiBFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName(): string {\r\n        return 'Bidirectional Breadth First Search';\r\n    }\r\n\r\n    /**\r\n     * Implementation of BFS to find the shortest path from initial to point\r\n     * Doesn't always return the shortest path, and performs poorly on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const startVisited = new HashTable<Node>();\r\n        const endVisited = new HashTable<Node>();\r\n        const startFrontier: Node[] = [];\r\n        const endFrontier: Node[] = [];\r\n        const initialRoot = new Node(grid.get(initial));\r\n        startFrontier.push(initialRoot);\r\n        startVisited.add(stringify(initial), initialRoot);\r\n        const goalRoot = new Node(grid.get(goal));\r\n        endFrontier.push(goalRoot);\r\n        endVisited.add(stringify(goal), goalRoot);\r\n        while(startFrontier.length !== 0 && endFrontier.length !== 0) {\r\n            //expand startQueue\r\n            const startCurrentNode = startFrontier.shift()!;\r\n            const startCurrentPoint = startCurrentNode.tile.point;\r\n            const startCurrentPointKey = stringify(startCurrentPoint);\r\n            this.addRecent(startCurrentNode);\r\n            if(endVisited.has(startCurrentPointKey)) {\r\n                if(startCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startCurrentNode.parent\r\n                    ).concat(reconstructPathReversed(\r\n                        endVisited.get(startCurrentPointKey)!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            this.doBFSExpansion({\r\n                frontier: startFrontier,\r\n                visited: startVisited\r\n            }, startCurrentNode);\r\n            //expand endQueue\r\n            const endCurrentNode = endFrontier.shift()!;\r\n            const endCurrentPoint = endCurrentNode.tile.point;\r\n            const endCurrentPointKey = stringify(endCurrentPoint);\r\n            this.addRecent(endCurrentNode);\r\n            if(startVisited.has(endCurrentPointKey)) {\r\n                if(endCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startVisited.get(endCurrentPointKey)!\r\n                    ).concat(reconstructPathReversed(\r\n                        endCurrentNode.parent\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            this.doBFSExpansion({\r\n                frontier: endFrontier,\r\n                visited: endVisited\r\n            }, endCurrentNode);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    private doBFSExpansion(structures: ControlStructures, currentNode: Node) {\r\n        const currentPoint = currentNode.tile.point;\r\n        for(const neighbor of this.navigator.neighbors(currentPoint)) {\r\n            const neighborKey = stringify(neighbor.point);\r\n            if(!structures.visited.has(neighborKey)) {\r\n                const neighborNode = new Node(neighbor);\r\n                currentNode.addChild(neighborNode);\r\n                structures.frontier.push(neighborNode);\r\n                structures.visited.add(neighborKey, neighborNode);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default BiBFSPathfinder;","import Navigator from '../core/Navigator';\r\nimport PlusNavigator from '../core/PlusNavigator';\r\nimport {Point} from '../core/Components';\r\nimport {Grid} from '../core/Grid';\r\nimport {chebyshev, euclidean, HeuristicFunc, manhattan, nullHeuristic, octile} from './Heuristics';\r\nimport Pathfinder from './Pathfinder';\r\nimport AStarPathfinder from './AStar';\r\nimport BFSPathfinder from './BFS';\r\nimport DFSPathfinder from './DFS';\r\nimport BiAStarPathfinder from './BidirectionalAStar';\r\nimport BiBFSPathfinder from \"./BidirectionalBFS\";\r\n\r\nconst CREATE_NAVIGATOR: {[key: string]: ((grid: Grid) => Navigator)} = {\r\n    'plus': (grid: Grid) => new PlusNavigator(grid),\r\n}\r\n\r\nconst CREATE_HEURISTIC: {[key: string]: (() => HeuristicFunc)} = {\r\n    'manhattan': () => manhattan,\r\n    'euclidean': () => euclidean,\r\n    'chebyshev': () => chebyshev,\r\n    'octile': () => octile,\r\n    'null': () => nullHeuristic\r\n}\r\n\r\nconst CREATE_PATHFINDER: {[key: string]: ((navigator: Navigator, heuristic: HeuristicFunc) => Pathfinder)} = {\r\n    'dijkstra': (navigator) => {\r\n        return new (class DijkstraPathfinder extends AStarPathfinder {\r\n            getAlgorithmName(): string {\r\n                return 'Dijkstra';\r\n            }\r\n        })(navigator, nullHeuristic);\r\n    },\r\n    'best-first': (navigator, heuristic) => {\r\n        return new (class BestFirstPathfinder extends AStarPathfinder {\r\n            stepCost(currentPoint: Point, neighborPoint: Point) {\r\n                return 0;\r\n            }\r\n            getAlgorithmName(): string {\r\n                return 'Best-First Search';\r\n            }\r\n        })(navigator, heuristic);\r\n    },\r\n    'a*': (navigator, heuristic) => {\r\n        return new AStarPathfinder(navigator, heuristic);\r\n    },\r\n    'bfs': (navigator) => {\r\n        return new BFSPathfinder(navigator);\r\n    },\r\n    'dfs': (navigator) => {\r\n        return new DFSPathfinder(navigator);\r\n    },\r\n    'bi-a*': (navigator, heuristic) => {\r\n        return new BiAStarPathfinder(navigator, heuristic);\r\n    },\r\n    'bi-dijkstra': (navigator) => {\r\n        return new (class BiDijkstraPathfinder extends BiAStarPathfinder {\r\n            getAlgorithmName(): string {\r\n                return 'Bidirectional Dijkstra';\r\n            }\r\n        })(navigator, nullHeuristic);\r\n    },\r\n    'bi-bfs': (navigator) => {\r\n        return new BiBFSPathfinder(navigator);\r\n    }\r\n}\r\n\r\nclass PathfinderBuilder\r\n{\r\n    private navigator: string = 'plus';\r\n    private algorithm: string = 'a*';\r\n    private heuristic: string = 'null';\r\n    private readonly grid: Readonly<Grid>;\r\n\r\n    constructor(grid: Readonly<Grid>) {\r\n        this.grid = grid;\r\n    }\r\n\r\n    setNavigator(navigator: string) {\r\n        navigator = navigator.toLowerCase();\r\n        if(CREATE_NAVIGATOR[navigator] == null) {\r\n            throw new Error('No such navigator pattern exists')\r\n        } else {\r\n            this.navigator = navigator;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setAlgorithm(algorithm: string) {\r\n        algorithm = algorithm.toLowerCase();\r\n        if(CREATE_PATHFINDER[algorithm] == null) {\r\n            throw new Error('No such pathfinding algorithm exists')\r\n        } else {\r\n            this.algorithm = algorithm;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setHeuristic(heuristic: string) {\r\n        heuristic = heuristic.toLowerCase();\r\n        if(CREATE_HEURISTIC[heuristic] == null) {\r\n            throw new Error('No such heuristic function exists')\r\n        } else {\r\n            this.heuristic = heuristic;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Builds a pathfinder with a navigator with the set algorithm, heuristic, and navigator\r\n     */\r\n    build() {\r\n        const createHeuristic = CREATE_HEURISTIC[this.heuristic];\r\n        const createNavigator = CREATE_NAVIGATOR[this.navigator];\r\n        const createPathfinder = CREATE_PATHFINDER[this.algorithm];\r\n        return createPathfinder(createNavigator(this.grid), createHeuristic());\r\n    }\r\n\r\n    static usesHeuristic(algorithm: string) {\r\n        return algorithm === 'a*' || algorithm === 'bi-a*' ||\r\n            algorithm === 'best-first';\r\n    }\r\n\r\n    static hasBidirectional(algorithm: string) {\r\n        return CREATE_PATHFINDER['bi-' + algorithm] != null;\r\n    }\r\n\r\n    static makeBidirectional(algorithm: string) {\r\n        return 'bi-' + algorithm;\r\n    }\r\n}\r\n\r\nexport default PathfinderBuilder;\r\n\r\n","class VirtualTimer\r\n{\r\n    private timeout: NodeJS.Timeout;\r\n    private readonly callback: () => void\r\n    private timeStarted: number;\r\n    private timeRemaining: number;\r\n    private finished: boolean;\r\n\r\n    constructor(callback: () => void, countDown: number) {\r\n        this.callback = callback;\r\n        this.finished = false;\r\n        this.timeStarted = Date.now();\r\n        this.timeRemaining = countDown;\r\n        this.timeout = setTimeout(() => {\r\n            callback();\r\n            this.finished = true;\r\n        }, this.timeRemaining);\r\n    }\r\n\r\n    clear() {\r\n        clearTimeout(this.timeout);\r\n        this.finished = true;\r\n    }\r\n\r\n    pause() {\r\n        if(!this.finished) {\r\n            clearTimeout(this.timeout);\r\n            this.timeRemaining -= Date.now() - this.timeStarted;\r\n        }\r\n    }\r\n\r\n    resume() {\r\n        if(!this.finished) {\r\n            this.timeStarted = Date.now();\r\n            this.timeout = setTimeout(() => {\r\n                this.callback();\r\n                this.finished = true;\r\n            }, this.timeRemaining);\r\n        }\r\n    }\r\n\r\n    isFinished() {\r\n        return this.finished;\r\n    }\r\n\r\n    getNativeTimeout() {\r\n        return this.timeout;\r\n    }\r\n}\r\n\r\nexport default VirtualTimer;","import {createTile, Point, Tile, TileData} from '../core/Components';\r\nimport {Grid} from '../core/Grid';\r\nimport {HashSet, stringify} from '../structures/Hash';\r\n\r\nabstract class TerrainGenerator\r\n{\r\n    protected readonly width: number;\r\n    protected readonly height: number;\r\n    protected readonly ignore: HashSet;\r\n    protected readonly data: TileData;\r\n\r\n    protected constructor(width: number, height: number, data?: TileData, ignore?: Point[]) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.ignore = new HashSet();\r\n        if(data !== undefined) {\r\n            this.data = data;\r\n        } else {\r\n            this.data = createTile(true);\r\n        }\r\n        if(ignore !== undefined) {\r\n            for(const i of ignore) {\r\n                this.ignore.add(stringify(i));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws a tile to the grid\r\n     * @param grid\r\n     * @param tile\r\n     */\r\n    protected draw(grid: Grid, tile: Tile) {\r\n        if(!this.shouldIgnore(tile.point)) {\r\n            grid.mutateTile(tile);\r\n        }\r\n    }\r\n\r\n    protected getTerrain() {\r\n        return this.data;\r\n    }\r\n\r\n    protected shouldIgnore(point: Point) {\r\n        return this.ignore.has(stringify(point));\r\n    }\r\n\r\n    abstract generateTerrain(topLeft?: Point, bottomRight?: Point): Grid;\r\n}\r\n\r\nexport default TerrainGenerator;","import TerrainGenerator from './TerrainGenerator';\r\nimport {Point, TileData} from '../core/Components';\r\nimport RectGrid, {Grid} from '../core/Grid';\r\n\r\nclass RandomTerrainGenerator extends TerrainGenerator\r\n{\r\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\r\n    constructor(width: number, height: number, tileData?: TileData, ignore?: Point[]) {\r\n        super(width, height, tileData, ignore);\r\n    }\r\n\r\n    /**\r\n     * Performs a random terrain generation algorithm where each tile has a 1/4\r\n     * chance of being solid\r\n     * @param topLeft optional parameter to specify what point the terrain should start from\r\n     *  This should not be further up/left than (1,1)\r\n     * @param bottomRight optional parameter to specify how far down and right the terrain will go\r\n     *  This should not be further right/down than (width-2,height-2)\r\n     */\r\n    generateTerrain(topLeft?: Point, bottomRight?: Point): Grid {\r\n        const grid = new RectGrid(this.width, this.height);\r\n        if(topLeft === undefined) {\r\n            topLeft = {\r\n                x: 1, y: 1\r\n            }\r\n        }\r\n        if(bottomRight === undefined) {\r\n            bottomRight = {\r\n                x: grid.getWidth()-2,\r\n                y: grid.getHeight()-2\r\n            }\r\n        }\r\n        for(let x = topLeft.x - 1; x <= bottomRight.x + 1; x++) {\r\n            for(let y = topLeft.y - 1; y <= bottomRight.y + 1; y++) {\r\n                if(getRand(0, 3) === 0) {\r\n                    this.draw(grid,{\r\n                        point: {\r\n                            x: x, y: y\r\n                        },\r\n                        data: this.getTerrain()\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n}\r\n\r\n/**\r\n * Generate a random number between min and max, inclusive for min and max\r\n * @param min\r\n * @param max\r\n */\r\nfunction getRand(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max+1-min) + min);\r\n}\r\n\r\nexport default RandomTerrainGenerator;","import RectGrid, {Grid} from '../core/Grid';\r\nimport {Point, Tile, createTile, TileData} from '../core/Components';\r\nimport TerrainGenerator from './TerrainGenerator';\r\n\r\nconst LIMIT = 2;\r\n\r\nexport const NO_SKEW = 0;\r\nexport const VERTICAL_SKEW = 1;\r\nexport const HORIZONTAL_SKEW = 2;\r\n\r\ninterface Chamber {\r\n    topLeft: Point; //min\r\n    bottomRight: Point; //max\r\n}\r\n\r\nclass MazeGenerator extends TerrainGenerator\r\n{\r\n    private readonly divideWidth: (width: number, height: number) => boolean;\r\n\r\n    constructor(width: number, height: number, tileData?: TileData, ignore?: Point[], slant?: number) {\r\n        super(width, height, tileData, ignore);\r\n        if(slant === undefined || slant === NO_SKEW) {\r\n            this.divideWidth = divideWidthNoSkew;\r\n        } else if(slant === VERTICAL_SKEW) {\r\n            this.divideWidth = divideWidthVSkew;\r\n        } else if(slant === HORIZONTAL_SKEW) {\r\n            this.divideWidth = divideWidthHSkew;\r\n        } else {\r\n            throw new Error(\"Invalid recursive maze division skew type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs the recursive division maze generation algorithm on a new empty grid\r\n     * by bisecting parts until the maze can no longer be bisected\r\n     * Params must be within bounds and create a chamber\r\n     * @param topLeft optional parameter to specify what point the maze should start from\r\n     *  This should not be further up/left than (1,1)\r\n     * @param bottomRight optional parameter to specify how far down and right the maze will go\r\n     *  This should not be further right/down than (width-2,height-2)\r\n     */\r\n    generateTerrain(topLeft?: Point, bottomRight?: Point) {\r\n        const grid = new RectGrid(this.width, this.height);\r\n        if(topLeft === undefined) {\r\n            topLeft = {\r\n                x: 1, y: 1\r\n            }\r\n        }\r\n        if(bottomRight === undefined) {\r\n            bottomRight = {\r\n                x: grid.getWidth()-2,\r\n                y: grid.getHeight()-2\r\n            }\r\n        }\r\n        for(let x = topLeft.x - 1; x <= bottomRight.x + 1; x++) {\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: x, y: topLeft.y - 1\r\n                },\r\n                data: this.getTerrain()\r\n            });\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: x, y: bottomRight.y + 1\r\n                },\r\n                data: this.getTerrain()\r\n            });\r\n        }\r\n        for(let y = topLeft.y - 1; y <= bottomRight.y + 1; y++) {\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: topLeft.x - 1, y: y\r\n                },\r\n                data: this.getTerrain()\r\n            });\r\n            this.draw(grid,{\r\n                point: {\r\n                    x: bottomRight.x + 1, y: y\r\n                },\r\n                data: this.getTerrain()\r\n            });\r\n        }\r\n        this.divide(grid,{\r\n            topLeft: topLeft,\r\n            bottomRight: bottomRight,\r\n        });\r\n        return grid;\r\n    }\r\n\r\n    /**\r\n     * Draws a list of tiles to the grid\r\n     * @param grid\r\n     * @param tiles\r\n     */\r\n    private drawArr(grid: Grid, tiles: Tile[]) {\r\n        for(const tile of tiles) {\r\n            this.draw(grid, tile);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a line between a region, with an open hole, in a chamber,\r\n     * and call bisection algorithm on it, and call division algorithms on\r\n     * its split chambers until no chambers can be bisected\r\n     * @param grid\r\n     * @param chamber\r\n     */\r\n    divide(grid: Grid, chamber: Chamber) {\r\n        const width = widthOf(chamber);\r\n        const height = heightOf(chamber);\r\n        const min = chamber.topLeft;\r\n        const max = chamber.bottomRight;\r\n        if(this.divideWidth(width,height)) {\r\n            if(width > LIMIT) {\r\n                //calculate axis\r\n                const randX = getMidPoint(\r\n                    min.x, max.x\r\n                );\r\n                //create axis wall\r\n                const toDraw: Tile[] = [];\r\n                for(let y = min.y; y <= max.y; y++) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: y\r\n                        },\r\n                        data: this.getTerrain()\r\n                    });\r\n                }\r\n                //create holes in axis wall\r\n                let edgeBlocked = false;\r\n                if(canDrawHole(grid.get({\r\n                    x: randX, y: min.y-1\r\n                }))) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: min.y\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(canDrawHole(grid.get({\r\n                    x: randX, y: max.y+1\r\n                }))) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: max.y\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(!edgeBlocked) {\r\n                    const randY = getRand(\r\n                        min.y, max.y,\r\n                    );\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                }\r\n                this.drawArr(grid, toDraw);\r\n                //create children chambers and recurse\r\n                const leftChamber = {\r\n                    topLeft: chamber.topLeft,\r\n                    bottomRight: {\r\n                        x: randX-1,\r\n                        y: chamber.bottomRight.y\r\n                    },\r\n                };\r\n                const rightChamber = {\r\n                    topLeft: {\r\n                        x: randX+1,\r\n                        y: chamber.topLeft.y\r\n                    },\r\n                    bottomRight: chamber.bottomRight,\r\n                };\r\n                this.divide(grid, leftChamber);\r\n                this.divide(grid, rightChamber);\r\n            }\r\n        } else {\r\n            if(height > LIMIT) {\r\n                //calculate axis\r\n                const randY = getMidPoint(\r\n                    min.y, max.y\r\n                );\r\n                //draw axis wall\r\n                const toDraw: Tile[] = [];\r\n                for(let x = min.x; x <= max.x; x++) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: x, y: randY\r\n                        },\r\n                        data: this.getTerrain()\r\n                    });\r\n                }\r\n                //create holes in axis wall\r\n                let edgeBlocked = false;\r\n                if(canDrawHole(grid.get({\r\n                    x: min.x-1, y: randY\r\n                }))) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: min.x, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(canDrawHole(grid.get({\r\n                    x: max.x+1, y: randY\r\n                }))) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: max.x, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(!edgeBlocked) {\r\n                    const randX = getRand(\r\n                        min.x, max.x,\r\n                    );\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                }\r\n                this.drawArr(grid, toDraw);\r\n                //create children chambers and recurse\r\n                const topChamber = {\r\n                    topLeft: chamber.topLeft,\r\n                    bottomRight: {\r\n                        x: chamber.bottomRight.x,\r\n                        y: randY-1\r\n                    },\r\n                };\r\n                const bottomChamber = {\r\n                    topLeft: {\r\n                        x: chamber.topLeft.x,\r\n                        y: randY+1\r\n                    },\r\n                    bottomRight: chamber.bottomRight,\r\n                };\r\n                this.divide(grid, topChamber);\r\n                this.divide(grid, bottomChamber);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction divideWidthNoSkew(width: number, height: number) {\r\n    return width >= height;\r\n}\r\n\r\nfunction divideWidthHSkew(width: number, height: number) {\r\n    return width >= height * 2;\r\n}\r\n\r\nfunction divideWidthVSkew(width: number, height: number) {\r\n    return width * 2 >= height;\r\n}\r\n\r\nfunction widthOf(chamber: Chamber) {\r\n    return chamber.bottomRight.x - chamber.topLeft.x + 1;\r\n}\r\n\r\nfunction heightOf(chamber: Chamber) {\r\n    return chamber.bottomRight.y - chamber.topLeft.y + 1;\r\n}\r\n\r\nfunction canDrawHole(tile: Tile) {\r\n    return tile.data.pathCost === 1 && !tile.data.isSolid;\r\n}\r\n\r\n/**\r\n * Returns the 'midpoint' to be used\r\n * @param min\r\n * @param max\r\n */\r\nfunction getMidPoint(min: number, max: number) {\r\n    const range = max - min;\r\n    if(range >= 20) {\r\n        return ((min+max)/2) >> 0;\r\n    } else if(range > 5) {\r\n        const mid = ((min+max)/2) >> 0;\r\n        const points = [mid, mid+1];\r\n        return points[getRand(0,points.length-1)];\r\n    } else {\r\n        return getRand(min+1,max-1);\r\n    }\r\n}\r\n\r\n/**\r\n * Generate a random number between min and max, inclusive for min and max\r\n * @param min\r\n * @param max\r\n */\r\nfunction getRand(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max+1-min) + min);\r\n}\r\n\r\nexport default MazeGenerator;","import RandomTerrainGenerator from './RandomTerrainGenerator';\r\nimport MazeGenerator from './MazeGenerator';\r\nimport {createTile, Point, TileData} from '../core/Components';\r\n\r\nexport const MAZE = 0;\r\nexport const MAZE_VERTICAL_SKEW = 1;\r\nexport const MAZE_HORIZONTAL_SKEW = 2;\r\nexport const RANDOM_TERRAIN = 3;\r\n\r\nclass TerrainGeneratorBuilder\r\n{\r\n    private width: number = 0;\r\n    private height: number = 0;\r\n    private type: number = MAZE;\r\n    private ignore: Point[] = [];\r\n    private data: TileData = createTile(true);\r\n\r\n    setDimensions(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n\r\n    setGeneratorType(type: number) {\r\n        this.type = type;\r\n        return this;\r\n    }\r\n\r\n    setIgnorePoints(ignore: Point[]) {\r\n        this.ignore = ignore.slice();\r\n        return this;\r\n    }\r\n\r\n    setTileData(data: TileData) {\r\n        this.data = data;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Builds a terrain generator with the specified type\r\n     */\r\n    build() {\r\n       if(this.type >= RANDOM_TERRAIN) {\r\n           return new RandomTerrainGenerator(this.width, this.height, this.data, this.ignore);\r\n       } else {\r\n           return new MazeGenerator(this.width, this.height, this.data, this.ignore, this.type);\r\n       }\r\n    }\r\n}\r\n\r\nexport default TerrainGeneratorBuilder;","import React, {RefObject} from 'react';\r\nimport './Grid.css';\r\nimport GridBackground from './GridBackground';\r\nimport GridForeground from './GridForeground';\r\nimport StatsPanel from './StatsPanel';\r\nimport {Node} from '../../pathfinding/algorithms/Node';\r\nimport PathfindingSettings from '../PathfindingSettings';\r\nimport PathfinderBuilder from '../../pathfinding/algorithms/PathfinderBuilder';\r\nimport Pathfinder from '../../pathfinding/algorithms/Pathfinder';\r\nimport {createTile, Point, Tile, TileData} from '../../pathfinding/core/Components';\r\nimport {euclidean} from '../../pathfinding/algorithms/Heuristics';\r\nimport VirtualTimer from '../utility/VirtualTimer';\r\nimport TerrainGeneratorBuilder, {RANDOM_TERRAIN} from '../../pathfinding/algorithms/TerrainGeneratorBuilder';\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    settings: Readonly<PathfindingSettings>,\r\n    topMargin: number,\r\n    onChangeVisualizing: (visualizing: boolean) => void;\r\n}\r\n\r\ninterface IState {\r\n    tilesX: number,\r\n    tilesY: number,\r\n    time: number,\r\n    length: number,\r\n    cost: number,\r\n    nodes: number,\r\n    algorithm: string\r\n}\r\n\r\nclass PathfindingVisualizer extends React.Component<IProps,IState>\r\n{\r\n    //references to expose background and foreground grids to parent\r\n    private background: RefObject<GridBackground> = React.createRef();\r\n    private foreground: RefObject<GridForeground> = React.createRef();\r\n    private stats: RefObject<StatsPanel> = React.createRef();\r\n\r\n    private visualized = false;\r\n    private visualizing = false;\r\n    private visualTimeouts: VirtualTimer[]  = [];\r\n    private generations: Node[] = [];\r\n\r\n    private mazeTile: TileData = createTile(true);\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const w = window.screen.availWidth - (window.outerWidth - window.innerWidth);\r\n        const h = window.screen.availHeight - (window.outerHeight - window.innerHeight);\r\n        const tilesX = Math.floor(w / this.props.tileWidth) + 1;\r\n        const tilesY = Math.floor((h - this.props.topMargin - 30) / this.props.tileWidth) + 1;\r\n        this.state = {\r\n            tilesX: tilesX,\r\n            tilesY: tilesY,\r\n            time: -1,\r\n            length: -1,\r\n            cost: -1,\r\n            nodes: -1,\r\n            algorithm: ''\r\n        }\r\n    }\r\n\r\n    changeTile = (data: TileData) => {\r\n        //uncomment this to enable weighted mazes\r\n        // this.mazeTile = data;\r\n        this.foreground.current!.changeTile(data);\r\n    }\r\n\r\n    canShowArrows = () => {\r\n        const settings = this.props.settings;\r\n        return settings.showArrows && settings.algorithm !== 'dfs';\r\n    }\r\n\r\n    canShowFrontier = () => {\r\n        const settings = this.props.settings;\r\n        return settings.visualizeAlg;\r\n    }\r\n\r\n    /**\r\n     * Pause the delayed pathfinding algorithm being performed\r\n     */\r\n    pausePathfinding = () => {\r\n        for(const timeout of this.visualTimeouts) {\r\n            timeout.pause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resume the delayed pathfinding algorithm being performed\r\n     * Will reset the timeouts to the last time the timeout was paused/started\r\n     * if not properly called while the timeout is paused\r\n     */\r\n    resumePathfinding = () => {\r\n        for(const timeout of this.visualTimeouts) {\r\n            timeout.resume();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs the pathfinding algorithm on the grid and visualizes it\r\n     */\r\n    doPathfinding = () => {\r\n        this.clearPath();\r\n        const settings = this.props.settings;\r\n        const pathfinder = this.getPathfinder(settings);\r\n        const path = this.findPath(pathfinder);\r\n        this.generations = pathfinder.getRecentGenerations();\r\n        if(this.canShowArrows()) {\r\n            this.addArrowGenerations(this.generations);\r\n        }\r\n        if(this.canShowFrontier()) {\r\n            this.visualizeGenerations(this.generations);\r\n        }\r\n        this.drawPath(path);\r\n    }\r\n\r\n    /**\r\n     * Performs the pathfinding algorithm on the grid and visualizes it with delays between successive\r\n     * node generations\r\n     * If the visualizer is currently visualizing, the visualization stops instead\r\n     */\r\n    doDelayedPathfinding = () => {\r\n        this.clearVisualization();\r\n        this.clearPath();\r\n        const settings = this.props.settings;\r\n        this.visualized = false;\r\n        const foreground = this.foreground.current!;\r\n        foreground.toggleDisable();\r\n        if(!this.visualizing) { //start visualization if not visualizing\r\n            this.visualizing = true;\r\n            this.props.onChangeVisualizing(this.visualizing);\r\n            const pathfinder = this.getPathfinder(settings);\r\n            const path = this.findPath(pathfinder);\r\n            const promises: Promise<VirtualTimer>[] = []; //to call function when timeouts finish\r\n            this.visualTimeouts = [];\r\n            const baseIncrement = settings.delayInc;\r\n            let delay = 0;\r\n            const visualizeAlg = this.canShowFrontier();\r\n            const showArrows = this.canShowArrows();\r\n            if(showArrows || visualizeAlg) {\r\n                const expandVisualization = visualizeAlg ? this.visualizeGeneration : () => {};\r\n                const expandArrows = showArrows ? this.addArrowGeneration : () => {};\r\n                this.generations = pathfinder.getRecentGenerations();\r\n                this.generations.forEach((generation) => {\r\n                    const promise = new Promise<VirtualTimer>((resolve) => {\r\n                        //each generation gets a higher timeout\r\n                        const timeout = new VirtualTimer(() => {\r\n                            expandArrows(generation);\r\n                            expandVisualization(generation);\r\n                            resolve(timeout);\r\n                        }, delay);\r\n                        this.visualTimeouts.push(timeout);\r\n                    });\r\n                    promises.push(promise);\r\n                    delay += baseIncrement;\r\n                });\r\n            }\r\n            //call functions when timeouts finish\r\n            Promise.all(promises).then(() => {\r\n                this.drawPath(path);\r\n                foreground.toggleDisable();\r\n                this.visualizing = false;\r\n                this.visualized = true;\r\n                this.props.onChangeVisualizing(this.visualizing);\r\n            });\r\n        } else { //stop visualizing if visualizing\r\n            for (const timeout of this.visualTimeouts) {\r\n                timeout.clear();\r\n            }\r\n            this.visualizing = false;\r\n            this.props.onChangeVisualizing(this.visualizing);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the pathfinder for the settings\r\n     * @param settings\r\n     */\r\n    private getPathfinder = (settings: PathfindingSettings) => {\r\n        const algorithmKey = settings.algorithm;\r\n        const algorithm = settings.bidirectional && PathfinderBuilder.hasBidirectional(algorithmKey) ?\r\n            PathfinderBuilder.makeBidirectional(algorithmKey) : algorithmKey;\r\n        return new PathfinderBuilder(this.foreground.current!.state.grid)\r\n            .setAlgorithm(algorithm)\r\n            .setHeuristic(settings.heuristicKey)\r\n            .setNavigator(settings.navigatorKey)\r\n            .build();\r\n    }\r\n\r\n    /**\r\n     * Find path with a given pathfinder, includes benchmarking\r\n     * @param pathfinder\r\n     */\r\n    private findPath = (pathfinder: Pathfinder) => {\r\n        const foreground = this.foreground.current!;\r\n        const t0 = performance.now();\r\n        const path = pathfinder.findPath(foreground.state.initial, foreground.state.goal);\r\n        const t1 = performance.now();\r\n        const t2 = (t1 - t0);\r\n        this.setState({\r\n            time: t2,\r\n            nodes: pathfinder.getRecentNodes(),\r\n            length: calcLength(foreground.state.initial, path),\r\n            cost: calcCost(foreground.state.grid.get(foreground.state.initial), path),\r\n            algorithm: pathfinder.getAlgorithmName()\r\n        });\r\n        return path;\r\n    }\r\n\r\n    /**\r\n     * Draw path on the grid and change length on ui\r\n     * @param path\r\n     */\r\n    private drawPath = (path: Tile[]) => {\r\n        const foreground = this.foreground.current!\r\n        path.unshift(this.foreground.current!.state.grid.get(foreground.state.initial));\r\n        this.foreground.current!.drawPath(path);\r\n    }\r\n\r\n    /**\r\n     * Called when child foreground moves a tile\r\n     */\r\n    private onTilesDragged = () => {\r\n        if(this.visualized) {\r\n            this.clearVisualization();\r\n            this.doPathfinding();\r\n            this.visualized = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create terrain on the grid foreground\r\n     */\r\n    createTerrain = (mazeType: number) => {\r\n        if(this.visualizing) {\r\n            return;\r\n        }\r\n        this.clearTiles();\r\n        this.clearPath();\r\n        this.clearVisualization();\r\n        const foreground = this.foreground.current!;\r\n        const end = this.calcEndPointInView();\r\n        const newState = (mazeType !== RANDOM_TERRAIN) ? {\r\n            initial: {\r\n                x: 1, y: 1\r\n            },\r\n            goal: {\r\n                x: end.x-2, y: end.y-2\r\n            }\r\n        } : {\r\n            initial: {\r\n                x: 1, y: ((end.y-1) / 2) >> 0\r\n            },\r\n            goal: {\r\n                x: end.x-2, y: ((end.y-1) / 2) >> 0\r\n            }\r\n        };\r\n        foreground.setState(newState,() => {\r\n            const prevGrid = foreground.state.grid;\r\n            const generator = new TerrainGeneratorBuilder()\r\n                .setDimensions(\r\n                    prevGrid.getWidth(),\r\n                    prevGrid.getHeight()\r\n                )\r\n                .setGeneratorType(mazeType)\r\n                .setIgnorePoints([foreground.state.initial, foreground.state.goal])\r\n                .setTileData(this.mazeTile)\r\n                .build();\r\n            const topLeft = {\r\n                x: 1, y: 1\r\n            };\r\n            const bottomRight = {\r\n                x: end.x-2, y: end.y-2\r\n            };\r\n            const grid = generator.generateTerrain(topLeft, bottomRight);\r\n            foreground.drawGrid(grid);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Calculate the end/goal point in view of the screen\r\n     */\r\n    calcEndPointInView = () => {\r\n        const xEnd = window.innerWidth / this.props.tileWidth;\r\n        const yEnd = (window.innerHeight - this.props.topMargin\r\n            - this.stats.current!.getHeight()) / this.props.tileWidth;\r\n        const xFloor = Math.floor(xEnd);\r\n        const yFloor = Math.floor(yEnd);\r\n        const xDecimal = xEnd - xFloor;\r\n        const yDecimal = yEnd - yFloor;\r\n        return {\r\n            x: xDecimal > 0.05 ? Math.ceil(xEnd) : xFloor,\r\n            y: yDecimal > 0.05 ? Math.ceil(yEnd) : yFloor\r\n        }\r\n    }\r\n\r\n    resetPoints = () => {\r\n        if(!this.visualizing) {\r\n            this.foreground.current!.resetPoints();\r\n        }\r\n    }\r\n\r\n    clearPath = () => {\r\n        this.foreground.current!.erasePath();\r\n    }\r\n\r\n    clearTiles = () => {\r\n        this.foreground.current!.clearTiles();\r\n    }\r\n\r\n    clearTilesChecked = () => {\r\n        if(!this.visualizing) {\r\n            this.foreground.current!.clearTiles();\r\n        }\r\n    }\r\n\r\n    clearVisualization = () => {\r\n        this.visualized = false;\r\n        this.background.current!.clear();\r\n    }\r\n\r\n    clearVisualizationChecked = () => {\r\n        if(!this.visualizing) {\r\n            this.visualized = false;\r\n            this.background.current!.clear();\r\n        }\r\n    }\r\n\r\n    private visualizeGenerations = (generations: Node[]) => {\r\n        this.background.current!.visualizeGenerations(generations);\r\n        this.visualized = true;\r\n    }\r\n\r\n    private visualizeGeneration = (generation: Node) => {\r\n        this.background.current!.visualizeGeneration(generation);\r\n    }\r\n\r\n    private addArrowGenerations = (generations: Node[]) => {\r\n        this.background.current!.addArrowGenerations(generations);\r\n    }\r\n\r\n    private addArrowGeneration = (generation: Node) => {\r\n        this.background.current!.addArrowGeneration(generation);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <StatsPanel ref={this.stats} algorithm={this.state.algorithm}\r\n                            length={this.state.length} cost={this.state.cost}\r\n                            time={this.state.time} nodes={this.state.nodes}\r\n                />\r\n                <div>\r\n                    <GridBackground ref={this.background} tileWidth={this.props.tileWidth}\r\n                                    tilesX={this.state.tilesX} tilesY={this.state.tilesY}\r\n                    />\r\n                    <GridForeground ref={this.foreground} topMargin={this.props.topMargin}\r\n                                    onTilesDragged={this.onTilesDragged} tileWidth={this.props.tileWidth}\r\n                                    tilesX={this.state.tilesX} tilesY={this.state.tilesY}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction calcLength(initial: Point, path: Tile[]) {\r\n    if(path.length === 0) {\r\n        return 0;\r\n    }\r\n    let len = euclidean(initial, path[0].point);\r\n    for (let i = 0; i < path.length - 1; i++) {\r\n        len += euclidean(path[i].point, path[i + 1].point);\r\n    }\r\n    return +(len).toFixed(3);\r\n}\r\n\r\nfunction calcCost(initial: Tile, path: Tile[]) {\r\n    if(path.length === 0) {\r\n        return 0;\r\n    }\r\n    let len = euclidean(initial.point, path[0].point) * path[0].data.pathCost;\r\n    for (let i = 0; i < path.length - 1; i++) {\r\n        len += euclidean(path[i].point, path[i + 1].point) * path[i + 1].data.pathCost;\r\n    }\r\n    return +(len).toFixed(3);\r\n}\r\n\r\nexport default PathfindingVisualizer;","import React from 'react';\r\n\r\ninterface IProps {\r\n    boxStyle: string,\r\n    defaultChecked: boolean,\r\n    disabled?: boolean,\r\n    onChange: (checked: boolean) => void\r\n}\r\n\r\ninterface IState {\r\n    checked: boolean\r\n}\r\n\r\nclass Checkbox extends React.Component<IProps,IState>\r\n{\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            checked: this.props.defaultChecked\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger callback and change checkbox state\r\n     */\r\n    onChange = () => {\r\n        this.setState(prevState => ({\r\n            checked: !prevState.checked\r\n        }), () => this.props.onChange(this.state.checked));\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <input checked={this.state.checked} type='checkbox' disabled={this.props.disabled}\r\n                       className={this.props.boxStyle} onKeyPress={this.onChange} onChange={this.onChange}\r\n                >\r\n                </input>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Checkbox;","import React from 'react';\r\n\r\ninterface IProps {\r\n    min: number,\r\n    max: number,\r\n    default: number,\r\n    step: number,\r\n    sliderStyle: string,\r\n    onChange: (val: number) => void\r\n}\r\n\r\ninterface IState {\r\n    value: number\r\n}\r\n\r\nclass SteppedRangeSlider extends React.Component<IProps, IState>\r\n{\r\n    private mouseUp = true;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            value: this.props.default\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger callback when slider value is changed\r\n     * @param e\r\n     */\r\n    onChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n        if(!this.mouseUp) { //to prevent firefox from resetting on release\r\n            const val = Number(e.currentTarget.value);\r\n            this.setState({\r\n                value: val\r\n            }, () => this.props.onChange(val));\r\n        }\r\n    }\r\n\r\n    onMouseUp = () => {\r\n        this.mouseUp = true;\r\n    }\r\n\r\n    onMouseDown = () => {\r\n        this.mouseUp = false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <input type='range' list='step-list'\r\n                   value={this.state.value}\r\n                   min={this.props.min} max={this.props.max}\r\n                   step={this.props.step} className={this.props.sliderStyle}\r\n                   onInput={this.onChange}\r\n                   onMouseUp={this.onMouseUp}\r\n                   onMouseDown={this.onMouseDown}\r\n                   onTouchEnd={this.onMouseUp}\r\n                   onTouchStart={this.onMouseDown}\r\n            >\r\n            </input>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SteppedRangeSlider;","import React from 'react';\r\n\r\ninterface IProps {\r\n    boxStyle: string,\r\n    defaultChecked: number,\r\n    disabled: boolean,\r\n    onChange: (() => void)[]\r\n}\r\n\r\ninterface IState {\r\n    checked: boolean[];\r\n}\r\n\r\nclass RadioButtonGroup extends React.Component<IProps, IState>\r\n{\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const checked: boolean[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            checked.push(i === this.props.defaultChecked);\r\n        }\r\n        this.state = {\r\n            checked: checked\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set all radio buttons to checked aside from the index\r\n     * of the one that was changed\r\n     * Trigger callback\r\n     * @param index\r\n     */\r\n    private onChange = (index: number) => {\r\n        const checked: boolean[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            checked.push(i === index);\r\n        }\r\n        this.setState({\r\n            checked: checked\r\n        }, () => this.props.onChange[index]());\r\n    }\r\n\r\n    render() {\r\n        const children = React.Children.toArray(this.props.children);\r\n        const radioButtons: JSX.Element[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            radioButtons.push(\r\n                <div key={i}>\r\n                    <input checked={this.state.checked[i]} type='radio' disabled={this.props.disabled}\r\n                           className={this.props.boxStyle}\r\n                           onChange={() => this.onChange(i)}\r\n                    >\r\n                    </input>\r\n                    {children[i]}\r\n                </div>\r\n            );\r\n        }\r\n        return radioButtons;\r\n    };\r\n}\r\n\r\nexport default RadioButtonGroup;","import React from 'react';\r\nimport './Navbar.css'\r\nimport Checkbox from '../utility/Checkbox';\r\nimport SteppedRangeSlider from '../utility/SteppedRangeSlider';\r\nimport RadioButtonGroup from '../utility/RadioButtonGroup';\r\n\r\ninterface VisualProps {\r\n    onChangeViz: () => void,\r\n    onChangeShowArrows: () => void,\r\n    disabled: boolean\r\n}\r\n\r\ninterface SpeedProps {\r\n    onChange: (value: number) => void,\r\n    initialSpeed: number\r\n}\r\n\r\ninterface SpeedState {\r\n    speedText: string\r\n}\r\n\r\ninterface AlgorithmProps {\r\n    onChangeBidirectional: (checked: boolean) => void,\r\n    disabled: boolean\r\n}\r\n\r\ninterface HeuristicProps {\r\n    onClickManhattan: () => void,\r\n    onClickEuclidean: () => void,\r\n    onClickChebyshev: () => void,\r\n    onClickOctile: () => void,\r\n    disabled: boolean\r\n}\r\n\r\nconst SPEED_STEP = 2;\r\nconst SPEED_INITIAL = 4;\r\nconst MAX = 18;\r\n\r\nexport class VisualSettings extends React.Component<VisualProps>\r\n{\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Visualization</div>\r\n                <Checkbox defaultChecked={true} boxStyle='box'\r\n                          onChange={this.props.onChangeViz}>\r\n                    Show Frontier\r\n                </Checkbox>\r\n                <Checkbox defaultChecked={true} boxStyle='box'\r\n                          onChange={this.props.onChangeShowArrows}\r\n                          disabled={this.props.disabled}>\r\n                    Show Tree\r\n                </Checkbox>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class SpeedSettings extends React.Component<SpeedProps, SpeedState>\r\n{\r\n    constructor(props: SpeedProps) {\r\n        super(props);\r\n        this.state = {\r\n            speedText: String(this.props.initialSpeed)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback function to be called when slider is changed\r\n     * Call another callback and change text\r\n     * @param value\r\n     */\r\n    onChangeSpeed = (value: number) => {\r\n        const speed = SPEED_INITIAL + SPEED_STEP * value;\r\n        this.setState({\r\n            speedText: String(speed)\r\n        })\r\n        this.props.onChange(speed);\r\n    }\r\n\r\n    render() {\r\n        const options: JSX.Element[] = [];\r\n        for(let i = 1; i <= MAX; i++) {\r\n            options.push(<option key={'option ' + i}>{i}</option>);\r\n        }\r\n        return (\r\n            <div className='slider-container'>\r\n                <div className='slider-text'>\r\n                    Speed: <div className='speed-text'> {this.state.speedText} </div>\r\n                </div>\r\n                    <SteppedRangeSlider min={1} max={MAX} step={1}\r\n                                        default={(this.props.initialSpeed - SPEED_INITIAL) / SPEED_STEP}\r\n                                        sliderStyle='slider speed-slider'\r\n                                        onChange={this.onChangeSpeed}\r\n                />\r\n                <datalist id='step-list'>\r\n                    {options}\r\n                </datalist>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class AlgorithmSettings extends React.Component<AlgorithmProps>\r\n{\r\n    constructor(props: AlgorithmProps) {\r\n        super(props);\r\n        this.state = {\r\n            disabled: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Algorithm</div>\r\n                <Checkbox defaultChecked={false} boxStyle='box'\r\n                          disabled={this.props.disabled}\r\n                          onChange={this.props.onChangeBidirectional}>\r\n                    Bidirectional\r\n                </Checkbox>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class HeuristicSettings extends React.Component<HeuristicProps>\r\n{\r\n    constructor(props: HeuristicProps) {\r\n        super(props);\r\n        this.state = {\r\n            disabled: false\r\n        }\r\n    }\r\n\r\n    disable = () => {\r\n        this.setState({\r\n            disabled: true\r\n        })\r\n    }\r\n\r\n    enable = () => {\r\n        this.setState({\r\n            disabled: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Heuristic</div>\r\n                <RadioButtonGroup boxStyle='box'\r\n                                  defaultChecked={1}\r\n                                  disabled={this.props.disabled}\r\n                                  onChange={[\r\n                                      this.props.onClickManhattan, this.props.onClickEuclidean,\r\n                                      this.props.onClickChebyshev, this.props.onClickOctile\r\n                                  ]}\r\n                >\r\n                    {[<span key='Manhattan'>Manhattan</span>, <span key='Euclidean'>Euclidean</span>,\r\n                        <span key='Chebyshev'>Chebyshev</span>, <span key='Octile<'>Octile</span>]}\r\n                </RadioButtonGroup>\r\n            </div>\r\n        )\r\n    }\r\n}","import PathfindingSettings, {getDefaultSettings} from './PathfindingSettings';\r\n\r\nclass SettingsManager\r\n{\r\n    settings: PathfindingSettings = getDefaultSettings();\r\n\r\n    changeAlgo = (algo: string) => {\r\n        this.settings.algorithm = algo;\r\n    }\r\n\r\n    changeVisualize = () => {\r\n        this.settings.visualizeAlg = !this.settings.visualizeAlg;\r\n    }\r\n\r\n    changeShowArrows = () => {\r\n        this.settings.showArrows = !this.settings.showArrows;\r\n    }\r\n\r\n    changeBidirectional = () => {\r\n        this.settings.bidirectional = !this.settings.bidirectional;\r\n    }\r\n\r\n    changeSpeed = (value: number) => {\r\n        this.settings.delayInc = value;\r\n    }\r\n\r\n    changeManhattan = () => {\r\n        this.settings.heuristicKey = 'manhattan';\r\n    }\r\n\r\n    changeEuclidean = () => {\r\n        this.settings.heuristicKey = 'euclidean';\r\n    }\r\n\r\n    changeChebyshev = () => {\r\n        this.settings.heuristicKey = 'chebyshev';\r\n    }\r\n\r\n    changeOctile = () => {\r\n        this.settings.heuristicKey = 'octile';\r\n    }\r\n}\r\n\r\nexport default SettingsManager;","interface PathfindingSettings\r\n{\r\n    visualizeAlg: boolean,\r\n    showArrows: boolean,\r\n    delayInc: number,\r\n    algorithm: string,\r\n    heuristicKey: string,\r\n    navigatorKey: string,\r\n    bidirectional: boolean\r\n}\r\n\r\nexport function getDefaultSettings(): PathfindingSettings {\r\n    return {\r\n        visualizeAlg: true,\r\n        showArrows: true,\r\n        delayInc: 8,\r\n        algorithm: 'a*',\r\n        heuristicKey: 'euclidean',\r\n        navigatorKey: 'plus',\r\n        bidirectional: false\r\n    }\r\n}\r\n\r\nexport default PathfindingSettings;","import React, {RefObject} from 'react';\r\nimport TopBar from './navbar/TopBar';\r\nimport {VisualizeButton, SettingsButton} from './navbar/Buttons';\r\nimport {AlgorithmDropDown, ClearDropDown, MazeDropDown, TilesDropDown} from './navbar/DropDownComponents';\r\nimport DraggablePanel from './utility/DraggablePanel';\r\nimport PathfindingVisualizer from './grid/PathfindingVisualizer';\r\nimport {VisualSettings, SpeedSettings, AlgorithmSettings, HeuristicSettings} from './navbar/SettingPanels';\r\nimport SettingsManager from './SettingsManager';\r\nimport PathfinderBuilder from '../pathfinding/algorithms/PathfinderBuilder';\r\nimport {MAZE, MAZE_HORIZONTAL_SKEW, MAZE_VERTICAL_SKEW, RANDOM_TERRAIN} from '../pathfinding/algorithms/TerrainGeneratorBuilder';\r\n\r\ninterface IProps {}\r\n\r\ninterface IState {\r\n    heuristicDisabled: boolean,\r\n    bidirectionalDisabled: boolean,\r\n    arrowsDisabled: boolean,\r\n\r\n    panelShow: boolean,\r\n\r\n    topMargin: number,\r\n\r\n    visualizing: boolean,\r\n    paused: boolean\r\n}\r\n\r\nclass PathfindingApp extends React.Component<IProps, IState>\r\n{\r\n    //expose visualizer to parent to connect to button siblings\r\n    private visualizer: RefObject<PathfindingVisualizer> = React.createRef();\r\n\r\n    //drop down refs needed to invoke behavior between dropdowns\r\n    private algDropDown: RefObject<AlgorithmDropDown> = React.createRef();\r\n    private clrDropDown: RefObject<ClearDropDown> = React.createRef();\r\n    private mazeDropDown: RefObject<MazeDropDown> = React.createRef();\r\n    private tilesDropDown: RefObject<TilesDropDown> = React.createRef();\r\n\r\n    private settingsManager: SettingsManager = new SettingsManager();\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            heuristicDisabled: false,\r\n            bidirectionalDisabled: false,\r\n            arrowsDisabled: false,\r\n            panelShow: false,\r\n            topMargin: 75,\r\n            visualizing: false,\r\n            paused: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('click', () => {\r\n            this.algDropDown.current!.hide();\r\n            this.clrDropDown.current!.hide();\r\n            this.mazeDropDown.current!.hide();\r\n            this.tilesDropDown.current!.hide();\r\n        });\r\n    }\r\n\r\n    onClickAlgDrop = () => {\r\n        this.clrDropDown.current!.hide();\r\n        this.mazeDropDown.current!.hide();\r\n        this.tilesDropDown.current!.hide();\r\n    }\r\n\r\n    onClickClrDrop = () => {\r\n        this.algDropDown.current!.hide();\r\n        this.mazeDropDown.current!.hide();\r\n        this.tilesDropDown.current!.hide();\r\n    }\r\n\r\n    onClickMazeDrop = () => {\r\n        this.clrDropDown.current!.hide();\r\n        this.algDropDown.current!.hide();\r\n        this.tilesDropDown.current!.hide();\r\n    }\r\n\r\n    onClickTilesDrop = () => {\r\n        this.clrDropDown.current!.hide();\r\n        this.algDropDown.current!.hide();\r\n        this.mazeDropDown.current!.hide();\r\n    }\r\n\r\n    changeVButtonColor = (visualizing: boolean) => {\r\n        this.setState({\r\n            visualizing: visualizing\r\n        })\r\n    }\r\n\r\n    toggleSettings = () => {\r\n        this.setState(prevState => ({\r\n            panelShow: !prevState.panelShow\r\n        }));\r\n    }\r\n\r\n    hideSettings = () => {\r\n        this.setState({\r\n            panelShow: false\r\n        });\r\n    }\r\n\r\n    changeAlgo = (algorithm: string) => {\r\n        this.setState({\r\n            heuristicDisabled: !PathfinderBuilder.usesHeuristic(algorithm),\r\n            bidirectionalDisabled: !PathfinderBuilder.hasBidirectional(algorithm),\r\n            arrowsDisabled: algorithm === 'dfs'\r\n        });\r\n        this.settingsManager.changeAlgo(algorithm);\r\n    }\r\n\r\n    doPathfinding = () => {\r\n        this.setState({\r\n            paused: false\r\n        });\r\n        this.visualizer.current!.doDelayedPathfinding();\r\n    }\r\n\r\n    pausePathfinding = () => {\r\n        this.setState({\r\n            paused: true\r\n        });\r\n        this.visualizer.current!.pausePathfinding();\r\n    }\r\n\r\n    resumePathfinding = () => {\r\n        this.setState({\r\n            paused: false\r\n        });\r\n        this.visualizer.current!.resumePathfinding();\r\n    }\r\n\r\n    clearPath = () => {\r\n        this.visualizer.current!.clearPath();\r\n        this.visualizer.current!.clearVisualizationChecked();\r\n    }\r\n\r\n    clearTiles = () => {\r\n        this.clearPath();\r\n        this.visualizer.current!.clearTilesChecked();\r\n    }\r\n\r\n    resetBoard = () => {\r\n        this.clearPath();\r\n        this.clearTiles();\r\n        this.visualizer.current!.resetPoints();\r\n    }\r\n\r\n    createMaze = () => {\r\n        this.visualizer.current!.createTerrain(MAZE);\r\n    }\r\n\r\n    createMazeVSkew = () => {\r\n        this.visualizer.current!.createTerrain(MAZE_VERTICAL_SKEW);\r\n    }\r\n\r\n    createMazeHSkew = () => {\r\n        this.visualizer.current!.createTerrain(MAZE_HORIZONTAL_SKEW);\r\n    }\r\n\r\n    createRandomTerrain = () => {\r\n        this.visualizer.current!.createTerrain(RANDOM_TERRAIN);\r\n    }\r\n\r\n    onChangeHeight = (height: number) => {\r\n        this.setState({\r\n            topMargin: height\r\n        });\r\n    }\r\n\r\n    changeTile = (cost: number) => {\r\n        this.visualizer.current!.changeTile({\r\n            isSolid: cost === -1,\r\n            pathCost: cost\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const mobile = isMobile();\r\n        const tileWidth =  mobile ? 47 : Math.round(window.screen.availWidth / 57);\r\n        if(mobile) {\r\n            this.settingsManager.changeSpeed(20);\r\n        } else if(window.screen.availWidth > 2500) {\r\n            this.settingsManager.changeSpeed(12);\r\n        }\r\n        return (\r\n            <div>\r\n                <DraggablePanel title='Grid Settings'\r\n                                show={this.state.panelShow}\r\n                                onClickXButton={this.hideSettings}\r\n                                width={350}\r\n                                height={405}\r\n                >\r\n                    <VisualSettings disabled={this.state.arrowsDisabled}\r\n                                    onChangeViz={this.settingsManager.changeVisualize}\r\n                                    onChangeShowArrows={this.settingsManager.changeShowArrows}\r\n                    />\r\n                    <SpeedSettings onChange={this.settingsManager.changeSpeed}\r\n                                   initialSpeed={this.settingsManager.settings.delayInc}\r\n                    />\r\n                    <AlgorithmSettings disabled={this.state.bidirectionalDisabled}\r\n                                       onChangeBidirectional={this.settingsManager.changeBidirectional}\r\n                    />\r\n                    <HeuristicSettings disabled={this.state.heuristicDisabled}\r\n                                       onClickManhattan={this.settingsManager.changeManhattan}\r\n                                       onClickEuclidean={this.settingsManager.changeEuclidean}\r\n                                       onClickChebyshev={this.settingsManager.changeChebyshev}\r\n                                       onClickOctile={this.settingsManager.changeOctile}\r\n                    />\r\n                </DraggablePanel>\r\n                <TopBar onChangeHeight={this.onChangeHeight}>\r\n                    <a href='https://github.com/JosephPrichard/PathfinderReact' className='title'>\r\n                        Pathfinding Visualizer\r\n                    </a>\r\n                    <div className='top-container'>\r\n                        <AlgorithmDropDown ref={this.algDropDown}\r\n                                           onClick={this.onClickAlgDrop}\r\n                                           onChange={this.changeAlgo}\r\n                        />\r\n                        <VisualizeButton active={this.state.visualizing}\r\n                                         paused={this.state.paused}\r\n                                         onPause={this.pausePathfinding}\r\n                                         onResume={this.resumePathfinding}\r\n                                         onStartStop={this.doPathfinding}\r\n                        />\r\n                        <ClearDropDown ref={this.clrDropDown}\r\n                                       onClick={this.onClickClrDrop}\r\n                                       onClickTiles={this.clearTiles}\r\n                                       onClickPath={this.clearPath}\r\n                                       onClickReset={this.resetBoard}\r\n                        />\r\n                        <TilesDropDown ref={this.tilesDropDown}\r\n                                       onClick={this.onClickTilesDrop}\r\n                                       onClickTileType={this.changeTile}\r\n                        />\r\n                        <MazeDropDown ref={this.mazeDropDown}\r\n                                      onClick={this.onClickMazeDrop}\r\n                                      onClickMaze={this.createMaze}\r\n                                      onClickMazeHorizontal={this.createMazeHSkew}\r\n                                      onClickMazeVertical={this.createMazeVSkew}\r\n                                      onClickRandomTerrain={this.createRandomTerrain}\r\n                        />\r\n                        <SettingsButton onClick={this.toggleSettings}/>\r\n                    </div>\r\n                </TopBar>\r\n                <PathfindingVisualizer ref={this.visualizer}\r\n                                       onChangeVisualizing={this.changeVButtonColor}\r\n                                       topMargin={this.state.topMargin}\r\n                                       settings={this.settingsManager.settings}\r\n                                       tileWidth={tileWidth}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction isMobile() {\r\n    return /Android|webOS|iPhone|iPad|Mac|Macintosh|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n}\r\n\r\nexport default PathfindingApp;","import React from 'react';\nimport './App.css';\nimport PathfindingApp from './view/PathfindingApp';\n\nclass App extends React.Component\n{\n    render() {\n        return (\n            <PathfindingApp/>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n//reportWebVitals();\n"],"sourceRoot":""}