{"version":3,"sources":["view/navbar/TopBar.tsx","view/navbar/Buttons.tsx","view/navbar/DropDown.tsx","view/elements/DraggablePanel.tsx","view/grid/GridBackground.tsx","pathfinding/core/Components.ts","pathfinding/core/Grid.ts","view/grid/TileFg.tsx","view/grid/GridForeground.tsx","view/grid/StatsPanel.tsx","pathfinding/core/Navigator.ts","pathfinding/core/PlusNavigator.ts","pathfinding/algorithms/Heuristics.ts","pathfinding/core/AsteriskNavigator.ts","pathfinding/structures/Hash.ts","pathfinding/structures/Heap.ts","pathfinding/algorithms/Pathfinder.ts","pathfinding/algorithms/Node.ts","pathfinding/algorithms/AStar.ts","pathfinding/algorithms/BFS.ts","pathfinding/structures/Stack.ts","pathfinding/algorithms/DFS.ts","pathfinding/algorithms/BidirectionalAStar.ts","pathfinding/algorithms/BidirectionalBFS.ts","pathfinding/algorithms/PathfinderBuilder.ts","pathfinding/algorithms/MazeGenerator.ts","view/grid/PathfindingVisualizer.tsx","view/elements/Checkbox.tsx","view/elements/SteppedRangeSlider.tsx","view/elements/RadioButtonGroup.tsx","view/navbar/SettingPanels.tsx","view/SettingsManager.ts","view/PathfindingSettings.ts","view/PathfindingApp.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TopBar","bar","React","createRef","window","addEventListener","props","onChangeHeight","current","offsetHeight","this","ref","className","children","Component","VisualizeButton","color","onClick","SettingsButton","AlgorithmDropDown","show","setState","up","display","hide","toggle","isHidden","state","contentStyle","onChange","key","algText","arrowClass","onMouseOver","onMouseLeave","style","ClearDropDown","onClickPath","onClickTiles","MazeDropDown","onClickMaze","onClickMazeVertical","onClickMazeHorizontal","DraggablePanel","draggable","draggableContainer","draggableContent","dragging","prevX","prevY","mouseDown","e","preventDefault","clientY","clientX","mouseUp","mouseMove","container","top","offsetTop","left","offsetLeft","content","innerHeight","innerWidth","offsetWidth","getPosition","renderDraggable","onMouseDown","nativeEvent","onClickXButton","document","GridBackground","visualization","clear","createEmptyBg","doGeneration","generation","point","tile","y","x","visualizeGeneration","visualizeGenerations","generations","renderTiles","tiles","tilesY","row","tilesX","push","renderTile","width","tileWidth","backgroundColor","height","createTile","isSolid","pathCost","GridGraph","mutateDefault","solid","mutate","undefined","nodes","data","createEmptyGrid","console","str","log","JSON","stringify","get","TileFg","applyExpandAnimation","original","tileSize","i","setTimeout","applyShrinkAnimation","size","doAnimation","fill","stroke","shapeRendering","pointsEqual","point1","point2","GridForeground","svg","mouseDown0","mouseDown2","draggingInitial","draggingGoal","disable","doTileAnimation","bounds","getBoundingRect","onPress","button","onDrag","touchStart","touch","touches","changedTouches","onTouch","touchMove","onEndingEvent","xCoordinate","yCoordinate","calculatePoint","initial","goal","drawTile","eraseTile","grid","moveInitial","onTilesDragged","moveGoal","drawGrid","inBounds","forceUpdate","clearTiles","revealed","drawPath","path","slice","erasePath","Math","floor","renderLines","lines","length","first","second","renderLine","offset","x1","y1","x2","y2","strokeWidth","renderEndTile","end","calcEndPointInView","round","topMargin","getBoundingClientRect","xmlns","onContextMenu","onMouseUp","onMouseMove","onTouchStart","onTouchMoveCapture","onTouchEnd","onTouchCancel","StatsPanel","textLog","scrollTop","scrollHeight","clientHeight","text","algorithm","time","readOnly","value","unselectable","onDrop","Navigator","a","b","PlusNavigator","getWidth","getHeight","euclidean","dx","abs","dy","sqrt","AsteriskNavigator","walkBottomRight","walkTopRight","walkBottomLeft","walkTopLeft","HashSet","map","HashTable","Heap","compare","elements","siftUp","val","peek","move","pop","siftDown","pos","parent","swap","right","child","from","to","reconstructPath","bottomLeaf","reconstructPathReversed","reverse","Pathfinder","navigator","recentSearch","node","onGeneration","Node","AStarNode","g","fScore","AStarPathfinder","func","heuristic","clearRecentSearch","getGrid","openSet","f","closedSet","root","add","isEmpty","currentNode","addRecent","currentPoint","equals","neighbors","neighbor","neighborPoint","neighborKey","stepCost","has","neighborNode","addChild","cost","BFSPathfinder","queue","visited","shift","next","Stack","DFSPathfinder","stack","BiAStarPathfinder","startOpenSet","startClosedSet","endOpenSet","endClosedSet","initialRoot","goalRoot","startCurrentNode","startCurrentPoint","startCurrentPointKey","concat","endCurrentNode","endCurrentPoint","endCurrentPointKey","BiBFSPathfinder","startVisited","endVisited","startQueue","endQueue","CREATE_NAVIGATOR","CREATE_HEURISTIC","manhattan","max","chebyshev","SQRT2","min","octile","CREATE_PATHFINDER","PathfinderBuilder","toLowerCase","Error","createHeuristic","createNavigator","createPathfinder","divideWidthNoSkew","divideWidthHSkew","divideWidthVSkew","getMidPoint","range","mid","points","getRand","random","MazeGenerator","slant","divideWidth","topLeft","bottomRight","draw","divide","chamber","widthOf","heightOf","randY","randX","toDraw","edgeBlocked","drawArr","leftChamber","rightChamber","topChamber","bottomChamber","mutateTile","calcLength","len","toFixed","PathfindingVisualizer","background","foreground","stats","visualized","visualizing","visualTimeouts","doPathfinding","settings","pathfinder","getPathfinder","findPath","visualizeAlg","reconstructSolution","doDelayedPathfinding","clearVisualization","clearPath","toggleDisable","clearTimeout","onChangeVisualizing","increment","delayInc","promises","delay","promise","Promise","resolve","timeout","all","then","algorithmKey","bidirectional","hasBidirectional","makeBidirectional","setAlgorithm","setHeuristic","heuristicKey","setNavigator","navigatorKey","build","t0","performance","now","t2","getRecentNodes","getAlgorithmName","unshift","createMaze","prevGrid","generator","generateMaze","setPositions","xEnd","yEnd","xFloor","yFloor","yDecimal","ceil","endPoint","clearTilesChecked","clearVisualizationChecked","screen","availWidth","availHeight","Checkbox","prevState","checked","defaultChecked","type","disabled","boxStyle","defaultProps","SteppedRangeSlider","Number","currentTarget","list","defaultValue","default","step","sliderStyle","RadioButtonGroup","index","Children","toArray","radioButtons","VisualSettings","onChangeViz","SpeedSettings","onChangeSpeed","speedTexts","speedText","String","id","AlgorithmSettings","onChangeDiagonals","onChangeBidirectional","HeuristicSettings","enable","onClickManhattan","onClickEuclidean","onClickChebyshev","onClickOctile","SettingsManager","changeAlgo","algo","changeVisualize","changeBidirectional","changeDiagonals","changeSpeed","changeManhattan","changeEuclidean","changeChebyshev","changeOctile","PathfindingApp","settingsManager","changeVButtonColor","vButtonColor","toggleSettings","panelShow","hideSettings","hDisabled","usesHeuristic","aDisabled","createMazeVSkew","createMazeHSkew","setLength","setTime","test","userAgent","href","App","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0160a250.chunk.js","sourcesContent":["import React, {RefObject} from 'react';\r\n\r\ninterface IProps {\r\n    onChangeHeight: (height: number) => void\r\n}\r\n\r\nclass TopBar extends React.Component<IProps>\r\n{\r\n    private bar: RefObject<HTMLDivElement> = React.createRef();\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('resize', () => this.props.onChangeHeight(this.bar.current!.offsetHeight));\r\n        this.props.onChangeHeight(this.bar.current!.offsetHeight);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={this.bar} className='top-navbar navbar-expand-sm top-navbar'>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TopBar;","import React from 'react';\r\n\r\ninterface IProps {\r\n    onClick: ()  => void\r\n}\r\n\r\ninterface VProps {\r\n    color: string\r\n    onClick: ()  => void\r\n}\r\n\r\nexport class VisualizeButton extends React.Component<VProps>\r\n{\r\n    render() {\r\n        return (\r\n            <button className={'button ' + this.props.color} onClick={this.props.onClick}>\r\n                Visualize!\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport class SettingsButton extends React.Component<IProps>\r\n{\r\n    render() {\r\n        return (\r\n            <button className='button settings-button' onClick={this.props.onClick}>\r\n                Settings\r\n            </button>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface AlgProps {\r\n    onChange: (alg: string) => void\r\n}\r\n\r\ninterface AlgState {\r\n    up: boolean,\r\n    display: string,\r\n    algText: string;\r\n}\r\n\r\nexport class AlgorithmDropDown extends React.Component<AlgProps, AlgState>\r\n{\r\n    constructor(props: AlgProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none',\r\n            algText: 'A* Search'\r\n        };\r\n    }\r\n\r\n    show = () => {\r\n        this.setState({\r\n            up: false,\r\n            display: 'block'\r\n        });\r\n    }\r\n\r\n    hide = () => {\r\n        this.setState({\r\n            up: true,\r\n            display: 'none'\r\n        });\r\n    }\r\n\r\n    toggle = () => {\r\n        if(this.isHidden()) {\r\n            this.show();\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    isHidden = () => {\r\n        return this.state.display === 'none';\r\n    }\r\n\r\n    contentStyle = () => {\r\n        return {\r\n            display: this.state.display\r\n        }\r\n    }\r\n\r\n    onChange = (key: string, algText: string) => {\r\n        this.props.onChange(key);\r\n        this.setState({\r\n            algText: algText\r\n        });\r\n    }\r\n\r\n    arrowClass = () => {\r\n        return this.state.up ? 'arrowUp' : 'arrowDown';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='alg-drop-down drop-down' onMouseOver={this.show} onMouseLeave={this.hide}>\r\n                <div className='alg-drop-down-button drop-down-button'>\r\n                    <span className='alg-drop-down-text drop-down-text'>{this.state.algText}</span>\r\n                    <span className={'alg-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div style={this.contentStyle()} className='alg-drop-down-content drop-down-content'>\r\n                    <div onClick={() => this.onChange('a*', 'A* Search')}>A* Search</div>\r\n                    <div onClick={() => this.onChange('dijkstra', 'Dijkstra')}>Dijkstra's Algorithm</div>\r\n                    <div onClick={() => this.onChange('best-first', 'Best First')}>Best First Search</div>\r\n                    <div onClick={() => this.onChange('bfs', 'Breadth First')}>Breadth First Search</div>\r\n                    <div onClick={() => this.onChange('dfs', 'Depth First')}>Depth First Search</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface ClrProps {\r\n    onClickPath: () => void,\r\n    onClickTiles: () => void\r\n}\r\n\r\ninterface DState {\r\n    up: boolean,\r\n    display: string\r\n}\r\n\r\nexport class ClearDropDown extends React.Component<ClrProps, DState>\r\n{\r\n    constructor(props: ClrProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none'\r\n        };\r\n    }\r\n\r\n    show = () => {\r\n        this.setState({\r\n            up: false,\r\n            display: 'block'\r\n        });\r\n    }\r\n\r\n    hide = () => {\r\n        this.setState({\r\n            up: true,\r\n            display: 'none'\r\n        });\r\n    }\r\n\r\n    toggle = () => {\r\n        if(this.isHidden()) {\r\n            this.show();\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    isHidden = () => {\r\n        return this.state.display === 'none';\r\n    }\r\n\r\n    contentStyle = () => {\r\n        return {\r\n            display: this.state.display\r\n        }\r\n    }\r\n\r\n    arrowClass = () => {\r\n        return this.state.up ? 'arrowUpW' : 'arrowDownW';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='clr-drop-down drop-down' onMouseOver={this.show} onMouseLeave={this.hide}>\r\n                <div className='clr-drop-down-button drop-down-button'>\r\n                    <span className='clr-drop-down-text drop-down-text'>Clear Grid</span>\r\n                    <span className={'clr-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div style={this.contentStyle()} className='clr-drop-down-content drop-down-content'>\r\n                    <div onClick={this.props.onClickPath}>Clear Path</div>\r\n                    <div onClick={this.props.onClickTiles}>Clear Tiles</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface MazeProps {\r\n    onClickMaze: () => void,\r\n    onClickMazeHorizontal: () => void,\r\n    onClickMazeVertical: () => void\r\n}\r\n\r\n\r\nexport class MazeDropDown extends React.Component<MazeProps, DState>\r\n{\r\n    constructor(props: MazeProps) {\r\n        super(props);\r\n        this.state = {\r\n            up: true,\r\n            display: 'none'\r\n        };\r\n    }\r\n\r\n    show = () => {\r\n        this.setState({\r\n            up: false,\r\n            display: 'block'\r\n        });\r\n    }\r\n\r\n    hide = () => {\r\n        this.setState({\r\n            up: true,\r\n            display: 'none'\r\n        });\r\n    }\r\n\r\n    toggle = () => {\r\n        if(this.isHidden()) {\r\n            this.show();\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    isHidden = () => {\r\n        return this.state.display === 'none';\r\n    }\r\n\r\n    contentStyle = () => {\r\n        return {\r\n            display: this.state.display\r\n        }\r\n    }\r\n\r\n    arrowClass = () => {\r\n        return this.state.up ? 'arrowUpW' : 'arrowDownW';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='maze-drop-down drop-down' onMouseOver={this.show} onMouseLeave={this.hide}>\r\n                <div className='maze-drop-down-button drop-down-button'>\r\n                    <span className='maze-drop-down-text drop-down-text'>Mazes</span>\r\n                    <span className={'clr-arr ' + this.arrowClass()}/>\r\n                </div>\r\n                <div style={this.contentStyle()} className='maze-drop-down-content drop-down-content'>\r\n                    <div onClick={this.props.onClickMaze}>Recursive Maze Division </div>\r\n                    <div onClick={this.props.onClickMazeVertical}>Maze (vertical skew) </div>\r\n                    <div onClick={this.props.onClickMazeHorizontal}>Maze (horizontal skew) </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {RefObject} from 'react';\r\n\r\ninterface IProps {\r\n    show: boolean,\r\n    onClickXButton: () => void\r\n}\r\n\r\ninterface IState {\r\n    top: number,\r\n    left: number,\r\n}\r\n\r\nclass DraggablePanel extends React.Component<IProps, IState>\r\n{\r\n    //refs are used to access native DOM\r\n    private draggable: RefObject<HTMLDivElement> = React.createRef();\r\n    private draggableContainer: RefObject<HTMLDivElement> = React.createRef();\r\n    private draggableContent: RefObject<HTMLDivElement> = React.createRef();\r\n\r\n    //stores previous mouse location and drag\r\n    private dragging = false;\r\n    private prevX = 0;\r\n    private prevY = 0;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            top: -1,\r\n            left: -1,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('mouseup', e => {\r\n            this.mouseUp(e);\r\n        });\r\n        document.addEventListener('mousemove', e => {\r\n            this.mouseMove(e);\r\n        });\r\n        window.addEventListener('mouseleave', e => {\r\n            this.mouseUp(e);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Start drag and init prev mouse location when mouse is clicked on draggable\r\n     * @param e\r\n     */\r\n    private mouseDown = (e: MouseEvent) => {\r\n        e.preventDefault();\r\n        this.prevY = e.clientY;\r\n        this.prevX = e.clientX;\r\n        this.dragging = true;\r\n    }\r\n\r\n    /**\r\n     * Called when mouse is risen on document stop drag\r\n     * @param e\r\n     */\r\n    private mouseUp = (e: MouseEvent) => {\r\n        e.preventDefault();\r\n        this.dragging = false;\r\n    }\r\n\r\n    /**\r\n     * Called when the mouse is moved over the document to calculate the new position of\r\n     * the draggable canvas\r\n     * @param e\r\n     */\r\n    private mouseMove = (e: MouseEvent) => {\r\n        if(this.dragging) {\r\n            const container = this.draggableContainer.current!;\r\n            let top = (container.offsetTop - (this.prevY - e.clientY))\r\n            let left = (container.offsetLeft - (this.prevX - e.clientX));\r\n            const content = this.draggableContent.current!;\r\n            const draggable = this.draggable.current!;\r\n            //stop drag if mouse goes out of bounds\r\n            if(e.clientY < 0 || e.clientY > window.innerHeight\r\n                    || e.clientX < 0 || e.clientX > window.innerWidth) {\r\n                this.dragging = false;\r\n            }\r\n            //check if position is out of bounds and prevent the panel from being dragged there\r\n            if(top < 0) {\r\n                top = 0;\r\n            } else if (top > window.innerHeight - draggable.offsetHeight) {\r\n                top = window.innerHeight - draggable.offsetHeight;\r\n            }\r\n            if(left < -content.offsetWidth/2) {\r\n                left = -content.offsetWidth/2;\r\n            } else if(left > window.innerWidth - content.offsetWidth/2) {\r\n                left = window.innerWidth - content.offsetWidth/2;\r\n            }\r\n            //set new position\r\n            this.setState({\r\n                top: top\r\n            });\r\n            this.setState({\r\n                left: left\r\n            });\r\n            //update previous pos\r\n            this.prevY = e.clientY;\r\n            this.prevX = e.clientX;\r\n        }\r\n    }\r\n\r\n    getPosition = () => {\r\n        const left = this.state.left;\r\n        const top = this.state.top;\r\n        if(left === -1 || top === -1) {\r\n            return {};\r\n        }\r\n        return {\r\n            left: left + 'px',\r\n            top: top + 'px',\r\n        };\r\n    }\r\n\r\n    contentStyle = () => {\r\n        return {\r\n            display: this.props.show ? 'block' : 'none'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={this.draggableContainer} className='draggable-container' style={this.getPosition()}>\r\n                {this.renderDraggable()}\r\n                <div ref={this.draggableContent} style={this.contentStyle()} className='draggable-content'>\r\n                    <div className='settings-general'>\r\n                        {this.props.children}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderDraggable = () => {\r\n        return (\r\n            <div style={this.contentStyle()} className='draggable'\r\n                 ref={this.draggable}\r\n                 onMouseDown={e => this.mouseDown(e.nativeEvent)}\r\n            >\r\n                <div className='draggable-title'>Grid Settings</div>\r\n                <div className='x-button' onClick={this.props.onClickXButton}>X</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DraggablePanel;","import React from 'react';\r\nimport {Node} from '../../pathfinding/algorithms/Node';\r\nimport {Point} from '../../pathfinding/core/Components';\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    tilesX: number,\r\n    tilesY: number\r\n}\r\n\r\nconst CLOSED_NODE = 'rgb(198, 237, 238)';\r\nconst OPEN_NODE = 'rgb(191, 248, 159)';\r\nconst EMPTY_NODE = 'white';\r\n\r\nclass GridBackground extends React.Component<IProps>\r\n{\r\n    /**\r\n     * Represents the state of the component\r\n     * Stored outside of State to prevent copies, allowing\r\n     * updates with forceUpdate to improve App performance\r\n     */\r\n    private visualization: string[][];\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.visualization = this.createEmptyBg();\r\n    }\r\n\r\n    /**\r\n     * Create a new empty visualization canvas\r\n     */\r\n    createEmptyBg() {\r\n        const visualization = [];\r\n        for(let y = 0; y < this.props.tilesY; y++) {\r\n            const row: string[] = [];\r\n            for(let x = 0; x < this.props.tilesX; x++) {\r\n                row.push(EMPTY_NODE);\r\n            }\r\n            visualization.push(row);\r\n        }\r\n        return visualization;\r\n    }\r\n\r\n    /**\r\n     * Clear the visualization canvas and update UI\r\n     */\r\n    clear = () => {\r\n        this.visualization = this.createEmptyBg();\r\n        this.setState({});\r\n    }\r\n\r\n    /**\r\n     * Perform a generation on a visualization array\r\n     * @param generation\r\n     * @param visualization\r\n     */\r\n    private doGeneration = (generation: Node, visualization: string[][]) => {\r\n        for(const node of generation.children) {\r\n            const point = node.tile.point;\r\n            visualization[point.y][point.x] = OPEN_NODE;\r\n        }\r\n        const point = generation.tile.point;\r\n        visualization[point.y][point.x] = CLOSED_NODE;\r\n        return visualization;\r\n    }\r\n\r\n    /**\r\n     * Visualize generation and update UI\r\n     * @param generation\r\n     */\r\n    visualizeGeneration = (generation: Node) => {\r\n        this.doGeneration(generation, this.visualization); //modify state directly to improve performance\r\n        this.setState({});\r\n    }\r\n\r\n    /**\r\n     * Visualize generation array and update UI\r\n     * @param generations\r\n     */\r\n    visualizeGenerations = (generations: Node[]) => {\r\n        const visualization = this.createEmptyBg();\r\n        for(const generation of generations) {\r\n            this.doGeneration(generation, visualization);\r\n        }\r\n        this.visualization = visualization;\r\n        this.setState({});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='bg'>\r\n                {this.renderTiles()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderTiles = () => {\r\n        const tiles: JSX.Element[][] = [];\r\n        for(let y = 0; y < this.props.tilesY; y++) {\r\n            const row: JSX.Element[] = [];\r\n            for(let x = 0; x < this.props.tilesX; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                };\r\n                row.push(\r\n                    this.renderTile(point, this.visualization[point.y][point.x])\r\n                );\r\n            }\r\n            tiles.push(row);\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    private renderTile = (point: Point, color: string) => {\r\n        const width = this.props.tileWidth;\r\n        const top = point.y * this.props.tileWidth;\r\n        const left = point.x * this.props.tileWidth;\r\n        const style = {\r\n            backgroundColor: color,\r\n            width: width + 'px',\r\n            height: width + 'px',\r\n            top: top,\r\n            left: left\r\n        };\r\n        return (\r\n            <div key={point.x + ',' + point.y} style={style} className='tile'/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GridBackground;","/**\r\n * Represents a point in 2d space\r\n */\r\nexport interface Point\r\n{\r\n    readonly x: number;\r\n    readonly y: number;\r\n}\r\n\r\n/**\r\n * Represents the data inside a tile\r\n * Solid tiles cannot be passed while non solid ones can\r\n * pathCost stores how expensive it is to travel to the tile if it isn't solid\r\n */\r\nexport interface TileData\r\n{\r\n    readonly pathCost: number;\r\n    readonly isSolid: boolean;\r\n}\r\n\r\n/**\r\n * Represents a tile on the Grid\r\n */\r\nexport interface Tile\r\n{\r\n    data: TileData;\r\n    readonly point: Point;\r\n}\r\n\r\n/**\r\n * Simple function to create a solid tile with path cost of 1\r\n * @param isSolid\r\n */\r\nexport function createTile(isSolid: boolean) {\r\n    return {\r\n        pathCost: 1,\r\n        isSolid: isSolid\r\n    }\r\n}\r\n\r\n","import {createTile, Point, Tile, TileData} from './Components';\r\n\r\nexport interface Grid\r\n{\r\n    getWidth(): number;\r\n    getHeight(): number;\r\n    inBounds(point: Point): boolean;\r\n    get(point: Point): Tile;\r\n    isSolid(point: Point): boolean;\r\n    mutate(point: Point, data: TileData): void;\r\n    mutateTile(tile: Tile): void;\r\n    mutateDefault(point: Point, solid: boolean): void;\r\n    output(console: Console): void;\r\n    getJson(): string;\r\n    walkable(point: Point): boolean;\r\n    clone(): Grid;\r\n}\r\n\r\n/**\r\n * A square grid system that stores nodes in a matrix\r\n * Uses an x,y system where x corresponds to column of the matrix,\r\n * and y corresponds to the row of the matrix\r\n * TileData.ts should be treated like graph nodes\r\n */\r\nclass GridGraph implements Grid\r\n{\r\n    private readonly tiles: Tile[][];\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    /**\r\n     * Constructs a grid either with empty or predefined tiles\r\n     * @param width of the grid\r\n     * @param height of grid\r\n     * @param tiles, optional parameter for predefined tiles,\r\n     * will perform a defensive copy to the grid\r\n     */\r\n    constructor(width: number, height: number, tiles?: Tile[][]) {\r\n        this.width = width;\r\n        this.height = height;\r\n        if(tiles === undefined) {\r\n            this.tiles = createEmptyGrid(width, height);\r\n        } else {\r\n            this.tiles = [];\r\n            for(let y = 0; y < height; y++) {\r\n                const row: Tile[] = [];\r\n                for(let x = 0; x < width; x++) {\r\n                    row.push({\r\n                        data: {\r\n                            pathCost: tiles[y][x].data.pathCost,\r\n                            isSolid: tiles[y][x].data.isSolid\r\n                        },\r\n                        point: {\r\n                            x: x, y: y\r\n                        }\r\n                    });\r\n                }\r\n               this.tiles.push(row);\r\n            }\r\n        }\r\n    }\r\n\r\n    getWidth() {\r\n        return this.width;\r\n    }\r\n\r\n    getHeight() {\r\n        return this.height;\r\n    }\r\n\r\n    /**\r\n     * Checks if a given point is in bounds\r\n     * Other functions assume arguments are in bounds, this should be used\r\n     * if there is reasonable doubt about whether a point is in bounds\r\n     * @param point, to check\r\n     */\r\n    inBounds(point: Point) {\r\n        return point.x >= 0 && point.x < this.width && point.y >= 0 && point.y < this.height;\r\n    }\r\n\r\n    /**\r\n     * Retrieves a defensive tile for a position\r\n     * Defensive copy prevents this object from being mutated without calling\r\n     * a mutate function\r\n     * @param point, point to get\r\n     */\r\n    get(point: Point) {\r\n        return {\r\n            point: this.tiles[point.y][point.x].point,\r\n            data: this.tiles[point.y][point.x].data\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Mutates a position's tile to solid or non solid\r\n     * @param point, point to mutate\r\n     * @param data to mutate to\r\n     */\r\n    mutate(point: Point, data: TileData) {\r\n        this.tiles[point.y][point.x].data = data;\r\n    }\r\n\r\n    /**\r\n     * Mutates a a tile by point\r\n     * @param tile to mutate\r\n     */\r\n    mutateTile(tile: Tile) {\r\n        this.tiles[tile.point.y][tile.point.x].data = tile.data;\r\n    }\r\n\r\n    /**\r\n     * Mutate tile at point\r\n     * @param point to mutate at\r\n     * @param solid to determine what default tile to create\r\n     */\r\n    mutateDefault = (point: Point, solid: boolean) => {\r\n        this.mutate(\r\n            point, createTile(solid)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Outputs the grid to a console\r\n     * @param console\r\n     */\r\n    output(console: Console) {\r\n        for(let y = 0; y < this.height; y++) {\r\n            let str = '';\r\n            for(let x = 0; x < this.width; x++) {\r\n                str += this.tiles[y][x].data.isSolid + ', ';\r\n            }\r\n            console.log(str);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns json of tiles\r\n     */\r\n    getJson() {\r\n        return JSON.stringify(this.tiles);\r\n    }\r\n\r\n    /**\r\n     * Determines if a tile can be walked on\r\n     * @param point\r\n     */\r\n    walkable(point: Point) {\r\n        return !this.get(point).data.isSolid;\r\n    }\r\n\r\n    isSolid(point: Point): boolean {\r\n        return this.get(point).data.isSolid;\r\n    }\r\n\r\n    clone(): Grid {\r\n        return new GridGraph(this.width, this.height, this.tiles);\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a 2d matrix of empty nodes\r\n */\r\nfunction createEmptyGrid(width: number, height: number) {\r\n    const nodes: Tile[][] = [];\r\n    for(let y = 0; y < height; y++) {\r\n        const row: Tile[] = [];\r\n        for(let x = 0; x < width; x++) {\r\n            row.push({\r\n                point: {\r\n                    x: x, y: y\r\n                },\r\n                data: createTile(false)\r\n            });\r\n        }\r\n        nodes.push(row);\r\n    }\r\n    return nodes;\r\n}\r\n\r\nexport default GridGraph;","import React from 'react';\r\nimport {Point} from '../../pathfinding/core/Components';\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    point: Point,\r\n    color: string,\r\n    doAnimation: boolean\r\n}\r\n\r\ninterface IState {\r\n    tileSize: number\r\n}\r\n\r\nclass TileFg extends React.Component<IProps, IState>\r\n{\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const size = this.props.doAnimation ?  0 : this.props.tileWidth;\r\n        this.state = {\r\n            tileSize: size,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.props.doAnimation) {\r\n            this.applyExpandAnimation();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Animation to expand element from half size to full size over a few milliseconds\r\n     * Can be slow to execute so animations should be enabled with caution\r\n     */\r\n    applyExpandAnimation = () => {\r\n        const total = 5\r\n        const original = this.state.tileSize;\r\n        for(let i = 1; i <= total; i++) {\r\n            const expand = () => this.setState({\r\n                tileSize: original + i * (this.props.tileWidth/(total))\r\n            });\r\n            setTimeout(expand, i*10);\r\n        }\r\n    }\r\n\r\n    applyShrinkAnimation = () => {\r\n        const total = 5\r\n        const original = this.state.tileSize;\r\n        for(let i = 1; i <= total; i++) {\r\n            const expand = () => this.setState({\r\n                tileSize: original - i * (this.props.tileWidth/(total))\r\n            });\r\n            setTimeout(expand, i*10);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const width = this.state.tileSize;\r\n        const top = this.props.point.y * this.props.tileWidth + (this.props.tileWidth - width)/2;\r\n        const left = this.props.point.x * this.props.tileWidth + (this.props.tileWidth - width)/2;\r\n        const style = {\r\n            fill: this.props.color,\r\n            stroke: 'none',\r\n            display: 'block'\r\n        };\r\n        return (\r\n            <rect x={left} y={top}\r\n                  shapeRendering='crispEdges'\r\n                  width={width} height={width}\r\n                  style={style} className={'tile svg-tile'}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default TileFg;","import React, {RefObject} from 'react';\r\nimport {Point, Tile} from '../../pathfinding/core/Components';\r\nimport GridGraph, {Grid} from '../../pathfinding/core/Grid';\r\nimport TileFg from './TileFg';\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    tilesX: number,\r\n    tilesY: number,\r\n    onTilesDragged: () => void;\r\n    topMargin: number\r\n}\r\n\r\ninterface IState {\r\n    grid: Grid,\r\n    initial: Point,\r\n    goal: Point,\r\n    path: Tile[]\r\n}\r\n\r\nconst SOLID_COLOR = 'rgb(45, 48, 54)';\r\nconst INITIAL_COLOR = 'rgb(131, 217, 52)';\r\nconst GOAL_COLOR = 'rgb(203, 75, 14)';\r\nconst LINE_COLOR = 'rgb(254,252,119)';\r\n\r\nclass GridForeground extends React.Component<IProps,IState>\r\n{\r\n    private svg: RefObject<SVGSVGElement> = React.createRef();\r\n\r\n    private mouseDown0: boolean = false;\r\n    private mouseDown2: boolean = false;\r\n    private draggingInitial: boolean = false;\r\n    private draggingGoal: boolean = false;\r\n    private disable: boolean = false;\r\n\r\n    private doTileAnimation: boolean = true;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const end = this.calcEndPointInView();\r\n        this.state = {\r\n            grid: new GridGraph(this.props.tilesX, this.props.tilesY),\r\n            path: [],\r\n            initial: {\r\n                x: ((end.x)/3) >> 0,\r\n                y: ((end.y)/3) >> 0\r\n            },\r\n            goal: {\r\n                x: ((2*(end.x)/3) >> 0) - 1,\r\n                y: ((2*(end.y)/3) >> 0) - 1\r\n            }\r\n        }\r\n    }\r\n\r\n    calcEndPointInView() {\r\n        const xEnd = Math.round(window.innerWidth / this.props.tileWidth);\r\n        const yEnd = Math.round((window.innerHeight - this.props.topMargin - 30) / this.props.tileWidth);\r\n        return {\r\n            x: xEnd, y: yEnd\r\n        }\r\n    }\r\n\r\n    toggleDisable() {\r\n        this.disable = !this.disable;\r\n    }\r\n\r\n    getBoundingRect() {\r\n        return this.svg.current!.getBoundingClientRect();\r\n    }\r\n\r\n    private mouseDown = (e: MouseEvent) => {\r\n        e.preventDefault();\r\n        const bounds = this.getBoundingRect();\r\n        this.onPress(e.clientX - bounds.left, e.clientY - bounds.top, e.button);\r\n    }\r\n\r\n    private mouseUp = (e: MouseEvent) => {\r\n        e.preventDefault();\r\n        if(e.button === 0) {\r\n            this.draggingGoal = false;\r\n            this.draggingInitial = false;\r\n            this.mouseDown0 = false;\r\n        } else if(e.button === 2) {\r\n            this.mouseDown2 = false;\r\n        }\r\n    }\r\n\r\n    private mouseMove = (e: MouseEvent) => {\r\n        const bounds = this.getBoundingRect();\r\n        this.onDrag(e.clientX - bounds.left, e.clientY - bounds.top);\r\n    }\r\n\r\n    private touchStart = (e: TouchEvent) => {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        const bounds = this.getBoundingRect();\r\n        this.onTouch(touch.clientX - bounds.left, touch.clientY - bounds.top);\r\n    }\r\n\r\n    private touchMove = (e: TouchEvent) => {\r\n        const touch = e.touches[0] || e.changedTouches[0];\r\n        const bounds = this.getBoundingRect();\r\n        this.onDrag(touch.clientX - bounds.left, touch.clientY - bounds.top);\r\n    }\r\n\r\n    private onEndingEvent = (e: Event) => {\r\n        e.preventDefault();\r\n        this.draggingGoal = false;\r\n        this.draggingInitial = false;\r\n        this.mouseDown0 = false;\r\n        this.mouseDown2 = false;\r\n    }\r\n\r\n    /**\r\n     * Responds to the event thrown at screen coordinates on press\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     * @param button\r\n     */\r\n    private onPress = (xCoordinate: number, yCoordinate: number, button: number) => {\r\n        const point = this.calculatePoint(xCoordinate,yCoordinate);\r\n        if(button === 0) {\r\n            this.mouseDown0 = true;\r\n            if(pointsEqual(point, this.state.initial)) {\r\n                this.draggingInitial = true;\r\n            } else if(pointsEqual(point, this.state.goal)) {\r\n                this.draggingGoal = true;\r\n            } else if(!this.disable) {\r\n                this.drawTile(point);\r\n            }\r\n        } else if(button === 2) {\r\n            this.mouseDown2 = true;\r\n            if(!pointsEqual(point,this.state.initial) && !pointsEqual(point, this.state.goal) && !this.disable) {\r\n                this.eraseTile(point);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Responds to the event thrown at screen coordinates on touch\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     */\r\n    private onTouch = (xCoordinate: number, yCoordinate: number) => {\r\n        const point = this.calculatePoint(xCoordinate,yCoordinate);\r\n        if(pointsEqual(point, this.state.initial)) {\r\n            this.mouseDown0 = true;\r\n            this.draggingInitial = true;\r\n        } else if(pointsEqual(point, this.state.goal)) {\r\n            this.mouseDown0 = true;\r\n            this.draggingGoal = true;\r\n        } else if(!this.state.grid.isSolid(point)) {\r\n            this.mouseDown0 = true;\r\n            if(!this.disable) {\r\n                this.drawTile(point);\r\n            }\r\n        } else {\r\n            this.mouseDown2 = true;\r\n            if(!pointsEqual(point, this.state.initial) && !pointsEqual(point, this.state.goal) && !this.disable) {\r\n                this.eraseTile(point);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Responds to the event thrown at screen coordinates on drag/move\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     */\r\n    private onDrag = (xCoordinate: number, yCoordinate: number) => {\r\n        const point = this.calculatePoint(xCoordinate,yCoordinate);\r\n        if(this.mouseDown0) {\r\n            if(this.draggingInitial) {\r\n                this.moveInitial(point);\r\n                this.props.onTilesDragged();\r\n            } else if(this.draggingGoal) {\r\n                this.moveGoal(point);\r\n                this.props.onTilesDragged();\r\n            } else if(!pointsEqual(point,this.state.initial) && !pointsEqual(point, this.state.goal) && !this.disable) {\r\n                this.drawTile(point);\r\n            }\r\n        } else if(this.mouseDown2) {\r\n            if(!pointsEqual(point, this.state.initial) && !pointsEqual(point, this.state.goal) && !this.disable) {\r\n                this.eraseTile(point);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw an entire new grid on the foreground with disabled animations\r\n     * @param grid\r\n     */\r\n    drawGrid = (grid: Grid) => {\r\n        this.doTileAnimation = false;\r\n        this.setState({\r\n            grid: grid\r\n        }, () => this.doTileAnimation = true)\r\n    }\r\n\r\n    /**\r\n     * Draw tile at point\r\n     * @param point\r\n     */\r\n    drawTile = (point: Point) => {\r\n        const grid = this.state.grid;\r\n        if(grid.inBounds(point)) {\r\n            grid.mutateDefault(point, true);\r\n        }\r\n        this.forceUpdate();\r\n    }\r\n\r\n    /**\r\n     * Checks if a node is visualized, then changes the tile to empty if it isn't\r\n     * @param point\r\n     */\r\n    eraseTile = (point: Point) => {\r\n        const grid = this.state.grid;\r\n        if(grid.inBounds(point)) {\r\n            grid.mutateDefault(point, false);\r\n        }\r\n        this.forceUpdate();\r\n    }\r\n\r\n    /**\r\n     * Clear grid in state\r\n     */\r\n    clearTiles = () => {\r\n        const grid = this.state.grid;\r\n        for(let y = 0; y < this.props.tilesY; y++) {\r\n            for(let x = 0; x < this.props.tilesX; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                }\r\n                grid.mutateDefault(point, false);\r\n            }\r\n        }\r\n        this.forceUpdate();\r\n    }\r\n\r\n    /**\r\n     * Moves initial to a new point\r\n     * @param point\r\n     */\r\n    moveInitial = (point: Point) => {\r\n        const revealed = this.state.grid.isSolid(point);\r\n        if(this.state.grid.inBounds(point) && !revealed &&\r\n            !pointsEqual(this.state.goal, point)  && !this.disable) {\r\n            this.setState({\r\n                initial: point\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves goal to a new point\r\n     * @param point\r\n     */\r\n    moveGoal = (point: Point) => {\r\n        const revealed = this.state.grid.isSolid(point);\r\n        if(this.state.grid.inBounds(point) && !revealed &&\r\n            !pointsEqual(this.state.initial, point) && !this.disable) {\r\n            this.setState({\r\n                goal: point\r\n            });\r\n        }\r\n    }\r\n\r\n    drawPath = (path: Tile[]) => {\r\n        this.setState({\r\n            path: path.slice()\r\n        });\r\n    }\r\n\r\n    erasePath = () => {\r\n        this.setState({\r\n            path: []\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Converts real screen x,y coordinates into\r\n     * a 2d point position on the grid\r\n     * @param xCoordinate\r\n     * @param yCoordinate\r\n     */\r\n    calculatePoint = (xCoordinate: number, yCoordinate: number) => {\r\n        return {\r\n            x: Math.floor(xCoordinate/this.props.tileWidth),\r\n            y: Math.floor(yCoordinate/this.props.tileWidth)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <svg ref={this.svg} xmlns='http://www.w3.org/2000/svg' className='grid'\r\n                 onContextMenu={e => e.preventDefault()}\r\n                 onMouseDown={e => this.mouseDown(e.nativeEvent)}\r\n                 onMouseUp={e => this.mouseUp(e.nativeEvent)}\r\n                 onMouseMove={e => this.mouseMove(e.nativeEvent)}\r\n                 onMouseLeave={e => this.onEndingEvent(e.nativeEvent)}\r\n                 onTouchStart={e => this.touchStart(e.nativeEvent)}\r\n                 onTouchMoveCapture={e => this.touchMove(e.nativeEvent)}\r\n                 onTouchEnd={e => this.onEndingEvent(e.nativeEvent)}\r\n                 onTouchCancel={e => this.onEndingEvent(e.nativeEvent)}\r\n            >\r\n                {this.renderEndTile(this.state.initial, INITIAL_COLOR,'initial')}\r\n                {this.renderEndTile(this.state.goal, GOAL_COLOR,'goal')}\r\n                {this.renderLines()}\r\n                {this.renderTiles()}\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    private renderLines = () => {\r\n        const lines: JSX.Element[] = [];\r\n        for(let i = 0; i < this.state.path.length-1; i++) {\r\n            const first = this.state.path[i].point;\r\n            const second = this.state.path[i+1].point;\r\n            lines.push(this.renderLine(first, second));\r\n        }\r\n        return lines;\r\n    }\r\n\r\n    private renderLine = (first: Point, second: Point) => {\r\n        const width = this.props.tileWidth;\r\n        const offset = width/2;\r\n        return (\r\n            <line key={second.x + ',' + second.y}\r\n                  x1={first.x * width + offset} y1={first.y * width + offset}\r\n                  x2={second.x * width + offset} y2={second.y * width + offset}\r\n                  stroke={LINE_COLOR} strokeWidth='2' className='line'/>\r\n        );\r\n    }\r\n\r\n    private renderTiles = () => {\r\n        const tiles: JSX.Element[] = [];\r\n        for(let y = 0; y < this.props.tilesY; y++) {\r\n            for(let x = 0; x < this.props.tilesX; x++) {\r\n                const point = {\r\n                    x: x, y: y\r\n                }\r\n                if(this.state.grid.isSolid(point)) {\r\n                    tiles.push(\r\n                        <TileFg key={point.x + ',' + point.y} point={point}\r\n                                doAnimation={this.doTileAnimation}\r\n                                tileWidth={this.props.tileWidth}\r\n                                color={SOLID_COLOR}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    private renderEndTile = (point: Point, color: string, key: string) => {\r\n        return <TileFg key={key} point={point} doAnimation={false}\r\n                       tileWidth={this.props.tileWidth}\r\n                       color={color}/>\r\n    }\r\n}\r\n\r\nfunction pointsEqual(point1: Point, point2: Point) {\r\n    return point1.x === point2.x && point1.y === point2.y;\r\n}\r\n\r\nexport default GridForeground;","import React, {RefObject} from 'react';\r\n\r\ninterface IProps {\r\n    algorithm: string,\r\n    length: number,\r\n    time: number,\r\n    nodes: number,\r\n}\r\n\r\nclass StatsPanel extends React.Component<IProps>\r\n{\r\n    private readonly textLog: RefObject<HTMLTextAreaElement> = React.createRef();\r\n\r\n    componentDidUpdate() {\r\n        this.textLog.current!.scrollTop = this.textLog.current!.scrollHeight;\r\n    }\r\n\r\n    getHeight() {\r\n        return this.textLog.current!.clientHeight;\r\n    }\r\n\r\n    render() {\r\n        const text = this.props.algorithm === '' ? '' :\r\n            this.props.algorithm + ' visited ' + this.props.nodes + ' nodes in ' +\r\n            this.props.time + ' ms. Path length = ' + this.props.length + '. ';\r\n        return(\r\n            <div>\r\n                <textarea ref={this.textLog} readOnly={true} className='stats-text-area no-select scroll'\r\n                          value={text} unselectable={'on'} onDrop={() => false}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default StatsPanel;","import {Grid} from './Grid';\r\nimport {Point, Tile} from './Components';\r\n\r\nexport const UNIT = 1; //number of tiles we can move at once\r\n\r\n/**\r\n * Describes an abstract navigator for a grid\r\n * Provides graph-like traversal for the grid\r\n * Determines where we can travel to from a certain point,\r\n * whether we have reached a destination, and the cost to\r\n * travel to a certain point\r\n */\r\nabstract class Navigator\r\n{\r\n    protected readonly grid: Grid;\r\n\r\n    constructor(grid: Grid) {\r\n        this.grid = grid;\r\n    }\r\n\r\n    getGrid() {\r\n        return this.grid;\r\n    }\r\n\r\n    /**\r\n     * Goal check function: Checks if two points are equal\r\n     * @param a\r\n     * @param b\r\n     */\r\n    equals(a: Point, b: Point) {\r\n        return a.x === b.x && a.y === b.y;\r\n    }\r\n\r\n    /**\r\n     * Step cost function from a to b\r\n     * @param a\r\n     * @param b to point to travel to\r\n     */\r\n    abstract cost(a: Point, b: Point): number;\r\n\r\n    /**\r\n     * Neighbors function: Gets the available neighbors for a point in a grid we can make\r\n     * in a given move\r\n     * @param point\r\n     */\r\n    abstract neighbors(point: Point): Tile[];\r\n}\r\n\r\nexport default Navigator;","import {Point, Tile} from './Components';\r\nimport Navigator, {UNIT} from './Navigator';\r\n\r\n/**\r\n * Concretion of a Plus Navigator for a grid\r\n * Allows movement akin to a 'plus' symbol\r\n */\r\nclass PlusNavigator extends Navigator\r\n{\r\n    /**\r\n     * Adds the neighbors of a point to the left, right, top and down\r\n     * @param point\r\n     */\r\n    neighbors(point: Point): Tile[] {\r\n        const tiles: Tile[] = [];\r\n        if(point.x + UNIT < this.grid.getWidth()) {\r\n            const tile = this.grid.get({\r\n                x: point.x + UNIT,\r\n                y: point.y\r\n            })\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.y + UNIT < this.grid.getHeight()) {\r\n            const tile = this.grid.get({\r\n                x: point.x,\r\n                y: point.y + UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.x - UNIT >= 0) {\r\n            const tile = this.grid.get({\r\n                x: point.x - UNIT,\r\n                y: point.y\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.y - UNIT >= 0) {\r\n            const tile = this.grid.get({\r\n                x: point.x,\r\n                y: point.y - UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    /**\r\n     * Step cost function that works by getting the pathCost stored in the grid\r\n     * from one point a to b\r\n     * @param a\r\n     * @param b to point to travel to\r\n     */\r\n    cost(a: Point, b: Point) {\r\n        return this.grid.get(b).data.pathCost;\r\n    }\r\n}\r\n\r\nexport default PlusNavigator;","import {Point} from '../core/Components';\r\n\r\nexport type HeuristicFunc = (a: Point, b: Point) => number;\r\n\r\nexport function manhattan(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x) ;\r\n    const dy = Math.abs(a.y - b.y);\r\n    return dx + dy;\r\n}\r\n\r\nexport function euclidean(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n}\r\n\r\nexport function octile(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.SQRT2 * Math.min(dx, dy) + Math.abs(dx - dy);\r\n}\r\n\r\nexport function chebyshev(a: Point, b: Point): number {\r\n    const dx = Math.abs(a.x - b.x);\r\n    const dy = Math.abs(a.y - b.y);\r\n    return Math.max(dx, dy);\r\n}\r\n\r\nexport function nullHeuristic(a: Point, b: Point): number {\r\n    return 0;\r\n}","import {Point, Tile} from './Components';\r\nimport Navigator, {UNIT} from './Navigator';\r\nimport {euclidean} from '../algorithms/Heuristics';\r\n\r\n/**\r\n * Concretion of a Plus Navigator for a grid\r\n * Allows movement akin to a 'asterisk' symbol\r\n */\r\nclass AsteriskNavigator extends Navigator\r\n{\r\n    /**\r\n     * Adds the neighbors of a point to the left, right, top and down\r\n     * @param point\r\n     */\r\n    neighbors(point: Point): Tile[] {\r\n        //keep track of double squares that block diagonals\r\n        let walkBottomRight = false;\r\n        let walkTopRight = false;\r\n        let walkBottomLeft = false;\r\n        let walkTopLeft = false;\r\n        //plus\r\n        const tiles: Tile[] = [];\r\n        if(point.x + UNIT < this.grid.getWidth()) {\r\n            const tile = this.grid.get({\r\n                x: point.x + UNIT,\r\n                y: point.y\r\n            })\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n                walkBottomRight = true;\r\n                walkTopRight = true;\r\n            }\r\n        }\r\n        if(point.y + UNIT < this.grid.getHeight()) {\r\n            const tile = this.grid.get({\r\n                x: point.x,\r\n                y: point.y + UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n                walkBottomRight = true;\r\n                walkBottomLeft = true;\r\n            }\r\n        }\r\n        if(point.x - UNIT >= 0) {\r\n            const tile = this.grid.get({\r\n                x: point.x - UNIT,\r\n                y: point.y\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n                walkBottomLeft = true;\r\n                walkTopLeft = true;\r\n            }\r\n        }\r\n        if(point.y - UNIT >= 0) {\r\n            const tile = this.grid.get({\r\n                x: point.x,\r\n                y: point.y - UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n                walkTopRight = true;\r\n                walkTopLeft = true;\r\n            }\r\n        }\r\n        //diagonals\r\n        if(point.x + UNIT < this.grid.getWidth() &&\r\n            point.y + UNIT < this.grid.getHeight() &&\r\n            walkBottomRight) {\r\n            const tile = this.grid.get({\r\n                x: point.x + UNIT,\r\n                y: point.y + UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.x - UNIT >= 0 &&\r\n            point.y + UNIT < this.grid.getHeight() &&\r\n            walkBottomLeft) {\r\n            const tile = this.grid.get({\r\n                x: point.x - UNIT,\r\n                y: point.y + UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.x + UNIT < this.grid.getWidth() &&\r\n            point.y - UNIT >= 0 &&\r\n            walkTopRight) {\r\n            const tile =  this.grid.get({\r\n                x: point.x + UNIT,\r\n                y: point.y - UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        if(point.x - UNIT >= 0 &&\r\n            point.y - UNIT >= 0 &&\r\n            walkTopLeft) {\r\n            const tile =  this.grid.get({\r\n                x: point.x - UNIT,\r\n                y: point.y - UNIT\r\n            });\r\n            if(!tile.data.isSolid) {\r\n                tiles.push(tile);\r\n            }\r\n        }\r\n        return tiles;\r\n    }\r\n\r\n    /**\r\n     * Step cost function that works by getting the pathCost stored in the grid\r\n     * from one point a to b\r\n     * Returns the exact distance multiplied by the cost to travel there\r\n     * @param a\r\n     * @param b to point to travel to\r\n     */\r\n    cost(a: Point, b: Point) {\r\n        return euclidean(a,b) * this.grid.get(b).data.pathCost;\r\n    }\r\n\r\n}\r\n\r\nexport default AsteriskNavigator;","import {Point} from '../core/Components';\r\n\r\n/**\r\n * A simple data structure that keeps track of whether keys have been added to it\r\n */\r\nexport class HashSet\r\n{\r\n    private map: {[key: string]: boolean} = {};\r\n\r\n    add(key: string) {\r\n        this.map[key] = true;\r\n    }\r\n\r\n    remove(key: string) {\r\n        this.map[key] = false;\r\n    }\r\n\r\n    has(key: string) {\r\n        return this.map[key];\r\n    }\r\n\r\n    clear() {\r\n        this.map = {};\r\n    }\r\n}\r\n\r\n/**\r\n * A simple data structure that stores a type at a key\r\n */\r\nexport class HashTable<Value>\r\n{\r\n    private map: {[key: string]: Value | undefined} = {};\r\n\r\n    add(key: string, data: Value) {\r\n        this.map[key] = data;\r\n    }\r\n\r\n    remove(key: string) {\r\n        this.map[key] = undefined;\r\n    }\r\n\r\n    get(key: string) {\r\n        return this.map[key];\r\n    }\r\n\r\n    has(key: string) {\r\n        return this.map[key] !== undefined;\r\n    }\r\n\r\n    clear() {\r\n        this.map = {};\r\n    }\r\n}\r\n\r\n/**\r\n * Serialize point into a unique string\r\n * @param point\r\n */\r\nexport function stringify(point: Point) {\r\n    return 'x' + point.x + 'y' + point.y;\r\n}","/**\r\n * A compare function to determine if a is 'better' (deserves a higher position) than b\r\n */\r\nexport type Comparator<E> = (a: E, b: E) => boolean\r\n\r\n/**\r\n * Minimalist Implementation of the heap data structure as an array\r\n */\r\nclass Heap<E>\r\n{\r\n    private elements: E[] = [];\r\n    readonly compare: Comparator<E>;\r\n\r\n    constructor(compare: Comparator<E>) {\r\n        this.compare = compare;\r\n    }\r\n\r\n    /**\r\n     * Returns the size of the heap\r\n     */\r\n    getSize() {\r\n        return this.elements.length;\r\n    }\r\n\r\n    /**\r\n     * Checks if heap is empty\r\n     */\r\n    isEmpty() {\r\n        return this.elements.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Add a new element to the heap\r\n     * @param e\r\n     */\r\n    push(e: E) {\r\n        this.elements.push(e);\r\n        this.siftUp(this.elements.length-1); //last element\r\n    }\r\n\r\n    /**\r\n     * Returns the top of the heap without removing it\r\n     * Fails if heap is empty\r\n     */\r\n    peek() {\r\n        return this.elements[0];\r\n    }\r\n\r\n    /**\r\n     * Returns the top of the heap and removes it\r\n     * Fails if heap is empty\r\n     */\r\n    pop() {\r\n        const val = this.peek();\r\n        this.move(this.elements.length - 1, 0);\r\n        this.elements.pop();\r\n        this.siftDown(0);\r\n        return val;\r\n    }\r\n\r\n    /**\r\n     * Clear the heap\r\n     */\r\n    clear() {\r\n        this.elements = [];\r\n    }\r\n\r\n    /**\r\n     * Sifts a new element that is out of order up to the right position\r\n     * @param pos of new element\r\n     */\r\n    private siftUp(pos: number) {\r\n        let parent = ((pos - 1) / 2) >> 0; //integer division\r\n        while(parent >= 0) {\r\n            //if the current position is better than parent\r\n            if(this.compare(this.elements[pos], this.elements[parent])) {\r\n                //then current position with parent and move to next\r\n                this.swap(pos, parent);\r\n                pos = parent;\r\n                parent = ((pos - 1) / 2) >> 0;\r\n            } else {\r\n                //otherwise stop\r\n                parent = -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sifts a new element that is out of order down to the right position\r\n     * @param pos of new element\r\n     */\r\n    private siftDown(pos: number) {\r\n        const left = 2 * pos + 1;\r\n        const right = 2 * pos + 2;\r\n        //stop if the children are out of bounds\r\n        if(left >= this.elements.length) {\r\n            return;\r\n        }\r\n        //find the better child\r\n        const child = (right >= this.elements.length || this.compare(this.elements[left], this.elements[right]))\r\n            ? left : right;\r\n        //continues to sift down if the child is better than the current position\r\n        if(this.compare(this.elements[child], this.elements[pos])) {\r\n            this.swap(child, pos);\r\n            this.siftDown(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Internal move function\r\n     * @param from\r\n     * @param to\r\n     */\r\n    private move(from: number, to: number) {\r\n        this.elements[to] = this.elements[from];\r\n    }\r\n\r\n    /**\r\n     * Internal swap function\r\n     * @param a\r\n     * @param b\r\n     */\r\n    private swap(a: number, b: number) {\r\n        let val = this.elements[a];\r\n        this.elements[a] = this.elements[b];\r\n        this.elements[b] = val;\r\n    }\r\n}\r\n\r\nexport default Heap;","import {Point, Tile} from '../core/Components';\r\nimport Navigator from '../core/Navigator';\r\nimport {Node} from './Node';\r\n\r\n/**\r\n * Pathfinder performs algorithms operations on the grid\r\n * Uses the navigator rank and expand nodes\r\n */\r\nabstract class Pathfinder\r\n{\r\n    protected recentSearch: Node[] = [];\r\n    protected navigator: Navigator;\r\n\r\n    constructor(navigator: Navigator) {\r\n        this.navigator = navigator;\r\n    }\r\n\r\n    setNavigator(navigator: Navigator) {\r\n        this.navigator = navigator;\r\n    }\r\n\r\n    getNavigator() {\r\n        return this.navigator;\r\n    }\r\n\r\n    getRecentNodes() {\r\n        return this.recentSearch.length;\r\n    }\r\n\r\n    clearRecentSearch() {\r\n        this.recentSearch = [];\r\n    }\r\n\r\n    addRecent(node: Node) {\r\n        this.recentSearch.push(node);\r\n    }\r\n\r\n    abstract getAlgorithmName(): string;\r\n\r\n    /**\r\n     * Finds the best path between initial and goal on the grid\r\n     * and returns it in an array\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    abstract findPath(initial: Point, goal: Point): Tile[];\r\n\r\n    /**\r\n     * Reconstructs the solution using the recent search array and calls a\r\n     * function for every generation and for every expansion\r\n     * @param onGeneration to determine what to do when a node's generation is expanded\r\n     */\r\n    reconstructSolution(onGeneration: (nodes: Node) => void) {\r\n        for(const node of this.recentSearch) {\r\n            onGeneration(node);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Reconstructs the path from a tree, given the bottomLeaf, and\r\n * returns the shortest path in an array\r\n * @param bottomLeaf bottom of the tree to start from\r\n */\r\nexport function reconstructPath(bottomLeaf: Node): Tile[] {\r\n    return reconstructPathReversed(bottomLeaf).reverse();\r\n}\r\n\r\n/**\r\n * Reconstructs the path from a tree, given the bottomLeaf, and\r\n * returns the shortest path in an array\r\n * @param bottomLeaf bottom of the tree to start from\r\n */\r\nexport function reconstructPathReversed(bottomLeaf: Node): Tile[] {\r\n    const path: Tile[] = [];\r\n    while(bottomLeaf.parent !== null) {\r\n        path.push(bottomLeaf.tile);\r\n        bottomLeaf = bottomLeaf.parent;\r\n    }\r\n    return path;\r\n}\r\n\r\nexport default Pathfinder;","import {Tile} from '../core/Components';\r\n\r\n/**\r\n * Represents a search Tree Node\r\n */\r\nexport class Node\r\n{\r\n    parent: Node | null = null; //parent node\r\n    readonly children: Node[] = [];\r\n    readonly tile: Tile; //stores a graph node\r\n\r\n    constructor(tile: Tile) {\r\n        this.tile = tile;\r\n    }\r\n\r\n    addChild(child: Node) {\r\n        child.parent = this;\r\n        this.children.push(child);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents an heuristic weighted aStar search tree node\r\n */\r\nexport class AStarNode extends Node\r\n{\r\n    readonly g: number; //path cost\r\n    readonly fScore: number; //heuristic\r\n\r\n    constructor(tile: Tile, g: number, fScore: number) {\r\n        super(tile);\r\n        this.g = g;\r\n        this.fScore = fScore;\r\n    }\r\n\r\n    f() {\r\n        return this.fScore;\r\n    }\r\n}\r\n","import {HashTable, stringify} from '../structures/Hash';\r\nimport Heap from '../structures/Heap';\r\nimport Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {AStarNode} from './Node';\r\nimport Navigator from '../core/Navigator';\r\nimport {euclidean, HeuristicFunc} from './Heuristics';\r\n\r\nclass AStarPathfinder extends Pathfinder\r\n{\r\n    private readonly heuristic: HeuristicFunc = (a: Point, b: Point) => euclidean(a,b);\r\n\r\n    constructor(navigator: Navigator, func?: HeuristicFunc) {\r\n        super(navigator);\r\n        if(func !== undefined) {\r\n            this.heuristic = func;\r\n        }\r\n    }\r\n\r\n    getAlgorithmName(): string {\r\n        return 'A*';\r\n    }\r\n\r\n    /**\r\n     * Performs aStar algorithm on the grid given an initial and goal point\r\n     * Always returns the shortest path, and performs well on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const openSet = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const closedSet = new HashTable<number>();\r\n        const root = new AStarNode(\r\n            grid.get(initial), 0, 0\r\n        );\r\n        openSet.push(root);\r\n        closedSet.add(stringify(initial), root.f());\r\n        while (!openSet.isEmpty()) {\r\n            const currentNode = openSet.pop();\r\n            this.addRecent(currentNode);\r\n            const currentPoint = currentNode.tile.point;\r\n            if (this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            for (const neighbor of this.navigator.neighbors(currentPoint)) {\r\n                const neighborPoint = neighbor.point;\r\n                const neighborKey = stringify(neighborPoint);\r\n                const g = currentNode.g + this.stepCost(currentPoint, neighborPoint);\r\n                const f = g + this.heuristic(neighborPoint, goal);\r\n                if (!closedSet.has(neighborKey) || f < closedSet.get(neighborKey)!) {\r\n                    const neighborNode = new AStarNode(\r\n                        neighbor, g, f\r\n                    );\r\n                    currentNode.addChild(neighborNode);\r\n                    openSet.push(neighborNode);\r\n                    closedSet.add(neighborKey, neighborNode.f());\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * The step-cost function to be used, calculating the cost from\r\n     * currentPoint to neighborPoint. Uses the stepCost function provided by the\r\n     * navigator by default but can be overridden\r\n     * @param currentPoint\r\n     * @param neighborPoint\r\n     */\r\n    stepCost(currentPoint: Point, neighborPoint: Point) {\r\n        return this.navigator.cost(currentPoint, neighborPoint);\r\n    }\r\n}\r\n\r\nexport default AStarPathfinder;","import Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {HashSet, stringify} from '../structures/Hash';\r\nimport {Node} from './Node';\r\n\r\nclass BFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName(): string {\r\n        return 'Breadth-First-Search';\r\n    }\r\n\r\n    /**\r\n     * Implementation of BFS to find the shortest path from initial to point\r\n     * Always returns the shortest path, but performs poorly on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const queue: Node[] = []; //fifo, stores nodes on the frontier\r\n        const visited = new HashSet();\r\n        const root = new Node(grid.get(initial));\r\n        queue.push(root); //enqueue\r\n        visited.add(stringify(initial));\r\n        while(queue.length !== 0) { //not empty\r\n            const currentNode = queue.shift()!; //dequeue\r\n            this.addRecent(currentNode);\r\n            const currentPoint = currentNode.tile.point;\r\n            if(this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            for(const neighbor of this.navigator.neighbors(currentPoint)) {\r\n                const neighborKey = stringify(neighbor.point);\r\n                if(!visited.has(neighborKey)) {\r\n                    const neighborNode = new Node(neighbor);\r\n                    currentNode.addChild(neighborNode);\r\n                    queue.push(neighborNode); //enqueue\r\n                    visited.add(neighborKey);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default BFSPathfinder;","/**\r\n * Stack node\r\n */\r\nclass Node<E>\r\n{\r\n    next: Node<E> | null = null;\r\n    data: E;\r\n\r\n    constructor(data: E) {\r\n        this.data = data;\r\n    }\r\n}\r\n\r\n/**\r\n * Minimalist Implementation of the stack data structure\r\n */\r\nclass Stack<E>\r\n{\r\n    private top: Node<E> | null = null;\r\n    private size: number = 0;\r\n\r\n    peek() {\r\n        return this.top != null ? this.top.data : undefined;\r\n    }\r\n\r\n    push(e: E) {\r\n        const node = new Node(e);\r\n        node.next = this.top;\r\n        this.top = node;\r\n        this.size++;\r\n    }\r\n\r\n    pop() {\r\n        const top = this.peek();\r\n        if(this.top != null) {\r\n            this.top = this.top.next;\r\n            this.size--;\r\n        }\r\n        return top;\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.size === 0;\r\n    }\r\n\r\n    getSize() {\r\n        return this.size;\r\n    }\r\n}\r\n\r\nexport default Stack;","import Pathfinder, {reconstructPath} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {HashSet, stringify} from '../structures/Hash';\r\nimport {Node} from './Node';\r\nimport Stack from '../structures/Stack';\r\n\r\nclass DFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName(): string {\r\n        return 'Depth-First-Search';\r\n    }\r\n\r\n    /**\r\n     * Calls DFS between a start and goal point, will typically not find the 'Best' path,\r\n     * and will instead find the best path capable for the algorithm\r\n     * As this algorithm is non optimal it should only be used for educational purposes\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const root = new Node(grid.get(initial));\r\n        const stack = new Stack<Node>();\r\n        stack.push(root);\r\n        const visited = new HashSet();\r\n        visited.add(stringify(initial));\r\n        while(!stack.isEmpty()) {\r\n            const currentNode = stack.pop()!;\r\n            this.addRecent(currentNode);\r\n            const currentPoint = currentNode.tile.point;\r\n            if(this.navigator.equals(currentPoint, goal)) {\r\n                return reconstructPath(currentNode);\r\n            }\r\n            const neighbors = this.navigator.neighbors(currentPoint).reverse();\r\n            for(const neighbor of neighbors){\r\n                const neighborKey = stringify(neighbor.point);\r\n                if(!visited.has(neighborKey)) {\r\n                    const neighborNode = new Node(neighbor);\r\n                    currentNode.addChild(neighborNode);\r\n                    stack.push(neighborNode);\r\n                    visited.add(neighborKey);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default DFSPathfinder;\r\n","import {HashTable, stringify} from '../structures/Hash';\r\nimport Heap from '../structures/Heap';\r\nimport Pathfinder, {reconstructPath, reconstructPathReversed} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {AStarNode} from './Node';\r\nimport Navigator from '../core/Navigator';\r\nimport {euclidean, HeuristicFunc} from './Heuristics';\r\n\r\nclass BiAStarPathfinder extends Pathfinder\r\n{\r\n    private readonly heuristic: HeuristicFunc = (a: Point, b: Point) => euclidean(a,b);\r\n\r\n    constructor(navigator: Navigator, func?: HeuristicFunc) {\r\n        super(navigator);\r\n        if(func !== undefined) {\r\n            this.heuristic = func;\r\n        }\r\n    }\r\n\r\n    getAlgorithmName(): string {\r\n        return 'Bidirectional A*';\r\n    }\r\n\r\n    /**\r\n     * Performs aStar algorithm on the grid given an initial and goal point\r\n     * Always returns the shortest path, and performs well on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const startOpenSet = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const startClosedSet = new HashTable<AStarNode>();\r\n        const endOpenSet = new Heap<AStarNode>(\r\n            (a, b) => a.f() < b.f()\r\n        );\r\n        const endClosedSet = new HashTable<AStarNode>();\r\n        const initialRoot = new AStarNode(\r\n            grid.get(initial), 0, 0\r\n        );\r\n        startOpenSet.push(initialRoot);\r\n        startClosedSet.add(stringify(initial), initialRoot);\r\n        const goalRoot = new AStarNode(\r\n            grid.get(goal), 0, 0\r\n        );\r\n        endOpenSet.push(goalRoot);\r\n        endClosedSet.add(stringify(goal), goalRoot);\r\n        while (!startOpenSet.isEmpty() && !endOpenSet.isEmpty()) {\r\n            //expand startOpenSet\r\n            const startCurrentNode = startOpenSet.pop();\r\n            this.addRecent(startCurrentNode);\r\n            const startCurrentPoint = startCurrentNode.tile.point;\r\n            const startCurrentPointKey = stringify(startCurrentPoint);\r\n            if(endClosedSet.has(startCurrentPointKey)) {\r\n                if(startCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startCurrentNode.parent\r\n                    ).concat(reconstructPathReversed(\r\n                        endClosedSet.get(startCurrentPointKey)!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            for (const neighbor of this.navigator.neighbors(startCurrentPoint)) {\r\n                const neighborPoint = neighbor.point;\r\n                const neighborKey = stringify(neighborPoint);\r\n                const g = startCurrentNode.g + this.stepCost(startCurrentPoint, neighborPoint);\r\n                const f = g + this.heuristic(neighborPoint, goal);\r\n                if (!startClosedSet.has(neighborKey) || f < startClosedSet.get(neighborKey)!.f()) {\r\n                    const neighborNode = new AStarNode(\r\n                        neighbor, g, f\r\n                    );\r\n                    startCurrentNode.addChild(neighborNode);\r\n                    startOpenSet.push(neighborNode);\r\n                    startClosedSet.add(neighborKey, neighborNode);\r\n                }\r\n            }\r\n            //expand closedOpenSet\r\n            const endCurrentNode = endOpenSet.pop();\r\n            this.addRecent(endCurrentNode);\r\n            const endCurrentPoint = endCurrentNode.tile.point;\r\n            const endCurrentPointKey = stringify(endCurrentPoint);\r\n            if(startClosedSet.has(endCurrentPointKey)) {\r\n                if(endCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startClosedSet.get(endCurrentPointKey)!\r\n                    ).concat(reconstructPathReversed(\r\n                        endCurrentNode.parent!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n\r\n            }\r\n            for (const neighbor of this.navigator.neighbors(endCurrentPoint)) {\r\n                const neighborPoint = neighbor.point;\r\n                const neighborKey = stringify(neighborPoint);\r\n                const g = endCurrentNode.g + this.stepCost(endCurrentPoint, neighborPoint);\r\n                const f = g + this.heuristic(neighborPoint, initial);\r\n                if (!endClosedSet.has(neighborKey) || f < endClosedSet.get(neighborKey)!.f()) {\r\n                    const neighborNode = new AStarNode(\r\n                        neighbor, g, f\r\n                    );\r\n                    endCurrentNode.addChild(neighborNode);\r\n                    endOpenSet.push(neighborNode);\r\n                    endClosedSet.add(neighborKey, neighborNode);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * The step-cost function to be used, calculating the cost from\r\n     * currentPoint to neighborPoint. Uses the stepCost function provided by the\r\n     * navigator by default but can be overridden\r\n     * @param currentPoint\r\n     * @param neighborPoint\r\n     */\r\n    stepCost(currentPoint: Point, neighborPoint: Point) {\r\n        return this.navigator.cost(currentPoint, neighborPoint);\r\n    }\r\n}\r\n\r\nexport default BiAStarPathfinder;","import Pathfinder, {reconstructPath, reconstructPathReversed} from './Pathfinder';\r\nimport {Point, Tile} from '../core/Components';\r\nimport {HashTable, stringify} from '../structures/Hash';\r\nimport {Node} from './Node';\r\n\r\nclass BiBFSPathfinder extends Pathfinder\r\n{\r\n    getAlgorithmName(): string {\r\n        return 'Bidirectional Breadth-First-Search';\r\n    }\r\n\r\n    /**\r\n     * Implementation of BFS to find the shortest path from initial to point\r\n     * Always returns the shortest path, but performs poorly on larger grids\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    findPath(initial: Point, goal: Point): Tile[] {\r\n        this.clearRecentSearch();\r\n        const grid = this.navigator.getGrid();\r\n        const startVisited = new HashTable<Node>();\r\n        const endVisited = new HashTable<Node>();\r\n        const startQueue: Node[] = [];\r\n        const endQueue: Node[] = [];\r\n        const initialRoot = new Node(grid.get(initial));\r\n        startQueue.push(initialRoot);\r\n        startVisited.add(stringify(initial), initialRoot);\r\n        const goalRoot = new Node(grid.get(goal));\r\n        endQueue.push(goalRoot);\r\n        endVisited.add(stringify(goal), goalRoot);\r\n        while(startQueue.length !== 0 && endQueue.length !== 0) {\r\n            //expand startQueue\r\n            const startCurrentNode = startQueue.shift()!;\r\n            this.addRecent(startCurrentNode);\r\n            const startCurrentPoint = startCurrentNode.tile.point;\r\n            const startCurrentPointKey = stringify(startCurrentPoint);\r\n            if(endVisited.has(startCurrentPointKey)) {\r\n                if(startCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startCurrentNode.parent\r\n                    ).concat(reconstructPathReversed(\r\n                        endVisited.get(startCurrentPointKey)!\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            for(const neighbor of this.navigator.neighbors(startCurrentPoint)) {\r\n                const neighborKey = stringify(neighbor.point);\r\n                if(!startVisited.has(neighborKey)) {\r\n                    const neighborNode = new Node(neighbor);\r\n                    startCurrentNode.addChild(neighborNode);\r\n                    startQueue.push(neighborNode);\r\n                    startVisited.add(neighborKey, neighborNode);\r\n                }\r\n            }\r\n            //expand endQueue\r\n            const endCurrentNode = endQueue.shift()!;\r\n            this.addRecent(endCurrentNode);\r\n            const endCurrentPoint = endCurrentNode.tile.point;\r\n            const endCurrentPointKey = stringify(endCurrentPoint);\r\n            if(startVisited.has(endCurrentPointKey)) {\r\n                if(endCurrentNode.parent != null) {\r\n                    return reconstructPath(\r\n                        startVisited.get(endCurrentPointKey)!\r\n                    ).concat(reconstructPathReversed(\r\n                        endCurrentNode.parent\r\n                    )).concat(\r\n                        grid.get(goal)\r\n                    );\r\n                } else {\r\n                    return [grid.get(goal)];\r\n                }\r\n            }\r\n            for(const neighbor of this.navigator.neighbors(endCurrentPoint)) {\r\n                const neighborKey = stringify(neighbor.point);\r\n                if(!endVisited.has(neighborKey)) {\r\n                    const neighborNode = new Node(neighbor);\r\n                    endCurrentNode.addChild(neighborNode);\r\n                    endQueue.push(neighborNode);\r\n                    endVisited.add(neighborKey, neighborNode);\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default BiBFSPathfinder;","import Navigator from '../core/Navigator';\r\nimport PlusNavigator from '../core/PlusNavigator';\r\nimport AsteriskNavigator from '../core/AsteriskNavigator';\r\nimport {Point} from '../core/Components';\r\nimport {Grid} from '../core/Grid';\r\nimport {chebyshev, euclidean, HeuristicFunc, manhattan, nullHeuristic, octile} from './Heuristics';\r\nimport Pathfinder from './Pathfinder';\r\nimport AStarPathfinder from './AStar';\r\nimport BFSPathfinder from './BFS';\r\nimport DFSPathfinder from './DFS';\r\nimport BiAStarPathfinder from './BidirectionalAStar';\r\nimport BiBFSPathfinder from \"./BidirectionalBFS\";\r\n\r\nconst CREATE_NAVIGATOR: {[key: string]: ((grid: Grid) => Navigator)} = {\r\n    'plus': (grid: Grid) => new PlusNavigator(grid),\r\n    'asterisk': (grid: Grid) => new AsteriskNavigator(grid)\r\n}\r\n\r\nconst CREATE_HEURISTIC: {[key: string]: (() => HeuristicFunc)} = {\r\n    'manhattan': () => (a,b) => manhattan(a,b),\r\n    'euclidean': () => (a,b) => euclidean(a,b),\r\n    'chebyshev': () => (a,b) => chebyshev(a,b),\r\n    'octile': () => (a,b) => octile(a,b),\r\n    'null': () => (a,b) => nullHeuristic(a,b)\r\n}\r\n\r\nconst CREATE_PATHFINDER: {[key: string]: ((navigator: Navigator, heuristic: HeuristicFunc) => Pathfinder)} = {\r\n    'dijkstra': (navigator) => {\r\n        return new (class DijkstraPathfinder extends AStarPathfinder {\r\n            getAlgorithmName(): string {\r\n                return 'Dijkstra';\r\n            }\r\n        })(navigator, (a,b) => nullHeuristic(a,b));\r\n    },\r\n    'best-first': (navigator, heuristic) => {\r\n        return new (class BestFirstPathfinder extends AStarPathfinder {\r\n            stepCost(currentPoint: Point, neighborPoint: Point) {\r\n                return 0;\r\n            }\r\n            getAlgorithmName(): string {\r\n                return 'Best-First Search';\r\n            }\r\n        })(navigator, heuristic);\r\n    },\r\n    'a*': (navigator, heuristic) => {\r\n        return new AStarPathfinder(navigator, heuristic);\r\n    },\r\n    'bfs': (navigator) => {\r\n        return new BFSPathfinder(navigator);\r\n    },\r\n    'dfs': (navigator) => {\r\n        return new DFSPathfinder(navigator);\r\n    },\r\n    'bi-a*': (navigator, heuristic) => {\r\n        return new BiAStarPathfinder(navigator, heuristic);\r\n    },\r\n    'bi-dijkstra': (navigator) => {\r\n        return new (class BiDijkstraPathfinder extends BiAStarPathfinder {\r\n            getAlgorithmName(): string {\r\n                return 'Bidirectional Dijkstra';\r\n            }\r\n        })(navigator, (a,b) => nullHeuristic(a,b));\r\n    },\r\n    'bi-bfs': (navigator) => {\r\n        return new BiBFSPathfinder(navigator);\r\n    }\r\n}\r\n\r\nclass PathfinderBuilder\r\n{\r\n    private navigator: string = 'plus';\r\n    private algorithm: string = 'a*';\r\n    private heuristic: string = 'null';\r\n    private readonly grid: Readonly<Grid>;\r\n\r\n    constructor(grid: Readonly<Grid>) {\r\n        this.grid = grid;\r\n    }\r\n\r\n    setNavigator(navigator: string) {\r\n        navigator = navigator.toLowerCase();\r\n        if(CREATE_NAVIGATOR[navigator] == null) {\r\n            throw new Error('No such navigator pattern exists')\r\n        } else {\r\n            this.navigator = navigator;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setAlgorithm(algorithm: string) {\r\n        algorithm = algorithm.toLowerCase();\r\n        if(CREATE_PATHFINDER[algorithm] == null) {\r\n            throw new Error('No such pathfinding algorithm exists')\r\n        } else {\r\n            this.algorithm = algorithm;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setHeuristic(heuristic: string) {\r\n        heuristic = heuristic.toLowerCase();\r\n        if(CREATE_HEURISTIC[heuristic] == null) {\r\n            throw new Error('No such heuristic function exists')\r\n        } else {\r\n            this.heuristic = heuristic;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Builds a pathfinder with a navigator with the set algorithm, heuristic, and navigator\r\n     */\r\n    build() {\r\n        const createHeuristic = CREATE_HEURISTIC[this.heuristic];\r\n        const createNavigator = CREATE_NAVIGATOR[this.navigator];\r\n        const createPathfinder = CREATE_PATHFINDER[this.algorithm];\r\n        return createPathfinder(createNavigator(this.grid), createHeuristic());\r\n    }\r\n\r\n    static usesHeuristic(algorithm: string) {\r\n        return algorithm === 'a*' || algorithm === 'bi-a*' ||\r\n            algorithm === 'best-first';\r\n    }\r\n\r\n    static hasBidirectional(algorithm: string) {\r\n        return CREATE_PATHFINDER['bi-' + algorithm] != null;\r\n    }\r\n\r\n    static makeBidirectional(algorithm: string) {\r\n        return 'bi-' + algorithm;\r\n    }\r\n}\r\n\r\nexport default PathfinderBuilder;\r\n\r\n","import GridGraph, {Grid} from '../core/Grid';\r\nimport {Point, Tile, createTile} from '../core/Components';\r\n\r\nconst LIMIT = 2;\r\n\r\nexport const NO_SKEW = 0;\r\nexport const VERTICAL_SKEW = 1;\r\nexport const HORIZONTAL_SKEW = 2;\r\n\r\ninterface Chamber\r\n{\r\n    topLeft: Point; //min\r\n    bottomRight: Point; //max\r\n}\r\n\r\nclass MazeGenerator\r\n{\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    private readonly divideWidth: (width: number, height: number) => boolean;\r\n\r\n    constructor(width: number, height: number, slant?: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        if(slant === undefined || slant === NO_SKEW) {\r\n            this.divideWidth = divideWidthNoSkew;\r\n        } else if(slant === VERTICAL_SKEW) {\r\n            this.divideWidth = divideWidthVSkew;\r\n        } else if(slant === HORIZONTAL_SKEW) {\r\n            this.divideWidth = divideWidthHSkew;\r\n        } else {\r\n            throw new Error(\"Invalid recursive maze division skew type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs the recursive division maze generation algorithm on a new empty grid\r\n     * by bisecting parts until the maze can no longer be bisected\r\n     * Params must be within bounds and create a chamber\r\n     * @param topLeft optional parameter to specify what point the maze should start from\r\n     *  This should not be further up/left than (1,1)\r\n     * @param bottomRight optional parameter to specify how far down and right the maze will go\r\n     *  This should not be further right/down than (width-2,height-2)\r\n     */\r\n    generateMaze(topLeft?: Point, bottomRight?: Point) {\r\n        const grid = new GridGraph(this.width, this.height);\r\n        if(topLeft === undefined) {\r\n            topLeft = {\r\n                x: 1, y: 1\r\n            }\r\n        }\r\n        if(bottomRight === undefined) {\r\n            bottomRight = {\r\n                x: grid.getWidth()-2,\r\n                y: grid.getHeight()-2\r\n            }\r\n        }\r\n        for(let x = topLeft.x - 1; x <= bottomRight.x + 1; x++) {\r\n            MazeGenerator.draw(grid,{\r\n                point: {\r\n                    x: x, y: topLeft.y - 1\r\n                },\r\n                data: createTile(true)\r\n            });\r\n            MazeGenerator.draw(grid,{\r\n                point: {\r\n                    x: x, y: bottomRight.y + 1\r\n                },\r\n                data: createTile(true)\r\n            });\r\n        }\r\n        for(let y = topLeft.y - 1; y <= bottomRight.y + 1; y++) {\r\n            MazeGenerator.draw(grid,{\r\n                point: {\r\n                    x: topLeft.x - 1, y: y\r\n                },\r\n                data: createTile(true)\r\n            });\r\n            MazeGenerator.draw(grid,{\r\n                point: {\r\n                    x: bottomRight.x + 1, y: y\r\n                },\r\n                data: createTile(true)\r\n            });\r\n        }\r\n        this.divide(grid,{\r\n            topLeft: topLeft,\r\n            bottomRight: bottomRight,\r\n        });\r\n        return grid;\r\n    }\r\n\r\n    /**\r\n     * Draws a list of tiles to the grid\r\n     * @param grid\r\n     * @param tiles\r\n     */\r\n    private static drawArr(grid: Grid, tiles: Tile[]) {\r\n        for(const tile of tiles) {\r\n            MazeGenerator.draw(grid, tile);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws a tile to the grid\r\n     * @param grid\r\n     * @param tile\r\n     */\r\n    private static draw(grid: Grid, tile: Tile) {\r\n        grid.mutateTile(tile);\r\n    }\r\n\r\n    /**\r\n     * Create a line between a region, with an open hole, in a chamber,\r\n     * and call bisection algorithm on it, and call division algorithms on\r\n     * its split chambers until no chambers can be bisected\r\n     * @param grid\r\n     * @param chamber\r\n     */\r\n    divide(grid: Grid, chamber: Chamber) {\r\n        const width = widthOf(chamber);\r\n        const height = heightOf(chamber);\r\n        const min = chamber.topLeft;\r\n        const max = chamber.bottomRight;\r\n        if(this.divideWidth(width,height)) {\r\n            if(width > LIMIT) {\r\n                //calculate axis\r\n                const randY = getRand(\r\n                    min.y, max.y,\r\n                );\r\n                const randX = getMidPoint(\r\n                    min.x, max.x\r\n                );\r\n                //create axis wall\r\n                const toDraw: Tile[] = [];\r\n                for(let y = min.y; y <= max.y; y++) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: y\r\n                        },\r\n                        data: createTile(true)\r\n                    });\r\n                }\r\n                //create holes in axis wall\r\n                let edgeBlocked = false;\r\n                if(!grid.get({\r\n                    x: randX, y: min.y-1\r\n                }).data.isSolid) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: min.y\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(!grid.get({\r\n                    x: randX, y: max.y+1\r\n                }).data.isSolid) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: max.y\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(!edgeBlocked) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                }\r\n                MazeGenerator.drawArr(grid, toDraw);\r\n                //create children chambers and recurse\r\n                const leftChamber = {\r\n                    topLeft: chamber.topLeft,\r\n                    bottomRight: {\r\n                        x: randX-1,\r\n                        y: chamber.bottomRight.y\r\n                    },\r\n                };\r\n                const rightChamber = {\r\n                    topLeft: {\r\n                        x: randX+1,\r\n                        y: chamber.topLeft.y\r\n                    },\r\n                    bottomRight: chamber.bottomRight,\r\n                };\r\n                this.divide(grid, leftChamber);\r\n                this.divide(grid, rightChamber);\r\n            }\r\n        } else {\r\n            if(height > LIMIT) {\r\n                //calculate axis\r\n                const randX = getRand(\r\n                    min.x, max.x,\r\n                );\r\n                const randY = getMidPoint(\r\n                    min.y, max.y\r\n                );\r\n                //draw axis wall\r\n                const toDraw: Tile[] = [];\r\n                for(let x = min.x; x <= max.x; x++) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: x, y: randY\r\n                        },\r\n                        data: createTile(true)\r\n                    });\r\n                }\r\n                //create holes in axis wall\r\n                let edgeBlocked = false;\r\n                if(!grid.get({\r\n                    x: min.x-1, y: randY\r\n                }).data.isSolid) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: min.x, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(!grid.get({\r\n                    x: max.x+1, y: randY\r\n                }).data.isSolid) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: max.x, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                    edgeBlocked = true;\r\n                }\r\n                if(!edgeBlocked) {\r\n                    toDraw.push({\r\n                        point: {\r\n                            x: randX, y: randY\r\n                        },\r\n                        data: createTile(false)\r\n                    });\r\n                }\r\n                MazeGenerator.drawArr(grid, toDraw);\r\n                //create children chambers and recurse\r\n                const topChamber = {\r\n                    topLeft: chamber.topLeft,\r\n                    bottomRight: {\r\n                        x: chamber.bottomRight.x,\r\n                        y: randY-1\r\n                    },\r\n                };\r\n                const bottomChamber = {\r\n                    topLeft: {\r\n                        x: chamber.topLeft.x,\r\n                        y: randY+1\r\n                    },\r\n                    bottomRight: chamber.bottomRight,\r\n                };\r\n                this.divide(grid, topChamber);\r\n                this.divide(grid, bottomChamber);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction divideWidthNoSkew(width: number, height: number) {\r\n    return width >= height;\r\n}\r\n\r\nfunction divideWidthHSkew(width: number, height: number) {\r\n    return width >= height * 2;\r\n}\r\n\r\nfunction divideWidthVSkew(width: number, height: number) {\r\n    return width * 2 >= height;\r\n}\r\n\r\nfunction widthOf(chamber: Chamber) {\r\n    return chamber.bottomRight.x - chamber.topLeft.x + 1;\r\n}\r\n\r\nfunction heightOf(chamber: Chamber) {\r\n    return chamber.bottomRight.y - chamber.topLeft.y + 1;\r\n}\r\n\r\n/**\r\n * Returns the 'midpoint' to be used\r\n * @param min\r\n * @param max\r\n */\r\nfunction getMidPoint(min: number, max: number) {\r\n    const range = max - min;\r\n    if(range >= 20) {\r\n        return ((min+max)/2) >> 0;\r\n    } else if(range > 5) {\r\n        const mid = ((min+max)/2) >> 0;\r\n        const points = [mid, mid+1];\r\n        return points[getRand(0,points.length-1)];\r\n    } else {\r\n        return getRand(min+1,max-1);\r\n    }\r\n}\r\n\r\n/**\r\n * Generate a random number between min and max-1 then increment the number\r\n * if it is larger than or equal to excluded, inclusive for min and max\r\n * @param min\r\n * @param max\r\n * @param excluded\r\n */\r\nfunction getRandEx(min: number, max: number, excluded: number) {\r\n    let rand = getRand(min, max-1);\r\n    return rand >= excluded ? ++rand : rand;\r\n}\r\n\r\n/**\r\n * Generate a random number between min and max, inclusive for min and max\r\n * @param min\r\n * @param max\r\n */\r\nfunction getRand(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max+1-min) + min);\r\n}\r\n\r\nexport default MazeGenerator;","import React, {RefObject} from 'react';\r\nimport GridBackground from './GridBackground';\r\nimport GridForeground from './GridForeground';\r\nimport StatsPanel from './StatsPanel';\r\nimport {Node} from '../../pathfinding/algorithms/Node';\r\nimport PathfindingSettings from '../PathfindingSettings';\r\nimport PathfinderBuilder from '../../pathfinding/algorithms/PathfinderBuilder';\r\nimport Pathfinder from '../../pathfinding/algorithms/Pathfinder';\r\nimport MazeGenerator from '../../pathfinding/algorithms/MazeGenerator';\r\nimport {Point, Tile} from '../../pathfinding/core/Components';\r\nimport {euclidean} from '../../pathfinding/algorithms/Heuristics';\r\n\r\ninterface IProps {\r\n    tileWidth: number,\r\n    settings: Readonly<PathfindingSettings>,\r\n    topMargin: number,\r\n    onChangeVisualizing: (visualizing: boolean) => void;\r\n}\r\n\r\ninterface IState {\r\n    tilesX: number,\r\n    tilesY: number,\r\n    time: number,\r\n    length: number,\r\n    nodes: number,\r\n    algorithm: string\r\n}\r\n\r\nclass PathfindingVisualizer extends React.Component<IProps,IState>\r\n{\r\n    //references to expose background and foreground grids to parent\r\n    private background: RefObject<GridBackground> = React.createRef();\r\n    private foreground: RefObject<GridForeground> = React.createRef();\r\n    private stats: RefObject<StatsPanel> = React.createRef();\r\n\r\n    private visualized = false;\r\n    private visualizing = false;\r\n    private visualTimeouts: NodeJS.Timeout[]  = [];\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const tilesX = Math.floor(window.screen.availWidth / this.props.tileWidth) + 1;\r\n        const tilesY = Math.floor((window.screen.availHeight - 75 - 30) / this.props.tileWidth) + 1;\r\n        this.state = {\r\n            tilesX: tilesX,\r\n            tilesY: tilesY,\r\n            time: -1,\r\n            length: -1,\r\n            nodes: -1,\r\n            algorithm: ''\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs the pathfinding algorithm on the grid and visualizes it\r\n     */\r\n    doPathfinding = () => {\r\n        const settings = this.props.settings;\r\n        const pathfinder = this.getPathfinder(settings);\r\n        const path = this.findPath(pathfinder);\r\n        if(settings.visualizeAlg) {\r\n            const nodes: Node[] = [];\r\n            pathfinder.reconstructSolution((node) => {\r\n                nodes.push(node);\r\n            });\r\n            this.visualizeGenerations(nodes);\r\n        }\r\n        this.drawPath(path);\r\n    }\r\n\r\n    /**\r\n     * Performs the pathfinding algorithm on the grid and visualizes it with delays between successive\r\n     * node generations\r\n     */\r\n    doDelayedPathfinding = () => {\r\n        this.clearVisualization();\r\n        this.clearPath();\r\n        const settings = this.props.settings;\r\n        this.visualized = false;\r\n        const foreground = this.foreground.current!;\r\n        foreground.toggleDisable();\r\n        if(!this.visualizing) {\r\n            this.visualizing = true;\r\n            this.props.onChangeVisualizing(this.visualizing);\r\n            const pathfinder = this.getPathfinder(settings);\r\n            const path = this.findPath(pathfinder);\r\n            const increment = settings.delayInc;\r\n            const promises: Promise<NodeJS.Timeout>[] = []; //to call function when timeouts finish\r\n            this.visualTimeouts = [];\r\n            let delay = 0;\r\n            if(settings.visualizeAlg) {\r\n                //reconstruct solution by visualizing each generation\r\n                pathfinder.reconstructSolution((node) => {\r\n                    const promise = new Promise<NodeJS.Timeout>((resolve) => {\r\n                        //each generation gets a higher timeout\r\n                        const timeout = setTimeout(() => {\r\n                            this.visualizeGeneration(node);\r\n                            resolve(timeout);\r\n                        }, delay);\r\n                        this.visualTimeouts.push(timeout);\r\n                        delay += increment;\r\n                    });\r\n                    promises.push(promise);\r\n                });\r\n            }\r\n            //call functions when timeouts finish\r\n            Promise.all(promises).then(() => {\r\n                this.drawPath(path);\r\n                foreground.toggleDisable();\r\n                this.visualizing = false;\r\n                this.visualized = true;\r\n                this.props.onChangeVisualizing(this.visualizing);\r\n            });\r\n        } else {\r\n            for (let i = 0; i < this.visualTimeouts.length; i++) {\r\n                clearTimeout(this.visualTimeouts[i]);\r\n            }\r\n            this.visualizing = false;\r\n            this.props.onChangeVisualizing(this.visualizing);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the pathfinder for the settings\r\n     * @param settings\r\n     */\r\n    private getPathfinder = (settings: PathfindingSettings) => {\r\n        const algorithmKey = settings.algorithm;\r\n        const algorithm = settings.bidirectional && PathfinderBuilder.hasBidirectional(algorithmKey) ?\r\n            PathfinderBuilder.makeBidirectional(algorithmKey) : algorithmKey;\r\n        return new PathfinderBuilder(this.foreground.current!.state.grid)\r\n            .setAlgorithm(algorithm)\r\n            .setHeuristic(settings.heuristicKey)\r\n            .setNavigator(settings.navigatorKey)\r\n            .build();\r\n    }\r\n\r\n    /**\r\n     * Find path with a given pathfinder, includes benchmarking\r\n     * @param pathfinder\r\n     */\r\n    private findPath = (pathfinder: Pathfinder) => {\r\n        const foreground = this.foreground.current!;\r\n        const t0 = performance.now();\r\n        const path = pathfinder.findPath(foreground.state.initial, foreground.state.goal);\r\n        const t1 = performance.now();\r\n        const t2 = +(t1 - t0).toFixed(3);\r\n        this.setState({\r\n            time: t2,\r\n            nodes: pathfinder.getRecentNodes(),\r\n            length: calcLength(foreground.state.initial, path),\r\n            algorithm: pathfinder.getAlgorithmName()\r\n        });\r\n        return path;\r\n    }\r\n\r\n    /**\r\n     * Draw path on the grid and change length on ui\r\n     * @param path\r\n     */\r\n    private drawPath = (path: Tile[]) => {\r\n        const foreground = this.foreground.current!\r\n        path.unshift(this.foreground.current!.state.grid.get(foreground.state.initial));\r\n        this.foreground.current!.drawPath(path);\r\n    }\r\n\r\n    /**\r\n     * Called when child foreground moves a tile\r\n     */\r\n    private onTilesDragged = () => {\r\n        if(this.visualized) {\r\n            this.clearVisualization();\r\n            this.doPathfinding();\r\n            this.visualized = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a maze on the grid foreground\r\n     */\r\n    createMaze = (slant: number) => {\r\n        if(this.visualizing) {\r\n            return;\r\n        }\r\n        this.clearTiles();\r\n        this.clearPath();\r\n        this.clearVisualization();\r\n        const prevGrid = this.foreground.current!.state.grid;\r\n        const generator = new MazeGenerator(prevGrid.getWidth(), prevGrid.getHeight(), slant);\r\n        const end = this.calcEndPointInView();\r\n        const topLeft = {\r\n            x: 1, y: 1\r\n        };\r\n        const bottomRight = {\r\n            x: end.x-2, y: end.y-2\r\n        };\r\n        const grid = generator.generateMaze(topLeft, bottomRight);\r\n        this.foreground.current!.drawGrid(grid);\r\n        this.setPositions({\r\n            x: end.x-2,\r\n            y: end.y-2\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Calculate the end/goal point in view of the screen\r\n     */\r\n    calcEndPointInView = () => {\r\n        const xEnd = window.innerWidth / this.props.tileWidth;\r\n        const yEnd = (window.innerHeight - this.props.topMargin\r\n            - this.stats.current!.getHeight()) / this.props.tileWidth;\r\n        const xFloor = Math.floor(xEnd);\r\n        const yFloor = Math.floor(yEnd);\r\n        const xDecimal = xEnd - xFloor;\r\n        const yDecimal = yEnd - yFloor\r\n        return {\r\n            x: xDecimal > 0.05 ? Math.ceil(xEnd) : xFloor,\r\n            y: yDecimal > 0.05 ? Math.ceil(yEnd) : yFloor\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the positions in the grid foreground\r\n     */\r\n    private setPositions = (endPoint: Point) => {\r\n        this.foreground.current!.moveInitial({\r\n            x: 1, y:1\r\n        });\r\n        this.foreground.current!.moveGoal(endPoint);\r\n    }\r\n\r\n    clearPath = () => {\r\n        this.foreground.current!.erasePath();\r\n    }\r\n\r\n    clearTiles = () => {\r\n        this.foreground.current!.clearTiles();\r\n    }\r\n\r\n    clearTilesChecked = () => {\r\n        if(!this.visualizing) {\r\n            this.foreground.current!.clearTiles();\r\n        }\r\n    }\r\n\r\n    clearVisualization = () => {\r\n        this.visualized = false;\r\n        this.background.current!.clear();\r\n    }\r\n\r\n    clearVisualizationChecked = () => {\r\n        if(!this.visualizing) {\r\n            this.visualized = false;\r\n            this.background.current!.clear();\r\n        }\r\n    }\r\n\r\n    private visualizeGenerations = (generations: Node[]) => {\r\n        this.background.current!.visualizeGenerations(generations);\r\n        this.visualized = true;\r\n    }\r\n\r\n    private visualizeGeneration = (generation: Node) => {\r\n        this.background.current!.visualizeGeneration(generation);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <StatsPanel ref={this.stats} algorithm={this.state.algorithm} length={this.state.length}\r\n                            time={this.state.time} nodes={this.state.nodes}/>\r\n                <GridBackground ref={this.background} tileWidth={this.props.tileWidth}\r\n                                tilesX={this.state.tilesX} tilesY={this.state.tilesY}/>\r\n                <GridForeground ref={this.foreground} topMargin={this.props.topMargin}\r\n                                onTilesDragged={this.onTilesDragged} tileWidth={this.props.tileWidth}\r\n                                tilesX={this.state.tilesX} tilesY={this.state.tilesY}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction calcLength(initial: Point, path: Tile[]) {\r\n    let len = euclidean(initial, path[0].point);\r\n    for (let i = 0; i < path.length - 1; i++) {\r\n        len += euclidean(path[i].point, path[i + 1].point);\r\n    }\r\n    return +(len).toFixed(3);\r\n}\r\n\r\nexport default PathfindingVisualizer;","import React from 'react';\r\n\r\ninterface IProps {\r\n    boxStyle: string,\r\n    defaultChecked: boolean,\r\n    disabled?: boolean,\r\n    onChange: (checked: boolean) => void\r\n}\r\n\r\ninterface IState {\r\n    checked: boolean\r\n}\r\n\r\nclass Checkbox extends React.Component<IProps,IState>\r\n{\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            checked: this.props.defaultChecked\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger callback and change checkbox state\r\n     */\r\n    onChange = () => {\r\n        this.setState(prevState => ({\r\n            checked: !prevState.checked\r\n        }), () => this.props.onChange(this.state.checked));\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <input checked={this.state.checked} type='checkbox' disabled={this.props.disabled}\r\n                       className={this.props.boxStyle} onChange={this.onChange}\r\n                >\r\n                </input>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Checkbox;","import React from 'react';\r\n\r\ninterface IProps {\r\n    min: number,\r\n    max: number,\r\n    default: number,\r\n    step: number,\r\n    sliderStyle: string,\r\n    onChange: (val: number) => void\r\n}\r\n\r\nclass SteppedRangeSlider extends React.Component<IProps>\r\n{\r\n    /**\r\n     * Trigger callback when slider value is changed\r\n     * @param e\r\n     */\r\n    onChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n        this.props.onChange(Number(e.currentTarget.value));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <input type='range' list='step-list'\r\n                   defaultValue={this.props.default}\r\n                   min={this.props.min} max={this.props.max}\r\n                   step={this.props.step} className={this.props.sliderStyle}\r\n                   onChange={this.onChange}\r\n            >\r\n            </input>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SteppedRangeSlider;","import React from 'react';\r\n\r\ninterface IProps {\r\n    boxStyle: string,\r\n    defaultChecked: number,\r\n    disabled: boolean,\r\n    onChange: (() => void)[]\r\n}\r\n\r\ninterface IState {\r\n    checked: boolean[];\r\n}\r\n\r\nclass RadioButtonGroup extends React.Component<IProps, IState>\r\n{\r\n    public static defaultProps = {\r\n        disabled: false\r\n    };\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const checked: boolean[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            checked.push(i === this.props.defaultChecked);\r\n        }\r\n        this.state = {\r\n            checked: checked\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set all radio buttons to checked aside from the index\r\n     * of the one that was changed\r\n     * Trigger callback\r\n     * @param index\r\n     */\r\n    private onChange = (index: number) => {\r\n        const checked: boolean[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            checked.push(i === index);\r\n        }\r\n        this.setState({\r\n            checked: checked\r\n        }, () => this.props.onChange[index]());\r\n    }\r\n\r\n    render() {\r\n        const children = React.Children.toArray(this.props.children);\r\n        const radioButtons: JSX.Element[] = [];\r\n        for(let i = 0; i < this.props.onChange.length; i++) {\r\n            radioButtons.push(\r\n                <div key={i}>\r\n                    <input checked={this.state.checked[i]} type='radio' disabled={this.props.disabled}\r\n                           className={this.props.boxStyle} onChange={() => this.onChange(i)}\r\n                    >\r\n                    </input>\r\n                    {children[i]}\r\n                </div>\r\n            );\r\n        }\r\n        return radioButtons;\r\n    };\r\n}\r\n\r\nexport default RadioButtonGroup;","import React from 'react';\r\nimport Checkbox from '../elements/Checkbox';\r\nimport SteppedRangeSlider from '../elements/SteppedRangeSlider';\r\nimport RadioButtonGroup from '../elements/RadioButtonGroup';\r\n\r\ninterface VisualProps {\r\n    onChangeViz: () => void;\r\n}\r\n\r\nexport class VisualSettings extends React.Component<VisualProps>\r\n{\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Algorithm Visualization</div>\r\n                <Checkbox defaultChecked={true} boxStyle='box'\r\n                          onChange={this.props.onChangeViz}>\r\n                    Show Visualization\r\n                </Checkbox>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface SpeedProps {\r\n    onChange: (value: number) => void\r\n}\r\n\r\ninterface SpeedState {\r\n    speedText: string\r\n}\r\n\r\nexport class SpeedSettings extends React.Component<SpeedProps, SpeedState>\r\n{\r\n    constructor(props: SpeedProps) {\r\n        super(props);\r\n        this.state = {\r\n            speedText: '10'\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback function to be called when slider is changed\r\n     * Call another callback and change text\r\n     * @param value\r\n     */\r\n    onChangeSpeed = (value: number) => {\r\n        const speedTexts = value*5;\r\n        this.setState({\r\n            speedText: String(speedTexts)\r\n        })\r\n        this.props.onChange(value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='slider-container'>\r\n                <div className='slider-text'>\r\n                    Speed: <div className='speed-text'> {this.state.speedText} </div>\r\n                </div>\r\n                <SteppedRangeSlider min={1} max={10} step={1} default={2}\r\n                                    sliderStyle='slider speed-slider'\r\n                                    onChange={this.onChangeSpeed}\r\n                />\r\n                <datalist id='step-list'>\r\n                    <option>1</option>\r\n                    <option>2</option>\r\n                    <option>3</option>\r\n                    <option>4</option>\r\n                    <option>5</option>\r\n                    <option>6</option>\r\n                    <option>7</option>\r\n                    <option>8</option>\r\n                    <option>9</option>\r\n                    <option>10</option>\r\n                </datalist>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface AlgorithmProps {\r\n    onChangeDiagonals: (checked: boolean) => void,\r\n    onChangeBidirectional: (checked: boolean) => void\r\n    disabled: boolean\r\n}\r\n\r\nexport class AlgorithmSettings extends React.Component<AlgorithmProps>\r\n{\r\n    constructor(props: AlgorithmProps) {\r\n        super(props);\r\n        this.state = {\r\n            disabled: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Algorithm</div>\r\n                <Checkbox defaultChecked={true} boxStyle='box'\r\n                          onChange={this.props.onChangeDiagonals}>\r\n                    Allow Diagonals\r\n                </Checkbox>\r\n                <Checkbox defaultChecked={false} boxStyle='box'\r\n                          disabled={this.props.disabled}\r\n                          onChange={this.props.onChangeBidirectional}>\r\n                    Bidirectional\r\n                </Checkbox>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface HeuristicProps {\r\n    onClickManhattan: () => void,\r\n    onClickEuclidean: () => void,\r\n    onClickChebyshev: () => void,\r\n    onClickOctile: () => void\r\n    disabled: boolean\r\n}\r\n\r\nexport class HeuristicSettings extends React.Component<HeuristicProps>\r\n{\r\n    constructor(props: HeuristicProps) {\r\n        super(props);\r\n        this.state = {\r\n            disabled: false\r\n        }\r\n    }\r\n\r\n    disable = () => {\r\n        this.setState({\r\n            disabled: true\r\n        })\r\n    }\r\n\r\n    enable = () => {\r\n        this.setState({\r\n            disabled: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='draggable-content-title'>Heuristic</div>\r\n                <RadioButtonGroup boxStyle='box'\r\n                                  defaultChecked={1}\r\n                                  disabled={this.props.disabled}\r\n                                  onChange={[\r\n                                      this.props.onClickManhattan, this.props.onClickEuclidean,\r\n                                      this.props.onClickChebyshev, this.props.onClickOctile\r\n                                  ]}\r\n                >\r\n                    {[<span key='Manhattan'>Manhattan</span>, <span key='Euclidean'>Euclidean</span>,\r\n                        <span key='Chebyshev'>Chebyshev</span>, <span key='Octile<'>Octile</span>]}\r\n                </RadioButtonGroup>\r\n            </div>\r\n        )\r\n    }\r\n}","import PathfindingSettings, {getDefaultSettings} from './PathfindingSettings';\r\n\r\nclass SettingsManager\r\n{\r\n    settings: PathfindingSettings = getDefaultSettings();\r\n\r\n    changeAlgo = (algo: string) => {\r\n        this.settings.algorithm = algo;\r\n    }\r\n\r\n    changeVisualize = () => {\r\n        this.settings.visualizeAlg = !this.settings.visualizeAlg;\r\n    }\r\n\r\n    changeBidirectional = () => {\r\n        this.settings.bidirectional = !this.settings.bidirectional;\r\n    }\r\n\r\n    changeDiagonals = (checked: boolean) => {\r\n        this.settings.navigatorKey = checked ? 'asterisk' : 'plus';\r\n    }\r\n\r\n    changeSpeed = (value: number) => {\r\n        this.settings.delayInc = value*5;\r\n    }\r\n\r\n    changeManhattan = () => {\r\n        this.settings.heuristicKey = 'manhattan';\r\n    }\r\n\r\n    changeEuclidean = () => {\r\n        this.settings.heuristicKey = 'euclidean';\r\n    }\r\n\r\n    changeChebyshev = () => {\r\n        this.settings.heuristicKey = 'chebyshev';\r\n    }\r\n\r\n    changeOctile = () => {\r\n        this.settings.heuristicKey = 'octile';\r\n    }\r\n}\r\n\r\nexport default SettingsManager;","interface PathfindingSettings\r\n{\r\n    visualizeAlg: boolean,\r\n    delayInc: number\r\n    algorithm: string\r\n    heuristicKey: string\r\n    navigatorKey: string\r\n    bidirectional: boolean\r\n}\r\n\r\nexport function getDefaultSettings() {\r\n    return {\r\n        visualizeAlg: true,\r\n        delayInc: 8,\r\n        algorithm: 'a*',\r\n        heuristicKey: 'euclidean',\r\n        navigatorKey: 'asterisk',\r\n        bidirectional: false\r\n    }\r\n}\r\n\r\nexport default PathfindingSettings;","import React, {RefObject} from 'react';\r\nimport '../App.css';\r\nimport TopBar from './navbar/TopBar';\r\nimport {VisualizeButton, SettingsButton} from './navbar/Buttons';\r\nimport {AlgorithmDropDown, ClearDropDown, MazeDropDown} from './navbar/DropDown';\r\nimport DraggablePanel from './elements/DraggablePanel';\r\nimport PathfindingVisualizer from './grid/PathfindingVisualizer';\r\nimport {VisualSettings, SpeedSettings, AlgorithmSettings, HeuristicSettings} from './navbar/SettingPanels';\r\nimport SettingsManager from './SettingsManager';\r\nimport PathfinderBuilder from '../pathfinding/algorithms/PathfinderBuilder';\r\nimport {HORIZONTAL_SKEW, NO_SKEW, VERTICAL_SKEW} from '../pathfinding/algorithms/MazeGenerator';\r\n\r\ninterface IProps {}\r\n\r\ninterface IState {\r\n    length: number,\r\n    time: number,\r\n    hDisabled: boolean,\r\n    aDisabled: boolean,\r\n    panelShow: boolean,\r\n    topMargin: number,\r\n    vButtonColor: string\r\n}\r\n\r\nclass PathfindingApp extends React.Component<IProps, IState>\r\n{\r\n    //expose grid to parent to connect to button siblings\r\n    private grid: RefObject<PathfindingVisualizer> = React.createRef();\r\n\r\n    private settingsManager: SettingsManager = new SettingsManager();\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            length: 0,\r\n            time: 0,\r\n            hDisabled: false,\r\n            aDisabled: false,\r\n            panelShow: false,\r\n            topMargin: 75,\r\n            vButtonColor: 'green-button'\r\n        }\r\n    }\r\n\r\n    changeVButtonColor = (visualizing: boolean) => {\r\n        const color = visualizing ? 'red-button' : 'green-button';\r\n        this.setState({\r\n            vButtonColor: color\r\n        })\r\n    }\r\n\r\n    toggleSettings = () => {\r\n        this.setState(prevState => ({\r\n            panelShow: !prevState.panelShow\r\n        }));\r\n    }\r\n\r\n    hideSettings = () => {\r\n        this.setState({\r\n            panelShow: false\r\n        });\r\n    }\r\n\r\n    changeAlgo = (algorithm: string) => {\r\n        this.setState({\r\n            hDisabled: !PathfinderBuilder.usesHeuristic(algorithm),\r\n            aDisabled: !PathfinderBuilder.hasBidirectional(algorithm)\r\n        });\r\n        this.settingsManager.changeAlgo(algorithm);\r\n    }\r\n\r\n    doPathfinding = () => {\r\n        this.grid.current!.doDelayedPathfinding();\r\n    }\r\n\r\n    clearPath = () => {\r\n        this.grid.current!.clearPath();\r\n        this.grid.current!.clearVisualizationChecked();\r\n    }\r\n\r\n    clearTiles = () => {\r\n        this.clearPath();\r\n        this.grid.current!.clearTilesChecked();\r\n    }\r\n\r\n    createMaze = () => {\r\n        this.grid.current!.createMaze(NO_SKEW);\r\n    }\r\n\r\n    createMazeVSkew = () => {\r\n        this.grid.current!.createMaze(VERTICAL_SKEW);\r\n    }\r\n\r\n    createMazeHSkew = () => {\r\n        this.grid.current!.createMaze(HORIZONTAL_SKEW);\r\n    }\r\n\r\n    setLength = (len: number) => {\r\n        this.setState({\r\n            length: len\r\n        });\r\n    }\r\n\r\n    setTime = (time: number) => {\r\n        this.setState({\r\n            time: time\r\n        });\r\n    }\r\n\r\n    onChangeHeight = (height: number) => {\r\n        this.setState({\r\n            topMargin: height\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const tileWidth = isMobile() ? 47 : 27;\r\n        return (\r\n            <div>\r\n                <DraggablePanel show={this.state.panelShow} onClickXButton={this.hideSettings}>\r\n                    <VisualSettings onChangeViz={this.settingsManager.changeVisualize}/>\r\n                    <SpeedSettings onChange={this.settingsManager.changeSpeed}/>\r\n                    <AlgorithmSettings disabled={this.state.aDisabled}\r\n                                       onChangeBidirectional={this.settingsManager.changeBidirectional}\r\n                                       onChangeDiagonals={this.settingsManager.changeDiagonals}/>\r\n                    <HeuristicSettings disabled={this.state.hDisabled}\r\n                                       onClickManhattan={this.settingsManager.changeManhattan}\r\n                                       onClickEuclidean={this.settingsManager.changeEuclidean}\r\n                                       onClickChebyshev={this.settingsManager.changeChebyshev}\r\n                                       onClickOctile={this.settingsManager.changeOctile}/>\r\n                </DraggablePanel>\r\n                <TopBar onChangeHeight={this.onChangeHeight}>\r\n                    <a href='https://github.com/JosephPrichard/PathfinderReact' className='title'>\r\n                        Pathfinding Visualizer\r\n                    </a>\r\n                    <div className='top-container'>\r\n                        <AlgorithmDropDown onChange={this.changeAlgo}/>\r\n                        <VisualizeButton color={this.state.vButtonColor} onClick={this.doPathfinding}/>\r\n                        <ClearDropDown onClickTiles={this.clearTiles}\r\n                                       onClickPath={this.clearPath}/>\r\n                        <MazeDropDown onClickMaze={this.createMaze}\r\n                                      onClickMazeHorizontal={this.createMazeHSkew}\r\n                                      onClickMazeVertical={this.createMazeVSkew}/>\r\n                        <SettingsButton onClick={this.toggleSettings}/>\r\n                    </div>\r\n                </TopBar>\r\n                <PathfindingVisualizer ref={this.grid} onChangeVisualizing={this.changeVButtonColor} topMargin={this.state.topMargin}\r\n                                       settings={this.settingsManager.settings} tileWidth={tileWidth}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction isMobile() {\r\n    return /Android|webOS|iPhone|iPad|Mac|Macintosh|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n}\r\n\r\nexport default PathfindingApp;","import React from 'react';\nimport PathfindingApp from './view/PathfindingApp';\n\nclass App extends React.Component\n{\n    render() {\n        return (\n            <PathfindingApp/>\n        );\n    }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}